      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ImportedProvision_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_IMPORTED_PROVISION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ImportedProvision_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ImportedProvision_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip)
  {
    super(modelRoot);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
        
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public ImportedProvision_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
      ImportedProvision_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (ImportedProvision_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ImportedProvision_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ImportedProvision_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name,
       String       p_m_descrip){
    InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
    ImportedProvision_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (ImportedProvision_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ImportedProvision_c new_inst = new ImportedProvision_c(modelRoot,
p_m_id,
p_m_name,
p_m_descrip
);
    return new_inst;
  }
  public ImportedProvision_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_name = "";   
     m_descrip = "";   
     m_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ImportedProvision_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ImportedProvision_c)) {
           return false;
       }
       
       ImportedProvision_c me = (ImportedProvision_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((ImportedProvision_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((ImportedProvision_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ImportedProvision_c)) {
           return false;
       }
       
       ImportedProvision_c me = (ImportedProvision_c)elem;
      if (!getIdCachedValue().equals(((ImportedProvision_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ImportedReference_c IsSupertypeImportedReference ;
public void relateAcrossR4703To(ImportedReference_c target)
{
	relateAcrossR4703To(target, true);
}
public void relateAcrossR4703To(ImportedReference_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeImportedReference) return;  // already related

    if ( IsSupertypeImportedReference != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeImportedReference != null) {
    
        IsSupertypeImportedReference.clearBackPointerR4703To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ImportedProvision_c.relateAcrossR4703To(ImportedReference_c target)", 
			"Relate performed across R4703 from Imported Provision to Imported Reference without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeImportedReference = target ;
        m_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4703To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4703", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4703From(ImportedReference_c target)
{
	unrelateAcrossR4703From(target, true);
}
public void unrelateAcrossR4703From(ImportedReference_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeImportedReference == null) return;  // already unrelated
	
	if (target != IsSupertypeImportedReference) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4703", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4703To(this);
    }
    

      if(IsSupertypeImportedReference != null) {
      
        m_id = IsSupertypeImportedReference.getId();
        IsSupertypeImportedReference = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4703", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ImportedProvision_c getOneCL_IPOnR4703(ImportedReference_c [] targets)
{
    return getOneCL_IPOnR4703(targets, null);
}

public static ImportedProvision_c getOneCL_IPOnR4703(ImportedReference_c [] targets, ClassQueryInterface_c test)
{
    ImportedProvision_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCL_IPOnR4703(targets[i], test);
        }
    }

    return ret_val;
}

public static ImportedProvision_c getOneCL_IPOnR4703(ImportedReference_c target)
{
  return getOneCL_IPOnR4703(target, null);
}

public static ImportedProvision_c getOneCL_IPOnR4703(ImportedReference_c target, boolean loadComponent)
{
    return getOneCL_IPOnR4703(target.getModelRoot(), target, null, loadComponent);
}

public static ImportedProvision_c getOneCL_IPOnR4703(ImportedReference_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCL_IPOnR4703(target.getModelRoot(), target, test);
  }
  return null;
}

public static ImportedProvision_c getOneCL_IPOnR4703(ModelRoot modelRoot, ImportedReference_c target, ClassQueryInterface_c test)
{
	return getOneCL_IPOnR4703(modelRoot, target, test, true);
}

public static ImportedProvision_c getOneCL_IPOnR4703(ModelRoot modelRoot, ImportedReference_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCL_IPOnR4703(modelRoot,target,test);
}
private static ImportedProvision_c find_getOneCL_IPOnR4703(ModelRoot modelRoot, ImportedReference_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ImportedProvision_c source = (ImportedProvision_c)target.backPointer_IsSubtypeImportedProvisionIsSubtype_R4703;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c [] targets)
{
  return getManyCL_IPsOnR4703(targets, null);
}
public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c [] targets, boolean loadComponent)
{
  return getManyCL_IPsOnR4703(targets, null, loadComponent);
}
public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c [] targets, ClassQueryInterface_c test)
{
	return getManyCL_IPsOnR4703(targets, test, true);
}

public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ImportedProvision_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ImportedProvision_c source = (ImportedProvision_c)targets[i].backPointer_IsSubtypeImportedProvisionIsSubtype_R4703;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ImportedProvision_c[] ret_set = new ImportedProvision_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ImportedProvision_c[0];
  }
  }

public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c target)
{
  if (target != null) {
    ImportedReference_c [] targetArray = new ImportedReference_c[1];
    targetArray[0] = target;
    return getManyCL_IPsOnR4703(targetArray);
  } else {
    ImportedProvision_c [] result = new ImportedProvision_c [0] ;
  return result ;
}
}

public static ImportedProvision_c [] getManyCL_IPsOnR4703(ImportedReference_c target, boolean loadComponent)
{
  if (target != null) {
    ImportedReference_c [] targetArray = new ImportedReference_c[1];
    targetArray[0] = target;
    return getManyCL_IPsOnR4703(targetArray, loadComponent);
  } else {
    ImportedProvision_c [] result = new ImportedProvision_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ImportedProvisionInSatisfaction_c> backPointer_ProvidesSatisfactionThroughImportedProvisionInSatisfactionProvidesSatisfactionThrough_R4705 = new ArrayList<ImportedProvisionInSatisfaction_c>();

public void setImportedProvisionInSatisfactionOrderInChildListR4705(ImportedProvisionInSatisfaction_c target, int index) {
	unrelateAcrossR4705From(target);
	ImportedProvisionInSatisfaction_c[] elements = ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4705From((ImportedProvisionInSatisfaction_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4705To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4705To((ImportedProvisionInSatisfaction_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4705To(ImportedProvisionInSatisfaction_c target)
{
  if (target != null) {
    target.relateAcrossR4705To(this, true) ;
  }
}

public void relateAcrossR4705To(ImportedProvisionInSatisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4705To(this, notifyChanges) ;
  }
}

public void setBackPointerR4705To(ImportedProvisionInSatisfaction_c target)
{
  	synchronized (backPointer_ProvidesSatisfactionThroughImportedProvisionInSatisfactionProvidesSatisfactionThrough_R4705) {
		backPointer_ProvidesSatisfactionThroughImportedProvisionInSatisfactionProvidesSatisfactionThrough_R4705.add(target);
	}
}

public void unrelateAcrossR4705From(ImportedProvisionInSatisfaction_c target)
{
  if (target != null) {
    target.unrelateAcrossR4705From(this, true) ;
  }
}

public void unrelateAcrossR4705From(ImportedProvisionInSatisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4705From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4705To(ImportedProvisionInSatisfaction_c target)
{
  synchronized (backPointer_ProvidesSatisfactionThroughImportedProvisionInSatisfactionProvidesSatisfactionThrough_R4705) {
	    backPointer_ProvidesSatisfactionThroughImportedProvisionInSatisfactionProvidesSatisfactionThrough_R4705.remove(target);
	}
}

public static ImportedProvision_c getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c [] targets)
{
    return getOneCL_IPOnR4705(targets, null);
}

public static ImportedProvision_c getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c [] targets, ClassQueryInterface_c test)
{
    return getOneCL_IPOnR4705(targets, test, true);
}

public static ImportedProvision_c getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ImportedProvision_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ImportedProvision_c candidate_val = getOneCL_IPOnR4705(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCL_IPOnR4705(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ImportedProvision_c getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c target)
{
	return getOneCL_IPOnR4705(target, true);
}
public static ImportedProvision_c getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.SatisfactionMadeWithImportedProvision != null){
		target.SatisfactionMadeWithImportedProvision.loadProxy();
	}
	}
    return target.SatisfactionMadeWithImportedProvision ;
  } else {
    return null;
  }
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCL_IPsOnR4705(targets, test, true);
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedProvision_c[0];
  
  
  LinkedHashSet<ImportedProvision_c> elementsSet = new LinkedHashSet<ImportedProvision_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SatisfactionMadeWithImportedProvision == null)
	  targets[i].loadProxy();
    ImportedProvision_c associate = targets[i].SatisfactionMadeWithImportedProvision;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ImportedProvision_c[] result = new ImportedProvision_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c [] targets)
{
  return getManyCL_IPsOnR4705(targets, null);
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ImportedProvisionInSatisfaction_c [] targetArray = new ImportedProvisionInSatisfaction_c[1];
    targetArray[0] = target;
    return getManyCL_IPsOnR4705(targetArray, test, loadComponent);
  } else {
    ImportedProvision_c [] result = new ImportedProvision_c [0] ;
    return result ;
  }
  
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c target,
    ClassQueryInterface_c test)
{
    return getManyCL_IPsOnR4705(target, null, true);
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c target)
{
    return getManyCL_IPsOnR4705(target, null, true);
}

public static ImportedProvision_c [] getManyCL_IPsOnR4705(ImportedProvisionInSatisfaction_c target, boolean loadComponent)
{
    return getManyCL_IPsOnR4705(target, null, loadComponent);
}

public static ImportedProvision_c getOneCL_IPOnR4705(Satisfaction_c target)
{
  return ImportedProvision_c.getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(target)) ;
}

public static ImportedProvision_c getOneCL_IPOnR4705(Satisfaction_c target,
    ClassQueryInterface_c test)
{
  return ImportedProvision_c.getOneCL_IPOnR4705(ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(target), test) ;
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4703
      ImportedReference_c relInst57284 = (ImportedReference_c) baseRoot.getInstanceList(ImportedReference_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57284 == null) {
      			relInst57284 = (ImportedReference_c) Ooaofooa.getDefaultInstance().getInstanceList(ImportedReference_c.class).get(new Object[] {m_id});
      		}
			if (relInst57284 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57284 = (ImportedReference_c) roots[i].getInstanceList(ImportedReference_c.class).get(new Object[] {m_id});
					if (relInst57284 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57284 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57284) && !isProxy())) {
	      relInst57284.relateAcrossR4703To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4703
      // CL_IIR
		  inst=IsSupertypeImportedReference;
			unrelateAcrossR4703From(IsSupertypeImportedReference, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ImportedProvision_c inst = (ImportedProvision_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ImportedProvision_c ImportedProvisionInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ImportedProvision_c result=findImportedProvisionInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ImportedProvision_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findImportedProvisionInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ImportedProvision_c findImportedProvisionInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ImportedProvision_c x = (ImportedProvision_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ImportedProvision_c ImportedProvisionInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ImportedProvisionInstance(modelRoot,test,true);
  }
  
  public static ImportedProvision_c ImportedProvisionInstance(ModelRoot modelRoot)
  {
	 return ImportedProvisionInstance(modelRoot,null,true);
  }

  public static ImportedProvision_c [] ImportedProvisionInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ImportedProvision_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ImportedProvision_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ImportedProvision_c x = (ImportedProvision_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ImportedProvision_c[] ret_set = new ImportedProvision_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ImportedProvision_c[0];
			}		
		} 
  }
  public static ImportedProvision_c [] ImportedProvisionInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ImportedProvisionInstances(modelRoot,test,true);
  }
  public static ImportedProvision_c [] ImportedProvisionInstances(ModelRoot modelRoot)
  {
	return ImportedProvisionInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Imported Provision.dispose call: ";
 	ImportedProvisionInSatisfaction_c testR4705Inst = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(this, false);

 	if ( testR4705Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "4705 ";
 	}
	ImportedReference_c testR4703Inst2 = ImportedReference_c.getOneCL_IIROnR4703(this, false);

	if ( testR4703Inst2 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4703 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Imported Provision", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
String       v_name = Getcachedname() ;


Provision_c v_provision = Provision_c.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(ImportedReference_c.getOneCL_IIROnR4703(this)));


if ( (  (v_provision != null)) )
{

v_name = v_provision.getName() ;



}

Setcachedname(			    
v_name ) ;


return v_name;



  }


  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if ( IsSupertypeImportedReference != null )
    {
      return IsSupertypeImportedReference.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypeImportedReference != null )
    {
      return IsSupertypeImportedReference.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeImportedReference != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_id)){
	        return;
	    }
	}else if(m_id != null){
	    if(m_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id", m_id, newValue,true); 
   m_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Imported Provision", //$NON-NLS-1$
	  " Operation entered: Imported Provision::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ImportedProvision_c [] objs = ImportedProvision_c.ImportedProvisionInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Imported Provision", //$NON-NLS-1$
	  " Operation entered: Imported Provision::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ImportedProvision_c_test57286_c implements ClassQueryInterface_c
    {
	  ImportedProvision_c_test57286_c( java.util.UUID            p57287 ) {
	  m_p57287 = p57287;
	  }
	  private java.util.UUID             m_p57287; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedProvision_c selected = (ImportedProvision_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57287));
	      return retval;
	  }
    }

    ImportedProvision_c [] objs57285 = 
    ImportedProvision_c.ImportedProvisionInstances(modelRoot, new ImportedProvision_c_test57286_c(getId())) ;

    if ( (  (objs57285.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Provision", //$NON-NLS-1$
           "Consistency: Object: Imported Provision: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57285.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Provision: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57285.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57285.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Provision", //$NON-NLS-1$
           "Consistency: Object: Imported Provision: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57285.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Provision: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57285.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Imported Provision is a subtype in association: rel.Numb = 4703
          // The supertype class is: Imported Reference
    class ImportedReference_c_test57291_c implements ClassQueryInterface_c
    {
	  ImportedReference_c_test57291_c( java.util.UUID            p57292 ) {
	  m_p57292 = p57292;
	  }
	  private java.util.UUID             m_p57292; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedReference_c selected = (ImportedReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57292));
	      return retval;
	  }
    }

    ImportedReference_c [] objs57290 = 
    ImportedReference_c.ImportedReferenceInstances(modelRoot, new ImportedReference_c_test57291_c(getId())) ;

    if ( (  (objs57290.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Imported Provision", //$NON-NLS-1$
           "Consistency: Object: Imported Provision: Association: 4703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57290.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Imported Provision: Association: 4703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57290.length )  , e); 
      }
      retval = false;

    }

          // Associated Other Side: rel.Numb = 4705
            // Link Object: Imported Provision In Satisfaction
    return retval;
  }


  // declare transform functions
  public  String       Get_connector_text(final java.util.UUID         p_Obj_id,final boolean      p_Obj_typeisimported,final int  p_At,final java.util.UUID         p_Parent_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Get_connector_text") ; 
               final ModelRoot modelRoot = getModelRoot();
Provision_c v_provision = Provision_c.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(ImportedReference_c.getOneCL_IIROnR4703(this)));


if ( (  (v_provision != null)) )
{

return v_provision.Get_connector_text(			    
p_Obj_id			    
,p_Obj_typeisimported			    
,p_At			    
,p_Parent_id);



}

return "";



   } // End get_connector_text
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getId();



   } // End get_ooa_id
  public  int  Get_style(final int  p_At)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
Provision_c v_provision = Provision_c.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(ImportedReference_c.getOneCL_IIROnR4703(this)));


if ( (  (v_provision != null)) )
{

return v_provision.Get_style(			    
p_At);



}

return Style_c.None;



   } // End get_style
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Dissatisfy() ;


ImportedReference_c v_importedRef = ImportedReference_c.getOneCL_IIROnR4703(this);


if ( (  (v_importedRef != null)) )
{

this.unrelateAcrossR4703From(v_importedRef);


if (v_importedRef != null) {
v_importedRef.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Linkconnector(final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Linkconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Canlinkconnector(			    
p_To)) )
{

boolean      v_isLinked = false ;


ImportedReference_c v_selfImportedRef = ImportedReference_c.getOneCL_IIROnR4703(this);


Component_c v_component = Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4701(v_selfImportedRef)));


if ( (! p_To.equals(Gd_c.Null_unique_id())) )
{

Requirement_c v_requirement = (Requirement_c) modelRoot.getInstanceList(Requirement_c.class).getGlobal(null, p_To);


if ( (  (v_requirement != null)) )
{

v_isLinked = v_component.Initializeprovision(			    
true			    
,v_selfImportedRef.getId()			    
,v_requirement.getRequirement_id()) ;



}

else
{

ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot.getInstanceList(ImportedReference_c.class).getGlobal(null, p_To);


if ( (  (v_importedRef != null)) )
{

v_isLinked = v_component.Initializeprovision(			    
true			    
,v_selfImportedRef.getId()			    
,v_importedRef.getId()) ;



}


}


}

return v_isLinked;



}

return false;



   } // End linkConnector
  public  void Dissatisfy()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Dissatisfy") ; 
               final ModelRoot modelRoot = getModelRoot();
Satisfaction_c [] v_satisfactions = Satisfaction_c.getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(this));


Satisfaction_c  v_satisfaction = null;
for ( int i55364 = 0; i55364 < v_satisfactions.length; i55364++)
{
  v_satisfaction = v_satisfactions[i55364] ;

ImportedProvisionInSatisfaction_c v_ipins = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(v_satisfaction);


if (v_ipins != null) {
v_ipins.unrelateAcrossR4705From( v_satisfaction ) ; v_ipins.unrelateAcrossR4705From( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_ipins != null) {
// get the location of this element in the instance list
// before deleting
if ( v_ipins.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_ipins));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


if (v_satisfaction != null) {
v_satisfaction.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End dissatisfy
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( p_Name.equals("can") )
{

if ( p_Value.equals("dissatisfy") )
{

Satisfaction_c v_satisfaction = Satisfaction_c.getOneC_SFOnR4705(ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(this));


if (   (v_satisfaction != null) )
{

return true;



}


}


}

return false;



   } // End actionFilter
  public  int          Getprovisioncount(final boolean      p_Filterdelegations)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Getprovisioncount") ; 
               final ModelRoot modelRoot = getModelRoot();
Satisfaction_c [] v_satisfactions = Satisfaction_c.getManyC_SFsOnR4705(ImportedProvisionInSatisfaction_c.getManyCL_IPINSsOnR4705(this));


return   (v_satisfactions.length);



   } // End getProvisionCount
  public  boolean      Canlinkconnector(final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Canlinkconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_isLinked = false ;


ImportedReference_c v_selfImportedRef = ImportedReference_c.getOneCL_IIROnR4703(this);


Component_c v_component = Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4701(v_selfImportedRef)));


if ( (! p_To.equals(Gd_c.Null_unique_id())) )
{

Requirement_c v_requirement = (Requirement_c) modelRoot.getInstanceList(Requirement_c.class).getGlobal(null, p_To);


if ( (  (v_requirement != null)) )
{

v_isLinked = v_component.Initializeprovision(			    
false			    
,v_selfImportedRef.getId()			    
,v_requirement.getRequirement_id()) ;



}

else
{

ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot.getInstanceList(ImportedReference_c.class).getGlobal(null, p_To);


if ( (  (v_importedRef != null)) )
{

v_isLinked = v_component.Initializeprovision(			    
false			    
,v_selfImportedRef.getId()			    
,v_importedRef.getId()) ;



}


}


}

return v_isLinked;



   } // End canLinkConnector
  public  String       Get_connector_tooltip(final int  p_End)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Get_connector_tooltip") ; 
               final ModelRoot modelRoot = getModelRoot();
Provision_c v_provision = Provision_c.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(ImportedReference_c.getOneCL_IIROnR4703(this)));


if ( (  (v_provision != null)) )
{

return v_provision.Get_connector_tooltip(			    
p_End);



}

return "";



   } // End get_connector_tooltip
  public  Object Getconfigurationinheritanceelementid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Getconfigurationinheritanceelementid") ; 
               final ModelRoot modelRoot = getModelRoot();
Provision_c v_provision = Provision_c.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(ImportedReference_c.getOneCL_IIROnR4703(this)));


if ( (  (v_provision != null)) )
{

return v_provision.Converttoinstance();



}

return Converttoinstance();



   } // End getConfigurationInheritanceElementId
  public  boolean      Issynchronized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Issynchronized") ; 
               final ModelRoot modelRoot = getModelRoot();
ImportedReference_c v_importedRef = ImportedReference_c.getOneCL_IIROnR4703(this);


if ( (  (v_importedRef != null)) )
{

return v_importedRef.Issynchronized();



}

return true;



   } // End isSynchronized
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Setcachedname") ; 
	m_name = p_Name;
   } // End setCachedName
  public  void Collectchanges(final Object p_Changelist)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Collectchanges") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Util_c.Createelementchange(			    
"removed"			    
,p_Changelist			    
,Converttoinstance()			    
,true ) ;



}


   } // End collectChanges
  public  void Synchronize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Imported Provision", " Operation entered: ImportedProvision::Synchronize") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Dispose() ;



}


   } // End synchronize

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return ImportedProvisionActionFilter.getSingleton();
    }
	  return null;
  }
} // end Imported Provision
