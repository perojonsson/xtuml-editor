      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassIdentifierAttribute_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_CLASS_IDENTIFIER_ATTRIBUTE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ClassIdentifierAttribute_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ClassIdentifierAttribute_c(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_oid_id,
       String       p_m_localattributename)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       m_localattributename = p_m_localattributename;
        
    Object [] key = {m_attr_id,new UUID(0, new Long(m_oid_id)),m_obj_id};
    addInstanceToMap(key);
  }
  static public ClassIdentifierAttribute_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_oid_id,
       String       p_m_localattributename, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
      ClassIdentifierAttribute_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_attr_id,new UUID(0, new Long(p_m_oid_id)),p_m_obj_id};
          new_inst = (ClassIdentifierAttribute_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       new_inst.m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       new_inst.m_localattributename = p_m_localattributename;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ClassIdentifierAttribute_c(modelRoot,
p_m_attr_id,
p_m_obj_id,
p_m_oid_id,
p_m_localattributename
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ClassIdentifierAttribute_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       int          p_m_oid_id,
       String       p_m_localattributename){
    InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
    ClassIdentifierAttribute_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_attr_id
        ,
        new UUID(0, new Long(p_m_oid_id))
        ,
        p_m_obj_id
            };
        source = (ClassIdentifierAttribute_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       source.m_oid_id = p_m_oid_id;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       source.m_localattributename = p_m_localattributename;
        
           return source ;
        }
      }
      // there is no instance matching the id
    ClassIdentifierAttribute_c new_inst = new ClassIdentifierAttribute_c(modelRoot,
p_m_attr_id,
p_m_obj_id,
p_m_oid_id,
p_m_localattributename
);
    return new_inst;
  }
  public ClassIdentifierAttribute_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_attr_id = IdAssigner.NULL_UUID;   
     m_oid_id = -1;   
     m_obj_id = IdAssigner.NULL_UUID;   
     m_localattributename = "";   
    Object [] key = {m_attr_id,new UUID(0, new Long(m_oid_id)),m_obj_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_attr_id,new UUID(0, new Long(m_oid_id)),m_obj_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_attr_id !=  p_newKey ){
	
		m_attr_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ClassIdentifierAttribute_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ClassIdentifierAttribute_c)) {
           return false;
       }
       
       ClassIdentifierAttribute_c me = (ClassIdentifierAttribute_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getAttr_id()) || IdAssigner.NULL_UUID.equals(((ClassIdentifierAttribute_c)elem).getAttr_id())) && this != elem)) {
      	return false;
      }
      if (!getAttr_id().equals(((ClassIdentifierAttribute_c)elem).getAttr_id())) return false;
      if (getOid_id() != ((ClassIdentifierAttribute_c)elem).getOid_id()) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID.equals(((ClassIdentifierAttribute_c)elem).getObj_id())) && this != elem)) {
      	return false;
      }
      if (!getObj_id().equals(((ClassIdentifierAttribute_c)elem).getObj_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ClassIdentifierAttribute_c)) {
           return false;
       }
       
       ClassIdentifierAttribute_c me = (ClassIdentifierAttribute_c)elem;
      if (!getAttr_idCachedValue().equals(((ClassIdentifierAttribute_c)elem).getAttr_idCachedValue())) return false;
      if (getOid_idCachedValue() != ((ClassIdentifierAttribute_c)elem).getOid_idCachedValue()) return false;
      if (!getObj_idCachedValue().equals(((ClassIdentifierAttribute_c)elem).getObj_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_attr_id ;
  private int          m_oid_id ;
  private java.util.UUID         m_obj_id ;
  private String       m_localattributename ;
      
// declare association references from this class
  
  
    
// referring navigation

Attribute_c IsMadeUpOfAttribute ;
public void relateAcrossR105To(Attribute_c target)
{
	relateAcrossR105To(target, true);
}
public void relateAcrossR105To(Attribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsMadeUpOfAttribute) return;  // already related

    if ( IsMadeUpOfAttribute != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsMadeUpOfAttribute != null) {
    
        IsMadeUpOfAttribute.clearBackPointerR105To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ClassIdentifierAttribute_c.relateAcrossR105To(Attribute_c target)", 
			"Relate performed across R105 from Class Identifier Attribute to Attribute without unrelate of prior instance.");  
		}
    }
                
    	IsMadeUpOfAttribute = target ;
        m_attr_id = target.getAttr_id();
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR105To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "105", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR105From(Attribute_c target)
{
	unrelateAcrossR105From(target, true);
}
public void unrelateAcrossR105From(Attribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsMadeUpOfAttribute == null) return;  // already unrelated
	
	if (target != IsMadeUpOfAttribute) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R105", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR105To(this);
    }
    

      if(IsMadeUpOfAttribute != null) {
      
        m_attr_id = IsMadeUpOfAttribute.getAttr_id();
        m_obj_id = IsMadeUpOfAttribute.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = IsMadeUpOfAttribute.getObj_idCachedValue();
        }       
        IsMadeUpOfAttribute = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "105", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}


    
// referring navigation

ClassIdentifier_c IsPartOfClassIdentifier ;
public void relateAcrossR105To(ClassIdentifier_c target)
{
	relateAcrossR105To(target, true);
}
public void relateAcrossR105To(ClassIdentifier_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsPartOfClassIdentifier) return;  // already related

    if ( IsPartOfClassIdentifier != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsPartOfClassIdentifier != null) {
    
        IsPartOfClassIdentifier.clearBackPointerR105To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ClassIdentifierAttribute_c.relateAcrossR105To(ClassIdentifier_c target)", 
			"Relate performed across R105 from Class Identifier Attribute to Class Identifier without unrelate of prior instance.");  
		}
    }
                
    	IsPartOfClassIdentifier = target ;
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
        m_oid_id = target.getOid_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR105To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "105", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR105From(ClassIdentifier_c target)
{
	unrelateAcrossR105From(target, true);
}
public void unrelateAcrossR105From(ClassIdentifier_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsPartOfClassIdentifier == null) return;  // already unrelated
	
	if (target != IsPartOfClassIdentifier) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R105", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR105To(this);
    }
    

      if(IsPartOfClassIdentifier != null) {
      
        m_obj_id = IsPartOfClassIdentifier.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = IsPartOfClassIdentifier.getObj_idCachedValue();
        }       
        m_oid_id = IsPartOfClassIdentifier.getOid_id();
        IsPartOfClassIdentifier = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "105", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(Attribute_c [] targets)
{
    return getOneO_OIDAOnR105(targets, null);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(Attribute_c [] targets, ClassQueryInterface_c test)
{
    ClassIdentifierAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_OIDAOnR105(targets[i], test);
        }
    }

    return ret_val;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(Attribute_c target)
{
  return getOneO_OIDAOnR105(target, null);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(Attribute_c target, boolean loadComponent)
{
    return getOneO_OIDAOnR105(target.getModelRoot(), target, null, loadComponent);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(Attribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_OIDAOnR105(target.getModelRoot(), target, test);
  }
  return null;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test)
{
	return getOneO_OIDAOnR105(modelRoot, target, test, true);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_OIDAOnR105(modelRoot,target,test);
}
private static ClassIdentifierAttribute_c find_getOneO_OIDAOnR105(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105) {
	    for ( int i = 0; i < target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.size(); ++i ) {
	      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c [] targets)
{
  return getManyO_OIDAsOnR105(targets, null);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c [] targets, boolean loadComponent)
{
  return getManyO_OIDAsOnR105(targets, null, loadComponent);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR105(targets, test, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ClassIdentifierAttribute_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105) {
	    for (int j = 0; j < targets[i].backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.size(); ++j) {
	      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)targets[i].backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ClassIdentifierAttribute_c[] ret_set = new ClassIdentifierAttribute_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ClassIdentifierAttribute_c[0];
  }
  }

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c target)
{
  return getManyO_OIDAsOnR105(target, null);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c target, boolean loadComponent)
{
  return getManyO_OIDAsOnR105(target, null, loadComponent);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c target, ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR105(target, test, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(Attribute_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ClassIdentifierAttribute_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105) {
    for (int i = 0; i < target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.size(); ++i) {
      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)target.backPointer_IsPartOfClassIdentifierAttributeIsPartOf_R105.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ClassIdentifierAttribute_c[] ret_set = new ClassIdentifierAttribute_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ClassIdentifierAttribute_c[0];
	}
  }

  
    
      
public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ClassIdentifier_c [] targets)
{
    return getOneO_OIDAOnR105(targets, null);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ClassIdentifier_c [] targets, ClassQueryInterface_c test)
{
    ClassIdentifierAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_OIDAOnR105(targets[i], test);
        }
    }

    return ret_val;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ClassIdentifier_c target)
{
  return getOneO_OIDAOnR105(target, null);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ClassIdentifier_c target, boolean loadComponent)
{
    return getOneO_OIDAOnR105(target.getModelRoot(), target, null, loadComponent);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ClassIdentifier_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_OIDAOnR105(target.getModelRoot(), target, test);
  }
  return null;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ModelRoot modelRoot, ClassIdentifier_c target, ClassQueryInterface_c test)
{
	return getOneO_OIDAOnR105(modelRoot, target, test, true);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR105(ModelRoot modelRoot, ClassIdentifier_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_OIDAOnR105(modelRoot,target,test);
}
private static ClassIdentifierAttribute_c find_getOneO_OIDAOnR105(ModelRoot modelRoot, ClassIdentifier_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105) {
	    for ( int i = 0; i < target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.size(); ++i ) {
	      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c [] targets)
{
  return getManyO_OIDAsOnR105(targets, null);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c [] targets, boolean loadComponent)
{
  return getManyO_OIDAsOnR105(targets, null, loadComponent);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR105(targets, test, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ClassIdentifierAttribute_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105) {
	    for (int j = 0; j < targets[i].backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.size(); ++j) {
	      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)targets[i].backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ClassIdentifierAttribute_c[] ret_set = new ClassIdentifierAttribute_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ClassIdentifierAttribute_c[0];
  }
  }

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c target)
{
  return getManyO_OIDAsOnR105(target, null);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c target, boolean loadComponent)
{
  return getManyO_OIDAsOnR105(target, null, loadComponent);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c target, ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR105(target, test, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR105(ClassIdentifier_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ClassIdentifierAttribute_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105) {
    for (int i = 0; i < target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.size(); ++i) {
      ClassIdentifierAttribute_c source = (ClassIdentifierAttribute_c)target.backPointer_IsMadeUpOfClassIdentifierAttributeIsMadeUpOf_R105.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ClassIdentifierAttribute_c[] ret_set = new ClassIdentifierAttribute_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ClassIdentifierAttribute_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ReferredToIdentifierAttribute_c> backPointer_IdentifiesForThisAssociationReferredToIdentifierAttributeIdentifiesForThisAssociation_R110 = new ArrayList<ReferredToIdentifierAttribute_c>();

public void setReferredToIdentifierAttributeOrderInChildListR110(ReferredToIdentifierAttribute_c target, int index) {
	unrelateAcrossR110From(target);
	ReferredToIdentifierAttribute_c[] elements = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR110From((ReferredToIdentifierAttribute_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR110To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR110To((ReferredToIdentifierAttribute_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR110To(ReferredToIdentifierAttribute_c target)
{
  if (target != null) {
    target.relateAcrossR110To(this, true) ;
  }
}

public void relateAcrossR110To(ReferredToIdentifierAttribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR110To(this, notifyChanges) ;
  }
}

public void setBackPointerR110To(ReferredToIdentifierAttribute_c target)
{
  	synchronized (backPointer_IdentifiesForThisAssociationReferredToIdentifierAttributeIdentifiesForThisAssociation_R110) {
		backPointer_IdentifiesForThisAssociationReferredToIdentifierAttributeIdentifiesForThisAssociation_R110.add(target);
	}
}

public void unrelateAcrossR110From(ReferredToIdentifierAttribute_c target)
{
  if (target != null) {
    target.unrelateAcrossR110From(this, true) ;
  }
}

public void unrelateAcrossR110From(ReferredToIdentifierAttribute_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR110From(this, notifyChanges) ;
  }
}

public void clearBackPointerR110To(ReferredToIdentifierAttribute_c target)
{
  synchronized (backPointer_IdentifiesForThisAssociationReferredToIdentifierAttributeIdentifiesForThisAssociation_R110) {
	    backPointer_IdentifiesForThisAssociationReferredToIdentifierAttributeIdentifiesForThisAssociation_R110.remove(target);
	}
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c [] targets)
{
    return getOneO_OIDAOnR110(targets, null);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_OIDAOnR110(targets, test, true);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ClassIdentifierAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ClassIdentifierAttribute_c candidate_val = getOneO_OIDAOnR110(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_OIDAOnR110(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c target)
{
	return getOneO_OIDAOnR110(target, true);
}
public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsIdentifiedInThisAssociationByClassIdentifierAttribute != null){
		target.IsIdentifiedInThisAssociationByClassIdentifierAttribute.loadProxy();
	}
	}
    return target.IsIdentifiedInThisAssociationByClassIdentifierAttribute ;
  } else {
    return null;
  }
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR110(targets, test, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ClassIdentifierAttribute_c[0];
  
  
  LinkedHashSet<ClassIdentifierAttribute_c> elementsSet = new LinkedHashSet<ClassIdentifierAttribute_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsIdentifiedInThisAssociationByClassIdentifierAttribute == null)
	  targets[i].loadProxy();
    ClassIdentifierAttribute_c associate = targets[i].IsIdentifiedInThisAssociationByClassIdentifierAttribute;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ClassIdentifierAttribute_c[] result = new ClassIdentifierAttribute_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c [] targets)
{
  return getManyO_OIDAsOnR110(targets, null);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ReferredToIdentifierAttribute_c [] targetArray = new ReferredToIdentifierAttribute_c[1];
    targetArray[0] = target;
    return getManyO_OIDAsOnR110(targetArray, test, loadComponent);
  } else {
    ClassIdentifierAttribute_c [] result = new ClassIdentifierAttribute_c [0] ;
    return result ;
  }
  
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c target,
    ClassQueryInterface_c test)
{
    return getManyO_OIDAsOnR110(target, null, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c target)
{
    return getManyO_OIDAsOnR110(target, null, true);
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c target, boolean loadComponent)
{
    return getManyO_OIDAsOnR110(target, null, loadComponent);
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToClassInAssoc_c target)
{
  return ClassIdentifierAttribute_c.getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(target)) ;
}

public static ClassIdentifierAttribute_c getOneO_OIDAOnR110(ReferredToClassInAssoc_c target,
    ClassQueryInterface_c test)
{
  return ClassIdentifierAttribute_c.getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(target), test) ;
}

public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToClassInAssoc_c target,
    ClassQueryInterface_c test)
{
	return getManyO_OIDAsOnR110(target, test, true);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToClassInAssoc_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  ReferredToIdentifierAttribute_c [] associators = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(target, loadComponent) ;
    return ClassIdentifierAttribute_c.getManyO_OIDAsOnR110(associators, test, loadComponent) ;
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToClassInAssoc_c target)
{
    return getManyO_OIDAsOnR110(target, null, true);
}
public static ClassIdentifierAttribute_c [] getManyO_OIDAsOnR110(ReferredToClassInAssoc_c target, boolean loadComponent)
{
    return getManyO_OIDAsOnR110(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R105
      Attribute_c relInst38726 = (Attribute_c) baseRoot.getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38726 == null) {
      			relInst38726 = (Attribute_c) Ooaofooa.getDefaultInstance().getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
      		}
			if (relInst38726 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38726 = (Attribute_c) roots[i].getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
					if (relInst38726 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38726 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38726) && !isProxy())) {
	      relInst38726.relateAcrossR105To(this, notifyChanges);
	  }
	  }
	          
      ClassIdentifier_c relInst38727 = (ClassIdentifier_c) baseRoot.getInstanceList(ClassIdentifier_c.class).get(new Object[] {new UUID(0, new Long(m_oid_id)),m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38727 == null) {
      			relInst38727 = (ClassIdentifier_c) Ooaofooa.getDefaultInstance().getInstanceList(ClassIdentifier_c.class).get(new Object[] {new UUID(0, new Long(m_oid_id)),m_obj_id});
      		}
			if (relInst38727 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38727 = (ClassIdentifier_c) roots[i].getInstanceList(ClassIdentifier_c.class).get(new Object[] {new UUID(0, new Long(m_oid_id)),m_obj_id});
					if (relInst38727 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38727 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38727) && !isProxy())) {
	      relInst38727.relateAcrossR105To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R105
      // O_ATTR
		  inst=IsMadeUpOfAttribute;
			unrelateAcrossR105From(IsMadeUpOfAttribute, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // O_ID
		  inst=IsPartOfClassIdentifier;
			unrelateAcrossR105From(IsPartOfClassIdentifier, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassIdentifierAttribute_c inst = (ClassIdentifierAttribute_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ClassIdentifierAttribute_c ClassIdentifierAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ClassIdentifierAttribute_c result=findClassIdentifierAttributeInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ClassIdentifierAttribute_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findClassIdentifierAttributeInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ClassIdentifierAttribute_c findClassIdentifierAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ClassIdentifierAttribute_c x = (ClassIdentifierAttribute_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ClassIdentifierAttribute_c ClassIdentifierAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ClassIdentifierAttributeInstance(modelRoot,test,true);
  }
  
  public static ClassIdentifierAttribute_c ClassIdentifierAttributeInstance(ModelRoot modelRoot)
  {
	 return ClassIdentifierAttributeInstance(modelRoot,null,true);
  }

  public static ClassIdentifierAttribute_c [] ClassIdentifierAttributeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ClassIdentifierAttribute_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ClassIdentifierAttribute_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ClassIdentifierAttribute_c x = (ClassIdentifierAttribute_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ClassIdentifierAttribute_c[] ret_set = new ClassIdentifierAttribute_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassIdentifierAttribute_c[0];
			}		
		} 
  }
  public static ClassIdentifierAttribute_c [] ClassIdentifierAttributeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ClassIdentifierAttributeInstances(modelRoot,test,true);
  }
  public static ClassIdentifierAttribute_c [] ClassIdentifierAttributeInstances(ModelRoot modelRoot)
  {
	return ClassIdentifierAttributeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Class Identifier Attribute.dispose call: ";
 	ReferredToIdentifierAttribute_c testR110Inst = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(this, false);

 	if ( testR110Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "110 ";
 	}
	ClassIdentifier_c testR105Inst = ClassIdentifier_c.getOneO_IDOnR105(this, false);

	if ( testR105Inst != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "105 ";	
 	}

   Attribute_c testR105InstOth = Attribute_c.getOneO_ATTROnR105(this, false);

   if ( testR105InstOth != null )
   {
   delete_error = true;
   errorMsg = errorMsg + "105 ";   
	}		    
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Class Identifier Attribute", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("attr_id")){
         return true;
      }
      if(attributeName.equals("obj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getAttr_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getAttr_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    longID= getOid_id();
    
        if(longID == -1)
	      longID=getOid_idCachedValue(); 
	      result.append(longID+"_");
    tempID= getObj_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getObj_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getAttr_idLongBased()
  {
    if ( IsMadeUpOfAttribute != null )
    {
      return IsMadeUpOfAttribute.getAttr_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getAttr_id()
  {
    if ( IsMadeUpOfAttribute != null )
    {
      return IsMadeUpOfAttribute.getAttr_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getAttr_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_attr_id) )
      return m_attr_id;
    else
      return getAttr_id();
  }
  
  public void setAttr_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_attr_id)){
	        return;
	    }
	}else if(m_attr_id != null){
	    if(m_attr_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Attr_id", m_attr_id, newValue,true); 
   m_attr_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getOid_id()
  {
    if ( IsPartOfClassIdentifier != null )
    {
      return IsPartOfClassIdentifier.getOid_id();
    }
    return -1;
  }


  public int getOid_idCachedValue()
  {
    if ( m_oid_id != -1 )
      return m_oid_id;
    else
      return getOid_id();
  }
  
  public void setOid_id(int newValue)
  {
    if(m_oid_id == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Oid_id", new Integer(m_oid_id), new Integer(newValue),true);

   m_oid_id = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getObj_idLongBased()
  {
    if ( IsPartOfClassIdentifier != null )
    {
      return IsPartOfClassIdentifier.getObj_idLongBased();
    }
    if ( IsMadeUpOfAttribute != null )
    {
      return IsMadeUpOfAttribute.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( IsPartOfClassIdentifier != null )
    {
      return IsPartOfClassIdentifier.getObj_id();
    }
    if ( IsMadeUpOfAttribute != null )
    {
      return IsMadeUpOfAttribute.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public String getLocalattributename()
  {
ModelRoot modelRoot = getModelRoot();
Attribute_c v_attribute = Attribute_c.getOneO_ATTROnR105(this);


if ( (  (v_attribute != null)) )
{

Setcachedlocalattributename(			    
v_attribute.getName() ) ;


return v_attribute.getName();



}

else
{

return Getcachedlocalattributename();



}


  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Class Identifier Attribute", //$NON-NLS-1$
	  " Operation entered: Class Identifier Attribute::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ClassIdentifierAttribute_c [] objs = ClassIdentifierAttribute_c.ClassIdentifierAttributeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Class Identifier Attribute", //$NON-NLS-1$
	  " Operation entered: Class Identifier Attribute::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ClassIdentifierAttribute_c_test38729_c implements ClassQueryInterface_c
    {
	  ClassIdentifierAttribute_c_test38729_c( java.util.UUID            p38730, int             p38731, java.util.UUID            p38732 ) {
	            m_p38730 = p38730; 
m_p38731 = p38731; 
m_p38732 = p38732;
	  }
	  private java.util.UUID             m_p38730; private int              m_p38731; private java.util.UUID             m_p38732; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassIdentifierAttribute_c selected = (ClassIdentifierAttribute_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAttr_id().equals(m_p38730)) & (selected.getOid_id() == (m_p38731)) & (selected.getObj_id().equals(m_p38732));
	      return retval;
	  }
    }

    ClassIdentifierAttribute_c [] objs38728 = 
    ClassIdentifierAttribute_c.ClassIdentifierAttributeInstances(modelRoot, new ClassIdentifierAttribute_c_test38729_c(getAttr_id(), getOid_id(), getObj_id())) ;

    if ( (  (objs38728.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Class Identifier Attribute", //$NON-NLS-1$
           "Consistency: Object: Class Identifier Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38728.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Class Identifier Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38728.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38728.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Class Identifier Attribute", //$NON-NLS-1$
           "Consistency: Object: Class Identifier Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38728.length )  + " Attr_ID: " + "Not Printable"  + " Oid_ID: " + Integer.toString(getOid_id())  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Class Identifier Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38728.length )  + " Attr_ID: " + "Not Printable"  + " Oid_ID: " + Integer.toString(getOid_id())  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Class Identifier Attribute is a link class in association: rel.Numb = 105
            // Other side
          // Associated Other Side: rel.Numb = 110
            // Link Object: Referred To Identifier Attribute
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier Attribute", " Operation entered: ClassIdentifierAttribute::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR105(this);


ClassIdentifier_c v_id = ClassIdentifier_c.getOneO_IDOnR105(this);


unrelateAcrossR105From( v_attr ) ; unrelateAcrossR105From( v_id ) ;


ReferredToIdentifierAttribute_c [] v_rtidas = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(this);


ReferredToIdentifierAttribute_c  v_rtida = null;
for ( int i37124 = 0; i37124 < v_rtidas.length; i37124++)
{
  v_rtida = v_rtidas[i37124] ;

if (v_rtida != null) {
v_rtida.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  java.util.UUID         Addreference(final int          p_Id,final java.util.UUID         p_Rel_id,final java.util.UUID         p_Rgo_obj_id,final java.util.UUID         p_Rgo_oir_id,final java.util.UUID         p_Rto_obj_id,final java.util.UUID         p_Rto_oir_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier Attribute", " Operation entered: ClassIdentifierAttribute::Addreference") ; 
               final ModelRoot modelRoot = getModelRoot();
Association_c v_rel = (Association_c) modelRoot.getInstanceList(Association_c.class).getGlobal(null, p_Rel_id);


  class ReferringClassInAssoc_test37541_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ReferringClassInAssoc_c selected = (ReferringClassInAssoc_c)candidate;
		return selected.getObj_id().equals(p_Rgo_obj_id) && selected.getOir_id().equals(p_Rgo_oir_id) ;
	}
  }
ReferringClassInAssoc_c v_rgo = ReferringClassInAssoc_c.getOneR_RGOOnR203(ClassInAssociation_c.getManyR_OIRsOnR201(v_rel), new ReferringClassInAssoc_test37541_c());


ModelClass_c v_rgo_obj = ModelClass_c.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(v_rgo));


java.util.UUID         v_newAttr_id = v_rgo_obj.Newreferentialattribute(			    
p_Id			    
,getAttr_id()			    
,getObj_id()			    
,getOid_id()) ;


  class ReferentialAttribute_test37542_c implements ClassQueryInterface_c
  {
	ReferentialAttribute_test37542_c( java.util.UUID         p37543 ) {
		m_p37543 = p37543;
	}
	private java.util.UUID         m_p37543;
	public boolean evaluate (Object candidate)
	{
		ReferentialAttribute_c selected = (ReferentialAttribute_c)candidate;
		return selected.getAttr_id().equals(m_p37543) ;
	}
  }
ReferentialAttribute_c v_ref_attr = ReferentialAttribute_c.getOneO_RATTROnR106(Attribute_c.getManyO_ATTRsOnR102(v_rgo_obj), new ReferentialAttribute_test37542_c(v_newAttr_id));


  class ReferredToClassInAssoc_test37544_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ReferredToClassInAssoc_c selected = (ReferredToClassInAssoc_c)candidate;
		return selected.getObj_id().equals(p_Rto_obj_id) && selected.getOir_id().equals(p_Rto_oir_id) ;
	}
  }
ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR203(ClassInAssociation_c.getManyR_OIRsOnR201(v_rel), new ReferredToClassInAssoc_test37544_c());


  class ReferredToIdentifierAttribute_test37545_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ReferredToIdentifierAttribute_c selected = (ReferredToIdentifierAttribute_c)candidate;
		return selected.getRel_id().equals(p_Rel_id) && selected.getOir_id().equals(p_Rto_oir_id) ;
	}
  }
ReferredToIdentifierAttribute_c v_rtida = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(this, new ReferredToIdentifierAttribute_test37545_c());


if ( (  (v_rtida == null)) )
{

v_rtida = new ReferredToIdentifierAttribute_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_rtida));


if (v_rtida != null) {
  v_rtida.relateAcrossR110To( this ) ;   v_rtida.relateAcrossR110To( v_rto ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}

AttributeReferenceInClass_c v_ref = new AttributeReferenceInClass_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ref));


if (v_ref != null) {
  v_ref.relateAcrossR108To(v_ref_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_ref != null) {
  v_ref.relateAcrossR111To( v_rtida ) ;   v_ref.relateAcrossR111To( v_rgo ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


return v_newAttr_id;



   } // End addReference
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier Attribute", " Operation entered: ClassIdentifierAttribute::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return "*" + Gd_c.Int_to_string(			    
getOid_id() + 1);



   } // End get_name
  public  String       Getcachedlocalattributename()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier Attribute", " Operation entered: ClassIdentifierAttribute::Getcachedlocalattributename") ; 
	return m_localattributename;
   } // End getCachedLocalAttributeName
  public  void Setcachedlocalattributename(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Class Identifier Attribute", " Operation entered: ClassIdentifierAttribute::Setcachedlocalattributename") ; 
	m_localattributename = p_Value;
   } // End setCachedLocalAttributeName

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Class Identifier Attribute
