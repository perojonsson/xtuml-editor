package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActionNode_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTION_NODE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActionNode_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActionNode_c(ModelRoot modelRoot, java.util.UUID p_m_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);

		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ActionNode_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
		ActionNode_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ActionNode_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActionNode_c(modelRoot, p_m_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActionNode_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id) {
		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
		ActionNode_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ActionNode_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActionNode_c new_inst = new ActionNode_c(modelRoot, p_m_id);
		return new_inst;
	}
	public ActionNode_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = IdAssigner.NULL_UUID;
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActionNode_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActionNode_c)) {
			return false;
		}

		ActionNode_c me = (ActionNode_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ActionNode_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ActionNode_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActionNode_c)) {
			return false;
		}

		ActionNode_c me = (ActionNode_c) elem;
		if (!getIdCachedValue()
				.equals(((ActionNode_c) elem).getIdCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;

	// declare association references from this class

	// referring navigation

	ActivityNode_c IsSupertypeActivityNode;
	public void relateAcrossR1105To(ActivityNode_c target) {
		relateAcrossR1105To(target, true);
	}
	public void relateAcrossR1105To(ActivityNode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeActivityNode)
			return; // already related

		if (IsSupertypeActivityNode != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeActivityNode != null) {

				IsSupertypeActivityNode.clearBackPointerR1105To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActionNode_c.relateAcrossR1105To(ActivityNode_c target)",
									"Relate performed across R1105 from Action Node to Activity Node without unrelate of prior instance.");
				}
			}

			IsSupertypeActivityNode = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1105To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1105", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1105From(ActivityNode_c target) {
		unrelateAcrossR1105From(target, true);
	}
	public void unrelateAcrossR1105From(ActivityNode_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeActivityNode == null)
			return; // already unrelated

		if (target != IsSupertypeActivityNode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1105",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1105To(this);
		}

		if (IsSupertypeActivityNode != null) {

			m_id = IsSupertypeActivityNode.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = IsSupertypeActivityNode.getIdCachedValue();
			}
			IsSupertypeActivityNode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1105", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActionNode_c getOneA_ACTOnR1105(ActivityNode_c[] targets) {
		return getOneA_ACTOnR1105(targets, null);
	}

	public static ActionNode_c getOneA_ACTOnR1105(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		ActionNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_ACTOnR1105(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActionNode_c getOneA_ACTOnR1105(ActivityNode_c target) {
		return getOneA_ACTOnR1105(target, null);
	}

	public static ActionNode_c getOneA_ACTOnR1105(ActivityNode_c target,
			boolean loadComponent) {
		return getOneA_ACTOnR1105(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActionNode_c getOneA_ACTOnR1105(ActivityNode_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_ACTOnR1105(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActionNode_c getOneA_ACTOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		return getOneA_ACTOnR1105(modelRoot, target, test, true);
	}

	public static ActionNode_c getOneA_ACTOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneA_ACTOnR1105(modelRoot, target, test);
	}
	private static ActionNode_c find_getOneA_ACTOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActionNode_c source = (ActionNode_c) target.backPointer_IsSubtypeActionNodeIsSubtype_R1105;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c[] targets) {
		return getManyA_ACTsOnR1105(targets, null);
	}
	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c[] targets,
			boolean loadComponent) {
		return getManyA_ACTsOnR1105(targets, null, loadComponent);
	}
	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1105(targets, test, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActionNode_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActionNode_c source = (ActionNode_c) targets[i].backPointer_IsSubtypeActionNodeIsSubtype_R1105;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActionNode_c[] ret_set = new ActionNode_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActionNode_c[0];
		}
	}

	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c target) {
		if (target != null) {
			ActivityNode_c[] targetArray = new ActivityNode_c[1];
			targetArray[0] = target;
			return getManyA_ACTsOnR1105(targetArray);
		} else {
			ActionNode_c[] result = new ActionNode_c[0];
			return result;
		}
	}

	public static ActionNode_c[] getManyA_ACTsOnR1105(ActivityNode_c target,
			boolean loadComponent) {
		if (target != null) {
			ActivityNode_c[] targetArray = new ActivityNode_c[1];
			targetArray[0] = target;
			return getManyA_ACTsOnR1105(targetArray, loadComponent);
		} else {
			ActionNode_c[] result = new ActionNode_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	SendSignal_c backPointer_IsSubtypeSendSignalIsSubtype_R1107;

	public void setSendSignalOrderInChildListR1107(SendSignal_c target,
			int index) {
		unrelateAcrossR1107From(target);
		SendSignal_c[] elements = SendSignal_c.getManyA_SSsOnR1107(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1107From((SendSignal_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1107To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1107To((SendSignal_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1107To(SendSignal_c target) {
		if (target != null) {
			target.relateAcrossR1107To(this, true);
		}
	}

	public void relateAcrossR1107To(SendSignal_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1107To(this, notifyChanges);
		}
	}

	public void setBackPointerR1107To(SendSignal_c target) {
		backPointer_IsSubtypeSendSignalIsSubtype_R1107 = target;
	}

	public void unrelateAcrossR1107From(SendSignal_c target) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, true);
		}
	}

	public void unrelateAcrossR1107From(SendSignal_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1107To(SendSignal_c target) {
		if (target == backPointer_IsSubtypeSendSignalIsSubtype_R1107) {
			backPointer_IsSubtypeSendSignalIsSubtype_R1107 = null;
		}
	}

	public static ActionNode_c getOneA_ACTOnR1107(SendSignal_c[] targets) {
		return getOneA_ACTOnR1107(targets, null);
	}

	public static ActionNode_c getOneA_ACTOnR1107(SendSignal_c[] targets,
			ClassQueryInterface_c test) {
		return getOneA_ACTOnR1107(targets, test, true);
	}

	public static ActionNode_c getOneA_ACTOnR1107(SendSignal_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionNode_c candidate_val = getOneA_ACTOnR1107(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_ACTOnR1107(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionNode_c getOneA_ACTOnR1107(SendSignal_c target) {
		return getOneA_ACTOnR1107(target, true);
	}
	public static ActionNode_c getOneA_ACTOnR1107(SendSignal_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionNode;
		} else {
			return null;
		}
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(targets, test, true);
	}

	public static ActionNode_c [] getManyA_ACTsOnR1107(SendSignal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionNode_c[0];
  
  
  LinkedHashSet<ActionNode_c> elementsSet = new LinkedHashSet<ActionNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionNode == null)
	  targets[i].loadProxy();
    ActionNode_c associate = targets[i].IsSupertypeActionNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionNode_c[] result = new ActionNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c[] targets) {
		return getManyA_ACTsOnR1107(targets, null);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			SendSignal_c[] targetArray = new SendSignal_c[1];
			targetArray[0] = target;
			return getManyA_ACTsOnR1107(targetArray, test, loadComponent);
		} else {
			ActionNode_c[] result = new ActionNode_c[0];
			return result;
		}

	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c target,
			ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c target) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(SendSignal_c target,
			boolean loadComponent) {
		return getManyA_ACTsOnR1107(target, null, loadComponent);
	}

	// referred to navigation

	AcceptEvent_c backPointer_IsSubtypeAcceptEventIsSubtype_R1107;

	public void setAcceptEventOrderInChildListR1107(AcceptEvent_c target,
			int index) {
		unrelateAcrossR1107From(target);
		AcceptEvent_c[] elements = AcceptEvent_c.getManyA_AEsOnR1107(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1107From((AcceptEvent_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1107To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1107To((AcceptEvent_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1107To(AcceptEvent_c target) {
		if (target != null) {
			target.relateAcrossR1107To(this, true);
		}
	}

	public void relateAcrossR1107To(AcceptEvent_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1107To(this, notifyChanges);
		}
	}

	public void setBackPointerR1107To(AcceptEvent_c target) {
		backPointer_IsSubtypeAcceptEventIsSubtype_R1107 = target;
	}

	public void unrelateAcrossR1107From(AcceptEvent_c target) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, true);
		}
	}

	public void unrelateAcrossR1107From(AcceptEvent_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1107To(AcceptEvent_c target) {
		if (target == backPointer_IsSubtypeAcceptEventIsSubtype_R1107) {
			backPointer_IsSubtypeAcceptEventIsSubtype_R1107 = null;
		}
	}

	public static ActionNode_c getOneA_ACTOnR1107(AcceptEvent_c[] targets) {
		return getOneA_ACTOnR1107(targets, null);
	}

	public static ActionNode_c getOneA_ACTOnR1107(AcceptEvent_c[] targets,
			ClassQueryInterface_c test) {
		return getOneA_ACTOnR1107(targets, test, true);
	}

	public static ActionNode_c getOneA_ACTOnR1107(AcceptEvent_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionNode_c candidate_val = getOneA_ACTOnR1107(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_ACTOnR1107(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionNode_c getOneA_ACTOnR1107(AcceptEvent_c target) {
		return getOneA_ACTOnR1107(target, true);
	}
	public static ActionNode_c getOneA_ACTOnR1107(AcceptEvent_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionNode;
		} else {
			return null;
		}
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(targets, test, true);
	}

	public static ActionNode_c [] getManyA_ACTsOnR1107(AcceptEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionNode_c[0];
  
  
  LinkedHashSet<ActionNode_c> elementsSet = new LinkedHashSet<ActionNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionNode == null)
	  targets[i].loadProxy();
    ActionNode_c associate = targets[i].IsSupertypeActionNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionNode_c[] result = new ActionNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c[] targets) {
		return getManyA_ACTsOnR1107(targets, null);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			AcceptEvent_c[] targetArray = new AcceptEvent_c[1];
			targetArray[0] = target;
			return getManyA_ACTsOnR1107(targetArray, test, loadComponent);
		} else {
			ActionNode_c[] result = new ActionNode_c[0];
			return result;
		}

	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c target,
			ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c target) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(AcceptEvent_c target,
			boolean loadComponent) {
		return getManyA_ACTsOnR1107(target, null, loadComponent);
	}

	// referred to navigation

	ActivityDiagramAction_c backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107;

	public void setActivityDiagramActionOrderInChildListR1107(
			ActivityDiagramAction_c target, int index) {
		unrelateAcrossR1107From(target);
		ActivityDiagramAction_c[] elements = ActivityDiagramAction_c
				.getManyA_GAsOnR1107(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1107From((ActivityDiagramAction_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1107To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1107To((ActivityDiagramAction_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1107To(ActivityDiagramAction_c target) {
		if (target != null) {
			target.relateAcrossR1107To(this, true);
		}
	}

	public void relateAcrossR1107To(ActivityDiagramAction_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1107To(this, notifyChanges);
		}
	}

	public void setBackPointerR1107To(ActivityDiagramAction_c target) {
		backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107 = target;
	}

	public void unrelateAcrossR1107From(ActivityDiagramAction_c target) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, true);
		}
	}

	public void unrelateAcrossR1107From(ActivityDiagramAction_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1107From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1107To(ActivityDiagramAction_c target) {
		if (target == backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107) {
			backPointer_IsSubtypeActivityDiagramActionIsSubtype_R1107 = null;
		}
	}

	public static ActionNode_c getOneA_ACTOnR1107(
			ActivityDiagramAction_c[] targets) {
		return getOneA_ACTOnR1107(targets, null);
	}

	public static ActionNode_c getOneA_ACTOnR1107(
			ActivityDiagramAction_c[] targets, ClassQueryInterface_c test) {
		return getOneA_ACTOnR1107(targets, test, true);
	}

	public static ActionNode_c getOneA_ACTOnR1107(
			ActivityDiagramAction_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActionNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionNode_c candidate_val = getOneA_ACTOnR1107(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_ACTOnR1107(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionNode_c getOneA_ACTOnR1107(ActivityDiagramAction_c target) {
		return getOneA_ACTOnR1107(target, true);
	}
	public static ActionNode_c getOneA_ACTOnR1107(
			ActivityDiagramAction_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionNode;
		} else {
			return null;
		}
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c[] targets, ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(targets, test, true);
	}

	public static ActionNode_c [] getManyA_ACTsOnR1107(ActivityDiagramAction_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionNode_c[0];
  
  
  LinkedHashSet<ActionNode_c> elementsSet = new LinkedHashSet<ActionNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionNode == null)
	  targets[i].loadProxy();
    ActionNode_c associate = targets[i].IsSupertypeActionNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionNode_c[] result = new ActionNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c[] targets) {
		return getManyA_ACTsOnR1107(targets, null);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ActivityDiagramAction_c[] targetArray = new ActivityDiagramAction_c[1];
			targetArray[0] = target;
			return getManyA_ACTsOnR1107(targetArray, test, loadComponent);
		} else {
			ActionNode_c[] result = new ActionNode_c[0];
			return result;
		}

	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c target, ClassQueryInterface_c test) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c target) {
		return getManyA_ACTsOnR1107(target, null, true);
	}

	public static ActionNode_c[] getManyA_ACTsOnR1107(
			ActivityDiagramAction_c target, boolean loadComponent) {
		return getManyA_ACTsOnR1107(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1105
		ActivityNode_c relInst58660 = (ActivityNode_c) baseRoot
				.getInstanceList(ActivityNode_c.class).get(new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58660 == null) {
			relInst58660 = (ActivityNode_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ActivityNode_c.class)
					.get(new Object[]{m_id});
		}
		if (relInst58660 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58660 = (ActivityNode_c) roots[i].getInstanceList(
						ActivityNode_c.class).get(new Object[]{m_id});
				if (relInst58660 != null)
					break;
			}
		}
		//synchronized
		if (relInst58660 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58660) && !isProxy())) {
				relInst58660.relateAcrossR1105To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1105
		// A_N
		inst = IsSupertypeActivityNode;
		unrelateAcrossR1105From(IsSupertypeActivityNode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActionNode_c inst = (ActionNode_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActionNode_c ActionNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionNode_c result = findActionNodeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ActionNode_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActionNodeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ActionNode_c findActionNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActionNode_c x = (ActionNode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ActionNode_c ActionNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionNodeInstance(modelRoot, test, true);
	}

	public static ActionNode_c ActionNodeInstance(ModelRoot modelRoot) {
		return ActionNodeInstance(modelRoot, null, true);
	}

	public static ActionNode_c[] ActionNodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ActionNode_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(ActionNode_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActionNode_c x = (ActionNode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActionNode_c[] ret_set = new ActionNode_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActionNode_c[0];
			}
		}
	}
	public static ActionNode_c[] ActionNodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionNodeInstances(modelRoot, test, true);
	}
	public static ActionNode_c[] ActionNodeInstances(ModelRoot modelRoot) {
		return ActionNodeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Action Node.dispose call: ";
		SendSignal_c testR1107Inst1 = SendSignal_c.getOneA_SSOnR1107(this,
				false);

		if (testR1107Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1107 ";
		}
		AcceptEvent_c testR1107Inst2 = AcceptEvent_c.getOneA_AEOnR1107(this,
				false);

		if (testR1107Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1107 ";
		}
		ActivityDiagramAction_c testR1107Inst3 = ActivityDiagramAction_c
				.getOneA_GAOnR1107(this, false);

		if (testR1107Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1107 ";
		}
		ActivityNode_c testR1105Inst2 = ActivityNode_c.getOneA_NOnR1105(this,
				false);

		if (testR1105Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1105 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Action Node", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getIdCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (IsSupertypeActivityNode != null) {
			return IsSupertypeActivityNode.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsSupertypeActivityNode != null) {
			return IsSupertypeActivityNode.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeActivityNode != null);

	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_id)) {
				return;
			}
		} else if (m_id != null) {
			if (m_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id",
				m_id, newValue, true);
		m_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Node", //$NON-NLS-1$
				" Operation entered: Action Node::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActionNode_c[] objs = ActionNode_c.ActionNodeInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Node", //$NON-NLS-1$
				" Operation entered: Action Node::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActionNode_c_test58662_c implements ClassQueryInterface_c {
			ActionNode_c_test58662_c(java.util.UUID p58663) {
				m_p58663 = p58663;
			}
			private java.util.UUID m_p58663;
			public boolean evaluate(Object candidate) {
				ActionNode_c selected = (ActionNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58663));
				return retval;
			}
		}

		ActionNode_c[] objs58661 = ActionNode_c.ActionNodeInstances(modelRoot,
				new ActionNode_c_test58662_c(getId()));

		if (((objs58661.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Node", //$NON-NLS-1$
								"Consistency: Object: Action Node: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58661.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Action Node: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs58661.length), e);
			}
			retval = false;

		}

		if (((objs58661.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Node", //$NON-NLS-1$
								"Consistency: Object: Action Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58661.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58661.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Action Node is a subtype in association: rel.Numb = 1105
		// The supertype class is: Activity Node
		class ActivityNode_c_test58667_c implements ClassQueryInterface_c {
			ActivityNode_c_test58667_c(java.util.UUID p58668) {
				m_p58668 = p58668;
			}
			private java.util.UUID m_p58668;
			public boolean evaluate(Object candidate) {
				ActivityNode_c selected = (ActivityNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58668));
				return retval;
			}
		}

		ActivityNode_c[] objs58666 = ActivityNode_c.ActivityNodeInstances(
				modelRoot, new ActivityNode_c_test58667_c(getId()));

		if (((objs58666.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Node", //$NON-NLS-1$
								"Consistency: Object: Action Node: Association: 1105: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58666.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Node: Association: 1105: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58666.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 1107
		int objs58669 = 0;
		// Subtype Object: Send Signal
		class SendSignal_c_test58670_c implements ClassQueryInterface_c {
			SendSignal_c_test58670_c(java.util.UUID p58671) {
				m_p58671 = p58671;
			}
			private java.util.UUID m_p58671;
			public boolean evaluate(Object candidate) {
				SendSignal_c selected = (SendSignal_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58671));
				return retval;
			}
		}

		SendSignal_c[] objs58672 = SendSignal_c.SendSignalInstances(modelRoot,
				new SendSignal_c_test58670_c(getId()));

		objs58669 = objs58669 + objs58672.length;
		// Subtype Object: Accept Event
		class AcceptEvent_c_test58673_c implements ClassQueryInterface_c {
			AcceptEvent_c_test58673_c(java.util.UUID p58674) {
				m_p58674 = p58674;
			}
			private java.util.UUID m_p58674;
			public boolean evaluate(Object candidate) {
				AcceptEvent_c selected = (AcceptEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58674));
				return retval;
			}
		}

		AcceptEvent_c[] objs58675 = AcceptEvent_c.AcceptEventInstances(
				modelRoot, new AcceptEvent_c_test58673_c(getId()));

		objs58669 = objs58669 + objs58675.length;
		// Subtype Object: Activity Diagram Action
		class ActivityDiagramAction_c_test58676_c
				implements
					ClassQueryInterface_c {
			ActivityDiagramAction_c_test58676_c(java.util.UUID p58677) {
				m_p58677 = p58677;
			}
			private java.util.UUID m_p58677;
			public boolean evaluate(Object candidate) {
				ActivityDiagramAction_c selected = (ActivityDiagramAction_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58677));
				return retval;
			}
		}

		ActivityDiagramAction_c[] objs58678 = ActivityDiagramAction_c
				.ActivityDiagramActionInstances(modelRoot,
						new ActivityDiagramAction_c_test58676_c(getId()));

		objs58669 = objs58669 + objs58678.length;
		if (objs58669 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Node", //$NON-NLS-1$
								"Consistency: Object: Action Node: Association: 1107: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58669)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Node: Association: 1107: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58669), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Node",
				" Operation entered: ActionNode::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ActivityNode_c v_parent = ActivityNode_c.getOneA_NOnR1105(this);

		if (((v_parent != null))) {

			if (v_parent != null) {
				v_parent.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			return;

		}

		ActivityDiagramAction_c v_ga = ActivityDiagramAction_c
				.getOneA_GAOnR1107(this);

		if (((v_ga != null))) {

			this.unrelateAcrossR1107From(v_ga);

			if (v_ga != null) {
				v_ga.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		AcceptEvent_c v_ae = AcceptEvent_c.getOneA_AEOnR1107(this);

		if (((v_ae != null))) {

			this.unrelateAcrossR1107From(v_ae);

			if (v_ae != null) {
				v_ae.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		SendSignal_c v_ss = SendSignal_c.getOneA_SSOnR1107(this);

		if (((v_ss != null))) {

			this.unrelateAcrossR1107From(v_ss);

			if (v_ss != null) {
				v_ss.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public boolean Incomingedgeallowed() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Node",
				" Operation entered: ActionNode::Incomingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		ActivityDiagramAction_c v_ga = ActivityDiagramAction_c
				.getOneA_GAOnR1107(this);

		if (((v_ga != null))) {

			return v_ga.Incomingedgeallowed();

		}

		else {

			AcceptEvent_c v_ae = AcceptEvent_c.getOneA_AEOnR1107(this);

			if (((v_ae != null))) {

				return v_ae.Incomingedgeallowed();

			}

			else {

				SendSignal_c v_ss = SendSignal_c.getOneA_SSOnR1107(this);

				if (((v_ss != null))) {

					return v_ss.Incomingedgeallowed();

				}

			}

		}

		return false;

	} // End incomingEdgeAllowed
	public boolean Outgoingedgeallowed() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Node",
				" Operation entered: ActionNode::Outgoingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		ActivityDiagramAction_c v_ga = ActivityDiagramAction_c
				.getOneA_GAOnR1107(this);

		if (((v_ga != null))) {

			return v_ga.Outgoingedgeallowed();

		}

		else {

			AcceptEvent_c v_ae = AcceptEvent_c.getOneA_AEOnR1107(this);

			if (((v_ae != null))) {

				return v_ae.Outgoingedgeallowed();

			}

			else {

				SendSignal_c v_ss = SendSignal_c.getOneA_SSOnR1107(this);

				if (((v_ss != null))) {

					return v_ss.Outgoingedgeallowed();

				}

			}

		}

		return false;

	} // End outgoingEdgeAllowed

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Action Node
