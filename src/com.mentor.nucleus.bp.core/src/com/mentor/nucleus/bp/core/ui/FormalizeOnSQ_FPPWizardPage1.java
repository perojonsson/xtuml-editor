package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    FormalizeOnSQ_FPPWizardPage1.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class FormalizeOnSQ_FPPWizardPage1 extends PtWizardPage
		implements
			Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)

	// cache for user choices

	/**
	 * Constructors for FormalizeOnSQ_FPPWizardPage1.
	 */
	public FormalizeOnSQ_FPPWizardPage1() {
		super("");
		init();
	}

	public FormalizeOnSQ_FPPWizardPage1(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Formalize");
		setDescription("Choose the Function Package that this instance should represent");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((FormalizeOnSQ_FPPWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		FunctionPackage_c v_Package = ((FormalizeOnSQ_FPPWizard) getWizard()).v_Package;

		// cache for context
		FunctionPackageParticipant_c v_fpp = ((FormalizeOnSQ_FPPWizard) getWizard()).v_fpp;

		FunctionPackage_c v_fpk = FunctionPackage_c.getOneS_FPKOnR932(v_fpp);

		java.util.UUID v_existingId = Gd_c.Null_unique_id();

		if (((v_fpk != null))) {

			v_existingId = v_fpk.getFunpack_id();

		}

		InteractionParticipant_c v_participant = InteractionParticipant_c
				.getOneSQ_POnR930(v_fpp);

		PackageableElement_c v_packageableElem = PackageableElement_c
				.getOnePE_PEOnR8001(v_participant);

		Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);

		Component_c v_component = Component_c
				.getOneC_COnR8003(v_packageableElem);

		boolean v_isInGenericPackage = (v_package != null)
				|| (v_component != null);

		Sequence_c v_sequence = Sequence_c.getOneSQ_SOnR929(v_participant);

		Communication_c v_communication = Communication_c
				.getOneCOMM_COMMOnR1126(v_participant);

		String v_domName = "";

		if (((v_sequence != null))) {

			v_domName = v_sequence.Getpath(true);

		}

		else if (((v_communication != null))) {

			v_domName = v_communication.Getpath(true);

		}

		class Domain_test9785_c implements ClassQueryInterface_c {
			Domain_test9785_c(String p9786) {
				m_p9786 = p9786;
			}
			private String m_p9786;
			public boolean evaluate(Object candidate) {
				Domain_c selected = (Domain_c) candidate;
				return (selected.getName().equals(m_p9786));
			}
		}
		Domain_c v_domain = Domain_c.DomainInstance(modelRoot,
				new Domain_test9785_c(v_domName));

		if (((v_domain != null))) {

			if (((v_Package != null))) {

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		return true;
	}

}
