package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.User_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.common.*;

// User
public class User_c {
	public static boolean Selectone(final java.util.UUID p_Id) {
		Ooaofooa.log.println(ILogger.BRIDGE, "selectOne",
				" Bridge entered: User::Selectone");
		return true;

	} // End selectOne

	public static boolean Selectmany(final java.util.UUID p_Id) {
		Ooaofooa.log.println(ILogger.BRIDGE, "selectMany",
				" Bridge entered: User::Selectmany");
		return true;

	} // End selectMany

	public static void Warning(final String p_Msg) {
		// native
		org.eclipse.swt.widgets.Shell sh = CorePlugin.getDefault()
				.getWorkbench().getActiveWorkbenchWindow().getShell();
		org.eclipse.jface.dialogs.MessageDialog.openError(sh, "Warning", p_Msg);

	} // End warning

	public static void Logerror(final String p_Msg, final String p_Path) {
		// native
		String pathToUse = p_Path;
		if (pathToUse == null || pathToUse.equals("")) {
			pathToUse = "<Path is not available>";
		}
		CorePlugin.err.println(p_Msg + " at " + pathToUse);

	} // End logError

	public static void Information(final String p_Msg, final String p_Title) {
		// native
		org.eclipse.swt.widgets.Shell sh = CorePlugin.getDefault()
				.getWorkbench().getActiveWorkbenchWindow().getShell();
		org.eclipse.jface.dialogs.MessageDialog.openInformation(sh, p_Title,
				p_Msg);
	} // End information

	public static boolean Selectonewithint(final int p_Id) {
		Ooaofooa.log.println(ILogger.BRIDGE, "selectOneWithInt",
				" Bridge entered: User::Selectonewithint");
		return true;

	} // End selectOneWithInt

	public static void Loginfo(final String p_Msg) {
		// native
		if (CorePlugin.loggingEnabled) {
			CorePlugin.out.println(p_Msg);
		}

	} // End logInfo

	public static boolean Selectexisting(final java.util.UUID p_Id) {
		Ooaofooa.log.println(ILogger.BRIDGE, "selectExisting",
				" Bridge entered: User::Selectexisting");
		return true;

	} // End selectExisting

} // End User_c

