      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SearchResult_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SEARCH_RESULT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SearchResult_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SearchResult_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_engine_id,
       java.util.UUID         p_m_matchedparticipant_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_matchedparticipant_id = IdAssigner.preprocessUUID(p_m_matchedparticipant_id);
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public SearchResult_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_engine_id,
       java.util.UUID         p_m_matchedparticipant_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
      SearchResult_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (SearchResult_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       new_inst.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_matchedparticipant_id = IdAssigner.preprocessUUID(p_m_matchedparticipant_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SearchResult_c(modelRoot,
p_m_id,
p_m_engine_id,
p_m_matchedparticipant_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SearchResult_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_engine_id,
       java.util.UUID         p_m_matchedparticipant_id){
    InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
    SearchResult_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (SearchResult_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       source.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_matchedparticipant_id = IdAssigner.preprocessUUID(p_m_matchedparticipant_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SearchResult_c new_inst = new SearchResult_c(modelRoot,
p_m_id,
p_m_engine_id,
p_m_matchedparticipant_id
);
    return new_inst;
  }
  public SearchResult_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = idAssigner.createUUID();
     m_engine_id = IdAssigner.NULL_UUID;   
     m_matchedparticipant_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SearchResult_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SearchResult_c)) {
           return false;
       }
       
       SearchResult_c me = (SearchResult_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((SearchResult_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((SearchResult_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SearchResult_c)) {
           return false;
       }
       
       SearchResult_c me = (SearchResult_c)elem;
      if (!getId().equals(((SearchResult_c)elem).getId())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private long m_idLongBased ;
  private java.util.UUID         m_engine_id ;
  private java.util.UUID         m_matchedparticipant_id ;
      
// declare association references from this class
  
  
    
// referring navigation

SearchParticipant_c SearchParticipant ;
public void relateAcrossR9802To(SearchParticipant_c target)
{
	relateAcrossR9802To(target, true);
}
public void relateAcrossR9802To(SearchParticipant_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SearchParticipant) return;  // already related

    if ( SearchParticipant != target ) {
    
    Object oldKey = getInstanceKey();

    if (SearchParticipant != null) {
    
        SearchParticipant.clearBackPointerR9802To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SearchResult_c.relateAcrossR9802To(SearchParticipant_c target)", 
			"Relate performed across R9802 from Search Result to Search Participant without unrelate of prior instance.");  
		}
    }
                
    	SearchParticipant = target ;
        m_matchedparticipant_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR9802To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "9802", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR9802From(SearchParticipant_c target)
{
	unrelateAcrossR9802From(target, true);
}
public void unrelateAcrossR9802From(SearchParticipant_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SearchParticipant == null) return;  // already unrelated
	
	if (target != SearchParticipant) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R9802", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR9802To(this);
    }
    

      if(SearchParticipant != null) {
      
        m_matchedparticipant_id = SearchParticipant.getId();
        SearchParticipant = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "9802", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SearchResult_c getOneSR_SROnR9802(SearchParticipant_c [] targets)
{
    return getOneSR_SROnR9802(targets, null);
}

public static SearchResult_c getOneSR_SROnR9802(SearchParticipant_c [] targets, ClassQueryInterface_c test)
{
    SearchResult_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSR_SROnR9802(targets[i], test);
        }
    }

    return ret_val;
}

public static SearchResult_c getOneSR_SROnR9802(SearchParticipant_c target)
{
  return getOneSR_SROnR9802(target, null);
}

public static SearchResult_c getOneSR_SROnR9802(SearchParticipant_c target, boolean loadComponent)
{
    return getOneSR_SROnR9802(target.getModelRoot(), target, null, loadComponent);
}

public static SearchResult_c getOneSR_SROnR9802(SearchParticipant_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSR_SROnR9802(target.getModelRoot(), target, test);
  }
  return null;
}

public static SearchResult_c getOneSR_SROnR9802(ModelRoot modelRoot, SearchParticipant_c target, ClassQueryInterface_c test)
{
	return getOneSR_SROnR9802(modelRoot, target, test, true);
}

public static SearchResult_c getOneSR_SROnR9802(ModelRoot modelRoot, SearchParticipant_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSR_SROnR9802(modelRoot,target,test);
}
private static SearchResult_c find_getOneSR_SROnR9802(ModelRoot modelRoot, SearchParticipant_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SearchResult_c source = (SearchResult_c)target.backPointer_SearchResult_R9802;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c [] targets)
{
  return getManySR_SRsOnR9802(targets, null);
}
public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c [] targets, boolean loadComponent)
{
  return getManySR_SRsOnR9802(targets, null, loadComponent);
}
public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c [] targets, ClassQueryInterface_c test)
{
	return getManySR_SRsOnR9802(targets, test, true);
}

public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SearchResult_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SearchResult_c source = (SearchResult_c)targets[i].backPointer_SearchResult_R9802;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SearchResult_c[] ret_set = new SearchResult_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SearchResult_c[0];
  }
  }

public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c target)
{
  if (target != null) {
    SearchParticipant_c [] targetArray = new SearchParticipant_c[1];
    targetArray[0] = target;
    return getManySR_SRsOnR9802(targetArray);
  } else {
    SearchResult_c [] result = new SearchResult_c [0] ;
  return result ;
}
}

public static SearchResult_c [] getManySR_SRsOnR9802(SearchParticipant_c target, boolean loadComponent)
{
  if (target != null) {
    SearchParticipant_c [] targetArray = new SearchParticipant_c[1];
    targetArray[0] = target;
    return getManySR_SRsOnR9802(targetArray, loadComponent);
  } else {
    SearchResult_c [] result = new SearchResult_c [0] ;
  return result ;
}
}



  
    
// referring navigation

SearchEngine_c IsDeterminedBySearchEngine ;
public void relateAcrossR9503To(SearchEngine_c target)
{
	relateAcrossR9503To(target, true);
}
public void relateAcrossR9503To(SearchEngine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDeterminedBySearchEngine) return;  // already related

    if ( IsDeterminedBySearchEngine != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDeterminedBySearchEngine != null) {
    
        IsDeterminedBySearchEngine.clearBackPointerR9503To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SearchResult_c.relateAcrossR9503To(SearchEngine_c target)", 
			"Relate performed across R9503 from Search Result to Search Engine without unrelate of prior instance.");  
		}
    }
                
    	IsDeterminedBySearchEngine = target ;
        m_engine_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR9503To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "9503", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR9503From(SearchEngine_c target)
{
	unrelateAcrossR9503From(target, true);
}
public void unrelateAcrossR9503From(SearchEngine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDeterminedBySearchEngine == null) return;  // already unrelated
	
	if (target != IsDeterminedBySearchEngine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R9503", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR9503To(this);
    }
    

      if(IsDeterminedBySearchEngine != null) {
      
        m_engine_id = IsDeterminedBySearchEngine.getId();
        IsDeterminedBySearchEngine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "9503", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SearchResult_c getOneSR_SROnR9503(SearchEngine_c [] targets)
{
    return getOneSR_SROnR9503(targets, null);
}

public static SearchResult_c getOneSR_SROnR9503(SearchEngine_c [] targets, ClassQueryInterface_c test)
{
    SearchResult_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSR_SROnR9503(targets[i], test);
        }
    }

    return ret_val;
}

public static SearchResult_c getOneSR_SROnR9503(SearchEngine_c target)
{
  return getOneSR_SROnR9503(target, null);
}

public static SearchResult_c getOneSR_SROnR9503(SearchEngine_c target, boolean loadComponent)
{
    return getOneSR_SROnR9503(target.getModelRoot(), target, null, loadComponent);
}

public static SearchResult_c getOneSR_SROnR9503(SearchEngine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSR_SROnR9503(target.getModelRoot(), target, test);
  }
  return null;
}

public static SearchResult_c getOneSR_SROnR9503(ModelRoot modelRoot, SearchEngine_c target, ClassQueryInterface_c test)
{
	return getOneSR_SROnR9503(modelRoot, target, test, true);
}

public static SearchResult_c getOneSR_SROnR9503(ModelRoot modelRoot, SearchEngine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSR_SROnR9503(modelRoot,target,test);
}
private static SearchResult_c find_getOneSR_SROnR9503(ModelRoot modelRoot, SearchEngine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DeterminesSearchResultDetermines_R9503) {
	    for ( int i = 0; i < target.backPointer_DeterminesSearchResultDetermines_R9503.size(); ++i ) {
	      SearchResult_c source = (SearchResult_c)target.backPointer_DeterminesSearchResultDetermines_R9503.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c [] targets)
{
  return getManySR_SRsOnR9503(targets, null);
}
public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c [] targets, boolean loadComponent)
{
  return getManySR_SRsOnR9503(targets, null, loadComponent);
}
public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c [] targets, ClassQueryInterface_c test)
{
	return getManySR_SRsOnR9503(targets, test, true);
}

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SearchResult_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DeterminesSearchResultDetermines_R9503) {
	    for (int j = 0; j < targets[i].backPointer_DeterminesSearchResultDetermines_R9503.size(); ++j) {
	      SearchResult_c source = (SearchResult_c)targets[i].backPointer_DeterminesSearchResultDetermines_R9503.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SearchResult_c[] ret_set = new SearchResult_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SearchResult_c[0];
  }
  }

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c target)
{
  return getManySR_SRsOnR9503(target, null);
}

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c target, boolean loadComponent)
{
  return getManySR_SRsOnR9503(target, null, loadComponent);
}

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c target, ClassQueryInterface_c test)
{
	return getManySR_SRsOnR9503(target, test, true);
}

public static SearchResult_c [] getManySR_SRsOnR9503(SearchEngine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SearchResult_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_DeterminesSearchResultDetermines_R9503) {
    for (int i = 0; i < target.backPointer_DeterminesSearchResultDetermines_R9503.size(); ++i) {
      SearchResult_c source = (SearchResult_c)target.backPointer_DeterminesSearchResultDetermines_R9503.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SearchResult_c[] ret_set = new SearchResult_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SearchResult_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Match_c> backPointer_ConsistsOfMatchConsistsOf_R9800 = new ArrayList<Match_c>();

public void setMatchOrderInChildListR9800(Match_c target, int index) {
	unrelateAcrossR9800From(target);
	Match_c[] elements = Match_c.getManySR_MsOnR9800(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR9800From((Match_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR9800To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR9800To((Match_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR9800To(Match_c target)
{
  if (target != null) {
    target.relateAcrossR9800To(this, true) ;
  }
}

public void relateAcrossR9800To(Match_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR9800To(this, notifyChanges) ;
  }
}

public void setBackPointerR9800To(Match_c target)
{
  	synchronized (backPointer_ConsistsOfMatchConsistsOf_R9800) {
		backPointer_ConsistsOfMatchConsistsOf_R9800.add(target);
	}
}

public void unrelateAcrossR9800From(Match_c target)
{
  if (target != null) {
    target.unrelateAcrossR9800From(this, true) ;
  }
}

public void unrelateAcrossR9800From(Match_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR9800From(this, notifyChanges) ;
  }
}

public void clearBackPointerR9800To(Match_c target)
{
  synchronized (backPointer_ConsistsOfMatchConsistsOf_R9800) {
	    backPointer_ConsistsOfMatchConsistsOf_R9800.remove(target);
	}
}

public static SearchResult_c getOneSR_SROnR9800(Match_c [] targets)
{
    return getOneSR_SROnR9800(targets, null);
}

public static SearchResult_c getOneSR_SROnR9800(Match_c [] targets, ClassQueryInterface_c test)
{
    return getOneSR_SROnR9800(targets, test, true);
}

public static SearchResult_c getOneSR_SROnR9800(Match_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SearchResult_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SearchResult_c candidate_val = getOneSR_SROnR9800(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSR_SROnR9800(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SearchResult_c getOneSR_SROnR9800(Match_c target)
{
	return getOneSR_SROnR9800(target, true);
}
public static SearchResult_c getOneSR_SROnR9800(Match_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ProvidesForSearchResult ;
  } else {
    return null;
  }
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySR_SRsOnR9800(targets, test, true);
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SearchResult_c[0];
  
  
  LinkedHashSet<SearchResult_c> elementsSet = new LinkedHashSet<SearchResult_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidesForSearchResult == null)
	  targets[i].loadProxy();
    SearchResult_c associate = targets[i].ProvidesForSearchResult;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SearchResult_c[] result = new SearchResult_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c [] targets)
{
  return getManySR_SRsOnR9800(targets, null);
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Match_c [] targetArray = new Match_c[1];
    targetArray[0] = target;
    return getManySR_SRsOnR9800(targetArray, test, loadComponent);
  } else {
    SearchResult_c [] result = new SearchResult_c [0] ;
    return result ;
  }
  
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c target,
    ClassQueryInterface_c test)
{
    return getManySR_SRsOnR9800(target, null, true);
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c target)
{
    return getManySR_SRsOnR9800(target, null, true);
}

public static SearchResult_c [] getManySR_SRsOnR9800(Match_c target, boolean loadComponent)
{
    return getManySR_SRsOnR9800(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (SearchParticipant == null) {          
      // R9802
      SearchParticipant_c relInst39507 = (SearchParticipant_c) baseRoot.getInstanceList(SearchParticipant_c.class).get(new Object[] {m_matchedparticipant_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst39507 == null) {
      			relInst39507 = (SearchParticipant_c) Ooaofooa.getDefaultInstance().getInstanceList(SearchParticipant_c.class).get(new Object[] {m_matchedparticipant_id});
      		}
			if (relInst39507 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst39507 = (SearchParticipant_c) roots[i].getInstanceList(SearchParticipant_c.class).get(new Object[] {m_matchedparticipant_id});
					if (relInst39507 != null)
						break;
				}
			}
			//synchronized
      if ( relInst39507 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst39507) && !isProxy())) {
	      relInst39507.relateAcrossR9802To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsDeterminedBySearchEngine == null) {          
      // R9503
      SearchEngine_c relInst39508 = (SearchEngine_c) baseRoot.getInstanceList(SearchEngine_c.class).get(new Object[] {m_engine_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst39508 == null) {
      			relInst39508 = (SearchEngine_c) Ooaofooa.getDefaultInstance().getInstanceList(SearchEngine_c.class).get(new Object[] {m_engine_id});
      		}
			if (relInst39508 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst39508 = (SearchEngine_c) roots[i].getInstanceList(SearchEngine_c.class).get(new Object[] {m_engine_id});
					if (relInst39508 != null)
						break;
				}
			}
			//synchronized
      if ( relInst39508 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst39508) && !isProxy())) {
	      relInst39508.relateAcrossR9503To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R9802
      // SP_SP
		  inst=SearchParticipant;
			unrelateAcrossR9802From(SearchParticipant, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R9503
      // SEN_E
		  inst=IsDeterminedBySearchEngine;
			unrelateAcrossR9503From(IsDeterminedBySearchEngine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SearchResult_c inst = (SearchResult_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SearchResult_c SearchResultInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SearchResult_c result=findSearchResultInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SearchResult_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSearchResultInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SearchResult_c findSearchResultInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SearchResult_c x = (SearchResult_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SearchResult_c SearchResultInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SearchResultInstance(modelRoot,test,true);
  }
  
  public static SearchResult_c SearchResultInstance(ModelRoot modelRoot)
  {
	 return SearchResultInstance(modelRoot,null,true);
  }

  public static SearchResult_c [] SearchResultInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SearchResult_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SearchResult_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SearchResult_c x = (SearchResult_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SearchResult_c[] ret_set = new SearchResult_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SearchResult_c[0];
			}		
		} 
  }
  public static SearchResult_c [] SearchResultInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SearchResultInstances(modelRoot,test,true);
  }
  public static SearchResult_c [] SearchResultInstances(ModelRoot modelRoot)
  {
	return SearchResultInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Search Result.dispose call: ";
	Match_c testR9800Inst = Match_c.getOneSR_MOnR9800(this, false);

	if ( testR9800Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "9800 ";	
	}
	SearchParticipant_c testR9802Inst = SearchParticipant_c.getOneSP_SPOnR9802(this, false);

	if ( testR9802Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "9802 ";
	}
	SearchEngine_c testR9503Inst = SearchEngine_c.getOneSEN_EOnR9503(this, false);

	if ( testR9503Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "9503 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Search Result", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("engine_id")){
         return true;
      }
      if(attributeName.equals("matchedparticipant_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if(m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)){
    	return 0xfffffff & m_id.getLeastSignificantBits();
    }
    return m_idLongBased ;
  }
  public java.util.UUID getId()
  {
    return m_id ;
  }


  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getEngine_idLongBased()
  {
    if ( IsDeterminedBySearchEngine != null )
    {
      return IsDeterminedBySearchEngine.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEngine_id()
  {
    if ( IsDeterminedBySearchEngine != null )
    {
      return IsDeterminedBySearchEngine.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEngine_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_engine_id) )
      return m_engine_id;
    else
      return getEngine_id();
  }
  
  public void setEngine_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_engine_id)){
	        return;
	    }
	}else if(m_engine_id != null){
	    if(m_engine_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Engine_id", m_engine_id, newValue,true); 
   m_engine_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getMatchedparticipant_idLongBased()
  {
    if ( SearchParticipant != null )
    {
      return SearchParticipant.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getMatchedparticipant_id()
  {
    if ( SearchParticipant != null )
    {
      return SearchParticipant.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getMatchedparticipant_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_matchedparticipant_id) )
      return m_matchedparticipant_id;
    else
      return getMatchedparticipant_id();
  }
  
  public void setMatchedparticipant_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_matchedparticipant_id)){
	        return;
	    }
	}else if(m_matchedparticipant_id != null){
	    if(m_matchedparticipant_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Matchedparticipant_id", m_matchedparticipant_id, newValue,true); 
   m_matchedparticipant_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Search Result", //$NON-NLS-1$
	  " Operation entered: Search Result::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SearchResult_c [] objs = SearchResult_c.SearchResultInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Search Result", //$NON-NLS-1$
	  " Operation entered: Search Result::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SearchResult_c_test39510_c implements ClassQueryInterface_c
    {
	  SearchResult_c_test39510_c( java.util.UUID            p39511 ) {
	  m_p39511 = p39511;
	  }
	  private java.util.UUID             m_p39511; 
	  public boolean evaluate (Object candidate)
	  {
	      SearchResult_c selected = (SearchResult_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p39511));
	      return retval;
	  }
    }

    SearchResult_c [] objs39509 = 
    SearchResult_c.SearchResultInstances(modelRoot, new SearchResult_c_test39510_c(getId())) ;

    if ( (  (objs39509.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result", //$NON-NLS-1$
           "Consistency: Object: Search Result: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs39509.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39509.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs39509.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result", //$NON-NLS-1$
           "Consistency: Object: Search Result: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39509.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39509.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Search Result is a referring class in association: rel.Numb = 9503
          // The participating class is: Search Engine
    class SearchEngine_c_test39515_c implements ClassQueryInterface_c
    {
	  SearchEngine_c_test39515_c( java.util.UUID            p39516 ) {
	  m_p39516 = p39516;
	  }
	  private java.util.UUID             m_p39516; 
	  public boolean evaluate (Object candidate)
	  {
	      SearchEngine_c selected = (SearchEngine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p39516));
	      return retval;
	  }
    }

    SearchEngine_c [] objs39514 = 
    SearchEngine_c.SearchEngineInstances(modelRoot, new SearchEngine_c_test39515_c(getEngine_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs39514.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result", //$NON-NLS-1$
           "Consistency: Object: Search Result: Association: 9503: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39514.length )  + " Engine_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result: Association: 9503: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39514.length )  + " Engine_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Search Result is a referring class in association: rel.Numb = 9802
          // The participating class is: Search Participant
    class SearchParticipant_c_test39518_c implements ClassQueryInterface_c
    {
	  SearchParticipant_c_test39518_c( java.util.UUID            p39519 ) {
	  m_p39519 = p39519;
	  }
	  private java.util.UUID             m_p39519; 
	  public boolean evaluate (Object candidate)
	  {
	      SearchParticipant_c selected = (SearchParticipant_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p39519));
	      return retval;
	  }
    }

    SearchParticipant_c [] objs39517 = 
    SearchParticipant_c.SearchParticipantInstances(modelRoot, new SearchParticipant_c_test39518_c(getMatchedparticipant_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs39517.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Search Result", //$NON-NLS-1$
           "Consistency: Object: Search Result: Association: 9802: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39517.length )  + " MatchedParticipant_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Search Result: Association: 9802: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39517.length )  + " MatchedParticipant_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Search Result is a participating class in association: rel.Numb = 9800
             // Object: Match
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Search Result", " Operation entered: SearchResult::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Match_c [] v_matches = Match_c.getManySR_MsOnR9800(this);


Match_c  v_match = null;
for ( int i37236 = 0; i37236 < v_matches.length; i37236++)
{
  v_match = v_matches[i37236] ;

if (v_match != null) {
v_match.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SearchParticipant_c v_participant = SearchParticipant_c.getOneSP_SPOnR9802(this);


if ( (  (v_participant != null)) )
{

this.unrelateAcrossR9802From(v_participant);



}

SearchEngine_c v_engine = SearchEngine_c.getOneSEN_EOnR9503(this);


if ( (  (v_engine != null)) )
{

this.unrelateAcrossR9503From(v_engine);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Search Result
