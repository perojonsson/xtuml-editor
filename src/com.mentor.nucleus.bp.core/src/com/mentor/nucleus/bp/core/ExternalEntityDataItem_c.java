      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ExternalEntityDataItem_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_EXTERNAL_ENTITY_DATA_ITEM extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ExternalEntityDataItem_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ExternalEntityDataItem_c(ModelRoot modelRoot,
       java.util.UUID         p_m_eedi_id,
       java.util.UUID         p_m_ee_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
       //extract 28 bit value only            
       m_eedi_idLongBased = 0xfffffff & p_m_eedi_id.getLeastSignificantBits();
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
    setUniqueId(m_eedi_id);
    Object [] key = {m_eedi_id,m_ee_id};
    addInstanceToMap(key);
  }
  static public ExternalEntityDataItem_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_eedi_id,
       java.util.UUID         p_m_ee_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
      ExternalEntityDataItem_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_eedi_id,p_m_ee_id};
          new_inst = (ExternalEntityDataItem_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
       //extract 28 bit value only            
       new_inst.m_eedi_idLongBased = 0xfffffff & p_m_eedi_id.getLeastSignificantBits();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ExternalEntityDataItem_c(modelRoot,
p_m_eedi_id,
p_m_ee_id,
p_m_name,
p_m_descrip,
p_m_dt_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ExternalEntityDataItem_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_eedi_id,
       java.util.UUID         p_m_ee_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_dt_id){
    InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
    ExternalEntityDataItem_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_eedi_id
        ,
        p_m_ee_id
            };
        source = (ExternalEntityDataItem_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_eedi_id = IdAssigner.preprocessUUID(p_m_eedi_id);
       //extract 28 bit value only            
       source.m_eedi_idLongBased = 0xfffffff & p_m_eedi_id.getLeastSignificantBits();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ee_id = IdAssigner.preprocessUUID(p_m_ee_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ExternalEntityDataItem_c new_inst = new ExternalEntityDataItem_c(modelRoot,
p_m_eedi_id,
p_m_ee_id,
p_m_name,
p_m_descrip,
p_m_dt_id
);
    return new_inst;
  }
  public ExternalEntityDataItem_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_eedi_id = idAssigner.createUUID();
     m_name = "";   
     m_descrip = "";   
     m_dt_id = IdAssigner.NULL_UUID;   
     m_ee_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_eedi_id);
    Object [] key = {m_eedi_id,m_ee_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_eedi_id,m_ee_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_eedi_id !=  p_newKey ){
	
		m_eedi_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ExternalEntityDataItem_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ExternalEntityDataItem_c)) {
           return false;
       }
       
       ExternalEntityDataItem_c me = (ExternalEntityDataItem_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getEedi_id()) || IdAssigner.NULL_UUID.equals(((ExternalEntityDataItem_c)elem).getEedi_id())) && this != elem)) {
      	return false;
      }
      if (!getEedi_id().equals(((ExternalEntityDataItem_c)elem).getEedi_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getEe_id()) || IdAssigner.NULL_UUID.equals(((ExternalEntityDataItem_c)elem).getEe_id())) && this != elem)) {
      	return false;
      }
      if (!getEe_id().equals(((ExternalEntityDataItem_c)elem).getEe_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ExternalEntityDataItem_c)) {
           return false;
       }
       
       ExternalEntityDataItem_c me = (ExternalEntityDataItem_c)elem;
      if (!getEedi_id().equals(((ExternalEntityDataItem_c)elem).getEedi_id())) return false;
      if (!getEe_idCachedValue().equals(((ExternalEntityDataItem_c)elem).getEe_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_eedi_id ;
  private long m_eedi_idLongBased ;
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_dt_id ;
  private java.util.UUID         m_ee_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataType_c IsDefinedByDataType ;
public void relateAcrossR15To(DataType_c target)
{
	relateAcrossR15To(target, true);
}
public void relateAcrossR15To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDefinedByDataType) return;  // already related

    if ( IsDefinedByDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDefinedByDataType != null) {
        UmlProblem.removeXtUMLProblem(this, IsDefinedByDataType);
    
        IsDefinedByDataType.clearBackPointerR15To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ExternalEntityDataItem_c.relateAcrossR15To(DataType_c target)", 
			"Relate performed across R15 from External Entity Data Item to Data Type without unrelate of prior instance.");  
		}
    }
                
    	IsDefinedByDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR15To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "15", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR15From(DataType_c target)
{
	unrelateAcrossR15From(target, true);
}
public void unrelateAcrossR15From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDefinedByDataType == null) return;  // already unrelated
	
	if (target != IsDefinedByDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R15", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR15To(this);
    }
    

      if(IsDefinedByDataType != null) {
      
        m_dt_id = IsDefinedByDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = IsDefinedByDataType.getDt_idCachedValue();
        }       
        IsDefinedByDataType = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "15", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ExternalEntityDataItem_c getOneS_EEDIOnR15(DataType_c [] targets)
{
    return getOneS_EEDIOnR15(targets, null);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(DataType_c [] targets, ClassQueryInterface_c test)
{
    ExternalEntityDataItem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_EEDIOnR15(targets[i], test);
        }
    }

    return ret_val;
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(DataType_c target)
{
  return getOneS_EEDIOnR15(target, null);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(DataType_c target, boolean loadComponent)
{
    return getOneS_EEDIOnR15(target.getModelRoot(), target, null, loadComponent);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_EEDIOnR15(target.getModelRoot(), target, test);
  }
  return null;
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneS_EEDIOnR15(modelRoot, target, test, true);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR15(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  ExternalEntityDataItem_c result = null;
  
  result=find_getOneS_EEDIOnR15(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,ExternalEntityDataItem_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneS_EEDIOnR15(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static ExternalEntityDataItem_c find_getOneS_EEDIOnR15(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15) {
	    for ( int i = 0; i < target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.size(); ++i ) {
	      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c [] targets)
{
  return getManyS_EEDIsOnR15(targets, null);
}
public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c [] targets, boolean loadComponent)
{
  return getManyS_EEDIsOnR15(targets, null, loadComponent);
}
public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_EEDIsOnR15(targets, test, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ExternalEntityDataItem_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ExternalEntityDataItem_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15) {
	    for (int j = 0; j < targets[i].backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.size(); ++j) {
	      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)targets[i].backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ExternalEntityDataItem_c[] ret_set = new ExternalEntityDataItem_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ExternalEntityDataItem_c[0];
  }
  }

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c target)
{
  return getManyS_EEDIsOnR15(target, null);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c target, boolean loadComponent)
{
  return getManyS_EEDIsOnR15(target, null, loadComponent);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c target, ClassQueryInterface_c test)
{
	return getManyS_EEDIsOnR15(target, test, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR15(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ExternalEntityDataItem_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ExternalEntityDataItem_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15) {
    for (int i = 0; i < target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.size(); ++i) {
      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)target.backPointer_DefinesTheTypeOfExternalEntityDataItemDefinesTheTypeOf_R15.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ExternalEntityDataItem_c[] ret_set = new ExternalEntityDataItem_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ExternalEntityDataItem_c[0];
	}
  }


  
    
// referring navigation

ExternalEntity_c IsDataForExternalEntity ;
public void relateAcrossR11To(ExternalEntity_c target)
{
	relateAcrossR11To(target, true);
}
public void relateAcrossR11To(ExternalEntity_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsDataForExternalEntity) return;  // already related

    if ( IsDataForExternalEntity != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsDataForExternalEntity != null) {
    
        IsDataForExternalEntity.clearBackPointerR11To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ExternalEntityDataItem_c.relateAcrossR11To(ExternalEntity_c target)", 
			"Relate performed across R11 from External Entity Data Item to External Entity without unrelate of prior instance.");  
		}
    }
                
    	IsDataForExternalEntity = target ;
        if(IdAssigner.NULL_UUID.equals(target.getEe_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_ee_id = target.getEe_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR11To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "11", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR11From(ExternalEntity_c target)
{
	unrelateAcrossR11From(target, true);
}
public void unrelateAcrossR11From(ExternalEntity_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsDataForExternalEntity == null) return;  // already unrelated
	
	if (target != IsDataForExternalEntity) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R11", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR11To(this);
    }
    

      if(IsDataForExternalEntity != null) {
      
        m_ee_id = IsDataForExternalEntity.getEe_id();
        if(IdAssigner.NULL_UUID.equals(m_ee_id))
        {
          m_ee_id = IsDataForExternalEntity.getEe_idCachedValue();
        }       
        IsDataForExternalEntity = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "11", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ExternalEntity_c [] targets)
{
    return getOneS_EEDIOnR11(targets, null);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ExternalEntity_c [] targets, ClassQueryInterface_c test)
{
    ExternalEntityDataItem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_EEDIOnR11(targets[i], test);
        }
    }

    return ret_val;
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ExternalEntity_c target)
{
  return getOneS_EEDIOnR11(target, null);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ExternalEntity_c target, boolean loadComponent)
{
    return getOneS_EEDIOnR11(target.getModelRoot(), target, null, loadComponent);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ExternalEntity_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_EEDIOnR11(target.getModelRoot(), target, test);
  }
  return null;
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ModelRoot modelRoot, ExternalEntity_c target, ClassQueryInterface_c test)
{
	return getOneS_EEDIOnR11(modelRoot, target, test, true);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR11(ModelRoot modelRoot, ExternalEntity_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_EEDIOnR11(modelRoot,target,test);
}
private static ExternalEntityDataItem_c find_getOneS_EEDIOnR11(ModelRoot modelRoot, ExternalEntity_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11) {
	    for ( int i = 0; i < target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.size(); ++i ) {
	      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c [] targets)
{
  return getManyS_EEDIsOnR11(targets, null);
}
public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c [] targets, boolean loadComponent)
{
  return getManyS_EEDIsOnR11(targets, null, loadComponent);
}
public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_EEDIsOnR11(targets, test, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ExternalEntityDataItem_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11) {
	    for (int j = 0; j < targets[i].backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.size(); ++j) {
	      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)targets[i].backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ExternalEntityDataItem_c[] ret_set = new ExternalEntityDataItem_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ExternalEntityDataItem_c[0];
  }
  }

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c target)
{
  return getManyS_EEDIsOnR11(target, null);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c target, boolean loadComponent)
{
  return getManyS_EEDIsOnR11(target, null, loadComponent);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c target, ClassQueryInterface_c test)
{
	return getManyS_EEDIsOnR11(target, test, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR11(ExternalEntity_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ExternalEntityDataItem_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11) {
    for (int i = 0; i < target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.size(); ++i) {
      ExternalEntityDataItem_c source = (ExternalEntityDataItem_c)target.backPointer_CanBeAccessedSynchronouslyViaExternalEntityDataItemCanBeAccessedSynchronouslyVia_R11.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ExternalEntityDataItem_c[] ret_set = new ExternalEntityDataItem_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ExternalEntityDataItem_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SmToEeDataItemAccess_c> backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423 = new ArrayList<SmToEeDataItemAccess_c>();

public void setSmToEeDataItemAccessOrderInChildListR423(SmToEeDataItemAccess_c target, int index) {
	unrelateAcrossR423From(target);
	SmToEeDataItemAccess_c[] elements = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR423(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR423From((SmToEeDataItemAccess_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR423To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR423To((SmToEeDataItemAccess_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR423To(SmToEeDataItemAccess_c target)
{
  if (target != null) {
    target.relateAcrossR423To(this, true) ;
  }
}

public void relateAcrossR423To(SmToEeDataItemAccess_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR423To(this, notifyChanges) ;
  }
}

public void setBackPointerR423To(SmToEeDataItemAccess_c target)
{
  	synchronized (backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423) {
		backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423.add(target);
	}
}

public void unrelateAcrossR423From(SmToEeDataItemAccess_c target)
{
  if (target != null) {
    target.unrelateAcrossR423From(this, true) ;
  }
}

public void unrelateAcrossR423From(SmToEeDataItemAccess_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR423From(this, notifyChanges) ;
  }
}

public void clearBackPointerR423To(SmToEeDataItemAccess_c target)
{
  synchronized (backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423) {
	    backPointer_IsAccessedBySmToEeDataItemAccessIsAccessedBy_R423.remove(target);
	}
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR423(SmToEeDataItemAccess_c [] targets)
{
    return getOneS_EEDIOnR423(targets, null);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR423(SmToEeDataItemAccess_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_EEDIOnR423(targets, test, true);
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR423(SmToEeDataItemAccess_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ExternalEntityDataItem_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ExternalEntityDataItem_c candidate_val = getOneS_EEDIOnR423(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_EEDIOnR423(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ExternalEntityDataItem_c getOneS_EEDIOnR423(SmToEeDataItemAccess_c target)
{
	return getOneS_EEDIOnR423(target, true);
}
public static ExternalEntityDataItem_c getOneS_EEDIOnR423(SmToEeDataItemAccess_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.RepresentsAccessOfExternalEntityDataItem ;
  } else {
    return null;
  }
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_EEDIsOnR423(targets, test, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ExternalEntityDataItem_c[0];
  
  
  LinkedHashSet<ExternalEntityDataItem_c> elementsSet = new LinkedHashSet<ExternalEntityDataItem_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].RepresentsAccessOfExternalEntityDataItem == null)
	  targets[i].loadProxy();
    ExternalEntityDataItem_c associate = targets[i].RepresentsAccessOfExternalEntityDataItem;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ExternalEntityDataItem_c[] result = new ExternalEntityDataItem_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c [] targets)
{
  return getManyS_EEDIsOnR423(targets, null);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToEeDataItemAccess_c [] targetArray = new SmToEeDataItemAccess_c[1];
    targetArray[0] = target;
    return getManyS_EEDIsOnR423(targetArray, test, loadComponent);
  } else {
    ExternalEntityDataItem_c [] result = new ExternalEntityDataItem_c [0] ;
    return result ;
  }
  
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c target,
    ClassQueryInterface_c test)
{
    return getManyS_EEDIsOnR423(target, null, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c target)
{
    return getManyS_EEDIsOnR423(target, null, true);
}

public static ExternalEntityDataItem_c [] getManyS_EEDIsOnR423(SmToEeDataItemAccess_c target, boolean loadComponent)
{
    return getManyS_EEDIsOnR423(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsDefinedByDataType == null) {          
      // R15
      DataType_c relInst56533 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56533 == null) {
      			relInst56533 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst56533 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56533 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst56533 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56533 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56533) && !isProxy())) {
	      relInst56533.relateAcrossR15To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsDataForExternalEntity == null) {          
      // R11
      ExternalEntity_c relInst56534 = (ExternalEntity_c) baseRoot.getInstanceList(ExternalEntity_c.class).get(new Object[] {m_ee_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56534 == null) {
      			relInst56534 = (ExternalEntity_c) Ooaofooa.getDefaultInstance().getInstanceList(ExternalEntity_c.class).get(new Object[] {m_ee_id});
      		}
			if (relInst56534 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56534 = (ExternalEntity_c) roots[i].getInstanceList(ExternalEntity_c.class).get(new Object[] {m_ee_id});
					if (relInst56534 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56534 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56534) && !isProxy())) {
	      relInst56534.relateAcrossR11To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R15
      // S_DT
		  inst=IsDefinedByDataType;
			unrelateAcrossR15From(IsDefinedByDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R11
      // S_EE
		  inst=IsDataForExternalEntity;
			unrelateAcrossR11From(IsDataForExternalEntity, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ExternalEntityDataItem_c inst = (ExternalEntityDataItem_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ExternalEntityDataItem_c ExternalEntityDataItemInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ExternalEntityDataItem_c result=findExternalEntityDataItemInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ExternalEntityDataItem_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findExternalEntityDataItemInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ExternalEntityDataItem_c findExternalEntityDataItemInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ExternalEntityDataItem_c x = (ExternalEntityDataItem_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ExternalEntityDataItem_c ExternalEntityDataItemInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ExternalEntityDataItemInstance(modelRoot,test,true);
  }
  
  public static ExternalEntityDataItem_c ExternalEntityDataItemInstance(ModelRoot modelRoot)
  {
	 return ExternalEntityDataItemInstance(modelRoot,null,true);
  }

  public static ExternalEntityDataItem_c [] ExternalEntityDataItemInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ExternalEntityDataItem_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ExternalEntityDataItem_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ExternalEntityDataItem_c x = (ExternalEntityDataItem_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ExternalEntityDataItem_c[] ret_set = new ExternalEntityDataItem_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ExternalEntityDataItem_c[0];
			}		
		} 
  }
  public static ExternalEntityDataItem_c [] ExternalEntityDataItemInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ExternalEntityDataItemInstances(modelRoot,test,true);
  }
  public static ExternalEntityDataItem_c [] ExternalEntityDataItemInstances(ModelRoot modelRoot)
  {
	return ExternalEntityDataItemInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the External Entity Data Item.dispose call: ";
	DataType_c testR15Inst = DataType_c.getOneS_DTOnR15(this, false);

	if ( testR15Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "15 ";
	}
	ExternalEntity_c testR11Inst = ExternalEntity_c.getOneS_EEOnR11(this, false);

	if ( testR11Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "11 ";
	}
	SmToEeDataItemAccess_c testR423Inst = SmToEeDataItemAccess_c.getOneCA_SMEEDOnR423(this, false);

	if ( testR423Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "423 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "External Entity Data Item", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("eedi_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      if(attributeName.equals("ee_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getEedi_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getEe_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getEe_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getEedi_idLongBased()
  {
    if(m_eedi_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_eedi_id)){
    	return 0xfffffff & m_eedi_id.getLeastSignificantBits();
    }
    return m_eedi_idLongBased ;
  }
  public java.util.UUID getEedi_id()
  {
    return m_eedi_id ;
  }


  public void setEedi_id(java.util.UUID newValue)
  {
   m_eedi_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDt_idLongBased()
  {
    if ( IsDefinedByDataType != null )
    {
      return IsDefinedByDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( IsDefinedByDataType != null )
    {
      return IsDefinedByDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dt_id)){
	        return;
	    }
	}else if(m_dt_id != null){
	    if(m_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id", m_dt_id, newValue,true); 
   m_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getEe_idLongBased()
  {
    if ( IsDataForExternalEntity != null )
    {
      return IsDataForExternalEntity.getEe_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getEe_id()
  {
    if ( IsDataForExternalEntity != null )
    {
      return IsDataForExternalEntity.getEe_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getEe_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_ee_id) )
      return m_ee_id;
    else
      return getEe_id();
  }
  
  public void setEe_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ee_id)){
	        return;
	    }
	}else if(m_ee_id != null){
	    if(m_ee_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ee_id", m_ee_id, newValue,true); 
   m_ee_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "External Entity Data Item", //$NON-NLS-1$
	  " Operation entered: External Entity Data Item::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ExternalEntityDataItem_c [] objs = ExternalEntityDataItem_c.ExternalEntityDataItemInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "External Entity Data Item", //$NON-NLS-1$
	  " Operation entered: External Entity Data Item::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ExternalEntityDataItem_c_test56536_c implements ClassQueryInterface_c
    {
	  ExternalEntityDataItem_c_test56536_c( java.util.UUID            p56537, java.util.UUID            p56538 ) {
	       m_p56537 = p56537; 
m_p56538 = p56538;
	  }
	  private java.util.UUID             m_p56537; private java.util.UUID             m_p56538; 
	  public boolean evaluate (Object candidate)
	  {
	      ExternalEntityDataItem_c selected = (ExternalEntityDataItem_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEedi_id().equals(m_p56537)) & (selected.getEe_id().equals(m_p56538));
	      return retval;
	  }
    }

    ExternalEntityDataItem_c [] objs56535 = 
    ExternalEntityDataItem_c.ExternalEntityDataItemInstances(modelRoot, new ExternalEntityDataItem_c_test56536_c(getEedi_id(), getEe_id())) ;

    if ( (  (objs56535.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "External Entity Data Item", //$NON-NLS-1$
           "Consistency: Object: External Entity Data Item: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56535.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: External Entity Data Item: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56535.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56535.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "External Entity Data Item", //$NON-NLS-1$
           "Consistency: Object: External Entity Data Item: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56535.length )  + " EEdi_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: External Entity Data Item: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56535.length )  + " EEdi_ID: " + "Not Printable"  + " EE_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // External Entity Data Item is a referring class in association: rel.Numb = 15
          // The participating class is: Data Type
    class DataType_c_test56542_c implements ClassQueryInterface_c
    {
	  DataType_c_test56542_c( java.util.UUID            p56543 ) {
	  m_p56543 = p56543;
	  }
	  private java.util.UUID             m_p56543; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56543));
	      return retval;
	  }
    }

    DataType_c [] objs56541 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test56542_c(getDt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56541.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "External Entity Data Item", //$NON-NLS-1$
           "Consistency: Object: External Entity Data Item: Association: 15: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56541.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: External Entity Data Item: Association: 15: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56541.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // External Entity Data Item is a referring class in association: rel.Numb = 11
          // The participating class is: External Entity
    class ExternalEntity_c_test56545_c implements ClassQueryInterface_c
    {
	  ExternalEntity_c_test56545_c( java.util.UUID            p56546 ) {
	  m_p56546 = p56546;
	  }
	  private java.util.UUID             m_p56546; 
	  public boolean evaluate (Object candidate)
	  {
	      ExternalEntity_c selected = (ExternalEntity_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEe_id().equals(m_p56546));
	      return retval;
	  }
    }

    ExternalEntity_c [] objs56544 = 
    ExternalEntity_c.ExternalEntityInstances(modelRoot, new ExternalEntity_c_test56545_c(getEe_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56544.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "External Entity Data Item", //$NON-NLS-1$
           "Consistency: Object: External Entity Data Item: Association: 11: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56544.length )  + " EE_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: External Entity Data Item: Association: 11: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56544.length )  + " EE_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // External Entity Data Item is a participating class in association: rel.Numb = 423
             // Object: SM to EE Data Item Access
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "External Entity Data Item", " Operation entered: ExternalEntityDataItem::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR15(this);


this.unrelateAcrossR15From(v_dt);


ExternalEntity_c v_ee = ExternalEntity_c.getOneS_EEOnR11(this);


this.unrelateAcrossR11From(v_ee);


SmToEeDataItemAccess_c [] v_smeeds = SmToEeDataItemAccess_c.getManyCA_SMEEDsOnR423(this);


SmToEeDataItemAccess_c  v_smeed = null;
for ( int i55015 = 0; i55015 < v_smeeds.length; i55015++)
{
  v_smeed = v_smeeds[i55015] ;

if (v_smeed != null) {
v_smeed.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Isallowedtype(final String       p_Typename)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "External Entity Data Item", " Operation entered: ExternalEntityDataItem::Isallowedtype") ; 
               final ModelRoot modelRoot = getModelRoot();
Domain_c v_domain = Domain_c.getOneS_DOMOnR8(ExternalEntity_c.getOneS_EEOnR11(this));


return DataType_c.Isallowedparametertype(modelRoot			    
,v_domain.Get_ooa_id()			    
,p_Typename);



   } // End isAllowedType

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end External Entity Data Item
