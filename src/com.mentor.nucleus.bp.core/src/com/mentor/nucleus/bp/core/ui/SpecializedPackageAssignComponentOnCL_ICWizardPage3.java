package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SpecializedPackageAssignComponentOnCL_ICWizardPage3.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SpecializedPackageAssignComponentOnCL_ICWizardPage3
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo ComponentCombo;
	public Label ComponentLabel;

	// cache for user choices
	Component_c Component = null;
	Component_c[] ComponentInstances;

	/**
	 * Constructors for SpecializedPackageAssignComponentOnCL_ICWizardPage3.
	 */
	public SpecializedPackageAssignComponentOnCL_ICWizardPage3() {
		super("");
		init();
	}

	public SpecializedPackageAssignComponentOnCL_ICWizardPage3(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Assign Component");
		setDescription("Choose the component to reference");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		ComponentPackage_c v_Package = ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Package;

		// cache for context
		ComponentReference_c v_icomp = ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_icomp;

		ComponentPackage_c v_compPackage = ComponentPackage_c
				.getOneCP_CPOnR4605(v_icomp);

		if (((v_compPackage == null))) {

			Component_c v_container = Component_c.getOneC_COnR4205(v_icomp);

			if (((v_container != null))) {

				while (((v_compPackage == null))) {

					v_compPackage = ComponentPackage_c
							.getOneCP_CPOnR4604(v_container);

					v_container = Component_c
							.getOneC_COnR4202(ComponentInComponent_c
									.getOneCN_CICOnR4203(v_container));

				}

			}

		}

		Component_c v_component = Component_c.getOneC_COnR4201(v_icomp);

		java.util.UUID v_existingId = Gd_c.Null_unique_id();

		if ((v_component != null)) {

			v_existingId = v_component.getId();

		}

		if ((v_compPackage != null)) {

			SystemModel_c v_system = SystemModel_c
					.getOneS_SYSOnR4606(v_compPackage);

			if ((v_Package != null)) {

				// select related by where USER::selectOne
				Component_c[] v_ComponentInstances = Component_c
						.getManyC_CsOnR4604(v_Package);
				Component_c v_Component = null;
				int ComponentInstCount;
				int ComponentResultCount = 0;
				for (ComponentInstCount = 0; ComponentInstCount < v_ComponentInstances.length; ComponentInstCount++) {
					Component_c selected = v_ComponentInstances[ComponentInstCount];
					if (User_c.Selectone(selected.getId())
							&& !selected.getId().equals(v_existingId)
							&& v_icomp.Canassigntocomp(selected.getId(), true)) {
						ComponentResultCount++;
					}
				}
				this.ComponentInstances = new Component_c[ComponentResultCount];
				ComponentResultCount = 0;
				for (ComponentInstCount = 0; ComponentInstCount < v_ComponentInstances.length; ComponentInstCount++) {
					Component_c selected = v_ComponentInstances[ComponentInstCount];
					if (User_c.Selectone(selected.getId())
							&& !selected.getId().equals(v_existingId)
							&& v_icomp.Canassigntocomp(selected.getId(), true)) {
						this.ComponentInstances[ComponentResultCount] = selected;
						ComponentResultCount++;
					}
				}
				ComponentCombo.removeAll();
				for (ComponentInstCount = 0; ComponentInstCount < ComponentResultCount; ComponentInstCount++)
					ComponentCombo
							.add(((Component_c) this.ComponentInstances[ComponentInstCount])
									.getLabel());
				if (ComponentResultCount == 1) {
					ComponentCombo.select(0);
					updateSelectedComponent();
				}

				if ((v_Component != null)) {

				}

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		ComponentLabel = new Label(composite, SWT.NONE);
		ComponentLabel.setText("Component");
		ComponentCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		ComponentCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		ComponentCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedComponent() {
		this.Component = ComponentInstances[ComponentCombo.getSelectionIndex()];
		((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Component = this.Component;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == ComponentCombo) {
			updateSelectedComponent();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Component == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Component = Component;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Component == null)
			return false;
		return true;
	}

}
