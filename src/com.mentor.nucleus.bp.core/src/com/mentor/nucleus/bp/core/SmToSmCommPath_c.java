      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToSmCommPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SM_TO_SM_COMM_PATH extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SmToSmCommPath_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SmToSmCommPath_c(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_osm_id,
       java.util.UUID         p_m_dsm_id,
       java.util.UUID         p_m_oiobj_id,
       java.util.UUID         p_m_diobj_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_osm_id = IdAssigner.preprocessUUID(p_m_osm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dsm_id = IdAssigner.preprocessUUID(p_m_dsm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_diobj_id = IdAssigner.preprocessUUID(p_m_diobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_oiobj_id = IdAssigner.preprocessUUID(p_m_oiobj_id);
        
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }
  static public SmToSmCommPath_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_osm_id,
       java.util.UUID         p_m_dsm_id,
       java.util.UUID         p_m_oiobj_id,
       java.util.UUID         p_m_diobj_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
      SmToSmCommPath_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_cpath_id};
          new_inst = (SmToSmCommPath_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_osm_id = IdAssigner.preprocessUUID(p_m_osm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dsm_id = IdAssigner.preprocessUUID(p_m_dsm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_diobj_id = IdAssigner.preprocessUUID(p_m_diobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_oiobj_id = IdAssigner.preprocessUUID(p_m_oiobj_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SmToSmCommPath_c(modelRoot,
p_m_cpath_id,
p_m_osm_id,
p_m_dsm_id,
p_m_oiobj_id,
p_m_diobj_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SmToSmCommPath_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_cpath_id,
       java.util.UUID         p_m_osm_id,
       java.util.UUID         p_m_dsm_id,
       java.util.UUID         p_m_oiobj_id,
       java.util.UUID         p_m_diobj_id){
    InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
    SmToSmCommPath_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_cpath_id
            };
        source = (SmToSmCommPath_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_osm_id = IdAssigner.preprocessUUID(p_m_osm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dsm_id = IdAssigner.preprocessUUID(p_m_dsm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_diobj_id = IdAssigner.preprocessUUID(p_m_diobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_oiobj_id = IdAssigner.preprocessUUID(p_m_oiobj_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SmToSmCommPath_c new_inst = new SmToSmCommPath_c(modelRoot,
p_m_cpath_id,
p_m_osm_id,
p_m_dsm_id,
p_m_oiobj_id,
p_m_diobj_id
);
    return new_inst;
  }
  public SmToSmCommPath_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_cpath_id = IdAssigner.NULL_UUID;   
     m_osm_id = IdAssigner.NULL_UUID;   
     m_dsm_id = IdAssigner.NULL_UUID;   
     m_diobj_id = IdAssigner.NULL_UUID;   
     m_oiobj_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_cpath_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_cpath_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_cpath_id !=  p_newKey ){
	
		m_cpath_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SmToSmCommPath_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SmToSmCommPath_c)) {
           return false;
       }
       
       SmToSmCommPath_c me = (SmToSmCommPath_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID.equals(((SmToSmCommPath_c)elem).getCpath_id())) && this != elem)) {
      	return false;
      }
      if (!getCpath_id().equals(((SmToSmCommPath_c)elem).getCpath_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SmToSmCommPath_c)) {
           return false;
       }
       
       SmToSmCommPath_c me = (SmToSmCommPath_c)elem;
      if (!getCpath_idCachedValue().equals(((SmToSmCommPath_c)elem).getCpath_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_cpath_id ;
  private java.util.UUID         m_osm_id ;
  private java.util.UUID         m_dsm_id ;
  private java.util.UUID         m_diobj_id ;
  private java.util.UUID         m_oiobj_id ;
      
// declare association references from this class
  
  
    
// referring navigation

CommunicationPath_c IsSupertypeCommunicationPath ;
public void relateAcrossR401To(CommunicationPath_c target)
{
	relateAcrossR401To(target, true);
}
public void relateAcrossR401To(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeCommunicationPath) return;  // already related

    if ( IsSupertypeCommunicationPath != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeCommunicationPath != null) {
    
        IsSupertypeCommunicationPath.clearBackPointerR401To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToSmCommPath_c.relateAcrossR401To(CommunicationPath_c target)", 
			"Relate performed across R401 from SM to SM Comm Path to Communication Path without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeCommunicationPath = target ;
        m_cpath_id = target.getCpath_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR401To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR401From(CommunicationPath_c target)
{
	unrelateAcrossR401From(target, true);
}
public void unrelateAcrossR401From(CommunicationPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeCommunicationPath == null) return;  // already unrelated
	
	if (target != IsSupertypeCommunicationPath) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R401", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR401To(this);
    }
    

      if(IsSupertypeCommunicationPath != null) {
      
        m_cpath_id = IsSupertypeCommunicationPath.getCpath_id();
        IsSupertypeCommunicationPath = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "401", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToSmCommPath_c getOneCA_SMSMCOnR401(CommunicationPath_c [] targets)
{
    return getOneCA_SMSMCOnR401(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMSMCOnR401(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(CommunicationPath_c target)
{
  return getOneCA_SMSMCOnR401(target, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(CommunicationPath_c target, boolean loadComponent)
{
    return getOneCA_SMSMCOnR401(target.getModelRoot(), target, null, loadComponent);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMSMCOnR401(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMSMCOnR401(modelRoot, target, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMSMCOnR401(modelRoot,target,test);
}
private static SmToSmCommPath_c find_getOneCA_SMSMCOnR401(ModelRoot modelRoot, CommunicationPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c [] targets)
{
  return getManyCA_SMSMCsOnR401(targets, null);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c [] targets, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR401(targets, null, loadComponent);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR401(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SmToSmCommPath_c source = (SmToSmCommPath_c)targets[i].backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToSmCommPath_c[0];
  }
  }

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c target)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMSMCsOnR401(targetArray);
  } else {
    SmToSmCommPath_c [] result = new SmToSmCommPath_c [0] ;
  return result ;
}
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR401(CommunicationPath_c target, boolean loadComponent)
{
  if (target != null) {
    CommunicationPath_c [] targetArray = new CommunicationPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMSMCsOnR401(targetArray, loadComponent);
  } else {
    SmToSmCommPath_c [] result = new SmToSmCommPath_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ImportedClass_c DestinationSmCanBeRepresentedByImportedClass ;
public void relateAcrossR414To(ImportedClass_c target)
{
	relateAcrossR414To(target, true);
}
public void relateAcrossR414To(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == DestinationSmCanBeRepresentedByImportedClass) return;  // already related

    if ( DestinationSmCanBeRepresentedByImportedClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (DestinationSmCanBeRepresentedByImportedClass != null) {
    
        DestinationSmCanBeRepresentedByImportedClass.clearBackPointerR414To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToSmCommPath_c.relateAcrossR414To(ImportedClass_c target)", 
			"Relate performed across R414 from SM to SM Comm Path to Imported Class without unrelate of prior instance.");  
		}
    }
                
    	DestinationSmCanBeRepresentedByImportedClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getIobj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_diobj_id = target.getIobj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR414To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "414", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR414From(ImportedClass_c target)
{
	unrelateAcrossR414From(target, true);
}
public void unrelateAcrossR414From(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (DestinationSmCanBeRepresentedByImportedClass == null) return;  // already unrelated
	
	if (target != DestinationSmCanBeRepresentedByImportedClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R414", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR414To(this);
    }
    

      if(DestinationSmCanBeRepresentedByImportedClass != null) {
      
        m_diobj_id = DestinationSmCanBeRepresentedByImportedClass.getIobj_id();
        if(IdAssigner.NULL_UUID.equals(m_diobj_id))
        {
          m_diobj_id = DestinationSmCanBeRepresentedByImportedClass.getIobj_idCachedValue();
        }       
        DestinationSmCanBeRepresentedByImportedClass = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "414", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ImportedClass_c [] targets)
{
    return getOneCA_SMSMCOnR414(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMSMCOnR414(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ImportedClass_c target)
{
  return getOneCA_SMSMCOnR414(target, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ImportedClass_c target, boolean loadComponent)
{
    return getOneCA_SMSMCOnR414(target.getModelRoot(), target, null, loadComponent);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMSMCOnR414(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMSMCOnR414(modelRoot, target, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR414(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMSMCOnR414(modelRoot,target,test);
}
private static SmToSmCommPath_c find_getOneCA_SMSMCOnR414(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414) {
	    for ( int i = 0; i < target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.size(); ++i ) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c [] targets)
{
  return getManyCA_SMSMCsOnR414(targets, null);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c [] targets, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR414(targets, null, loadComponent);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR414(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414) {
	    for (int j = 0; j < targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.size(); ++j) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToSmCommPath_c[0];
  }
  }

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c target)
{
  return getManyCA_SMSMCsOnR414(target, null);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c target, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR414(target, null, loadComponent);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR414(target, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR414(ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414) {
    for (int i = 0; i < target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.size(); ++i) {
      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R414.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToSmCommPath_c[0];
	}
  }


  
    
// referring navigation

ImportedClass_c OriginationSmCanBeRepresentedByImportedClass ;
public void relateAcrossR424To(ImportedClass_c target)
{
	relateAcrossR424To(target, true);
}
public void relateAcrossR424To(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OriginationSmCanBeRepresentedByImportedClass) return;  // already related

    if ( OriginationSmCanBeRepresentedByImportedClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (OriginationSmCanBeRepresentedByImportedClass != null) {
    
        OriginationSmCanBeRepresentedByImportedClass.clearBackPointerR424To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToSmCommPath_c.relateAcrossR424To(ImportedClass_c target)", 
			"Relate performed across R424 from SM to SM Comm Path to Imported Class without unrelate of prior instance.");  
		}
    }
                
    	OriginationSmCanBeRepresentedByImportedClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getIobj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_oiobj_id = target.getIobj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR424To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "424", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR424From(ImportedClass_c target)
{
	unrelateAcrossR424From(target, true);
}
public void unrelateAcrossR424From(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OriginationSmCanBeRepresentedByImportedClass == null) return;  // already unrelated
	
	if (target != OriginationSmCanBeRepresentedByImportedClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R424", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR424To(this);
    }
    

      if(OriginationSmCanBeRepresentedByImportedClass != null) {
      
        m_oiobj_id = OriginationSmCanBeRepresentedByImportedClass.getIobj_id();
        if(IdAssigner.NULL_UUID.equals(m_oiobj_id))
        {
          m_oiobj_id = OriginationSmCanBeRepresentedByImportedClass.getIobj_idCachedValue();
        }       
        OriginationSmCanBeRepresentedByImportedClass = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "424", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ImportedClass_c [] targets)
{
    return getOneCA_SMSMCOnR424(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMSMCOnR424(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ImportedClass_c target)
{
  return getOneCA_SMSMCOnR424(target, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ImportedClass_c target, boolean loadComponent)
{
    return getOneCA_SMSMCOnR424(target.getModelRoot(), target, null, loadComponent);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMSMCOnR424(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMSMCOnR424(modelRoot, target, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR424(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMSMCOnR424(modelRoot,target,test);
}
private static SmToSmCommPath_c find_getOneCA_SMSMCOnR424(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424) {
	    for ( int i = 0; i < target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.size(); ++i ) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c [] targets)
{
  return getManyCA_SMSMCsOnR424(targets, null);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c [] targets, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR424(targets, null, loadComponent);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR424(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424) {
	    for (int j = 0; j < targets[i].backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.size(); ++j) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)targets[i].backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToSmCommPath_c[0];
  }
  }

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c target)
{
  return getManyCA_SMSMCsOnR424(target, null);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c target, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR424(target, null, loadComponent);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR424(target, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR424(ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424) {
    for (int i = 0; i < target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.size(); ++i) {
      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheOriginationSmForSmToSmCommPathRepresentsTheOriginationSmFor_R424.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToSmCommPath_c[0];
	}
  }


  
    
// referring navigation

StateMachine_c OriginatesFromStateMachine ;
public void relateAcrossR406To(StateMachine_c target)
{
	relateAcrossR406To(target, true);
}
public void relateAcrossR406To(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OriginatesFromStateMachine) return;  // already related

    if ( OriginatesFromStateMachine != target ) {
    
    Object oldKey = getInstanceKey();

    if (OriginatesFromStateMachine != null) {
    
        OriginatesFromStateMachine.clearBackPointerR406To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToSmCommPath_c.relateAcrossR406To(StateMachine_c target)", 
			"Relate performed across R406 from SM to SM Comm Path to State Machine without unrelate of prior instance.");  
		}
    }
                
    	OriginatesFromStateMachine = target ;
        m_osm_id = target.getSm_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR406To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "406", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR406From(StateMachine_c target)
{
	unrelateAcrossR406From(target, true);
}
public void unrelateAcrossR406From(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OriginatesFromStateMachine == null) return;  // already unrelated
	
	if (target != OriginatesFromStateMachine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R406", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR406To(this);
    }
    

      if(OriginatesFromStateMachine != null) {
      
        m_osm_id = OriginatesFromStateMachine.getSm_id();
        OriginatesFromStateMachine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "406", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToSmCommPath_c getOneCA_SMSMCOnR406(StateMachine_c [] targets)
{
    return getOneCA_SMSMCOnR406(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(StateMachine_c [] targets, ClassQueryInterface_c test)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMSMCOnR406(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(StateMachine_c target)
{
  return getOneCA_SMSMCOnR406(target, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(StateMachine_c target, boolean loadComponent)
{
    return getOneCA_SMSMCOnR406(target.getModelRoot(), target, null, loadComponent);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMSMCOnR406(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMSMCOnR406(modelRoot, target, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR406(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMSMCOnR406(modelRoot,target,test);
}
private static SmToSmCommPath_c find_getOneCA_SMSMCOnR406(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_OriginatesSmToSmCommPathOriginates_R406) {
	    for ( int i = 0; i < target.backPointer_OriginatesSmToSmCommPathOriginates_R406.size(); ++i ) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_OriginatesSmToSmCommPathOriginates_R406.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c [] targets)
{
  return getManyCA_SMSMCsOnR406(targets, null);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c [] targets, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR406(targets, null, loadComponent);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR406(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_OriginatesSmToSmCommPathOriginates_R406) {
	    for (int j = 0; j < targets[i].backPointer_OriginatesSmToSmCommPathOriginates_R406.size(); ++j) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)targets[i].backPointer_OriginatesSmToSmCommPathOriginates_R406.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToSmCommPath_c[0];
  }
  }

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c target)
{
  return getManyCA_SMSMCsOnR406(target, null);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c target, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR406(target, null, loadComponent);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR406(target, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR406(StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_OriginatesSmToSmCommPathOriginates_R406) {
    for (int i = 0; i < target.backPointer_OriginatesSmToSmCommPathOriginates_R406.size(); ++i) {
      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_OriginatesSmToSmCommPathOriginates_R406.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToSmCommPath_c[0];
	}
  }


  
    
// referring navigation

StateMachine_c ShowsEventCommunicationToStateMachine ;
public void relateAcrossR407To(StateMachine_c target)
{
	relateAcrossR407To(target, true);
}
public void relateAcrossR407To(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ShowsEventCommunicationToStateMachine) return;  // already related

    if ( ShowsEventCommunicationToStateMachine != target ) {
    
    Object oldKey = getInstanceKey();

    if (ShowsEventCommunicationToStateMachine != null) {
    
        ShowsEventCommunicationToStateMachine.clearBackPointerR407To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToSmCommPath_c.relateAcrossR407To(StateMachine_c target)", 
			"Relate performed across R407 from SM to SM Comm Path to State Machine without unrelate of prior instance.");  
		}
    }
                
    	ShowsEventCommunicationToStateMachine = target ;
        m_dsm_id = target.getSm_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR407To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "407", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR407From(StateMachine_c target)
{
	unrelateAcrossR407From(target, true);
}
public void unrelateAcrossR407From(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ShowsEventCommunicationToStateMachine == null) return;  // already unrelated
	
	if (target != ShowsEventCommunicationToStateMachine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R407", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR407To(this);
    }
    

      if(ShowsEventCommunicationToStateMachine != null) {
      
        m_dsm_id = ShowsEventCommunicationToStateMachine.getSm_id();
        ShowsEventCommunicationToStateMachine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "407", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToSmCommPath_c getOneCA_SMSMCOnR407(StateMachine_c [] targets)
{
    return getOneCA_SMSMCOnR407(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(StateMachine_c [] targets, ClassQueryInterface_c test)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMSMCOnR407(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(StateMachine_c target)
{
  return getOneCA_SMSMCOnR407(target, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(StateMachine_c target, boolean loadComponent)
{
    return getOneCA_SMSMCOnR407(target.getModelRoot(), target, null, loadComponent);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMSMCOnR407(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMSMCOnR407(modelRoot, target, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR407(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMSMCOnR407(modelRoot,target,test);
}
private static SmToSmCommPath_c find_getOneCA_SMSMCOnR407(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407) {
	    for ( int i = 0; i < target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.size(); ++i ) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c [] targets)
{
  return getManyCA_SMSMCsOnR407(targets, null);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c [] targets, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR407(targets, null, loadComponent);
}
public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR407(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToSmCommPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407) {
	    for (int j = 0; j < targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.size(); ++j) {
	      SmToSmCommPath_c source = (SmToSmCommPath_c)targets[i].backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToSmCommPath_c[0];
  }
  }

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c target)
{
  return getManyCA_SMSMCsOnR407(target, null);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c target, boolean loadComponent)
{
  return getManyCA_SMSMCsOnR407(target, null, loadComponent);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR407(target, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR407(StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToSmCommPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407) {
    for (int i = 0; i < target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.size(); ++i) {
      SmToSmCommPath_c source = (SmToSmCommPath_c)target.backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToSmCommPath_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SmToSmEventComm_c> backPointer_CarriesSmToSmEventCommCarries_R408 = new ArrayList<SmToSmEventComm_c>();

public void setSmToSmEventCommOrderInChildListR408(SmToSmEventComm_c target, int index) {
	unrelateAcrossR408From(target);
	SmToSmEventComm_c[] elements = SmToSmEventComm_c.getManyCA_SMSMEsOnR408(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR408From((SmToSmEventComm_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR408To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR408To((SmToSmEventComm_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR408To(SmToSmEventComm_c target)
{
  if (target != null) {
    target.relateAcrossR408To(this, true) ;
  }
}

public void relateAcrossR408To(SmToSmEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR408To(this, notifyChanges) ;
  }
}

public void setBackPointerR408To(SmToSmEventComm_c target)
{
  	synchronized (backPointer_CarriesSmToSmEventCommCarries_R408) {
		backPointer_CarriesSmToSmEventCommCarries_R408.add(target);
	}
}

public void unrelateAcrossR408From(SmToSmEventComm_c target)
{
  if (target != null) {
    target.unrelateAcrossR408From(this, true) ;
  }
}

public void unrelateAcrossR408From(SmToSmEventComm_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR408From(this, notifyChanges) ;
  }
}

public void clearBackPointerR408To(SmToSmEventComm_c target)
{
  synchronized (backPointer_CarriesSmToSmEventCommCarries_R408) {
	    backPointer_CarriesSmToSmEventCommCarries_R408.remove(target);
	}
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR408(SmToSmEventComm_c [] targets)
{
    return getOneCA_SMSMCOnR408(targets, null);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR408(SmToSmEventComm_c [] targets, ClassQueryInterface_c test)
{
    return getOneCA_SMSMCOnR408(targets, test, true);
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR408(SmToSmEventComm_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SmToSmCommPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SmToSmCommPath_c candidate_val = getOneCA_SMSMCOnR408(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCA_SMSMCOnR408(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SmToSmCommPath_c getOneCA_SMSMCOnR408(SmToSmEventComm_c target)
{
	return getOneCA_SMSMCOnR408(target, true);
}
public static SmToSmCommPath_c getOneCA_SMSMCOnR408(SmToSmEventComm_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsCarriedBySmToSmCommPath ;
  } else {
    return null;
  }
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCA_SMSMCsOnR408(targets, test, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SmToSmCommPath_c[0];
  
  
  LinkedHashSet<SmToSmCommPath_c> elementsSet = new LinkedHashSet<SmToSmCommPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsCarriedBySmToSmCommPath == null)
	  targets[i].loadProxy();
    SmToSmCommPath_c associate = targets[i].IsCarriedBySmToSmCommPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SmToSmCommPath_c[] result = new SmToSmCommPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c [] targets)
{
  return getManyCA_SMSMCsOnR408(targets, null);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToSmEventComm_c [] targetArray = new SmToSmEventComm_c[1];
    targetArray[0] = target;
    return getManyCA_SMSMCsOnR408(targetArray, test, loadComponent);
  } else {
    SmToSmCommPath_c [] result = new SmToSmCommPath_c [0] ;
    return result ;
  }
  
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c target,
    ClassQueryInterface_c test)
{
    return getManyCA_SMSMCsOnR408(target, null, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c target)
{
    return getManyCA_SMSMCsOnR408(target, null, true);
}

public static SmToSmCommPath_c [] getManyCA_SMSMCsOnR408(SmToSmEventComm_c target, boolean loadComponent)
{
    return getManyCA_SMSMCsOnR408(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R401
      CommunicationPath_c relInst57328 = (CommunicationPath_c) baseRoot.getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57328 == null) {
      			relInst57328 = (CommunicationPath_c) Ooaofooa.getDefaultInstance().getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
      		}
			if (relInst57328 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57328 = (CommunicationPath_c) roots[i].getInstanceList(CommunicationPath_c.class).get(new Object[] {m_cpath_id});
					if (relInst57328 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57328 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57328) && !isProxy())) {
	      relInst57328.relateAcrossR401To(this, notifyChanges);
	  }
	  }
	          

	if (DestinationSmCanBeRepresentedByImportedClass == null) {          
      // R414
      ImportedClass_c relInst57329 = (ImportedClass_c) baseRoot.getInstanceList(ImportedClass_c.class).get(new Object[] {m_diobj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57329 == null) {
      			relInst57329 = (ImportedClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ImportedClass_c.class).get(new Object[] {m_diobj_id});
      		}
			if (relInst57329 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57329 = (ImportedClass_c) roots[i].getInstanceList(ImportedClass_c.class).get(new Object[] {m_diobj_id});
					if (relInst57329 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57329 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57329) && !isProxy())) {
	      relInst57329.relateAcrossR414To(this, notifyChanges);
	  }
	  }
	}
	          

	if (OriginationSmCanBeRepresentedByImportedClass == null) {          
      // R424
      ImportedClass_c relInst57330 = (ImportedClass_c) baseRoot.getInstanceList(ImportedClass_c.class).get(new Object[] {m_oiobj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57330 == null) {
      			relInst57330 = (ImportedClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ImportedClass_c.class).get(new Object[] {m_oiobj_id});
      		}
			if (relInst57330 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57330 = (ImportedClass_c) roots[i].getInstanceList(ImportedClass_c.class).get(new Object[] {m_oiobj_id});
					if (relInst57330 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57330 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57330) && !isProxy())) {
	      relInst57330.relateAcrossR424To(this, notifyChanges);
	  }
	  }
	}
	          

	if (OriginatesFromStateMachine == null) {          
      // R406
      StateMachine_c relInst57331 = (StateMachine_c) baseRoot.getInstanceList(StateMachine_c.class).get(new Object[] {m_osm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57331 == null) {
      			relInst57331 = (StateMachine_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachine_c.class).get(new Object[] {m_osm_id});
      		}
			if (relInst57331 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57331 = (StateMachine_c) roots[i].getInstanceList(StateMachine_c.class).get(new Object[] {m_osm_id});
					if (relInst57331 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57331 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57331) && !isProxy())) {
	      relInst57331.relateAcrossR406To(this, notifyChanges);
	  }
	  }
	}
	          

	if (ShowsEventCommunicationToStateMachine == null) {          
      // R407
      StateMachine_c relInst57332 = (StateMachine_c) baseRoot.getInstanceList(StateMachine_c.class).get(new Object[] {m_dsm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57332 == null) {
      			relInst57332 = (StateMachine_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachine_c.class).get(new Object[] {m_dsm_id});
      		}
			if (relInst57332 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57332 = (StateMachine_c) roots[i].getInstanceList(StateMachine_c.class).get(new Object[] {m_dsm_id});
					if (relInst57332 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57332 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57332) && !isProxy())) {
	      relInst57332.relateAcrossR407To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R401
      // CA_COMM
		  inst=IsSupertypeCommunicationPath;
			unrelateAcrossR401From(IsSupertypeCommunicationPath, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R414
      // O_IOBJ
		  inst=DestinationSmCanBeRepresentedByImportedClass;
			unrelateAcrossR414From(DestinationSmCanBeRepresentedByImportedClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R424
      // O_IOBJ
		  inst=OriginationSmCanBeRepresentedByImportedClass;
			unrelateAcrossR424From(OriginationSmCanBeRepresentedByImportedClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R406
      // SM_SM
		  inst=OriginatesFromStateMachine;
			unrelateAcrossR406From(OriginatesFromStateMachine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R407
      // SM_SM
		  inst=ShowsEventCommunicationToStateMachine;
			unrelateAcrossR407From(ShowsEventCommunicationToStateMachine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToSmCommPath_c inst = (SmToSmCommPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SmToSmCommPath_c SmToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SmToSmCommPath_c result=findSmToSmCommPathInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SmToSmCommPath_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSmToSmCommPathInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SmToSmCommPath_c findSmToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SmToSmCommPath_c x = (SmToSmCommPath_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SmToSmCommPath_c SmToSmCommPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SmToSmCommPathInstance(modelRoot,test,true);
  }
  
  public static SmToSmCommPath_c SmToSmCommPathInstance(ModelRoot modelRoot)
  {
	 return SmToSmCommPathInstance(modelRoot,null,true);
  }

  public static SmToSmCommPath_c [] SmToSmCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SmToSmCommPath_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SmToSmCommPath_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SmToSmCommPath_c x = (SmToSmCommPath_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SmToSmCommPath_c[] ret_set = new SmToSmCommPath_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToSmCommPath_c[0];
			}		
		} 
  }
  public static SmToSmCommPath_c [] SmToSmCommPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SmToSmCommPathInstances(modelRoot,test,true);
  }
  public static SmToSmCommPath_c [] SmToSmCommPathInstances(ModelRoot modelRoot)
  {
	return SmToSmCommPathInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the SM to SM Comm Path.dispose call: ";
	SmToSmEventComm_c testR408Inst = SmToSmEventComm_c.getOneCA_SMSMEOnR408(this, false);

	if ( testR408Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "408 ";	
	}
	CommunicationPath_c testR401Inst1 = CommunicationPath_c.getOneCA_COMMOnR401(this, false);

	if ( testR401Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "401 ";
	}
	ImportedClass_c testR414Inst = ImportedClass_c.getOneO_IOBJOnR414(this, false);

	if ( testR414Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "414 ";
	}
	ImportedClass_c testR424Inst = ImportedClass_c.getOneO_IOBJOnR424(this, false);

	if ( testR424Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "424 ";
	}
	StateMachine_c testR406Inst = StateMachine_c.getOneSM_SMOnR406(this, false);

	if ( testR406Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "406 ";
	}
	StateMachine_c testR407Inst = StateMachine_c.getOneSM_SMOnR407(this, false);

	if ( testR407Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "407 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "SM to SM Comm Path", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("cpath_id")){
         return true;
      }
      if(attributeName.equals("osm_id")){
         return true;
      }
      if(attributeName.equals("dsm_id")){
         return true;
      }
      if(attributeName.equals("diobj_id")){
         return true;
      }
      if(attributeName.equals("oiobj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getCpath_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getCpath_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getCpath_idLongBased()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getCpath_id()
  {
    if ( IsSupertypeCommunicationPath != null )
    {
      return IsSupertypeCommunicationPath.getCpath_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeCommunicationPath != null );
 
 }                  

  public java.util.UUID getCpath_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_cpath_id) )
      return m_cpath_id;
    else
      return getCpath_id();
  }
  
  public void setCpath_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_cpath_id)){
	        return;
	    }
	}else if(m_cpath_id != null){
	    if(m_cpath_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Cpath_id", m_cpath_id, newValue,true); 
   m_cpath_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getOsm_idLongBased()
  {
    if ( OriginatesFromStateMachine != null )
    {
      return OriginatesFromStateMachine.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getOsm_id()
  {
    if ( OriginatesFromStateMachine != null )
    {
      return OriginatesFromStateMachine.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getOsm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_osm_id) )
      return m_osm_id;
    else
      return getOsm_id();
  }
  
  public void setOsm_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_osm_id)){
	        return;
	    }
	}else if(m_osm_id != null){
	    if(m_osm_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Osm_id", m_osm_id, newValue,true); 
   m_osm_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDsm_idLongBased()
  {
    if ( ShowsEventCommunicationToStateMachine != null )
    {
      return ShowsEventCommunicationToStateMachine.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDsm_id()
  {
    if ( ShowsEventCommunicationToStateMachine != null )
    {
      return ShowsEventCommunicationToStateMachine.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDsm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dsm_id) )
      return m_dsm_id;
    else
      return getDsm_id();
  }
  
  public void setDsm_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dsm_id)){
	        return;
	    }
	}else if(m_dsm_id != null){
	    if(m_dsm_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dsm_id", m_dsm_id, newValue,true); 
   m_dsm_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDiobj_idLongBased()
  {
    if ( DestinationSmCanBeRepresentedByImportedClass != null )
    {
      return DestinationSmCanBeRepresentedByImportedClass.getIobj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDiobj_id()
  {
    if ( DestinationSmCanBeRepresentedByImportedClass != null )
    {
      return DestinationSmCanBeRepresentedByImportedClass.getIobj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDiobj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_diobj_id) )
      return m_diobj_id;
    else
      return getDiobj_id();
  }
  
  public void setDiobj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_diobj_id)){
	        return;
	    }
	}else if(m_diobj_id != null){
	    if(m_diobj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Diobj_id", m_diobj_id, newValue,true); 
   m_diobj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getOiobj_idLongBased()
  {
    if ( OriginationSmCanBeRepresentedByImportedClass != null )
    {
      return OriginationSmCanBeRepresentedByImportedClass.getIobj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getOiobj_id()
  {
    if ( OriginationSmCanBeRepresentedByImportedClass != null )
    {
      return OriginationSmCanBeRepresentedByImportedClass.getIobj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getOiobj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_oiobj_id) )
      return m_oiobj_id;
    else
      return getOiobj_id();
  }
  
  public void setOiobj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_oiobj_id)){
	        return;
	    }
	}else if(m_oiobj_id != null){
	    if(m_oiobj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Oiobj_id", m_oiobj_id, newValue,true); 
   m_oiobj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to SM Comm Path", //$NON-NLS-1$
	  " Operation entered: SM to SM Comm Path::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SmToSmCommPath_c [] objs = SmToSmCommPath_c.SmToSmCommPathInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to SM Comm Path", //$NON-NLS-1$
	  " Operation entered: SM to SM Comm Path::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SmToSmCommPath_c_test57334_c implements ClassQueryInterface_c
    {
	  SmToSmCommPath_c_test57334_c( java.util.UUID            p57335 ) {
	  m_p57335 = p57335;
	  }
	  private java.util.UUID             m_p57335; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToSmCommPath_c selected = (SmToSmCommPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57335));
	      return retval;
	  }
    }

    SmToSmCommPath_c [] objs57333 = 
    SmToSmCommPath_c.SmToSmCommPathInstances(modelRoot, new SmToSmCommPath_c_test57334_c(getCpath_id())) ;

    if ( (  (objs57333.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57333.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57333.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57333.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57333.length )  + " CPath_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57333.length )  + " CPath_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class SmToSmCommPath_c_test57337_c implements ClassQueryInterface_c
    {
	  SmToSmCommPath_c_test57337_c( java.util.UUID            p57338, java.util.UUID            p57339 ) {
	       m_p57338 = p57338; 
m_p57339 = p57339;
	  }
	  private java.util.UUID             m_p57338; private java.util.UUID             m_p57339; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToSmCommPath_c selected = (SmToSmCommPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOsm_id().equals(m_p57338)) & (selected.getDsm_id().equals(m_p57339));
	      return retval;
	  }
    }

    SmToSmCommPath_c [] objs57336 = 
    SmToSmCommPath_c.SmToSmCommPathInstances(modelRoot, new SmToSmCommPath_c_test57337_c(getOsm_id(), getDsm_id())) ;

    if ( (  (objs57336.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57336.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57336.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57336.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57336.length )  + " OSM_ID: " + "Not Printable"  + " DSM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57336.length )  + " OSM_ID: " + "Not Printable"  + " DSM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to SM Comm Path is a subtype in association: rel.Numb = 401
          // The supertype class is: Communication Path
    class CommunicationPath_c_test57342_c implements ClassQueryInterface_c
    {
	  CommunicationPath_c_test57342_c( java.util.UUID            p57343 ) {
	  m_p57343 = p57343;
	  }
	  private java.util.UUID             m_p57343; 
	  public boolean evaluate (Object candidate)
	  {
	      CommunicationPath_c selected = (CommunicationPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCpath_id().equals(m_p57343));
	      return retval;
	  }
    }

    CommunicationPath_c [] objs57341 = 
    CommunicationPath_c.CommunicationPathInstances(modelRoot, new CommunicationPath_c_test57342_c(getCpath_id())) ;

    if ( (  (objs57341.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57341.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Association: 401: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57341.length )  , e); 
      }
      retval = false;

    }

          // SM to SM Comm Path is a referring class in association: rel.Numb = 406
          // The participating class is: State Machine
    class StateMachine_c_test57345_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test57345_c( java.util.UUID            p57346 ) {
	  m_p57346 = p57346;
	  }
	  private java.util.UUID             m_p57346; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p57346));
	      return retval;
	  }
    }

    StateMachine_c [] objs57344 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test57345_c(getOsm_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57344.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Association: 406: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57344.length )  + " OSM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Association: 406: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57344.length )  + " OSM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to SM Comm Path is a referring class in association: rel.Numb = 407
          // The participating class is: State Machine
    class StateMachine_c_test57348_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test57348_c( java.util.UUID            p57349 ) {
	  m_p57349 = p57349;
	  }
	  private java.util.UUID             m_p57349; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p57349));
	      return retval;
	  }
    }

    StateMachine_c [] objs57347 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test57348_c(getDsm_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57347.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Association: 407: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57347.length )  + " DSM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Association: 407: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57347.length )  + " DSM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to SM Comm Path is a referring class in association: rel.Numb = 414
          // The participating class is: Imported Class
    class ImportedClass_c_test57351_c implements ClassQueryInterface_c
    {
	  ImportedClass_c_test57351_c( java.util.UUID            p57352 ) {
	  m_p57352 = p57352;
	  }
	  private java.util.UUID             m_p57352; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedClass_c selected = (ImportedClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIobj_id().equals(m_p57352));
	      return retval;
	  }
    }

    ImportedClass_c [] objs57350 = 
    ImportedClass_c.ImportedClassInstances(modelRoot, new ImportedClass_c_test57351_c(getDiobj_id())) ;

    if ( (  (objs57350.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Association: 414: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57350.length )  + " DIObj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Association: 414: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57350.length )  + " DIObj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // SM to SM Comm Path is a referring class in association: rel.Numb = 424
          // The participating class is: Imported Class
    class ImportedClass_c_test57354_c implements ClassQueryInterface_c
    {
	  ImportedClass_c_test57354_c( java.util.UUID            p57355 ) {
	  m_p57355 = p57355;
	  }
	  private java.util.UUID             m_p57355; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedClass_c selected = (ImportedClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIobj_id().equals(m_p57355));
	      return retval;
	  }
    }

    ImportedClass_c [] objs57353 = 
    ImportedClass_c.ImportedClassInstances(modelRoot, new ImportedClass_c_test57354_c(getOiobj_id())) ;

    if ( (  (objs57353.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to SM Comm Path", //$NON-NLS-1$
           "Consistency: Object: SM to SM Comm Path: Association: 424: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57353.length )  + " OIObj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to SM Comm Path: Association: 424: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57353.length )  + " OIObj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // SM to SM Comm Path is a participating class in association: rel.Numb = 408
             // Object: SM to SM Event Comm
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "SM to SM Comm Path", " Operation entered: SmToSmCommPath::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
SmToSmEventComm_c [] v_smsmes = SmToSmEventComm_c.getManyCA_SMSMEsOnR408(this);


SmToSmEventComm_c  v_smsme = null;
for ( int i55394 = 0; i55394 < v_smsmes.length; i55394++)
{
  v_smsme = v_smsmes[i55394] ;

StateMachineEvent_c v_smEvt = StateMachineEvent_c.getOneSM_EVTOnR409(v_smsme);


if (v_smsme != null) {
v_smsme.unrelateAcrossR409From(v_smEvt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smsme != null) {
v_smsme.unrelateAcrossR408From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smsme != null) {
// get the location of this element in the instance list
// before deleting
if ( v_smsme.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_smsme));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

ImportedClass_c v_oiobj = ImportedClass_c.getOneO_IOBJOnR424(this);


if (   (v_oiobj != null) )
{

this.unrelateAcrossR424From(v_oiobj);



}

ImportedClass_c v_diobj = ImportedClass_c.getOneO_IOBJOnR414(this);


if (   (v_diobj != null) )
{

this.unrelateAcrossR414From(v_diobj);



}

StateMachine_c v_dsm = StateMachine_c.getOneSM_SMOnR407(this);


this.unrelateAcrossR407From(v_dsm);


StateMachine_c v_osm = StateMachine_c.getOneSM_SMOnR406(this);


this.unrelateAcrossR406From(v_osm);


CommunicationPath_c v_cp = CommunicationPath_c.getOneCA_COMMOnR401(this);


this.unrelateAcrossR401From(v_cp);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end SM to SM Comm Path
