package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SplitOnO_ATTRWizardPage1.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SplitOnO_ATTRWizardPage1 extends PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo Split_fromCombo;
	public Label Split_fromLabel;

	// cache for user choices
	AttributeReferenceInClass_c Split_from = null;
	AttributeReferenceInClass_c[] Split_fromInstances;

	/**
	 * Constructors for SplitOnO_ATTRWizardPage1.
	 */
	public SplitOnO_ATTRWizardPage1() {
		super("");
		init();
	}

	public SplitOnO_ATTRWizardPage1(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Split");
		setDescription("Select reference to split from this one");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SplitOnO_ATTRWizard) getWizard())
						.getSelection());

		// cache for context
		Attribute_c v_o_attr = ((SplitOnO_ATTRWizard) getWizard()).v_o_attr;

		ReferentialAttribute_c v_rattr = ReferentialAttribute_c
				.getOneO_RATTROnR106(v_o_attr);

		// select related by where USER::selectOne
		AttributeReferenceInClass_c[] v_Split_fromInstances = AttributeReferenceInClass_c
				.getManyO_REFsOnR108(v_rattr);
		AttributeReferenceInClass_c v_Split_from = null;
		int Split_fromInstCount;
		int Split_fromResultCount = 0;
		for (Split_fromInstCount = 0; Split_fromInstCount < v_Split_fromInstances.length; Split_fromInstCount++) {
			AttributeReferenceInClass_c selected = v_Split_fromInstances[Split_fromInstCount];
			if (User_c.Selectone(selected.getAttr_id())) {
				Split_fromResultCount++;
			}
		}
		this.Split_fromInstances = new AttributeReferenceInClass_c[Split_fromResultCount];
		Split_fromResultCount = 0;
		for (Split_fromInstCount = 0; Split_fromInstCount < v_Split_fromInstances.length; Split_fromInstCount++) {
			AttributeReferenceInClass_c selected = v_Split_fromInstances[Split_fromInstCount];
			if (User_c.Selectone(selected.getAttr_id())) {
				this.Split_fromInstances[Split_fromResultCount] = selected;
				Split_fromResultCount++;
			}
		}
		Split_fromCombo.removeAll();
		for (Split_fromInstCount = 0; Split_fromInstCount < Split_fromResultCount; Split_fromInstCount++)
			Split_fromCombo
					.add(((AttributeReferenceInClass_c) this.Split_fromInstances[Split_fromInstCount])
							.Get_name());
		if (Split_fromResultCount > 0) {
			Split_fromCombo.select(0);
			updateSelectedSplit_from();
		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		Split_fromLabel = new Label(composite, SWT.NONE);
		Split_fromLabel.setText("Split_from");
		Split_fromCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		Split_fromCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		Split_fromCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedSplit_from() {
		this.Split_from = Split_fromInstances[Split_fromCombo
				.getSelectionIndex()];
		((SplitOnO_ATTRWizard) getWizard()).v_Split_from = this.Split_from;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == Split_fromCombo) {
			updateSelectedSplit_from();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Split_from == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SplitOnO_ATTRWizard) getWizard()).v_Split_from = Split_from;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Split_from == null)
			return false;
		return true;
	}

}
