      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SignalInvocation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SIGNAL_INVOCATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SignalInvocation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SignalInvocation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_signamelinenumber,
       int          p_m_signamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedsig_id,
       java.util.UUID         p_m_requiredsig_id,
       java.util.UUID         p_m_value_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       m_signamelinenumber = p_m_signamelinenumber;
       m_signamecolumn = p_m_signamecolumn;
       m_ownernamelinenumber = p_m_ownernamelinenumber;
       m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_providedsig_id = IdAssigner.preprocessUUID(p_m_providedsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_requiredsig_id = IdAssigner.preprocessUUID(p_m_requiredsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }
  static public SignalInvocation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_signamelinenumber,
       int          p_m_signamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedsig_id,
       java.util.UUID         p_m_requiredsig_id,
       java.util.UUID         p_m_value_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
      SignalInvocation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_statement_id};
          new_inst = (SignalInvocation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       new_inst.m_signamelinenumber = p_m_signamelinenumber;
       new_inst.m_signamecolumn = p_m_signamecolumn;
       new_inst.m_ownernamelinenumber = p_m_ownernamelinenumber;
       new_inst.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_providedsig_id = IdAssigner.preprocessUUID(p_m_providedsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_requiredsig_id = IdAssigner.preprocessUUID(p_m_requiredsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SignalInvocation_c(modelRoot,
p_m_statement_id,
p_m_signamelinenumber,
p_m_signamecolumn,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_providedsig_id,
p_m_requiredsig_id,
p_m_value_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SignalInvocation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       int          p_m_signamelinenumber,
       int          p_m_signamecolumn,
       int          p_m_ownernamelinenumber,
       int          p_m_ownernamecolumn,
       java.util.UUID         p_m_providedsig_id,
       java.util.UUID         p_m_requiredsig_id,
       java.util.UUID         p_m_value_id){
    InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
    SignalInvocation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_statement_id
            };
        source = (SignalInvocation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       source.m_signamelinenumber = p_m_signamelinenumber;
       source.m_signamecolumn = p_m_signamecolumn;
       source.m_ownernamelinenumber = p_m_ownernamelinenumber;
       source.m_ownernamecolumn = p_m_ownernamecolumn;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_providedsig_id = IdAssigner.preprocessUUID(p_m_providedsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_requiredsig_id = IdAssigner.preprocessUUID(p_m_requiredsig_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SignalInvocation_c new_inst = new SignalInvocation_c(modelRoot,
p_m_statement_id,
p_m_signamelinenumber,
p_m_signamecolumn,
p_m_ownernamelinenumber,
p_m_ownernamecolumn,
p_m_providedsig_id,
p_m_requiredsig_id,
p_m_value_id
);
    return new_inst;
  }
  public SignalInvocation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_statement_id = IdAssigner.NULL_UUID;   
     m_providedsig_id = IdAssigner.NULL_UUID;   
     m_requiredsig_id = IdAssigner.NULL_UUID;   
     m_value_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_statement_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_statement_id !=  p_newKey ){
	
		m_statement_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SignalInvocation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SignalInvocation_c)) {
           return false;
       }
       
       SignalInvocation_c me = (SignalInvocation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID.equals(((SignalInvocation_c)elem).getStatement_id())) && this != elem)) {
      	return false;
      }
      if (!getStatement_id().equals(((SignalInvocation_c)elem).getStatement_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SignalInvocation_c)) {
           return false;
       }
       
       SignalInvocation_c me = (SignalInvocation_c)elem;
      if (!getStatement_idCachedValue().equals(((SignalInvocation_c)elem).getStatement_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_statement_id ;
  private int          m_signamelinenumber ;
  private int          m_signamecolumn ;
  private int          m_ownernamelinenumber ;
  private int          m_ownernamecolumn ;
  private java.util.UUID         m_providedsig_id ;
  private java.util.UUID         m_requiredsig_id ;
  private java.util.UUID         m_value_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Value_c HasTargetValue ;
public void relateAcrossR630To(Value_c target)
{
	relateAcrossR630To(target, true);
}
public void relateAcrossR630To(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasTargetValue) return;  // already related

    if ( HasTargetValue != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasTargetValue != null) {
    
        HasTargetValue.clearBackPointerR630To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SignalInvocation_c.relateAcrossR630To(Value_c target)", 
			"Relate performed across R630 from Signal Invocation to Value without unrelate of prior instance.");  
		}
    }
                
    	HasTargetValue = target ;
        m_value_id = target.getValue_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR630To(this);
        target.addRef();
    }
}
public void unrelateAcrossR630From(Value_c target)
{
	unrelateAcrossR630From(target, true);
}
public void unrelateAcrossR630From(Value_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasTargetValue == null) return;  // already unrelated
	
	if (target != HasTargetValue) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R630", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR630To(this);
    }
    

      if(HasTargetValue != null) {
      
        m_value_id = HasTargetValue.getValue_id();
        HasTargetValue = null ;
        target.removeRef();
    }
}

  
    
      
public static SignalInvocation_c getOneACT_SGNOnR630(Value_c [] targets)
{
    return getOneACT_SGNOnR630(targets, null);
}

public static SignalInvocation_c getOneACT_SGNOnR630(Value_c [] targets, ClassQueryInterface_c test)
{
    SignalInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_SGNOnR630(targets[i], test);
        }
    }

    return ret_val;
}

public static SignalInvocation_c getOneACT_SGNOnR630(Value_c target)
{
  return getOneACT_SGNOnR630(target, null);
}

public static SignalInvocation_c getOneACT_SGNOnR630(Value_c target, boolean loadComponent)
{
    return getOneACT_SGNOnR630(target.getModelRoot(), target, null, loadComponent);
}

public static SignalInvocation_c getOneACT_SGNOnR630(Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_SGNOnR630(target.getModelRoot(), target, test);
  }
  return null;
}

public static SignalInvocation_c getOneACT_SGNOnR630(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
	return getOneACT_SGNOnR630(modelRoot, target, test, true);
}

public static SignalInvocation_c getOneACT_SGNOnR630(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_SGNOnR630(modelRoot,target,test);
}
private static SignalInvocation_c find_getOneACT_SGNOnR630(ModelRoot modelRoot, Value_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630) {
	    for ( int i = 0; i < target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.size(); ++i ) {
	      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c [] targets)
{
  return getManyACT_SGNsOnR630(targets, null);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c [] targets, boolean loadComponent)
{
  return getManyACT_SGNsOnR630(targets, null, loadComponent);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR630(targets, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SignalInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTargetOfSignalInvocationIsTargetOf_R630) {
	    for (int j = 0; j < targets[i].backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.size(); ++j) {
	      SignalInvocation_c source = (SignalInvocation_c)targets[i].backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SignalInvocation_c[0];
  }
  }

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c target)
{
  return getManyACT_SGNsOnR630(target, null);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c target, boolean loadComponent)
{
  return getManyACT_SGNsOnR630(target, null, loadComponent);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c target, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR630(target, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR630(Value_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SignalInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630) {
    for (int i = 0; i < target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.size(); ++i) {
      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SignalInvocation_c[0];
	}
  }


  
    
// referring navigation

Statement_c IsSupertypeStatement ;
public void relateAcrossR603To(Statement_c target)
{
	relateAcrossR603To(target, true);
}
public void relateAcrossR603To(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeStatement) return;  // already related

    if ( IsSupertypeStatement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeStatement != null) {
    
        IsSupertypeStatement.clearBackPointerR603To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SignalInvocation_c.relateAcrossR603To(Statement_c target)", 
			"Relate performed across R603 from Signal Invocation to Statement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeStatement = target ;
        m_statement_id = target.getStatement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR603To(this);
        target.addRef();
    }
}
public void unrelateAcrossR603From(Statement_c target)
{
	unrelateAcrossR603From(target, true);
}
public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeStatement == null) return;  // already unrelated
	
	if (target != IsSupertypeStatement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R603", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR603To(this);
    }
    

      if(IsSupertypeStatement != null) {
      
        m_statement_id = IsSupertypeStatement.getStatement_id();
        IsSupertypeStatement = null ;
        target.removeRef();
    }
}

  
    
      
public static SignalInvocation_c getOneACT_SGNOnR603(Statement_c [] targets)
{
    return getOneACT_SGNOnR603(targets, null);
}

public static SignalInvocation_c getOneACT_SGNOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
    SignalInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_SGNOnR603(targets[i], test);
        }
    }

    return ret_val;
}

public static SignalInvocation_c getOneACT_SGNOnR603(Statement_c target)
{
  return getOneACT_SGNOnR603(target, null);
}

public static SignalInvocation_c getOneACT_SGNOnR603(Statement_c target, boolean loadComponent)
{
    return getOneACT_SGNOnR603(target.getModelRoot(), target, null, loadComponent);
}

public static SignalInvocation_c getOneACT_SGNOnR603(Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_SGNOnR603(target.getModelRoot(), target, test);
  }
  return null;
}

public static SignalInvocation_c getOneACT_SGNOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
	return getOneACT_SGNOnR603(modelRoot, target, test, true);
}

public static SignalInvocation_c getOneACT_SGNOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_SGNOnR603(modelRoot,target,test);
}
private static SignalInvocation_c find_getOneACT_SGNOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SignalInvocation_c source = (SignalInvocation_c)target.backPointer_IsSubtypeSignalInvocationIsSubtype_R603;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c [] targets)
{
  return getManyACT_SGNsOnR603(targets, null);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c [] targets, boolean loadComponent)
{
  return getManyACT_SGNsOnR603(targets, null, loadComponent);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR603(targets, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SignalInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SignalInvocation_c source = (SignalInvocation_c)targets[i].backPointer_IsSubtypeSignalInvocationIsSubtype_R603;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SignalInvocation_c[0];
  }
  }

public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c target)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_SGNsOnR603(targetArray);
  } else {
    SignalInvocation_c [] result = new SignalInvocation_c [0] ;
  return result ;
}
}

public static SignalInvocation_c [] getManyACT_SGNsOnR603(Statement_c target, boolean loadComponent)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_SGNsOnR603(targetArray, loadComponent);
  } else {
    SignalInvocation_c [] result = new SignalInvocation_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ProvidedSignal_c IsInvocationOfProvidedSignal ;
public void relateAcrossR663To(ProvidedSignal_c target)
{
	relateAcrossR663To(target, true);
}
public void relateAcrossR663To(ProvidedSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInvocationOfProvidedSignal) return;  // already related

    if ( IsInvocationOfProvidedSignal != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInvocationOfProvidedSignal != null) {
    
        IsInvocationOfProvidedSignal.clearBackPointerR663To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SignalInvocation_c.relateAcrossR663To(ProvidedSignal_c target)", 
			"Relate performed across R663 from Signal Invocation to Provided Signal without unrelate of prior instance.");  
		}
    }
                
    	IsInvocationOfProvidedSignal = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_providedsig_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR663To(this);
        target.addRef();
    }
}
public void unrelateAcrossR663From(ProvidedSignal_c target)
{
	unrelateAcrossR663From(target, true);
}
public void unrelateAcrossR663From(ProvidedSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInvocationOfProvidedSignal == null) return;  // already unrelated
	
	if (target != IsInvocationOfProvidedSignal) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R663", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR663To(this);
    }
    

      if(IsInvocationOfProvidedSignal != null) {
      
        m_providedsig_id = IsInvocationOfProvidedSignal.getId();
        if(IdAssigner.NULL_UUID.equals(m_providedsig_id))
        {
          m_providedsig_id = IsInvocationOfProvidedSignal.getIdCachedValue();
        }       
        IsInvocationOfProvidedSignal = null ;
        target.removeRef();
    }
}

  
    
      
public static SignalInvocation_c getOneACT_SGNOnR663(ProvidedSignal_c [] targets)
{
    return getOneACT_SGNOnR663(targets, null);
}

public static SignalInvocation_c getOneACT_SGNOnR663(ProvidedSignal_c [] targets, ClassQueryInterface_c test)
{
    SignalInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_SGNOnR663(targets[i], test);
        }
    }

    return ret_val;
}

public static SignalInvocation_c getOneACT_SGNOnR663(ProvidedSignal_c target)
{
  return getOneACT_SGNOnR663(target, null);
}

public static SignalInvocation_c getOneACT_SGNOnR663(ProvidedSignal_c target, boolean loadComponent)
{
    return getOneACT_SGNOnR663(target.getModelRoot(), target, null, loadComponent);
}

public static SignalInvocation_c getOneACT_SGNOnR663(ProvidedSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_SGNOnR663(target.getModelRoot(), target, test);
  }
  return null;
}

public static SignalInvocation_c getOneACT_SGNOnR663(ModelRoot modelRoot, ProvidedSignal_c target, ClassQueryInterface_c test)
{
	return getOneACT_SGNOnR663(modelRoot, target, test, true);
}

public static SignalInvocation_c getOneACT_SGNOnR663(ModelRoot modelRoot, ProvidedSignal_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_SGNOnR663(modelRoot,target,test);
}
private static SignalInvocation_c find_getOneACT_SGNOnR663(ModelRoot modelRoot, ProvidedSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_SignalInvocation_R663) {
	    for ( int i = 0; i < target.backPointer_SignalInvocation_R663.size(); ++i ) {
	      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_SignalInvocation_R663.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c [] targets)
{
  return getManyACT_SGNsOnR663(targets, null);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c [] targets, boolean loadComponent)
{
  return getManyACT_SGNsOnR663(targets, null, loadComponent);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR663(targets, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SignalInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_SignalInvocation_R663) {
	    for (int j = 0; j < targets[i].backPointer_SignalInvocation_R663.size(); ++j) {
	      SignalInvocation_c source = (SignalInvocation_c)targets[i].backPointer_SignalInvocation_R663.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SignalInvocation_c[0];
  }
  }

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c target)
{
  return getManyACT_SGNsOnR663(target, null);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c target, boolean loadComponent)
{
  return getManyACT_SGNsOnR663(target, null, loadComponent);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c target, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR663(target, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR663(ProvidedSignal_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SignalInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_SignalInvocation_R663) {
    for (int i = 0; i < target.backPointer_SignalInvocation_R663.size(); ++i) {
      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_SignalInvocation_R663.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SignalInvocation_c[0];
	}
  }


  
    
// referring navigation

RequiredSignal_c IsInvocationOfRequiredSignal ;
public void relateAcrossR660To(RequiredSignal_c target)
{
	relateAcrossR660To(target, true);
}
public void relateAcrossR660To(RequiredSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInvocationOfRequiredSignal) return;  // already related

    if ( IsInvocationOfRequiredSignal != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInvocationOfRequiredSignal != null) {
    
        IsInvocationOfRequiredSignal.clearBackPointerR660To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SignalInvocation_c.relateAcrossR660To(RequiredSignal_c target)", 
			"Relate performed across R660 from Signal Invocation to Required Signal without unrelate of prior instance.");  
		}
    }
                
    	IsInvocationOfRequiredSignal = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_requiredsig_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR660To(this);
        target.addRef();
    }
}
public void unrelateAcrossR660From(RequiredSignal_c target)
{
	unrelateAcrossR660From(target, true);
}
public void unrelateAcrossR660From(RequiredSignal_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInvocationOfRequiredSignal == null) return;  // already unrelated
	
	if (target != IsInvocationOfRequiredSignal) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R660", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR660To(this);
    }
    

      if(IsInvocationOfRequiredSignal != null) {
      
        m_requiredsig_id = IsInvocationOfRequiredSignal.getId();
        if(IdAssigner.NULL_UUID.equals(m_requiredsig_id))
        {
          m_requiredsig_id = IsInvocationOfRequiredSignal.getIdCachedValue();
        }       
        IsInvocationOfRequiredSignal = null ;
        target.removeRef();
    }
}

  
    
      
public static SignalInvocation_c getOneACT_SGNOnR660(RequiredSignal_c [] targets)
{
    return getOneACT_SGNOnR660(targets, null);
}

public static SignalInvocation_c getOneACT_SGNOnR660(RequiredSignal_c [] targets, ClassQueryInterface_c test)
{
    SignalInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_SGNOnR660(targets[i], test);
        }
    }

    return ret_val;
}

public static SignalInvocation_c getOneACT_SGNOnR660(RequiredSignal_c target)
{
  return getOneACT_SGNOnR660(target, null);
}

public static SignalInvocation_c getOneACT_SGNOnR660(RequiredSignal_c target, boolean loadComponent)
{
    return getOneACT_SGNOnR660(target.getModelRoot(), target, null, loadComponent);
}

public static SignalInvocation_c getOneACT_SGNOnR660(RequiredSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_SGNOnR660(target.getModelRoot(), target, test);
  }
  return null;
}

public static SignalInvocation_c getOneACT_SGNOnR660(ModelRoot modelRoot, RequiredSignal_c target, ClassQueryInterface_c test)
{
	return getOneACT_SGNOnR660(modelRoot, target, test, true);
}

public static SignalInvocation_c getOneACT_SGNOnR660(ModelRoot modelRoot, RequiredSignal_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_SGNOnR660(modelRoot,target,test);
}
private static SignalInvocation_c find_getOneACT_SGNOnR660(ModelRoot modelRoot, RequiredSignal_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_SignalInvocation_R660) {
	    for ( int i = 0; i < target.backPointer_SignalInvocation_R660.size(); ++i ) {
	      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_SignalInvocation_R660.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c [] targets)
{
  return getManyACT_SGNsOnR660(targets, null);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c [] targets, boolean loadComponent)
{
  return getManyACT_SGNsOnR660(targets, null, loadComponent);
}
public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR660(targets, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SignalInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_SignalInvocation_R660) {
	    for (int j = 0; j < targets[i].backPointer_SignalInvocation_R660.size(); ++j) {
	      SignalInvocation_c source = (SignalInvocation_c)targets[i].backPointer_SignalInvocation_R660.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SignalInvocation_c[0];
  }
  }

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c target)
{
  return getManyACT_SGNsOnR660(target, null);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c target, boolean loadComponent)
{
  return getManyACT_SGNsOnR660(target, null, loadComponent);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c target, ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR660(target, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR660(RequiredSignal_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SignalInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_SignalInvocation_R660) {
    for (int i = 0; i < target.backPointer_SignalInvocation_R660.size(); ++i) {
      SignalInvocation_c source = (SignalInvocation_c)target.backPointer_SignalInvocation_R660.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SignalInvocation_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ActualParameter_c> backPointer_TakesActualParameterTakes_R662 = new ArrayList<ActualParameter_c>();

public void setActualParameterOrderInChildListR662(ActualParameter_c target, int index) {
	unrelateAcrossR662From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR662(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR662From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR662To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR662To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR662To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR662To(this, true) ;
  }
}

public void relateAcrossR662To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR662To(this, notifyChanges) ;
  }
}

public void setBackPointerR662To(ActualParameter_c target)
{
  	synchronized (backPointer_TakesActualParameterTakes_R662) {
		backPointer_TakesActualParameterTakes_R662.add(target);
	}
}

public void unrelateAcrossR662From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR662From(this, true) ;
  }
}

public void unrelateAcrossR662From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR662From(this, notifyChanges) ;
  }
}

public void clearBackPointerR662To(ActualParameter_c target)
{
  synchronized (backPointer_TakesActualParameterTakes_R662) {
	    backPointer_TakesActualParameterTakes_R662.remove(target);
	}
}

public static SignalInvocation_c getOneACT_SGNOnR662(ActualParameter_c [] targets)
{
    return getOneACT_SGNOnR662(targets, null);
}

public static SignalInvocation_c getOneACT_SGNOnR662(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_SGNOnR662(targets, test, true);
}

public static SignalInvocation_c getOneACT_SGNOnR662(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SignalInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SignalInvocation_c candidate_val = getOneACT_SGNOnR662(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_SGNOnR662(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SignalInvocation_c getOneACT_SGNOnR662(ActualParameter_c target)
{
	return getOneACT_SGNOnR662(target, true);
}
public static SignalInvocation_c getOneACT_SGNOnR662(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.TakenBySignalInvocation ;
  } else {
    return null;
  }
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_SGNsOnR662(targets, test, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SignalInvocation_c[0];
  
  
  LinkedHashSet<SignalInvocation_c> elementsSet = new LinkedHashSet<SignalInvocation_c>();
  for (int i = 0; i < targets.length; i++) {
    SignalInvocation_c associate = targets[i].TakenBySignalInvocation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SignalInvocation_c[] result = new SignalInvocation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c [] targets)
{
  return getManyACT_SGNsOnR662(targets, null);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyACT_SGNsOnR662(targetArray, test, loadComponent);
  } else {
    SignalInvocation_c [] result = new SignalInvocation_c [0] ;
    return result ;
  }
  
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_SGNsOnR662(target, null, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c target)
{
    return getManyACT_SGNsOnR662(target, null, true);
}

public static SignalInvocation_c [] getManyACT_SGNsOnR662(ActualParameter_c target, boolean loadComponent)
{
    return getManyACT_SGNsOnR662(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HasTargetValue == null) {          
      // R630
      Value_c relInst40287 = (Value_c) baseRoot.getInstanceList(Value_c.class).get(new Object[] {m_value_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40287 == null) {
      			relInst40287 = (Value_c) Ooaofooa.getDefaultInstance().getInstanceList(Value_c.class).get(new Object[] {m_value_id});
      		}
			if (relInst40287 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40287 = (Value_c) roots[i].getInstanceList(Value_c.class).get(new Object[] {m_value_id});
					if (relInst40287 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40287 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40287) && !isProxy())) {
	      relInst40287.relateAcrossR630To(this, notifyChanges);
	  }
	  }
	}
	          

      // R603
      Statement_c relInst40288 = (Statement_c) baseRoot.getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40288 == null) {
      			relInst40288 = (Statement_c) Ooaofooa.getDefaultInstance().getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
      		}
			if (relInst40288 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40288 = (Statement_c) roots[i].getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
					if (relInst40288 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40288 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40288) && !isProxy())) {
	      relInst40288.relateAcrossR603To(this, notifyChanges);
	  }
	  }
	          

	if (IsInvocationOfProvidedSignal == null) {          
      // R663
      ProvidedSignal_c relInst40289 = (ProvidedSignal_c) baseRoot.getInstanceList(ProvidedSignal_c.class).get(new Object[] {m_providedsig_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40289 == null) {
      			relInst40289 = (ProvidedSignal_c) Ooaofooa.getDefaultInstance().getInstanceList(ProvidedSignal_c.class).get(new Object[] {m_providedsig_id});
      		}
			if (relInst40289 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40289 = (ProvidedSignal_c) roots[i].getInstanceList(ProvidedSignal_c.class).get(new Object[] {m_providedsig_id});
					if (relInst40289 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40289 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40289) && !isProxy())) {
	      relInst40289.relateAcrossR663To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsInvocationOfRequiredSignal == null) {          
      // R660
      RequiredSignal_c relInst40290 = (RequiredSignal_c) baseRoot.getInstanceList(RequiredSignal_c.class).get(new Object[] {m_requiredsig_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40290 == null) {
      			relInst40290 = (RequiredSignal_c) Ooaofooa.getDefaultInstance().getInstanceList(RequiredSignal_c.class).get(new Object[] {m_requiredsig_id});
      		}
			if (relInst40290 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40290 = (RequiredSignal_c) roots[i].getInstanceList(RequiredSignal_c.class).get(new Object[] {m_requiredsig_id});
					if (relInst40290 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40290 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40290) && !isProxy())) {
	      relInst40290.relateAcrossR660To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R630
      // V_VAL
		  inst=HasTargetValue;
			unrelateAcrossR630From(HasTargetValue, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R603
      // ACT_SMT
		  inst=IsSupertypeStatement;
			unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R663
      // SPR_PS
		  inst=IsInvocationOfProvidedSignal;
			unrelateAcrossR663From(IsInvocationOfProvidedSignal, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R660
      // SPR_RS
		  inst=IsInvocationOfRequiredSignal;
			unrelateAcrossR660From(IsInvocationOfRequiredSignal, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SignalInvocation_c inst = (SignalInvocation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SignalInvocation_c SignalInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SignalInvocation_c result=findSignalInvocationInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static SignalInvocation_c findSignalInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SignalInvocation_c x = (SignalInvocation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static SignalInvocation_c SignalInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SignalInvocationInstance(modelRoot,test,true);
  }
  
  public static SignalInvocation_c SignalInvocationInstance(ModelRoot modelRoot)
  {
	 return SignalInvocationInstance(modelRoot,null,true);
  }

  public static SignalInvocation_c [] SignalInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(SignalInvocation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SignalInvocation_c x = (SignalInvocation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SignalInvocation_c[] ret_set = new SignalInvocation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SignalInvocation_c[0];
			}		
		} 
  }
  public static SignalInvocation_c [] SignalInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SignalInvocationInstances(modelRoot,test,true);
  }
  public static SignalInvocation_c [] SignalInvocationInstances(ModelRoot modelRoot)
  {
	return SignalInvocationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Signal Invocation.dispose call: ";
	Value_c testR630Inst = Value_c.getOneV_VALOnR630(this, false);

	if ( testR630Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "630 ";
	}
	ActualParameter_c testR662Inst = ActualParameter_c.getOneV_PAROnR662(this, false);

	if ( testR662Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "662 ";	
	}
	Statement_c testR603Inst27 = Statement_c.getOneACT_SMTOnR603(this, false);

	if ( testR603Inst27 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "603 ";
	}
	ProvidedSignal_c testR663Inst = ProvidedSignal_c.getOneSPR_PSOnR663(this, false);

	if ( testR663Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "663 ";
	}
	RequiredSignal_c testR660Inst = RequiredSignal_c.getOneSPR_RSOnR660(this, false);

	if ( testR660Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "660 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Signal Invocation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("statement_id")){
         return true;
      }
      if(attributeName.equals("providedsig_id")){
         return true;
      }
      if(attributeName.equals("requiredsig_id")){
         return true;
      }
      if(attributeName.equals("value_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getStatement_idLongBased()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStatement_id()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeStatement != null );
 
 }                  

  public java.util.UUID getStatement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_statement_id) )
      return m_statement_id;
    else
      return getStatement_id();
  }
  
  public void setStatement_id(java.util.UUID newValue)
  {
   m_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  public int getSignamelinenumber()
  {
    return m_signamelinenumber ;
  }


  public void setSignamelinenumber(int newValue)
  {
   m_signamelinenumber = newValue ;
  }
  public int getSignamecolumn()
  {
    return m_signamecolumn ;
  }


  public void setSignamecolumn(int newValue)
  {
   m_signamecolumn = newValue ;
  }
  public int getOwnernamelinenumber()
  {
    return m_ownernamelinenumber ;
  }


  public void setOwnernamelinenumber(int newValue)
  {
   m_ownernamelinenumber = newValue ;
  }
  public int getOwnernamecolumn()
  {
    return m_ownernamecolumn ;
  }


  public void setOwnernamecolumn(int newValue)
  {
   m_ownernamecolumn = newValue ;
  }
  public long getProvidedsig_idLongBased()
  {
    if ( IsInvocationOfProvidedSignal != null )
    {
      return IsInvocationOfProvidedSignal.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getProvidedsig_id()
  {
    if ( IsInvocationOfProvidedSignal != null )
    {
      return IsInvocationOfProvidedSignal.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getProvidedsig_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_providedsig_id) )
      return m_providedsig_id;
    else
      return getProvidedsig_id();
  }
  
  public void setProvidedsig_id(java.util.UUID newValue)
  {
   m_providedsig_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getRequiredsig_idLongBased()
  {
    if ( IsInvocationOfRequiredSignal != null )
    {
      return IsInvocationOfRequiredSignal.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRequiredsig_id()
  {
    if ( IsInvocationOfRequiredSignal != null )
    {
      return IsInvocationOfRequiredSignal.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRequiredsig_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_requiredsig_id) )
      return m_requiredsig_id;
    else
      return getRequiredsig_id();
  }
  
  public void setRequiredsig_id(java.util.UUID newValue)
  {
   m_requiredsig_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getValue_idLongBased()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getValue_id()
  {
    if ( HasTargetValue != null )
    {
      return HasTargetValue.getValue_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getValue_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_value_id) )
      return m_value_id;
    else
      return getValue_id();
  }
  
  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Signal Invocation", //$NON-NLS-1$
	  " Operation entered: Signal Invocation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SignalInvocation_c [] objs = SignalInvocation_c.SignalInvocationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Signal Invocation", //$NON-NLS-1$
	  " Operation entered: Signal Invocation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SignalInvocation_c_test40292_c implements ClassQueryInterface_c
    {
	  SignalInvocation_c_test40292_c( java.util.UUID            p40293 ) {
	  m_p40293 = p40293;
	  }
	  private java.util.UUID             m_p40293; 
	  public boolean evaluate (Object candidate)
	  {
	      SignalInvocation_c selected = (SignalInvocation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40293));
	      return retval;
	  }
    }

    SignalInvocation_c [] objs40291 = 
    SignalInvocation_c.SignalInvocationInstances(modelRoot, new SignalInvocation_c_test40292_c(getStatement_id())) ;

    if ( (  (objs40291.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40291.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40291.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs40291.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40291.length )  + " Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40291.length )  + " Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Signal Invocation is a subtype in association: rel.Numb = 603
          // The supertype class is: Statement
    class Statement_c_test40297_c implements ClassQueryInterface_c
    {
	  Statement_c_test40297_c( java.util.UUID            p40298 ) {
	  m_p40298 = p40298;
	  }
	  private java.util.UUID             m_p40298; 
	  public boolean evaluate (Object candidate)
	  {
	      Statement_c selected = (Statement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40298));
	      return retval;
	  }
    }

    Statement_c [] objs40296 = 
    Statement_c.StatementInstances(modelRoot, new Statement_c_test40297_c(getStatement_id())) ;

    if ( (  (objs40296.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40296.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40296.length )  , e); 
      }
      retval = false;

    }

          // Signal Invocation is a referring class in association: rel.Numb = 663
          // The participating class is: Provided Signal
    class ProvidedSignal_c_test40300_c implements ClassQueryInterface_c
    {
	  ProvidedSignal_c_test40300_c( java.util.UUID            p40301 ) {
	  m_p40301 = p40301;
	  }
	  private java.util.UUID             m_p40301; 
	  public boolean evaluate (Object candidate)
	  {
	      ProvidedSignal_c selected = (ProvidedSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p40301));
	      return retval;
	  }
    }

    ProvidedSignal_c [] objs40299 = 
    ProvidedSignal_c.ProvidedSignalInstances(modelRoot, new ProvidedSignal_c_test40300_c(getProvidedsig_id())) ;

    if ( (  (objs40299.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Association: 663: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40299.length )  + " ProvidedSig_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Association: 663: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40299.length )  + " ProvidedSig_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Signal Invocation is a referring class in association: rel.Numb = 660
          // The participating class is: Required Signal
    class RequiredSignal_c_test40303_c implements ClassQueryInterface_c
    {
	  RequiredSignal_c_test40303_c( java.util.UUID            p40304 ) {
	  m_p40304 = p40304;
	  }
	  private java.util.UUID             m_p40304; 
	  public boolean evaluate (Object candidate)
	  {
	      RequiredSignal_c selected = (RequiredSignal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p40304));
	      return retval;
	  }
    }

    RequiredSignal_c [] objs40302 = 
    RequiredSignal_c.RequiredSignalInstances(modelRoot, new RequiredSignal_c_test40303_c(getRequiredsig_id())) ;

    if ( (  (objs40302.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Association: 660: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40302.length )  + " RequiredSig_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Association: 660: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40302.length )  + " RequiredSig_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Signal Invocation is a referring class in association: rel.Numb = 630
          // The participating class is: Value
    class Value_c_test40306_c implements ClassQueryInterface_c
    {
	  Value_c_test40306_c( java.util.UUID            p40307 ) {
	  m_p40307 = p40307;
	  }
	  private java.util.UUID             m_p40307; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p40307));
	      return retval;
	  }
    }

    Value_c [] objs40305 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test40306_c(getValue_id())) ;

    if ( (  (objs40305.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Signal Invocation", //$NON-NLS-1$
           "Consistency: Object: Signal Invocation: Association: 630: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40305.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Signal Invocation: Association: 630: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40305.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Signal Invocation is a participating class in association: rel.Numb = 662
             // Object: Actual Parameter
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Signal Invocation", " Operation entered: SignalInvocation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredSignal_c v_reqSig = RequiredSignal_c.getOneSPR_RSOnR660(this);


if (   (v_reqSig != null) )
{

this.unrelateAcrossR660From(v_reqSig);



}

ProvidedSignal_c v_proSig = ProvidedSignal_c.getOneSPR_PSOnR663(this);


if ( (  (v_proSig != null)) )
{

this.unrelateAcrossR663From(v_proSig);



}

ActualParameter_c [] v_parm_set = ActualParameter_c.getManyV_PARsOnR662(this);


ActualParameter_c  v_parm = null;
for ( int i37264 = 0; i37264 < v_parm_set.length; i37264++)
{
  v_parm = v_parm_set[i37264] ;

this.unrelateAcrossR662From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Value_c v_targetVal = Value_c.getOneV_VALOnR630(this);


if (   (v_targetVal != null) )
{

this.unrelateAcrossR630From(v_targetVal);


if (v_targetVal != null) {
v_targetVal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Execute(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Signal Invocation", " Operation entered: SignalInvocation::Execute") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End execute
  public  boolean      Setupparametervalues(final java.util.UUID         p_Channel_id,final java.util.UUID         p_Ee_id,final java.util.UUID         p_Event_inst_id,final boolean      p_Executeremotely,final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Signal Invocation", " Operation entered: SignalInvocation::Setupparametervalues") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End setupParameterValues

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Signal Invocation
