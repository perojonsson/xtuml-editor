package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Action_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Action_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Action_c(ModelRoot modelRoot, java.util.UUID p_m_act_id,
			java.util.UUID p_m_sm_id, int p_m_suc_pars,
			String p_m_action_semantics_internal, String p_m_descrip) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
		//extract 28 bit value only            
		m_act_idLongBased = 0xfffffff & p_m_act_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		m_suc_pars = p_m_suc_pars;
		// default value for m_action_semantics
		m_descrip = p_m_descrip;
		m_action_semantics_internal = p_m_action_semantics_internal;

		setUniqueId(m_act_id);
		Object[] key = {m_sm_id, m_act_id};
		addInstanceToMap(key);
	}
	static public Action_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id,
			int p_m_suc_pars, String p_m_action_semantics_internal,
			String p_m_descrip, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Action_c.class);
		Action_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_act_id};
			new_inst = (Action_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//extract 28 bit value only            
				new_inst.m_act_idLongBased = 0xfffffff & p_m_act_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				new_inst.m_suc_pars = p_m_suc_pars;
				// default value for m_action_semantics
				new_inst.m_descrip = p_m_descrip;
				new_inst.m_action_semantics_internal = p_m_action_semantics_internal;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Action_c(modelRoot, p_m_act_id, p_m_sm_id,
					p_m_suc_pars, p_m_action_semantics_internal, p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Action_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id,
			int p_m_suc_pars, String p_m_action_semantics_internal,
			String p_m_descrip) {
		InstanceList instances = modelRoot.getInstanceList(Action_c.class);
		Action_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_act_id};
			source = (Action_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//extract 28 bit value only            
				source.m_act_idLongBased = 0xfffffff & p_m_act_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				source.m_suc_pars = p_m_suc_pars;
				// default value for m_action_semantics
				source.m_descrip = p_m_descrip;
				source.m_action_semantics_internal = p_m_action_semantics_internal;

				return source;
			}
		}
		// there is no instance matching the id
		Action_c new_inst = new Action_c(modelRoot, p_m_act_id, p_m_sm_id,
				p_m_suc_pars, p_m_action_semantics_internal, p_m_descrip);
		return new_inst;
	}
	public Action_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_act_id = idAssigner.createUUID();
		m_sm_id = IdAssigner.NULL_UUID;
		m_suc_pars = Parsestatus_c.OOA_UNINITIALIZED_ENUM;
		m_action_semantics = "";
		m_descrip = "";
		m_action_semantics_internal = "";
		setUniqueId(m_act_id);
		Object[] key = {m_sm_id, m_act_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_sm_id, m_act_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_sm_id != p_newKey) {

			m_sm_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Action_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Action_c)) {
			return false;
		}

		Action_c me = (Action_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((Action_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((Action_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAct_id()) || IdAssigner.NULL_UUID
						.equals(((Action_c) elem).getAct_id())) && this != elem)) {
			return false;
		}
		if (!getAct_id().equals(((Action_c) elem).getAct_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Action_c)) {
			return false;
		}

		Action_c me = (Action_c) elem;
		if (!getSm_idCachedValue().equals(
				((Action_c) elem).getSm_idCachedValue()))
			return false;
		if (!getAct_id().equals(((Action_c) elem).getAct_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_act_id;
	private long m_act_idLongBased;
	private java.util.UUID m_sm_id;
	private int m_suc_pars;
	private String m_action_semantics;
	private String m_descrip;
	private String m_action_semantics_internal;

	// declare association references from this class

	// referring navigation

	StateMachine_c StateMachine;
	public void relateAcrossR515To(StateMachine_c target) {
		relateAcrossR515To(target, true);
	}
	public void relateAcrossR515To(StateMachine_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == StateMachine)
			return; // already related

		if (StateMachine != target) {

			Object oldKey = getInstanceKey();

			if (StateMachine != null) {

				StateMachine.clearBackPointerR515To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Action_c.relateAcrossR515To(StateMachine_c target)",
									"Relate performed across R515 from Action to State Machine without unrelate of prior instance.");
				}
			}

			StateMachine = target;
			m_sm_id = target.getSm_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR515To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "515", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR515From(StateMachine_c target) {
		unrelateAcrossR515From(target, true);
	}
	public void unrelateAcrossR515From(StateMachine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (StateMachine == null)
			return; // already unrelated

		if (target != StateMachine) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R515",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR515To(this);
		}

		if (StateMachine != null) {

			m_sm_id = StateMachine.getSm_id();
			StateMachine = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "515", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Action_c getOneSM_ACTOnR515(StateMachine_c[] targets) {
		return getOneSM_ACTOnR515(targets, null);
	}

	public static Action_c getOneSM_ACTOnR515(StateMachine_c[] targets,
			ClassQueryInterface_c test) {
		Action_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_ACTOnR515(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Action_c getOneSM_ACTOnR515(StateMachine_c target) {
		return getOneSM_ACTOnR515(target, null);
	}

	public static Action_c getOneSM_ACTOnR515(StateMachine_c target,
			boolean loadComponent) {
		return getOneSM_ACTOnR515(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Action_c getOneSM_ACTOnR515(StateMachine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_ACTOnR515(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Action_c getOneSM_ACTOnR515(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test) {
		return getOneSM_ACTOnR515(modelRoot, target, test, true);
	}

	public static Action_c getOneSM_ACTOnR515(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_ACTOnR515(modelRoot, target, test);
	}
	private static Action_c find_getOneSM_ACTOnR515(ModelRoot modelRoot,
			StateMachine_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsActionContains_R515) {
				for (int i = 0; i < target.backPointer_ContainsActionContains_R515
						.size(); ++i) {
					Action_c source = (Action_c) target.backPointer_ContainsActionContains_R515
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c[] targets) {
		return getManySM_ACTsOnR515(targets, null);
	}
	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c[] targets,
			boolean loadComponent) {
		return getManySM_ACTsOnR515(targets, null, loadComponent);
	}
	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR515(targets, test, true);
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Action_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Action_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsActionContains_R515) {
				for (int j = 0; j < targets[i].backPointer_ContainsActionContains_R515
						.size(); ++j) {
					Action_c source = (Action_c) targets[i].backPointer_ContainsActionContains_R515
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Action_c[] ret_set = new Action_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Action_c[0];
		}
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c target) {
		return getManySM_ACTsOnR515(target, null);
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c target,
			boolean loadComponent) {
		return getManySM_ACTsOnR515(target, null, loadComponent);
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c target,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR515(target, test, true);
	}

	public static Action_c[] getManySM_ACTsOnR515(StateMachine_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Action_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsActionContains_R515) {
			for (int i = 0; i < target.backPointer_ContainsActionContains_R515
					.size(); ++i) {
				Action_c source = (Action_c) target.backPointer_ContainsActionContains_R515
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Action_c[] ret_set = new Action_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Action_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ActionHome_c backPointer_ResidesInActionHomeResidesIn_R514;

	public void setActionHomeOrderInChildListR514(ActionHome_c target, int index) {
		unrelateAcrossR514From(target);
		ActionHome_c[] elements = ActionHome_c.getManySM_AHsOnR514(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR514From((ActionHome_c) elements[i]);
			}
			count++;
		}
		relateAcrossR514To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR514To((ActionHome_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR514To(ActionHome_c target) {
		if (target != null) {
			target.relateAcrossR514To(this, true);
		}
	}

	public void relateAcrossR514To(ActionHome_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR514To(this, notifyChanges);
		}
	}

	public void setBackPointerR514To(ActionHome_c target) {
		backPointer_ResidesInActionHomeResidesIn_R514 = target;
	}

	public void unrelateAcrossR514From(ActionHome_c target) {
		if (target != null) {
			target.unrelateAcrossR514From(this, true);
		}
	}

	public void unrelateAcrossR514From(ActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR514From(this, notifyChanges);
		}
	}

	public void clearBackPointerR514To(ActionHome_c target) {
		if (target == backPointer_ResidesInActionHomeResidesIn_R514) {
			backPointer_ResidesInActionHomeResidesIn_R514 = null;
		}
	}

	public static Action_c getOneSM_ACTOnR514(ActionHome_c[] targets) {
		return getOneSM_ACTOnR514(targets, null);
	}

	public static Action_c getOneSM_ACTOnR514(ActionHome_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSM_ACTOnR514(targets, test, true);
	}

	public static Action_c getOneSM_ACTOnR514(ActionHome_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Action_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Action_c candidate_val = getOneSM_ACTOnR514(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_ACTOnR514(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Action_c getOneSM_ACTOnR514(ActionHome_c target) {
		return getOneSM_ACTOnR514(target, true);
	}
	public static Action_c getOneSM_ACTOnR514(ActionHome_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.HousesAction;
		} else {
			return null;
		}
	}

	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR514(targets, test, true);
	}

	public static Action_c [] getManySM_ACTsOnR514(ActionHome_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Action_c[0];
  
  
  LinkedHashSet<Action_c> elementsSet = new LinkedHashSet<Action_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HousesAction == null)
	  targets[i].loadProxy();
    Action_c associate = targets[i].HousesAction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Action_c[] result = new Action_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c[] targets) {
		return getManySM_ACTsOnR514(targets, null);
	}

	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ActionHome_c[] targetArray = new ActionHome_c[1];
			targetArray[0] = target;
			return getManySM_ACTsOnR514(targetArray, test, loadComponent);
		} else {
			Action_c[] result = new Action_c[0];
			return result;
		}

	}

	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c target,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR514(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c target) {
		return getManySM_ACTsOnR514(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR514(ActionHome_c target,
			boolean loadComponent) {
		return getManySM_ACTsOnR514(target, null, loadComponent);
	}

	// referred to navigation

	StateActionBody_c backPointer_StateActionBody_R691;

	public void setStateActionBodyOrderInChildListR691(
			StateActionBody_c target, int index) {
		unrelateAcrossR691From(target);
		StateActionBody_c[] elements = StateActionBody_c
				.getManyACT_SABsOnR691(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR691From((StateActionBody_c) elements[i]);
			}
			count++;
		}
		relateAcrossR691To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR691To((StateActionBody_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR691To(StateActionBody_c target) {
		if (target != null) {
			target.relateAcrossR691To(this, true);
		}
	}

	public void relateAcrossR691To(StateActionBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR691To(this, notifyChanges);
		}
	}

	public void setBackPointerR691To(StateActionBody_c target) {
		backPointer_StateActionBody_R691 = target;
	}

	public void unrelateAcrossR691From(StateActionBody_c target) {
		if (target != null) {
			target.unrelateAcrossR691From(this, true);
		}
	}

	public void unrelateAcrossR691From(StateActionBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR691From(this, notifyChanges);
		}
	}

	public void clearBackPointerR691To(StateActionBody_c target) {
		if (target == backPointer_StateActionBody_R691) {
			backPointer_StateActionBody_R691 = null;
		}
	}

	public static Action_c getOneSM_ACTOnR691(StateActionBody_c[] targets) {
		return getOneSM_ACTOnR691(targets, null);
	}

	public static Action_c getOneSM_ACTOnR691(StateActionBody_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSM_ACTOnR691(targets, test, true);
	}

	public static Action_c getOneSM_ACTOnR691(StateActionBody_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Action_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Action_c candidate_val = getOneSM_ACTOnR691(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_ACTOnR691(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Action_c getOneSM_ACTOnR691(StateActionBody_c target) {
		return getOneSM_ACTOnR691(target, true);
	}
	public static Action_c getOneSM_ACTOnR691(StateActionBody_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.SpecifiesProcessingForAction;
		} else {
			return null;
		}
	}

	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR691(targets, test, true);
	}

	public static Action_c [] getManySM_ACTsOnR691(StateActionBody_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Action_c[0];
  
  
  LinkedHashSet<Action_c> elementsSet = new LinkedHashSet<Action_c>();
  for (int i = 0; i < targets.length; i++) {
    Action_c associate = targets[i].SpecifiesProcessingForAction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Action_c[] result = new Action_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c[] targets) {
		return getManySM_ACTsOnR691(targets, null);
	}

	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			StateActionBody_c[] targetArray = new StateActionBody_c[1];
			targetArray[0] = target;
			return getManySM_ACTsOnR691(targetArray, test, loadComponent);
		} else {
			Action_c[] result = new Action_c[0];
			return result;
		}

	}

	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c target,
			ClassQueryInterface_c test) {
		return getManySM_ACTsOnR691(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c target) {
		return getManySM_ACTsOnR691(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR691(StateActionBody_c target,
			boolean loadComponent) {
		return getManySM_ACTsOnR691(target, null, loadComponent);
	}

	// referred to navigation

	TransitionActionBody_c backPointer_TransitionActionBody_R688;

	public void setTransitionActionBodyOrderInChildListR688(
			TransitionActionBody_c target, int index) {
		unrelateAcrossR688From(target);
		TransitionActionBody_c[] elements = TransitionActionBody_c
				.getManyACT_TABsOnR688(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR688From((TransitionActionBody_c) elements[i]);
			}
			count++;
		}
		relateAcrossR688To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR688To((TransitionActionBody_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR688To(TransitionActionBody_c target) {
		if (target != null) {
			target.relateAcrossR688To(this, true);
		}
	}

	public void relateAcrossR688To(TransitionActionBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR688To(this, notifyChanges);
		}
	}

	public void setBackPointerR688To(TransitionActionBody_c target) {
		backPointer_TransitionActionBody_R688 = target;
	}

	public void unrelateAcrossR688From(TransitionActionBody_c target) {
		if (target != null) {
			target.unrelateAcrossR688From(this, true);
		}
	}

	public void unrelateAcrossR688From(TransitionActionBody_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR688From(this, notifyChanges);
		}
	}

	public void clearBackPointerR688To(TransitionActionBody_c target) {
		if (target == backPointer_TransitionActionBody_R688) {
			backPointer_TransitionActionBody_R688 = null;
		}
	}

	public static Action_c getOneSM_ACTOnR688(TransitionActionBody_c[] targets) {
		return getOneSM_ACTOnR688(targets, null);
	}

	public static Action_c getOneSM_ACTOnR688(TransitionActionBody_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSM_ACTOnR688(targets, test, true);
	}

	public static Action_c getOneSM_ACTOnR688(TransitionActionBody_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Action_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Action_c candidate_val = getOneSM_ACTOnR688(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_ACTOnR688(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Action_c getOneSM_ACTOnR688(TransitionActionBody_c target) {
		return getOneSM_ACTOnR688(target, true);
	}
	public static Action_c getOneSM_ACTOnR688(TransitionActionBody_c target,
			boolean loadComponent) {
		if (target != null) {
			return target.SpecifiesProcessingForAction;
		} else {
			return null;
		}
	}

	public static Action_c[] getManySM_ACTsOnR688(
			TransitionActionBody_c[] targets, ClassQueryInterface_c test) {
		return getManySM_ACTsOnR688(targets, test, true);
	}

	public static Action_c [] getManySM_ACTsOnR688(TransitionActionBody_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Action_c[0];
  
  
  LinkedHashSet<Action_c> elementsSet = new LinkedHashSet<Action_c>();
  for (int i = 0; i < targets.length; i++) {
    Action_c associate = targets[i].SpecifiesProcessingForAction;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Action_c[] result = new Action_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Action_c[] getManySM_ACTsOnR688(
			TransitionActionBody_c[] targets) {
		return getManySM_ACTsOnR688(targets, null);
	}

	public static Action_c[] getManySM_ACTsOnR688(
			TransitionActionBody_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			TransitionActionBody_c[] targetArray = new TransitionActionBody_c[1];
			targetArray[0] = target;
			return getManySM_ACTsOnR688(targetArray, test, loadComponent);
		} else {
			Action_c[] result = new Action_c[0];
			return result;
		}

	}

	public static Action_c[] getManySM_ACTsOnR688(
			TransitionActionBody_c target, ClassQueryInterface_c test) {
		return getManySM_ACTsOnR688(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR688(TransitionActionBody_c target) {
		return getManySM_ACTsOnR688(target, null, true);
	}

	public static Action_c[] getManySM_ACTsOnR688(
			TransitionActionBody_c target, boolean loadComponent) {
		return getManySM_ACTsOnR688(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (StateMachine == null) {
			// R515
			StateMachine_c relInst39315 = (StateMachine_c) baseRoot
					.getInstanceList(StateMachine_c.class).get(
							new Object[]{m_sm_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39315 == null) {
				relInst39315 = (StateMachine_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(StateMachine_c.class)
						.get(new Object[]{m_sm_id});
			}
			if (relInst39315 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39315 = (StateMachine_c) roots[i].getInstanceList(
							StateMachine_c.class).get(new Object[]{m_sm_id});
					if (relInst39315 != null)
						break;
				}
			}
			//synchronized
			if (relInst39315 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39315) && !isProxy())) {
					relInst39315.relateAcrossR515To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R515
		// SM_SM
		inst = StateMachine;
		unrelateAcrossR515From(StateMachine, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Action_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Action_c inst = (Action_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Action_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Action_c ActionInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Action_c result = findActionInstance(modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					Action_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActionInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static Action_c findActionInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Action_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Action_c x = (Action_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static Action_c ActionInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionInstance(modelRoot, test, true);
	}

	public static Action_c ActionInstance(ModelRoot modelRoot) {
		return ActionInstance(modelRoot, null, true);
	}

	public static Action_c[] ActionInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					Action_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(Action_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Action_c x = (Action_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Action_c[] ret_set = new Action_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Action_c[0];
			}
		}
	}
	public static Action_c[] ActionInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionInstances(modelRoot, test, true);
	}
	public static Action_c[] ActionInstances(ModelRoot modelRoot) {
		return ActionInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Action.dispose call: ";
		StateMachine_c testR515Inst = StateMachine_c.getOneSM_SMOnR515(this,
				false);

		if (testR515Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "515 ";
		}
		ActionHome_c testR514Inst = ActionHome_c.getOneSM_AHOnR514(this, false);

		if (testR514Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "514 ";
		}
		StateActionBody_c testR691Inst = StateActionBody_c.getOneACT_SABOnR691(
				this, false);

		if (testR691Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "691 ";
		}
		TransitionActionBody_c testR688Inst = TransitionActionBody_c
				.getOneACT_TABOnR688(this, false);

		if (testR688Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "688 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Action", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("act_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getAct_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAct_idLongBased() {
		if (m_act_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_act_id)) {
			return 0xfffffff & m_act_id.getLeastSignificantBits();
		}
		return m_act_idLongBased;
	}
	public java.util.UUID getAct_id() {
		return m_act_id;
	}

	public void setAct_id(java.util.UUID newValue) {
		m_act_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSm_idLongBased() {
		if (StateMachine != null) {
			return StateMachine.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (StateMachine != null) {
			return StateMachine.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getSuc_pars() {
		return m_suc_pars;
	}

	public void setSuc_pars(int newValue) {
		if (m_suc_pars == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Suc_pars", new Integer(m_suc_pars), new Integer(newValue),
				true);

		m_suc_pars = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getAction_semantics() {
		ModelRoot modelRoot = getModelRoot();
		return Ooaofooa.Convertrelocatabletags(modelRoot,
				getAction_semantics_internal());

	}

	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getAction_semantics_internal() {
		return m_action_semantics_internal;
	}

	public void setAction_semantics_internal(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_action_semantics_internal)) {
				return;
			}
		} else if (m_action_semantics_internal != null) {
			if (m_action_semantics_internal.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Action_semantics_internal", m_action_semantics_internal,
				newValue, true);
		m_action_semantics_internal = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Action", //$NON-NLS-1$
				" Operation entered: Action::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Action_c[] objs = Action_c.ActionInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action", //$NON-NLS-1$
				" Operation entered: Action::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Action_c_test39317_c implements ClassQueryInterface_c {
			Action_c_test39317_c(java.util.UUID p39318, java.util.UUID p39319) {
				m_p39318 = p39318;
				m_p39319 = p39319;
			}
			private java.util.UUID m_p39318;
			private java.util.UUID m_p39319;
			public boolean evaluate(Object candidate) {
				Action_c selected = (Action_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39318))
						& (selected.getAct_id().equals(m_p39319));
				return retval;
			}
		}

		Action_c[] objs39316 = Action_c.ActionInstances(modelRoot,
				new Action_c_test39317_c(getSm_id(), getAct_id()));

		if (((objs39316.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39316.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Action: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39316.length), e);
			}
			retval = false;

		}

		if (((objs39316.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39316.length)
										+ " SM_ID: " + "Not Printable" + " Act_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39316.length)
										+ " SM_ID: " + "Not Printable" + " Act_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Action is a referring class in association: rel.Numb = 515
		// The participating class is: State Machine
		class StateMachine_c_test39323_c implements ClassQueryInterface_c {
			StateMachine_c_test39323_c(java.util.UUID p39324) {
				m_p39324 = p39324;
			}
			private java.util.UUID m_p39324;
			public boolean evaluate(Object candidate) {
				StateMachine_c selected = (StateMachine_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39324));
				return retval;
			}
		}

		StateMachine_c[] objs39322 = StateMachine_c.StateMachineInstances(
				modelRoot, new StateMachine_c_test39323_c(getSm_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39322.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Association: 515: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39322.length)
										+ " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action: Association: 515: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39322.length)
										+ " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Action is a participating class in association: rel.Numb = 514
		// Object: Action Home
		class ActionHome_c_test39326_c implements ClassQueryInterface_c {
			ActionHome_c_test39326_c(java.util.UUID p39327,
					java.util.UUID p39328) {
				m_p39327 = p39327;
				m_p39328 = p39328;
			}
			private java.util.UUID m_p39327;
			private java.util.UUID m_p39328;
			public boolean evaluate(Object candidate) {
				ActionHome_c selected = (ActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39327))
						& (selected.getAct_id().equals(m_p39328));
				return retval;
			}
		}

		ActionHome_c[] objs39325 = ActionHome_c.ActionHomeInstances(modelRoot,
				new ActionHome_c_test39326_c(getSm_id(), getAct_id()));

		if (((objs39325.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Association: 514: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39325.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action: Association: 514: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39325.length), e);
			}
			retval = false;

		}

		// Action is a participating class in association: rel.Numb = 691
		// Object: State Action Body
		class StateActionBody_c_test39330_c implements ClassQueryInterface_c {
			StateActionBody_c_test39330_c(java.util.UUID p39331,
					java.util.UUID p39332) {
				m_p39331 = p39331;
				m_p39332 = p39332;
			}
			private java.util.UUID m_p39331;
			private java.util.UUID m_p39332;
			public boolean evaluate(Object candidate) {
				StateActionBody_c selected = (StateActionBody_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39331))
						& (selected.getAct_id().equals(m_p39332));
				return retval;
			}
		}

		StateActionBody_c[] objs39329 = StateActionBody_c
				.StateActionBodyInstances(modelRoot,
						new StateActionBody_c_test39330_c(getSm_id(),
								getAct_id()));

		if (((objs39329.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Association: 691: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39329.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action: Association: 691: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39329.length), e);
			}
			retval = false;

		}

		// Action is a participating class in association: rel.Numb = 688
		// Object: Transition Action Body
		class TransitionActionBody_c_test39334_c
				implements
					ClassQueryInterface_c {
			TransitionActionBody_c_test39334_c(java.util.UUID p39335,
					java.util.UUID p39336) {
				m_p39335 = p39335;
				m_p39336 = p39336;
			}
			private java.util.UUID m_p39335;
			private java.util.UUID m_p39336;
			public boolean evaluate(Object candidate) {
				TransitionActionBody_c selected = (TransitionActionBody_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39335))
						& (selected.getAct_id().equals(m_p39336));
				return retval;
			}
		}

		TransitionActionBody_c[] objs39333 = TransitionActionBody_c
				.TransitionActionBodyInstances(modelRoot,
						new TransitionActionBody_c_test39334_c(getSm_id(),
								getAct_id()));

		if (((objs39333.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action", //$NON-NLS-1$
								"Consistency: Object: Action: Association: 688: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39333.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action: Association: 688: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39333.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action",
				" Operation entered: Action::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR515(this);

		this.unrelateAcrossR515From(v_sm);

		ActionHome_c v_ah = ActionHome_c.getOneSM_AHOnR514(this);

		this.unrelateAcrossR514From(v_ah);

		if (v_ah != null) {
			v_ah.Dispose();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		Body_c v_body = Body_c.getOneACT_ACTOnR698(StateActionBody_c
				.getOneACT_SABOnR691(this));

		if ((v_body == null)) {

			v_body = Body_c.getOneACT_ACTOnR698(TransitionActionBody_c
					.getOneACT_TABOnR688(this));

		}

		if (((v_body != null))) {

			if (v_body != null) {
				v_body.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action",
				" Operation entered: Action::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineState_c v_st = StateMachineState_c
				.getOneSM_STATEOnR511(MooreActionHome_c
						.getOneSM_MOAHOnR513(ActionHome_c
								.getOneSM_AHOnR514(this)));

		Transition_c v_transition = Transition_c
				.getOneSM_TXNOnR530(TransitionActionHome_c
						.getOneSM_TAHOnR513(ActionHome_c
								.getOneSM_AHOnR514(this)));

		if (((v_st != null))) {

			return "State Action";

		}

		else {

			if (((v_transition != null))) {

				return "Transition Action";

			}

			return Ooaofooa.Getorphanedelementname(modelRoot);

		}

	} // End get_name
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action",
				" Operation entered: Action::Converttoinstance");
		// just return this instance as an Object
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Action
