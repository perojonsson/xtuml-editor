package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    CommunicationClassEventFormalizeOnMSG_AMWizardPage3.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class CommunicationClassEventFormalizeOnMSG_AMWizardPage3
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)

	// cache for user choices

	/**
	 * Constructors for CommunicationClassEventFormalizeOnMSG_AMWizardPage3.
	 */
	public CommunicationClassEventFormalizeOnMSG_AMWizardPage3() {
		super("");
		init();
	}

	public CommunicationClassEventFormalizeOnMSG_AMWizardPage3(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Formalize");
		setDescription("Choose the message to send");
	}

	public void onPageEntry() {
    Ooaofooa modelRoot = Selection.getModelRoot((StructuredSelection)
    	((CommunicationClassEventFormalizeOnMSG_AMWizard)getWizard()).getSelection());

    // cache for previous user selections
    StateMachineEvent_c v_Message = ((CommunicationClassEventFormalizeOnMSG_AMWizard)getWizard()).v_Message;

    // cache for context
    AsynchronousMessage_c v_asyncMessage = ((CommunicationClassEventFormalizeOnMSG_AMWizard)getWizard()).v_asyncMessage;
    ClassParticipant_c v_cp = ((CommunicationClassEventFormalizeOnMSG_AMWizard)getWizard()).v_cp;


if ( (  (v_asyncMessage != null)) )
{



if ( (  (v_cp != null)) )
{


Message_c v_message = Message_c.getOneMSG_MOnR1018(v_asyncMessage);


InteractionParticipant_c v_participant = InteractionParticipant_c.getOneSQ_POnR930(v_cp);


ModelClass_c v_mclass = ModelClass_c.getOneO_OBJOnR939(v_cp);


if ( (  (v_mclass != null)) )
{


StateMachine_c v_stateMachine = StateMachine_c.getOneSM_SMOnR517(ClassStateMachine_c.getOneSM_ASMOnR519(v_mclass));


ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR519(v_mclass);


InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR518(v_mclass);


java.util.UUID         v_asmId = Gd_c.Null_unique_id() ;


java.util.UUID         v_ismId = Gd_c.Null_unique_id() ;


if ( (  (v_asm != null)) )
{

v_asmId = v_asm.getSm_id() ;



}

if ( (  (v_ism != null)) )
{

v_ismId = v_ism.getSm_id() ;



}

StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR1009(EventMessage_c.getOneMSG_EOnR1019(v_asyncMessage));


java.util.UUID         v_existingId = Gd_c.Null_unique_id() ;


if ( (  (v_evt != null)) )
{

v_existingId = v_evt.getSmevt_id() ;



}

StateMachine_c v_machines1 = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, v_asmId);
List<StateMachine_c> v_machinesList = new ArrayList<StateMachine_c>();
if(v_machines1 != null) {
	v_machinesList.add(v_machines1);
}
StateMachine_c[] v_machines = v_machinesList.toArray(new StateMachine_c[v_machinesList.size()]);
StateMachine_c v_machines2 = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, v_ismId);
if(v_machines2 != null) {
	v_machinesList.add(v_machines2);
}
v_machines = v_machinesList.toArray(new StateMachine_c[v_machinesList.size()]);




if ( (  (v_Message != null)) )
{


}


}


}


}


  }
	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		return true;
	}

}
