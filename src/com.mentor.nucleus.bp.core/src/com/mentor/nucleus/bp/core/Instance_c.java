      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Instance_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INSTANCE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Instance_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Instance_c(ModelRoot modelRoot,
       java.util.UUID         p_m_inst_id,
       String       p_m_name,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_trans_id,
       String       p_m_label,
       String       p_m_default_name)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
       //extract 28 bit value only            
       m_inst_idLongBased = 0xfffffff & p_m_inst_id.getLeastSignificantBits();
       m_name = p_m_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       m_label = p_m_label;
       m_default_name = p_m_default_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
        
    setUniqueId(m_inst_id);
    Object [] key = {m_inst_id};
    addInstanceToMap(key);
  }
  static public Instance_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_inst_id,
       String       p_m_name,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_trans_id,
       String       p_m_label,
       String       p_m_default_name, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
      Instance_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_inst_id};
          new_inst = (Instance_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
       //extract 28 bit value only            
       new_inst.m_inst_idLongBased = 0xfffffff & p_m_inst_id.getLeastSignificantBits();
       new_inst.m_name = p_m_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       new_inst.m_label = p_m_label;
       new_inst.m_default_name = p_m_default_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Instance_c(modelRoot,
p_m_inst_id,
p_m_name,
p_m_sm_id,
p_m_smstt_id,
p_m_execution_engine_id,
p_m_trans_id,
p_m_label,
p_m_default_name
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Instance_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_inst_id,
       String       p_m_name,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_trans_id,
       String       p_m_label,
       String       p_m_default_name){
    InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
    Instance_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_inst_id
            };
        source = (Instance_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_inst_id = IdAssigner.preprocessUUID(p_m_inst_id);
       //extract 28 bit value only            
       source.m_inst_idLongBased = 0xfffffff & p_m_inst_id.getLeastSignificantBits();
       source.m_name = p_m_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       source.m_label = p_m_label;
       source.m_default_name = p_m_default_name;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Instance_c new_inst = new Instance_c(modelRoot,
p_m_inst_id,
p_m_name,
p_m_sm_id,
p_m_smstt_id,
p_m_execution_engine_id,
p_m_trans_id,
p_m_label,
p_m_default_name
);
    return new_inst;
  }
  public Instance_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_inst_id = idAssigner.createUUID();
     m_name = "";   
     m_sm_id = IdAssigner.NULL_UUID;   
     m_smstt_id = IdAssigner.NULL_UUID;   
     m_label = "";   
     m_default_name = "";   
     m_trans_id = IdAssigner.NULL_UUID;   
     m_execution_engine_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_inst_id);
    Object [] key = {m_inst_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_inst_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_inst_id !=  p_newKey ){
	
		m_inst_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Instance_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Instance_c)) {
           return false;
       }
       
       Instance_c me = (Instance_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getInst_id()) || IdAssigner.NULL_UUID.equals(((Instance_c)elem).getInst_id())) && this != elem)) {
      	return false;
      }
      if (!getInst_id().equals(((Instance_c)elem).getInst_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Instance_c)) {
           return false;
       }
       
       Instance_c me = (Instance_c)elem;
      if (!getInst_id().equals(((Instance_c)elem).getInst_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_inst_id ;
  private long m_inst_idLongBased ;
  private String       m_name ;
  private java.util.UUID         m_sm_id ;
  private java.util.UUID         m_smstt_id ;
  private String       m_label ;
  private String       m_default_name ;
  private java.util.UUID         m_trans_id ;
  private java.util.UUID         m_execution_engine_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Transition_c EnteredLastStateViaTransition ;
public void relateAcrossR2953To(Transition_c target)
{
	relateAcrossR2953To(target, true);
}
public void relateAcrossR2953To(Transition_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == EnteredLastStateViaTransition) return;  // already related

    if ( EnteredLastStateViaTransition != target ) {
    
    Object oldKey = getInstanceKey();

    if (EnteredLastStateViaTransition != null) {
    
        EnteredLastStateViaTransition.clearBackPointerR2953To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Instance_c.relateAcrossR2953To(Transition_c target)", 
			"Relate performed across R2953 from Instance to Transition without unrelate of prior instance.");  
		}
    }
                
    	EnteredLastStateViaTransition = target ;
        if(IdAssigner.NULL_UUID.equals(target.getSm_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_sm_id = target.getSm_idCachedValue();
        }
        m_trans_id = target.getTrans_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2953To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2953", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2953From(Transition_c target)
{
	unrelateAcrossR2953From(target, true);
}
public void unrelateAcrossR2953From(Transition_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (EnteredLastStateViaTransition == null) return;  // already unrelated
	
	if (target != EnteredLastStateViaTransition) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2953", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2953To(this);
    }
    

      if(EnteredLastStateViaTransition != null) {
      
        m_sm_id = EnteredLastStateViaTransition.getSm_id();
        if(IdAssigner.NULL_UUID.equals(m_sm_id))
        {
          m_sm_id = EnteredLastStateViaTransition.getSm_idCachedValue();
        }       
        m_trans_id = EnteredLastStateViaTransition.getTrans_id();
        EnteredLastStateViaTransition = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2953", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Instance_c getOneI_INSOnR2953(Transition_c [] targets)
{
    return getOneI_INSOnR2953(targets, null);
}

public static Instance_c getOneI_INSOnR2953(Transition_c [] targets, ClassQueryInterface_c test)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_INSOnR2953(targets[i], test);
        }
    }

    return ret_val;
}

public static Instance_c getOneI_INSOnR2953(Transition_c target)
{
  return getOneI_INSOnR2953(target, null);
}

public static Instance_c getOneI_INSOnR2953(Transition_c target, boolean loadComponent)
{
    return getOneI_INSOnR2953(target.getModelRoot(), target, null, loadComponent);
}

public static Instance_c getOneI_INSOnR2953(Transition_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_INSOnR2953(target.getModelRoot(), target, test);
  }
  return null;
}

public static Instance_c getOneI_INSOnR2953(ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test)
{
	return getOneI_INSOnR2953(modelRoot, target, test, true);
}

public static Instance_c getOneI_INSOnR2953(ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_INSOnR2953(modelRoot,target,test);
}
private static Instance_c find_getOneI_INSOnR2953(ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953) {
	    for ( int i = 0; i < target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.size(); ++i ) {
	      Instance_c source = (Instance_c)target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Instance_c [] getManyI_INSsOnR2953(Transition_c [] targets)
{
  return getManyI_INSsOnR2953(targets, null);
}
public static Instance_c [] getManyI_INSsOnR2953(Transition_c [] targets, boolean loadComponent)
{
  return getManyI_INSsOnR2953(targets, null, loadComponent);
}
public static Instance_c [] getManyI_INSsOnR2953(Transition_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2953(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2953(Transition_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Instance_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Instance_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953) {
	    for (int j = 0; j < targets[i].backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.size(); ++j) {
	      Instance_c source = (Instance_c)targets[i].backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Instance_c[] ret_set = new Instance_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Instance_c[0];
  }
  }

public static Instance_c [] getManyI_INSsOnR2953(Transition_c target)
{
  return getManyI_INSsOnR2953(target, null);
}

public static Instance_c [] getManyI_INSsOnR2953(Transition_c target, boolean loadComponent)
{
  return getManyI_INSsOnR2953(target, null, loadComponent);
}

public static Instance_c [] getManyI_INSsOnR2953(Transition_c target, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2953(target, test, true);
}

public static Instance_c [] getManyI_INSsOnR2953(Transition_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Instance_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953) {
    for (int i = 0; i < target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.size(); ++i) {
      Instance_c source = (Instance_c)target.backPointer_CausedLastStateChangeToInstanceCausedLastStateChangeTo_R2953.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Instance_c[] ret_set = new Instance_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Instance_c[0];
	}
  }


  
    
// referring navigation

StateMachineState_c OccupiesStateMachineState ;
public void relateAcrossR2915To(StateMachineState_c target)
{
	relateAcrossR2915To(target, true);
}
public void relateAcrossR2915To(StateMachineState_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OccupiesStateMachineState) return;  // already related

    if ( OccupiesStateMachineState != target ) {
    
    Object oldKey = getInstanceKey();

    if (OccupiesStateMachineState != null) {
    
        OccupiesStateMachineState.clearBackPointerR2915To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Instance_c.relateAcrossR2915To(StateMachineState_c target)", 
			"Relate performed across R2915 from Instance to State Machine State without unrelate of prior instance.");  
		}
    }
                
    	OccupiesStateMachineState = target ;
        if(IdAssigner.NULL_UUID.equals(target.getSm_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_sm_id = target.getSm_idCachedValue();
        }
        m_smstt_id = target.getSmstt_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2915To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2915", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2915From(StateMachineState_c target)
{
	unrelateAcrossR2915From(target, true);
}
public void unrelateAcrossR2915From(StateMachineState_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OccupiesStateMachineState == null) return;  // already unrelated
	
	if (target != OccupiesStateMachineState) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2915", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2915To(this);
    }
    

      if(OccupiesStateMachineState != null) {
      
        m_sm_id = OccupiesStateMachineState.getSm_id();
        if(IdAssigner.NULL_UUID.equals(m_sm_id))
        {
          m_sm_id = OccupiesStateMachineState.getSm_idCachedValue();
        }       
        m_smstt_id = OccupiesStateMachineState.getSmstt_id();
        OccupiesStateMachineState = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2915", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Instance_c getOneI_INSOnR2915(StateMachineState_c [] targets)
{
    return getOneI_INSOnR2915(targets, null);
}

public static Instance_c getOneI_INSOnR2915(StateMachineState_c [] targets, ClassQueryInterface_c test)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_INSOnR2915(targets[i], test);
        }
    }

    return ret_val;
}

public static Instance_c getOneI_INSOnR2915(StateMachineState_c target)
{
  return getOneI_INSOnR2915(target, null);
}

public static Instance_c getOneI_INSOnR2915(StateMachineState_c target, boolean loadComponent)
{
    return getOneI_INSOnR2915(target.getModelRoot(), target, null, loadComponent);
}

public static Instance_c getOneI_INSOnR2915(StateMachineState_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_INSOnR2915(target.getModelRoot(), target, test);
  }
  return null;
}

public static Instance_c getOneI_INSOnR2915(ModelRoot modelRoot, StateMachineState_c target, ClassQueryInterface_c test)
{
	return getOneI_INSOnR2915(modelRoot, target, test, true);
}

public static Instance_c getOneI_INSOnR2915(ModelRoot modelRoot, StateMachineState_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_INSOnR2915(modelRoot,target,test);
}
private static Instance_c find_getOneI_INSOnR2915(ModelRoot modelRoot, StateMachineState_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915) {
	    for ( int i = 0; i < target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.size(); ++i ) {
	      Instance_c source = (Instance_c)target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c [] targets)
{
  return getManyI_INSsOnR2915(targets, null);
}
public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c [] targets, boolean loadComponent)
{
  return getManyI_INSsOnR2915(targets, null, loadComponent);
}
public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2915(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Instance_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Instance_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesStateOfInstanceDefinesStateOf_R2915) {
	    for (int j = 0; j < targets[i].backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.size(); ++j) {
	      Instance_c source = (Instance_c)targets[i].backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Instance_c[] ret_set = new Instance_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Instance_c[0];
  }
  }

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c target)
{
  return getManyI_INSsOnR2915(target, null);
}

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c target, boolean loadComponent)
{
  return getManyI_INSsOnR2915(target, null, loadComponent);
}

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c target, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2915(target, test, true);
}

public static Instance_c [] getManyI_INSsOnR2915(StateMachineState_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Instance_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915) {
    for (int i = 0; i < target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.size(); ++i) {
      Instance_c source = (Instance_c)target.backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Instance_c[] ret_set = new Instance_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Instance_c[0];
	}
  }


  
    
// referring navigation

ComponentInstance_c CreatedByComponentInstance ;
public void relateAcrossR2957To(ComponentInstance_c target)
{
	relateAcrossR2957To(target, true);
}
public void relateAcrossR2957To(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == CreatedByComponentInstance) return;  // already related

    if ( CreatedByComponentInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (CreatedByComponentInstance != null) {
    
        CreatedByComponentInstance.clearBackPointerR2957To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Instance_c.relateAcrossR2957To(ComponentInstance_c target)", 
			"Relate performed across R2957 from Instance to Component Instance without unrelate of prior instance.");  
		}
    }
                
    	CreatedByComponentInstance = target ;
        m_execution_engine_id = target.getExecution_engine_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2957To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2957", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2957From(ComponentInstance_c target)
{
	unrelateAcrossR2957From(target, true);
}
public void unrelateAcrossR2957From(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (CreatedByComponentInstance == null) return;  // already unrelated
	
	if (target != CreatedByComponentInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2957", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2957To(this);
    }
    

      if(CreatedByComponentInstance != null) {
      
        m_execution_engine_id = CreatedByComponentInstance.getExecution_engine_id();
        CreatedByComponentInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2957", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Instance_c getOneI_INSOnR2957(ComponentInstance_c [] targets)
{
    return getOneI_INSOnR2957(targets, null);
}

public static Instance_c getOneI_INSOnR2957(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_INSOnR2957(targets[i], test);
        }
    }

    return ret_val;
}

public static Instance_c getOneI_INSOnR2957(ComponentInstance_c target)
{
  return getOneI_INSOnR2957(target, null);
}

public static Instance_c getOneI_INSOnR2957(ComponentInstance_c target, boolean loadComponent)
{
    return getOneI_INSOnR2957(target.getModelRoot(), target, null, loadComponent);
}

public static Instance_c getOneI_INSOnR2957(ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_INSOnR2957(target.getModelRoot(), target, test);
  }
  return null;
}

public static Instance_c getOneI_INSOnR2957(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getOneI_INSOnR2957(modelRoot, target, test, true);
}

public static Instance_c getOneI_INSOnR2957(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_INSOnR2957(modelRoot,target,test);
}
private static Instance_c find_getOneI_INSOnR2957(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CreatesInstanceCreates_R2957) {
	    for ( int i = 0; i < target.backPointer_CreatesInstanceCreates_R2957.size(); ++i ) {
	      Instance_c source = (Instance_c)target.backPointer_CreatesInstanceCreates_R2957.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c [] targets)
{
  return getManyI_INSsOnR2957(targets, null);
}
public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c [] targets, boolean loadComponent)
{
  return getManyI_INSsOnR2957(targets, null, loadComponent);
}
public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2957(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Instance_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Instance_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CreatesInstanceCreates_R2957) {
	    for (int j = 0; j < targets[i].backPointer_CreatesInstanceCreates_R2957.size(); ++j) {
	      Instance_c source = (Instance_c)targets[i].backPointer_CreatesInstanceCreates_R2957.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Instance_c[] ret_set = new Instance_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Instance_c[0];
  }
  }

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c target)
{
  return getManyI_INSsOnR2957(target, null);
}

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c target, boolean loadComponent)
{
  return getManyI_INSsOnR2957(target, null, loadComponent);
}

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2957(target, test, true);
}

public static Instance_c [] getManyI_INSsOnR2957(ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Instance_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_CreatesInstanceCreates_R2957) {
    for (int i = 0; i < target.backPointer_CreatesInstanceCreates_R2957.size(); ++i) {
      Instance_c source = (Instance_c)target.backPointer_CreatesInstanceCreates_R2957.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Instance_c[] ret_set = new Instance_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Instance_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<PendingEvent_c> backPointer_HasWaitingPendingEventHasWaiting_R2907 = new ArrayList<PendingEvent_c>();

public void setPendingEventOrderInChildListR2907(PendingEvent_c target, int index) {
	unrelateAcrossR2907From(target);
	PendingEvent_c[] elements = PendingEvent_c.getManyI_EVIsOnR2907(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2907From((PendingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2907To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2907To((PendingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2907To(PendingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR2907To(this, true) ;
  }
}

public void relateAcrossR2907To(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2907To(this, notifyChanges) ;
  }
}

public void setBackPointerR2907To(PendingEvent_c target)
{
  	synchronized (backPointer_HasWaitingPendingEventHasWaiting_R2907) {
		backPointer_HasWaitingPendingEventHasWaiting_R2907.add(target);
	}
}

public void unrelateAcrossR2907From(PendingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR2907From(this, true) ;
  }
}

public void unrelateAcrossR2907From(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2907From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2907To(PendingEvent_c target)
{
  synchronized (backPointer_HasWaitingPendingEventHasWaiting_R2907) {
	    backPointer_HasWaitingPendingEventHasWaiting_R2907.remove(target);
	}
}

public static Instance_c getOneI_INSOnR2907(PendingEvent_c [] targets)
{
    return getOneI_INSOnR2907(targets, null);
}

public static Instance_c getOneI_INSOnR2907(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_INSOnR2907(targets, test, true);
}

public static Instance_c getOneI_INSOnR2907(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Instance_c candidate_val = getOneI_INSOnR2907(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_INSOnR2907(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Instance_c getOneI_INSOnR2907(PendingEvent_c target)
{
	return getOneI_INSOnR2907(target, true);
}
public static Instance_c getOneI_INSOnR2907(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsPendingForInstance ;
  } else {
    return null;
  }
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2907(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Instance_c[0];
  
  
  LinkedHashSet<Instance_c> elementsSet = new LinkedHashSet<Instance_c>();
  for (int i = 0; i < targets.length; i++) {
    Instance_c associate = targets[i].IsPendingForInstance;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Instance_c[] result = new Instance_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c [] targets)
{
  return getManyI_INSsOnR2907(targets, null);
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_INSsOnR2907(targetArray, test, loadComponent);
  } else {
    Instance_c [] result = new Instance_c [0] ;
    return result ;
  }
  
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyI_INSsOnR2907(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c target)
{
    return getManyI_INSsOnR2907(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2907(PendingEvent_c target, boolean loadComponent)
{
    return getManyI_INSsOnR2907(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<PendingEvent_c> backPointer_IsTargetOfPendingEventIsTargetOf_R2935 = new ArrayList<PendingEvent_c>();

public void setPendingEventOrderInChildListR2935(PendingEvent_c target, int index) {
	unrelateAcrossR2935From(target);
	PendingEvent_c[] elements = PendingEvent_c.getManyI_EVIsOnR2935(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2935From((PendingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2935To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2935To((PendingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2935To(PendingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR2935To(this, true) ;
  }
}

public void relateAcrossR2935To(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2935To(this, notifyChanges) ;
  }
}

public void setBackPointerR2935To(PendingEvent_c target)
{
  	synchronized (backPointer_IsTargetOfPendingEventIsTargetOf_R2935) {
		backPointer_IsTargetOfPendingEventIsTargetOf_R2935.add(target);
	}
}

public void unrelateAcrossR2935From(PendingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR2935From(this, true) ;
  }
}

public void unrelateAcrossR2935From(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2935From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2935To(PendingEvent_c target)
{
  synchronized (backPointer_IsTargetOfPendingEventIsTargetOf_R2935) {
	    backPointer_IsTargetOfPendingEventIsTargetOf_R2935.remove(target);
	}
}

public static Instance_c getOneI_INSOnR2935(PendingEvent_c [] targets)
{
    return getOneI_INSOnR2935(targets, null);
}

public static Instance_c getOneI_INSOnR2935(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_INSOnR2935(targets, test, true);
}

public static Instance_c getOneI_INSOnR2935(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Instance_c candidate_val = getOneI_INSOnR2935(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_INSOnR2935(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Instance_c getOneI_INSOnR2935(PendingEvent_c target)
{
	return getOneI_INSOnR2935(target, true);
}
public static Instance_c getOneI_INSOnR2935(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.TargetsInstance ;
  } else {
    return null;
  }
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2935(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Instance_c[0];
  
  
  LinkedHashSet<Instance_c> elementsSet = new LinkedHashSet<Instance_c>();
  for (int i = 0; i < targets.length; i++) {
    Instance_c associate = targets[i].TargetsInstance;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Instance_c[] result = new Instance_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c [] targets)
{
  return getManyI_INSsOnR2935(targets, null);
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_INSsOnR2935(targetArray, test, loadComponent);
  } else {
    Instance_c [] result = new Instance_c [0] ;
    return result ;
  }
  
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyI_INSsOnR2935(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c target)
{
    return getManyI_INSsOnR2935(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2935(PendingEvent_c target, boolean loadComponent)
{
    return getManyI_INSsOnR2935(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<PendingEvent_c> backPointer_SendsPendingEventSends_R2937 = new ArrayList<PendingEvent_c>();

public void setPendingEventOrderInChildListR2937(PendingEvent_c target, int index) {
	unrelateAcrossR2937From(target);
	PendingEvent_c[] elements = PendingEvent_c.getManyI_EVIsOnR2937(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2937From((PendingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2937To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2937To((PendingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2937To(PendingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR2937To(this, true) ;
  }
}

public void relateAcrossR2937To(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2937To(this, notifyChanges) ;
  }
}

public void setBackPointerR2937To(PendingEvent_c target)
{
  	synchronized (backPointer_SendsPendingEventSends_R2937) {
		backPointer_SendsPendingEventSends_R2937.add(target);
	}
}

public void unrelateAcrossR2937From(PendingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR2937From(this, true) ;
  }
}

public void unrelateAcrossR2937From(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2937From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2937To(PendingEvent_c target)
{
  synchronized (backPointer_SendsPendingEventSends_R2937) {
	    backPointer_SendsPendingEventSends_R2937.remove(target);
	}
}

public static Instance_c getOneI_INSOnR2937(PendingEvent_c [] targets)
{
    return getOneI_INSOnR2937(targets, null);
}

public static Instance_c getOneI_INSOnR2937(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_INSOnR2937(targets, test, true);
}

public static Instance_c getOneI_INSOnR2937(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Instance_c candidate_val = getOneI_INSOnR2937(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_INSOnR2937(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Instance_c getOneI_INSOnR2937(PendingEvent_c target)
{
	return getOneI_INSOnR2937(target, true);
}
public static Instance_c getOneI_INSOnR2937(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WasSentFromInstance ;
  } else {
    return null;
  }
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2937(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Instance_c[0];
  
  
  LinkedHashSet<Instance_c> elementsSet = new LinkedHashSet<Instance_c>();
  for (int i = 0; i < targets.length; i++) {
    Instance_c associate = targets[i].WasSentFromInstance;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Instance_c[] result = new Instance_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c [] targets)
{
  return getManyI_INSsOnR2937(targets, null);
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_INSsOnR2937(targetArray, test, loadComponent);
  } else {
    Instance_c [] result = new Instance_c [0] ;
    return result ;
  }
  
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyI_INSsOnR2937(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c target)
{
    return getManyI_INSsOnR2937(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2937(PendingEvent_c target, boolean loadComponent)
{
    return getManyI_INSsOnR2937(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<LinkParticipation_c> backPointer_LinkParticipation_R2958 = new ArrayList<LinkParticipation_c>();

public void setLinkParticipationOrderInChildListR2958(LinkParticipation_c target, int index) {
	unrelateAcrossR2958From(target);
	LinkParticipation_c[] elements = LinkParticipation_c.getManyI_LIPsOnR2958(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2958From((LinkParticipation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2958To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2958To((LinkParticipation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2958To(LinkParticipation_c target)
{
  if (target != null) {
    target.relateAcrossR2958To(this, true) ;
  }
}

public void relateAcrossR2958To(LinkParticipation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2958To(this, notifyChanges) ;
  }
}

public void setBackPointerR2958To(LinkParticipation_c target)
{
  	synchronized (backPointer_LinkParticipation_R2958) {
		backPointer_LinkParticipation_R2958.add(target);
	}
}

public void unrelateAcrossR2958From(LinkParticipation_c target)
{
  if (target != null) {
    target.unrelateAcrossR2958From(this, true) ;
  }
}

public void unrelateAcrossR2958From(LinkParticipation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2958From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2958To(LinkParticipation_c target)
{
  synchronized (backPointer_LinkParticipation_R2958) {
	    backPointer_LinkParticipation_R2958.remove(target);
	}
}

public static Instance_c getOneI_INSOnR2958(LinkParticipation_c [] targets)
{
    return getOneI_INSOnR2958(targets, null);
}

public static Instance_c getOneI_INSOnR2958(LinkParticipation_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_INSOnR2958(targets, test, true);
}

public static Instance_c getOneI_INSOnR2958(LinkParticipation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Instance_c candidate_val = getOneI_INSOnR2958(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_INSOnR2958(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Instance_c getOneI_INSOnR2958(LinkParticipation_c target)
{
	return getOneI_INSOnR2958(target, true);
}
public static Instance_c getOneI_INSOnR2958(LinkParticipation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Instance ;
  } else {
    return null;
  }
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2958(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Instance_c[0];
  
  
  LinkedHashSet<Instance_c> elementsSet = new LinkedHashSet<Instance_c>();
  for (int i = 0; i < targets.length; i++) {
    Instance_c associate = targets[i].Instance;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Instance_c[] result = new Instance_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c [] targets)
{
  return getManyI_INSsOnR2958(targets, null);
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LinkParticipation_c [] targetArray = new LinkParticipation_c[1];
    targetArray[0] = target;
    return getManyI_INSsOnR2958(targetArray, test, loadComponent);
  } else {
    Instance_c [] result = new Instance_c [0] ;
    return result ;
  }
  
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c target,
    ClassQueryInterface_c test)
{
    return getManyI_INSsOnR2958(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c target)
{
    return getManyI_INSsOnR2958(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2958(LinkParticipation_c target, boolean loadComponent)
{
    return getManyI_INSsOnR2958(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<AttributeValue_c> backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909 = new ArrayList<AttributeValue_c>();

public void setAttributeValueOrderInChildListR2909(AttributeValue_c target, int index) {
	unrelateAcrossR2909From(target);
	AttributeValue_c[] elements = AttributeValue_c.getManyI_AVLsOnR2909(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2909From((AttributeValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2909To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2909To((AttributeValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2909To(AttributeValue_c target)
{
  if (target != null) {
    target.relateAcrossR2909To(this, true) ;
  }
}

public void relateAcrossR2909To(AttributeValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2909To(this, notifyChanges) ;
  }
}

public void setBackPointerR2909To(AttributeValue_c target)
{
  	synchronized (backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909) {
		backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909.add(target);
	}
}

public void unrelateAcrossR2909From(AttributeValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR2909From(this, true) ;
  }
}

public void unrelateAcrossR2909From(AttributeValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2909From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2909To(AttributeValue_c target)
{
  synchronized (backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909) {
	    backPointer_HasCharacteristicAbstractedByAttributeValueHasCharacteristicAbstractedBy_R2909.remove(target);
	}
}

public static Instance_c getOneI_INSOnR2909(AttributeValue_c [] targets)
{
    return getOneI_INSOnR2909(targets, null);
}

public static Instance_c getOneI_INSOnR2909(AttributeValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_INSOnR2909(targets, test, true);
}

public static Instance_c getOneI_INSOnR2909(AttributeValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Instance_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Instance_c candidate_val = getOneI_INSOnR2909(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_INSOnR2909(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Instance_c getOneI_INSOnR2909(AttributeValue_c target)
{
	return getOneI_INSOnR2909(target, true);
}
public static Instance_c getOneI_INSOnR2909(AttributeValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.DefinesValueForCharacteristicOfInstance ;
  } else {
    return null;
  }
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_INSsOnR2909(targets, test, true);
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Instance_c[0];
  
  
  LinkedHashSet<Instance_c> elementsSet = new LinkedHashSet<Instance_c>();
  for (int i = 0; i < targets.length; i++) {
    Instance_c associate = targets[i].DefinesValueForCharacteristicOfInstance;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Instance_c[] result = new Instance_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c [] targets)
{
  return getManyI_INSsOnR2909(targets, null);
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AttributeValue_c [] targetArray = new AttributeValue_c[1];
    targetArray[0] = target;
    return getManyI_INSsOnR2909(targetArray, test, loadComponent);
  } else {
    Instance_c [] result = new Instance_c [0] ;
    return result ;
  }
  
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c target,
    ClassQueryInterface_c test)
{
    return getManyI_INSsOnR2909(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c target)
{
    return getManyI_INSsOnR2909(target, null, true);
}

public static Instance_c [] getManyI_INSsOnR2909(AttributeValue_c target, boolean loadComponent)
{
    return getManyI_INSsOnR2909(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (EnteredLastStateViaTransition == null) {          
      // R2953
      Transition_c relInst40850 = (Transition_c) baseRoot.getInstanceList(Transition_c.class).get(new Object[] {m_trans_id,m_sm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40850 == null) {
      			relInst40850 = (Transition_c) Ooaofooa.getDefaultInstance().getInstanceList(Transition_c.class).get(new Object[] {m_trans_id,m_sm_id});
      		}
			if (relInst40850 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40850 = (Transition_c) roots[i].getInstanceList(Transition_c.class).get(new Object[] {m_trans_id,m_sm_id});
					if (relInst40850 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40850 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40850) && !isProxy())) {
	      relInst40850.relateAcrossR2953To(this, notifyChanges);
	  }
	  }
	}
	          

	if (OccupiesStateMachineState == null) {          
      // R2915
      StateMachineState_c relInst40851 = (StateMachineState_c) baseRoot.getInstanceList(StateMachineState_c.class).get(new Object[] {m_sm_id,m_smstt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40851 == null) {
      			relInst40851 = (StateMachineState_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachineState_c.class).get(new Object[] {m_sm_id,m_smstt_id});
      		}
			if (relInst40851 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40851 = (StateMachineState_c) roots[i].getInstanceList(StateMachineState_c.class).get(new Object[] {m_sm_id,m_smstt_id});
					if (relInst40851 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40851 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40851) && !isProxy())) {
	      relInst40851.relateAcrossR2915To(this, notifyChanges);
	  }
	  }
	}
	          

	if (CreatedByComponentInstance == null) {          
      // R2957
      ComponentInstance_c relInst40852 = (ComponentInstance_c) baseRoot.getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40852 == null) {
      			relInst40852 = (ComponentInstance_c) Ooaofooa.getDefaultInstance().getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
      		}
			if (relInst40852 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40852 = (ComponentInstance_c) roots[i].getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
					if (relInst40852 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40852 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40852) && !isProxy())) {
	      relInst40852.relateAcrossR2957To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R2953
      // SM_TXN
		  inst=EnteredLastStateViaTransition;
			unrelateAcrossR2953From(EnteredLastStateViaTransition, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2915
      // SM_STATE
		  inst=OccupiesStateMachineState;
			unrelateAcrossR2915From(OccupiesStateMachineState, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2957
      // I_EXE
		  inst=CreatedByComponentInstance;
			unrelateAcrossR2957From(CreatedByComponentInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Instance_c inst = (Instance_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Instance_c InstanceInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Instance_c result=findInstanceInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Instance_c findInstanceInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Instance_c x = (Instance_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Instance_c InstanceInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return InstanceInstance(modelRoot,test,true);
  }
  
  public static Instance_c InstanceInstance(ModelRoot modelRoot)
  {
	 return InstanceInstance(modelRoot,null,true);
  }

  public static Instance_c [] InstanceInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Instance_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Instance_c x = (Instance_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Instance_c[] ret_set = new Instance_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Instance_c[0];
			}		
		} 
  }
  public static Instance_c [] InstanceInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  InstanceInstances(modelRoot,test,true);
  }
  public static Instance_c [] InstanceInstances(ModelRoot modelRoot)
  {
	return InstanceInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Instance.dispose call: ";
	Transition_c testR2953Inst = Transition_c.getOneSM_TXNOnR2953(this, false);

	if ( testR2953Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2953 ";
	}
	StateMachineState_c testR2915Inst = StateMachineState_c.getOneSM_STATEOnR2915(this, false);

	if ( testR2915Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2915 ";
	}
	PendingEvent_c testR2907Inst = PendingEvent_c.getOneI_EVIOnR2907(this, false);

	if ( testR2907Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2907 ";	
	}
	PendingEvent_c testR2935Inst = PendingEvent_c.getOneI_EVIOnR2935(this, false);

	if ( testR2935Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2935 ";	
	}
	PendingEvent_c testR2937Inst = PendingEvent_c.getOneI_EVIOnR2937(this, false);

	if ( testR2937Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2937 ";	
	}
	LinkParticipation_c testR2958Inst = LinkParticipation_c.getOneI_LIPOnR2958(this, false);

	if ( testR2958Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2958 ";	
	}
	AttributeValue_c testR2909Inst = AttributeValue_c.getOneI_AVLOnR2909(this, false);

	if ( testR2909Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2909 ";	
	}
	ComponentInstance_c testR2957Inst = ComponentInstance_c.getOneI_EXEOnR2957(this, false);

	if ( testR2957Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2957 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Instance", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("inst_id")){
         return true;
      }
      if(attributeName.equals("sm_id")){
         return true;
      }
      if(attributeName.equals("smstt_id")){
         return true;
      }
      if(attributeName.equals("trans_id")){
         return true;
      }
      if(attributeName.equals("execution_engine_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getInst_idLongBased()
  {
    if(m_inst_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_inst_id)){
    	return 0xfffffff & m_inst_id.getLeastSignificantBits();
    }
    return m_inst_idLongBased ;
  }
  public java.util.UUID getInst_id()
  {
    return m_inst_id ;
  }


  public void setInst_id(java.util.UUID newValue)
  {
   m_inst_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,false); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSm_idLongBased()
  {
    if ( EnteredLastStateViaTransition != null )
    {
      return EnteredLastStateViaTransition.getSm_idLongBased();
    }
    if ( OccupiesStateMachineState != null )
    {
      return OccupiesStateMachineState.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSm_id()
  {
    if ( EnteredLastStateViaTransition != null )
    {
      return EnteredLastStateViaTransition.getSm_id();
    }
    if ( OccupiesStateMachineState != null )
    {
      return OccupiesStateMachineState.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sm_id) )
      return m_sm_id;
    else
      return getSm_id();
  }
  
  public long getSmstt_idLongBased()
  {
    if ( OccupiesStateMachineState != null )
    {
      return OccupiesStateMachineState.getSmstt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmstt_id()
  {
    if ( OccupiesStateMachineState != null )
    {
      return OccupiesStateMachineState.getSmstt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSmstt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smstt_id) )
      return m_smstt_id;
    else
      return getSmstt_id();
  }
  
  public void setSmstt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smstt_id)){
	        return;
	    }
	}else if(m_smstt_id != null){
	    if(m_smstt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smstt_id", m_smstt_id, newValue,false); 
   m_smstt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getLabel()
  {
ModelRoot modelRoot = getModelRoot();
return "";



  }


  public String getDefault_name()
  {
    return m_default_name ;
  }


  public void setDefault_name(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_default_name)){
	        return;
	    }
	}else if(m_default_name != null){
	    if(m_default_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Default_name", m_default_name, newValue,false); 
   m_default_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getTrans_idLongBased()
  {
    if ( EnteredLastStateViaTransition != null )
    {
      return EnteredLastStateViaTransition.getTrans_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTrans_id()
  {
    if ( EnteredLastStateViaTransition != null )
    {
      return EnteredLastStateViaTransition.getTrans_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getTrans_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_trans_id) )
      return m_trans_id;
    else
      return getTrans_id();
  }
  
  public void setTrans_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_trans_id)){
	        return;
	    }
	}else if(m_trans_id != null){
	    if(m_trans_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Trans_id", m_trans_id, newValue,false); 
   m_trans_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getExecution_engine_idLongBased()
  {
    if ( CreatedByComponentInstance != null )
    {
      return CreatedByComponentInstance.getExecution_engine_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getExecution_engine_id()
  {
    if ( CreatedByComponentInstance != null )
    {
      return CreatedByComponentInstance.getExecution_engine_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getExecution_engine_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_execution_engine_id) )
      return m_execution_engine_id;
    else
      return getExecution_engine_id();
  }
  
  public void setExecution_engine_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_execution_engine_id)){
	        return;
	    }
	}else if(m_execution_engine_id != null){
	    if(m_execution_engine_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Execution_engine_id", m_execution_engine_id, newValue,false); 
   m_execution_engine_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Instance", //$NON-NLS-1$
	  " Operation entered: Instance::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Instance_c [] objs = Instance_c.InstanceInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Instance", //$NON-NLS-1$
	  " Operation entered: Instance::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Instance_c_test40854_c implements ClassQueryInterface_c
    {
	  Instance_c_test40854_c( java.util.UUID            p40855 ) {
	  m_p40855 = p40855;
	  }
	  private java.util.UUID             m_p40855; 
	  public boolean evaluate (Object candidate)
	  {
	      Instance_c selected = (Instance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getInst_id().equals(m_p40855));
	      return retval;
	  }
    }

    Instance_c [] objs40853 = 
    Instance_c.InstanceInstances(modelRoot, new Instance_c_test40854_c(getInst_id())) ;

    if ( (  (objs40853.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Instance", //$NON-NLS-1$
           "Consistency: Object: Instance: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40853.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Instance: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40853.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs40853.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Instance", //$NON-NLS-1$
           "Consistency: Object: Instance: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40853.length )  + " Inst_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Instance: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40853.length )  + " Inst_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Instance is a referring class in association: rel.Numb = 2953
          // The participating class is: Transition
    class Transition_c_test40859_c implements ClassQueryInterface_c
    {
	  Transition_c_test40859_c( java.util.UUID            p40860, java.util.UUID            p40861 ) {
	       m_p40860 = p40860; 
m_p40861 = p40861;
	  }
	  private java.util.UUID             m_p40860; private java.util.UUID             m_p40861; 
	  public boolean evaluate (Object candidate)
	  {
	      Transition_c selected = (Transition_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p40860)) & (selected.getTrans_id().equals(m_p40861));
	      return retval;
	  }
    }

    Transition_c [] objs40858 = 
    Transition_c.TransitionInstances(modelRoot, new Transition_c_test40859_c(getSm_id(), getTrans_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs40858.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Instance", //$NON-NLS-1$
           "Consistency: Object: Instance: Association: 2953: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40858.length )  + " SM_ID: " + "Not Printable"  + " Trans_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Instance: Association: 2953: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40858.length )  + " SM_ID: " + "Not Printable"  + " Trans_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Instance is a referring class in association: rel.Numb = 2915
          // The participating class is: State Machine State
    class StateMachineState_c_test40863_c implements ClassQueryInterface_c
    {
	  StateMachineState_c_test40863_c( java.util.UUID            p40864, java.util.UUID            p40865 ) {
	       m_p40864 = p40864; 
m_p40865 = p40865;
	  }
	  private java.util.UUID             m_p40864; private java.util.UUID             m_p40865; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachineState_c selected = (StateMachineState_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p40864)) & (selected.getSmstt_id().equals(m_p40865));
	      return retval;
	  }
    }

    StateMachineState_c [] objs40862 = 
    StateMachineState_c.StateMachineStateInstances(modelRoot, new StateMachineState_c_test40863_c(getSm_id(), getSmstt_id())) ;

    if ( (  (objs40862.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Instance", //$NON-NLS-1$
           "Consistency: Object: Instance: Association: 2915: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40862.length )  + " SM_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Instance: Association: 2915: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40862.length )  + " SM_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Instance is a referring class in association: rel.Numb = 2957
          // The participating class is: Component Instance
    class ComponentInstance_c_test40867_c implements ClassQueryInterface_c
    {
	  ComponentInstance_c_test40867_c( java.util.UUID            p40868 ) {
	  m_p40868 = p40868;
	  }
	  private java.util.UUID             m_p40868; 
	  public boolean evaluate (Object candidate)
	  {
	      ComponentInstance_c selected = (ComponentInstance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getExecution_engine_id().equals(m_p40868));
	      return retval;
	  }
    }

    ComponentInstance_c [] objs40866 = 
    ComponentInstance_c.ComponentInstanceInstances(modelRoot, new ComponentInstance_c_test40867_c(getExecution_engine_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs40866.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Instance", //$NON-NLS-1$
           "Consistency: Object: Instance: Association: 2957: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40866.length )  + " Execution_Engine_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Instance: Association: 2957: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40866.length )  + " Execution_Engine_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Instance is a participating class in association: rel.Numb = 2907
             // Object: Pending Event
          // Instance is a participating class in association: rel.Numb = 2935
             // Object: Pending Event
          // Instance is a participating class in association: rel.Numb = 2937
             // Object: Pending Event
          // Instance is a participating class in association: rel.Numb = 2958
             // Object: Link Participation
          // Instance is a participating class in association: rel.Numb = 2909
             // Object: Attribute Value
    return retval;
  }


  // declare transform functions
  public  void Takeevent(final java.util.UUID         p_Event_queue_entry_id,final java.util.UUID         p_Stack_id,final boolean      p_Step_in)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Takeevent") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End takeEvent
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End dispose
  public  void Initialize(final boolean      p_Initializestate)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End initialize
  public  void Stepin()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Stepin") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End stepIn
  public  void Stepover()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Stepover") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End stepOver
  public  void Takenextevent(final java.util.UUID         p_Stack_id,final boolean      p_Step_in)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Takenextevent") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End takeNextEvent
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getInst_id();



   } // End get_ooa_id
  public  boolean      Delivereventtosubtypeinstance(final java.util.UUID         p_Class_id,final java.util.UUID         p_Event_id,final java.util.UUID         p_Evt_inst_id,final java.util.UUID         p_Stack_id,final boolean      p_Step_in)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Instance", " Operation entered: Instance::Delivereventtosubtypeinstance") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End deliverEventToSubtypeInstance

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Instance
