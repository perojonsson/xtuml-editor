      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActivityNode_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_ACTIVITY_NODE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ActivityNode_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ActivityNode_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public ActivityNode_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
      ActivityNode_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (ActivityNode_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ActivityNode_c(modelRoot,
p_m_id,
p_m_package_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ActivityNode_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id){
    InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
    ActivityNode_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (ActivityNode_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ActivityNode_c new_inst = new ActivityNode_c(modelRoot,
p_m_id,
p_m_package_id
);
    return new_inst;
  }
  public ActivityNode_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_package_id = IdAssigner.NULL_UUID;   
     m_id = idAssigner.createUUID();
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ActivityNode_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ActivityNode_c)) {
           return false;
       }
       
       ActivityNode_c me = (ActivityNode_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((ActivityNode_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((ActivityNode_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ActivityNode_c)) {
           return false;
       }
       
       ActivityNode_c me = (ActivityNode_c)elem;
      if (!getIdCachedValue().equals(((ActivityNode_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_package_id ;
  private java.util.UUID         m_id ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ActivityNode_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Activity Node to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ActivityNode_c getOneA_NOnR8001(PackageableElement_c [] targets)
{
    return getOneA_NOnR8001(targets, null);
}

public static ActivityNode_c getOneA_NOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneA_NOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static ActivityNode_c getOneA_NOnR8001(PackageableElement_c target)
{
  return getOneA_NOnR8001(target, null);
}

public static ActivityNode_c getOneA_NOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneA_NOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static ActivityNode_c getOneA_NOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneA_NOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static ActivityNode_c getOneA_NOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneA_NOnR8001(modelRoot, target, test, true);
}

public static ActivityNode_c getOneA_NOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneA_NOnR8001(modelRoot,target,test);
}
private static ActivityNode_c find_getOneA_NOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ActivityNode_c source = (ActivityNode_c)target.backPointer_IsSubtypeActivityNodeIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c [] targets)
{
  return getManyA_NsOnR8001(targets, null);
}
public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyA_NsOnR8001(targets, null, loadComponent);
}
public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyA_NsOnR8001(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ActivityNode_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ActivityNode_c source = (ActivityNode_c)targets[i].backPointer_IsSubtypeActivityNodeIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ActivityNode_c[] ret_set = new ActivityNode_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ActivityNode_c[0];
  }
  }

public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR8001(targetArray);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
  return result ;
}
}

public static ActivityNode_c [] getManyA_NsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR8001(targetArray, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Activity_c Activity ;
public void relateAcrossR1101To(Activity_c target)
{
	relateAcrossR1101To(target, true);
}
public void relateAcrossR1101To(Activity_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == Activity) return;  // already related

    if ( Activity != target ) {
    
    Object oldKey = getInstanceKey();

    if (Activity != null) {
    
        Activity.clearBackPointerR1101To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ActivityNode_c.relateAcrossR1101To(Activity_c target)", 
			"Relate performed across R1101 from Activity Node to Activity without unrelate of prior instance.");  
		}
    }
                
    	Activity = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1101To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1101", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1101From(Activity_c target)
{
	unrelateAcrossR1101From(target, true);
}
public void unrelateAcrossR1101From(Activity_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (Activity == null) return;  // already unrelated
	
	if (target != Activity) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1101", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1101To(this);
    }
    

      if(Activity != null) {
      
        m_package_id = Activity.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_package_id))
        {
          m_package_id = Activity.getPackage_idCachedValue();
        }       
        Activity = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1101", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ActivityNode_c getOneA_NOnR1101(Activity_c [] targets)
{
    return getOneA_NOnR1101(targets, null);
}

public static ActivityNode_c getOneA_NOnR1101(Activity_c [] targets, ClassQueryInterface_c test)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneA_NOnR1101(targets[i], test);
        }
    }

    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1101(Activity_c target)
{
  return getOneA_NOnR1101(target, null);
}

public static ActivityNode_c getOneA_NOnR1101(Activity_c target, boolean loadComponent)
{
    return getOneA_NOnR1101(target.getModelRoot(), target, null, loadComponent);
}

public static ActivityNode_c getOneA_NOnR1101(Activity_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneA_NOnR1101(target.getModelRoot(), target, test);
  }
  return null;
}

public static ActivityNode_c getOneA_NOnR1101(ModelRoot modelRoot, Activity_c target, ClassQueryInterface_c test)
{
	return getOneA_NOnR1101(modelRoot, target, test, true);
}

public static ActivityNode_c getOneA_NOnR1101(ModelRoot modelRoot, Activity_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneA_NOnR1101(modelRoot,target,test);
}
private static ActivityNode_c find_getOneA_NOnR1101(ModelRoot modelRoot, Activity_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainedNodeActivityNodeContainedNode_R1101) {
	    for ( int i = 0; i < target.backPointer_ContainedNodeActivityNodeContainedNode_R1101.size(); ++i ) {
	      ActivityNode_c source = (ActivityNode_c)target.backPointer_ContainedNodeActivityNodeContainedNode_R1101.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c [] targets)
{
  return getManyA_NsOnR1101(targets, null);
}
public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c [] targets, boolean loadComponent)
{
  return getManyA_NsOnR1101(targets, null, loadComponent);
}
public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c [] targets, ClassQueryInterface_c test)
{
	return getManyA_NsOnR1101(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ActivityNode_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainedNodeActivityNodeContainedNode_R1101) {
	    for (int j = 0; j < targets[i].backPointer_ContainedNodeActivityNodeContainedNode_R1101.size(); ++j) {
	      ActivityNode_c source = (ActivityNode_c)targets[i].backPointer_ContainedNodeActivityNodeContainedNode_R1101.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ActivityNode_c[] ret_set = new ActivityNode_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ActivityNode_c[0];
  }
  }

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c target)
{
  return getManyA_NsOnR1101(target, null);
}

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c target, boolean loadComponent)
{
  return getManyA_NsOnR1101(target, null, loadComponent);
}

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c target, ClassQueryInterface_c test)
{
	return getManyA_NsOnR1101(target, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1101(Activity_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ActivityNode_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainedNodeActivityNodeContainedNode_R1101) {
    for (int i = 0; i < target.backPointer_ContainedNodeActivityNodeContainedNode_R1101.size(); ++i) {
      ActivityNode_c source = (ActivityNode_c)target.backPointer_ContainedNodeActivityNodeContainedNode_R1101.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ActivityNode_c[] ret_set = new ActivityNode_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ActivityNode_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ObjectNode_c backPointer_IsSubtypeObjectNodeIsSubtype_R1105;

public void setObjectNodeOrderInChildListR1105(ObjectNode_c target, int index) {
	unrelateAcrossR1105From(target);
	ObjectNode_c[] elements = ObjectNode_c.getManyA_OBJsOnR1105(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1105From((ObjectNode_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1105To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1105To((ObjectNode_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1105To(ObjectNode_c target)
{
  if (target != null) {
    target.relateAcrossR1105To(this, true) ;
  }
}

public void relateAcrossR1105To(ObjectNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1105To(this, notifyChanges) ;
  }
}

public void setBackPointerR1105To(ObjectNode_c target)
{
    backPointer_IsSubtypeObjectNodeIsSubtype_R1105 = target;
}

public void unrelateAcrossR1105From(ObjectNode_c target)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, true) ;
  }
}

public void unrelateAcrossR1105From(ObjectNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1105To(ObjectNode_c target)
{
	if (target == backPointer_IsSubtypeObjectNodeIsSubtype_R1105) {
		backPointer_IsSubtypeObjectNodeIsSubtype_R1105 = null;
	}
}

public static ActivityNode_c getOneA_NOnR1105(ObjectNode_c [] targets)
{
    return getOneA_NOnR1105(targets, null);
}

public static ActivityNode_c getOneA_NOnR1105(ObjectNode_c [] targets, ClassQueryInterface_c test)
{
    return getOneA_NOnR1105(targets, test, true);
}

public static ActivityNode_c getOneA_NOnR1105(ObjectNode_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ActivityNode_c candidate_val = getOneA_NOnR1105(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneA_NOnR1105(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1105(ObjectNode_c target)
{
	return getOneA_NOnR1105(target, true);
}
public static ActivityNode_c getOneA_NOnR1105(ObjectNode_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeActivityNode ;
  } else {
    return null;
  }
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyA_NsOnR1105(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActivityNode_c[0];
  
  
  LinkedHashSet<ActivityNode_c> elementsSet = new LinkedHashSet<ActivityNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActivityNode == null)
	  targets[i].loadProxy();
    ActivityNode_c associate = targets[i].IsSupertypeActivityNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActivityNode_c[] result = new ActivityNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c [] targets)
{
  return getManyA_NsOnR1105(targets, null);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ObjectNode_c [] targetArray = new ObjectNode_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR1105(targetArray, test, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
    return result ;
  }
  
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c target,
    ClassQueryInterface_c test)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c target)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ObjectNode_c target, boolean loadComponent)
{
    return getManyA_NsOnR1105(target, null, loadComponent);
}

  
  
  
// referred to navigation

ActionNode_c backPointer_IsSubtypeActionNodeIsSubtype_R1105;

public void setActionNodeOrderInChildListR1105(ActionNode_c target, int index) {
	unrelateAcrossR1105From(target);
	ActionNode_c[] elements = ActionNode_c.getManyA_ACTsOnR1105(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1105From((ActionNode_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1105To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1105To((ActionNode_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1105To(ActionNode_c target)
{
  if (target != null) {
    target.relateAcrossR1105To(this, true) ;
  }
}

public void relateAcrossR1105To(ActionNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1105To(this, notifyChanges) ;
  }
}

public void setBackPointerR1105To(ActionNode_c target)
{
    backPointer_IsSubtypeActionNodeIsSubtype_R1105 = target;
}

public void unrelateAcrossR1105From(ActionNode_c target)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, true) ;
  }
}

public void unrelateAcrossR1105From(ActionNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1105To(ActionNode_c target)
{
	if (target == backPointer_IsSubtypeActionNodeIsSubtype_R1105) {
		backPointer_IsSubtypeActionNodeIsSubtype_R1105 = null;
	}
}

public static ActivityNode_c getOneA_NOnR1105(ActionNode_c [] targets)
{
    return getOneA_NOnR1105(targets, null);
}

public static ActivityNode_c getOneA_NOnR1105(ActionNode_c [] targets, ClassQueryInterface_c test)
{
    return getOneA_NOnR1105(targets, test, true);
}

public static ActivityNode_c getOneA_NOnR1105(ActionNode_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ActivityNode_c candidate_val = getOneA_NOnR1105(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneA_NOnR1105(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1105(ActionNode_c target)
{
	return getOneA_NOnR1105(target, true);
}
public static ActivityNode_c getOneA_NOnR1105(ActionNode_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeActivityNode ;
  } else {
    return null;
  }
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyA_NsOnR1105(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActivityNode_c[0];
  
  
  LinkedHashSet<ActivityNode_c> elementsSet = new LinkedHashSet<ActivityNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActivityNode == null)
	  targets[i].loadProxy();
    ActivityNode_c associate = targets[i].IsSupertypeActivityNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActivityNode_c[] result = new ActivityNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c [] targets)
{
  return getManyA_NsOnR1105(targets, null);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActionNode_c [] targetArray = new ActionNode_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR1105(targetArray, test, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
    return result ;
  }
  
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c target,
    ClassQueryInterface_c test)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c target)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ActionNode_c target, boolean loadComponent)
{
    return getManyA_NsOnR1105(target, null, loadComponent);
}

  
  
  
// referred to navigation

ControlNode_c backPointer_IsSubtypeControlNodeIsSubtype_R1105;

public void setControlNodeOrderInChildListR1105(ControlNode_c target, int index) {
	unrelateAcrossR1105From(target);
	ControlNode_c[] elements = ControlNode_c.getManyA_CTLsOnR1105(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1105From((ControlNode_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1105To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1105To((ControlNode_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1105To(ControlNode_c target)
{
  if (target != null) {
    target.relateAcrossR1105To(this, true) ;
  }
}

public void relateAcrossR1105To(ControlNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1105To(this, notifyChanges) ;
  }
}

public void setBackPointerR1105To(ControlNode_c target)
{
    backPointer_IsSubtypeControlNodeIsSubtype_R1105 = target;
}

public void unrelateAcrossR1105From(ControlNode_c target)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, true) ;
  }
}

public void unrelateAcrossR1105From(ControlNode_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1105From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1105To(ControlNode_c target)
{
	if (target == backPointer_IsSubtypeControlNodeIsSubtype_R1105) {
		backPointer_IsSubtypeControlNodeIsSubtype_R1105 = null;
	}
}

public static ActivityNode_c getOneA_NOnR1105(ControlNode_c [] targets)
{
    return getOneA_NOnR1105(targets, null);
}

public static ActivityNode_c getOneA_NOnR1105(ControlNode_c [] targets, ClassQueryInterface_c test)
{
    return getOneA_NOnR1105(targets, test, true);
}

public static ActivityNode_c getOneA_NOnR1105(ControlNode_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ActivityNode_c candidate_val = getOneA_NOnR1105(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneA_NOnR1105(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1105(ControlNode_c target)
{
	return getOneA_NOnR1105(target, true);
}
public static ActivityNode_c getOneA_NOnR1105(ControlNode_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeActivityNode ;
  } else {
    return null;
  }
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyA_NsOnR1105(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActivityNode_c[0];
  
  
  LinkedHashSet<ActivityNode_c> elementsSet = new LinkedHashSet<ActivityNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActivityNode == null)
	  targets[i].loadProxy();
    ActivityNode_c associate = targets[i].IsSupertypeActivityNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActivityNode_c[] result = new ActivityNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c [] targets)
{
  return getManyA_NsOnR1105(targets, null);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ControlNode_c [] targetArray = new ControlNode_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR1105(targetArray, test, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
    return result ;
  }
  
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c target,
    ClassQueryInterface_c test)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c target)
{
    return getManyA_NsOnR1105(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1105(ControlNode_c target, boolean loadComponent)
{
    return getManyA_NsOnR1105(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ActivityEdge_c> backPointer_IncomingActivityEdgeIncoming_R1103 = new ArrayList<ActivityEdge_c>();

public void setActivityEdgeOrderInChildListR1103(ActivityEdge_c target, int index) {
	unrelateAcrossR1103From(target);
	ActivityEdge_c[] elements = ActivityEdge_c.getManyA_EsOnR1103(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1103From((ActivityEdge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1103To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1103To((ActivityEdge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1103To(ActivityEdge_c target)
{
  if (target != null) {
    target.relateAcrossR1103To(this, true) ;
  }
}

public void relateAcrossR1103To(ActivityEdge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1103To(this, notifyChanges) ;
  }
}

public void setBackPointerR1103To(ActivityEdge_c target)
{
  	synchronized (backPointer_IncomingActivityEdgeIncoming_R1103) {
		backPointer_IncomingActivityEdgeIncoming_R1103.add(target);
	}
}

public void unrelateAcrossR1103From(ActivityEdge_c target)
{
  if (target != null) {
    target.unrelateAcrossR1103From(this, true) ;
  }
}

public void unrelateAcrossR1103From(ActivityEdge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1103From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1103To(ActivityEdge_c target)
{
  synchronized (backPointer_IncomingActivityEdgeIncoming_R1103) {
	    backPointer_IncomingActivityEdgeIncoming_R1103.remove(target);
	}
}

public static ActivityNode_c getOneA_NOnR1103(ActivityEdge_c [] targets)
{
    return getOneA_NOnR1103(targets, null);
}

public static ActivityNode_c getOneA_NOnR1103(ActivityEdge_c [] targets, ClassQueryInterface_c test)
{
    return getOneA_NOnR1103(targets, test, true);
}

public static ActivityNode_c getOneA_NOnR1103(ActivityEdge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ActivityNode_c candidate_val = getOneA_NOnR1103(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneA_NOnR1103(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1103(ActivityEdge_c target)
{
	return getOneA_NOnR1103(target, true);
}
public static ActivityNode_c getOneA_NOnR1103(ActivityEdge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.TargetActivityNode ;
  } else {
    return null;
  }
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyA_NsOnR1103(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActivityNode_c[0];
  
  
  LinkedHashSet<ActivityNode_c> elementsSet = new LinkedHashSet<ActivityNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].TargetActivityNode == null)
	  targets[i].loadProxy();
    ActivityNode_c associate = targets[i].TargetActivityNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActivityNode_c[] result = new ActivityNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c [] targets)
{
  return getManyA_NsOnR1103(targets, null);
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActivityEdge_c [] targetArray = new ActivityEdge_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR1103(targetArray, test, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
    return result ;
  }
  
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c target,
    ClassQueryInterface_c test)
{
    return getManyA_NsOnR1103(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c target)
{
    return getManyA_NsOnR1103(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1103(ActivityEdge_c target, boolean loadComponent)
{
    return getManyA_NsOnR1103(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ActivityEdge_c> backPointer_OutgoingActivityEdgeOutgoing_R1104 = new ArrayList<ActivityEdge_c>();

public void setActivityEdgeOrderInChildListR1104(ActivityEdge_c target, int index) {
	unrelateAcrossR1104From(target);
	ActivityEdge_c[] elements = ActivityEdge_c.getManyA_EsOnR1104(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1104From((ActivityEdge_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1104To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1104To((ActivityEdge_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1104To(ActivityEdge_c target)
{
  if (target != null) {
    target.relateAcrossR1104To(this, true) ;
  }
}

public void relateAcrossR1104To(ActivityEdge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1104To(this, notifyChanges) ;
  }
}

public void setBackPointerR1104To(ActivityEdge_c target)
{
  	synchronized (backPointer_OutgoingActivityEdgeOutgoing_R1104) {
		backPointer_OutgoingActivityEdgeOutgoing_R1104.add(target);
	}
}

public void unrelateAcrossR1104From(ActivityEdge_c target)
{
  if (target != null) {
    target.unrelateAcrossR1104From(this, true) ;
  }
}

public void unrelateAcrossR1104From(ActivityEdge_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1104From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1104To(ActivityEdge_c target)
{
  synchronized (backPointer_OutgoingActivityEdgeOutgoing_R1104) {
	    backPointer_OutgoingActivityEdgeOutgoing_R1104.remove(target);
	}
}

public static ActivityNode_c getOneA_NOnR1104(ActivityEdge_c [] targets)
{
    return getOneA_NOnR1104(targets, null);
}

public static ActivityNode_c getOneA_NOnR1104(ActivityEdge_c [] targets, ClassQueryInterface_c test)
{
    return getOneA_NOnR1104(targets, test, true);
}

public static ActivityNode_c getOneA_NOnR1104(ActivityEdge_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ActivityNode_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ActivityNode_c candidate_val = getOneA_NOnR1104(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneA_NOnR1104(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ActivityNode_c getOneA_NOnR1104(ActivityEdge_c target)
{
	return getOneA_NOnR1104(target, true);
}
public static ActivityNode_c getOneA_NOnR1104(ActivityEdge_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.SourceActivityNode ;
  } else {
    return null;
  }
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyA_NsOnR1104(targets, test, true);
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActivityNode_c[0];
  
  
  LinkedHashSet<ActivityNode_c> elementsSet = new LinkedHashSet<ActivityNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].SourceActivityNode == null)
	  targets[i].loadProxy();
    ActivityNode_c associate = targets[i].SourceActivityNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActivityNode_c[] result = new ActivityNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c [] targets)
{
  return getManyA_NsOnR1104(targets, null);
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActivityEdge_c [] targetArray = new ActivityEdge_c[1];
    targetArray[0] = target;
    return getManyA_NsOnR1104(targetArray, test, loadComponent);
  } else {
    ActivityNode_c [] result = new ActivityNode_c [0] ;
    return result ;
  }
  
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c target,
    ClassQueryInterface_c test)
{
    return getManyA_NsOnR1104(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c target)
{
    return getManyA_NsOnR1104(target, null, true);
}

public static ActivityNode_c [] getManyA_NsOnR1104(ActivityEdge_c target, boolean loadComponent)
{
    return getManyA_NsOnR1104(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst58553 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58553 == null) {
      			relInst58553 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
      		}
			if (relInst58553 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58553 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
					if (relInst58553 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58553 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58553) && !isProxy())) {
	      relInst58553.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          

	if (Activity == null) {          
      // R1101
      Activity_c relInst58554 = (Activity_c) baseRoot.getInstanceList(Activity_c.class).get(new Object[] {m_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58554 == null) {
      			relInst58554 = (Activity_c) Ooaofooa.getDefaultInstance().getInstanceList(Activity_c.class).get(new Object[] {m_package_id});
      		}
			if (relInst58554 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58554 = (Activity_c) roots[i].getInstanceList(Activity_c.class).get(new Object[] {m_package_id});
					if (relInst58554 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58554 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58554) && !isProxy())) {
	      relInst58554.relateAcrossR1101To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1101
      // A_A
		  inst=Activity;
			unrelateAcrossR1101From(Activity, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActivityNode_c inst = (ActivityNode_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ActivityNode_c ActivityNodeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ActivityNode_c result=findActivityNodeInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ActivityNode_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findActivityNodeInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ActivityNode_c findActivityNodeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ActivityNode_c x = (ActivityNode_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ActivityNode_c ActivityNodeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ActivityNodeInstance(modelRoot,test,true);
  }
  
  public static ActivityNode_c ActivityNodeInstance(ModelRoot modelRoot)
  {
	 return ActivityNodeInstance(modelRoot,null,true);
  }

  public static ActivityNode_c [] ActivityNodeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ActivityNode_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ActivityNode_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ActivityNode_c x = (ActivityNode_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ActivityNode_c[] ret_set = new ActivityNode_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActivityNode_c[0];
			}		
		} 
  }
  public static ActivityNode_c [] ActivityNodeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ActivityNodeInstances(modelRoot,test,true);
  }
  public static ActivityNode_c [] ActivityNodeInstances(ModelRoot modelRoot)
  {
	return ActivityNodeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Activity Node.dispose call: ";
	PackageableElement_c testR8001Inst5 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst5 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
	ObjectNode_c testR1105Inst1 = ObjectNode_c.getOneA_OBJOnR1105(this, false);

	if ( testR1105Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1105 ";
	}
	ActionNode_c testR1105Inst2 = ActionNode_c.getOneA_ACTOnR1105(this, false);

	if ( testR1105Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1105 ";
	}
	ControlNode_c testR1105Inst3 = ControlNode_c.getOneA_CTLOnR1105(this, false);

	if ( testR1105Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1105 ";
	}
	Activity_c testR1101Inst = Activity_c.getOneA_AOnR1101(this, false);

	if ( testR1101Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1101 ";
	}
	ActivityEdge_c testR1103Inst = ActivityEdge_c.getOneA_EOnR1103(this, false);

	if ( testR1103Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1103 ";	
	}
	ActivityEdge_c testR1104Inst = ActivityEdge_c.getOneA_EOnR1104(this, false);

	if ( testR1104Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1104 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Activity Node", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("package_id")){
         return true;
      }
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getPackage_idLongBased()
  {
    if ( Activity != null )
    {
      return Activity.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPackage_id()
  {
    if ( Activity != null )
    {
      return Activity.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPackage_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_package_id) )
      return m_package_id;
    else
      return getPackage_id();
  }
  
  public void setPackage_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_package_id)){
	        return;
	    }
	}else if(m_package_id != null){
	    if(m_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Package_id", m_package_id, newValue,true); 
   m_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Activity Node", //$NON-NLS-1$
	  " Operation entered: Activity Node::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ActivityNode_c [] objs = ActivityNode_c.ActivityNodeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Activity Node", //$NON-NLS-1$
	  " Operation entered: Activity Node::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ActivityNode_c_test58556_c implements ClassQueryInterface_c
    {
	  ActivityNode_c_test58556_c( java.util.UUID            p58557 ) {
	  m_p58557 = p58557;
	  }
	  private java.util.UUID             m_p58557; 
	  public boolean evaluate (Object candidate)
	  {
	      ActivityNode_c selected = (ActivityNode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p58557));
	      return retval;
	  }
    }

    ActivityNode_c [] objs58555 = 
    ActivityNode_c.ActivityNodeInstances(modelRoot, new ActivityNode_c_test58556_c(getId())) ;

    if ( (  (objs58555.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Activity Node", //$NON-NLS-1$
           "Consistency: Object: Activity Node: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58555.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Activity Node: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58555.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs58555.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Activity Node", //$NON-NLS-1$
           "Consistency: Object: Activity Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58555.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Activity Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58555.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Activity Node is a referring class in association: rel.Numb = 1101
          // The participating class is: Activity
    class Activity_c_test58561_c implements ClassQueryInterface_c
    {
	  Activity_c_test58561_c( java.util.UUID            p58562 ) {
	  m_p58562 = p58562;
	  }
	  private java.util.UUID             m_p58562; 
	  public boolean evaluate (Object candidate)
	  {
	      Activity_c selected = (Activity_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p58562));
	      return retval;
	  }
    }

    Activity_c [] objs58560 = 
    Activity_c.ActivityInstances(modelRoot, new Activity_c_test58561_c(getPackage_id())) ;

    if ( (  (objs58560.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Activity Node", //$NON-NLS-1$
           "Consistency: Object: Activity Node: Association: 1101: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58560.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Activity Node: Association: 1101: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58560.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Activity Node is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Supertype: rel.Numb = 1105
    int objs58566 = 0;
            // Subtype Object: Object Node
    class ObjectNode_c_test58567_c implements ClassQueryInterface_c
    {
	  ObjectNode_c_test58567_c( java.util.UUID            p58568 ) {
	  m_p58568 = p58568;
	  }
	  private java.util.UUID             m_p58568; 
	  public boolean evaluate (Object candidate)
	  {
	      ObjectNode_c selected = (ObjectNode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p58568));
	      return retval;
	  }
    }

    ObjectNode_c [] objs58569 = 
    ObjectNode_c.ObjectNodeInstances(modelRoot, new ObjectNode_c_test58567_c(getId())) ;
 
    objs58566 = objs58566 + objs58569.length;
            // Subtype Object: Action Node
    class ActionNode_c_test58570_c implements ClassQueryInterface_c
    {
	  ActionNode_c_test58570_c( java.util.UUID            p58571 ) {
	  m_p58571 = p58571;
	  }
	  private java.util.UUID             m_p58571; 
	  public boolean evaluate (Object candidate)
	  {
	      ActionNode_c selected = (ActionNode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p58571));
	      return retval;
	  }
    }

    ActionNode_c [] objs58572 = 
    ActionNode_c.ActionNodeInstances(modelRoot, new ActionNode_c_test58570_c(getId())) ;
 
    objs58566 = objs58566 + objs58572.length;
            // Subtype Object: Control Node
    class ControlNode_c_test58573_c implements ClassQueryInterface_c
    {
	  ControlNode_c_test58573_c( java.util.UUID            p58574 ) {
	  m_p58574 = p58574;
	  }
	  private java.util.UUID             m_p58574; 
	  public boolean evaluate (Object candidate)
	  {
	      ControlNode_c selected = (ControlNode_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p58574));
	      return retval;
	  }
    }

    ControlNode_c [] objs58575 = 
    ControlNode_c.ControlNodeInstances(modelRoot, new ControlNode_c_test58573_c(getId())) ;
 
    objs58566 = objs58566 + objs58575.length;
    if ( objs58566 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Activity Node", //$NON-NLS-1$
           "Consistency: Object: Activity Node: Association: 1105: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58566 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Activity Node: Association: 1105: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58566 )  , e); 
      }
      retval = false;

    }

          // Activity Node is a participating class in association: rel.Numb = 1103
             // Object: Activity Edge
          // Activity Node is a participating class in association: rel.Numb = 1104
             // Object: Activity Edge
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Activity Node", " Operation entered: ActivityNode::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Activity_c v_parent = Activity_c.getOneA_AOnR1101(this);


if ( (  (v_parent != null)) )
{

this.unrelateAcrossR1101From(v_parent);



}

ActionNode_c v_act = ActionNode_c.getOneA_ACTOnR1105(this);


if ( (  (v_act != null)) )
{

this.unrelateAcrossR1105From(v_act);


if (v_act != null) {
v_act.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ObjectNode_c v_obj = ObjectNode_c.getOneA_OBJOnR1105(this);


if ( (  (v_obj != null)) )
{

this.unrelateAcrossR1105From(v_obj);


if (v_obj != null) {
v_obj.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ControlNode_c v_ctl = ControlNode_c.getOneA_CTLOnR1105(this);


if ( (  (v_ctl != null)) )
{

this.unrelateAcrossR1105From(v_ctl);


if (v_ctl != null) {
v_ctl.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ActivityEdge_c [] v_inEdges = ActivityEdge_c.getManyA_EsOnR1103(this);


ActivityEdge_c  v_inEdge = null;
for ( int i55448 = 0; i55448 < v_inEdges.length; i55448++)
{
  v_inEdge = v_inEdges[i55448] ;

if (v_inEdge != null) {
v_inEdge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

ActivityEdge_c [] v_outEdges = ActivityEdge_c.getManyA_EsOnR1104(this);


ActivityEdge_c  v_outEdge = null;
for ( int i55449 = 0; i55449 < v_outEdges.length; i55449++)
{
  v_outEdge = v_outEdges[i55449] ;

if (v_outEdge != null) {
v_outEdge.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


if ( (  (v_pe != null)) )
{

this.unrelateAcrossR8001From(v_pe);


if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Incomingedgeallowed()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Activity Node", " Operation entered: ActivityNode::Incomingedgeallowed") ; 
               final ModelRoot modelRoot = getModelRoot();
ActionNode_c v_act = ActionNode_c.getOneA_ACTOnR1105(this);


if ( (  (v_act != null)) )
{

return v_act.Incomingedgeallowed();



}

else
{

ObjectNode_c v_obj = ObjectNode_c.getOneA_OBJOnR1105(this);


if ( (  (v_obj != null)) )
{

return v_obj.Incomingedgeallowed();



}

else
{

ControlNode_c v_ctl = ControlNode_c.getOneA_CTLOnR1105(this);


if ( (  (v_ctl != null)) )
{

return v_ctl.Incomingedgeallowed();



}


}


}

return false;



   } // End incomingEdgeAllowed
  public  boolean      Outgoingedgeallowed()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Activity Node", " Operation entered: ActivityNode::Outgoingedgeallowed") ; 
               final ModelRoot modelRoot = getModelRoot();
ActionNode_c v_act = ActionNode_c.getOneA_ACTOnR1105(this);


if ( (  (v_act != null)) )
{

return v_act.Outgoingedgeallowed();



}

else
{

ObjectNode_c v_obj = ObjectNode_c.getOneA_OBJOnR1105(this);


if ( (  (v_obj != null)) )
{

return v_obj.Outgoingedgeallowed();



}

else
{

ControlNode_c v_ctl = ControlNode_c.getOneA_CTLOnR1105(this);


if ( (  (v_ctl != null)) )
{

return v_ctl.Outgoingedgeallowed();



}


}


}

return false;



   } // End outgoingEdgeAllowed
  public  int          Numincomingedges()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Activity Node", " Operation entered: ActivityNode::Numincomingedges") ; 
               final ModelRoot modelRoot = getModelRoot();
ActivityEdge_c [] v_inEdges = ActivityEdge_c.getManyA_EsOnR1103(this);


return   (v_inEdges.length);



   } // End numIncomingEdges
  public  int          Numoutgoingedges()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Activity Node", " Operation entered: ActivityNode::Numoutgoingedges") ; 
               final ModelRoot modelRoot = getModelRoot();
ActivityEdge_c [] v_outEdges = ActivityEdge_c.getManyA_EsOnR1104(this);


return   (v_outEdges.length);



   } // End numOutgoingEdges

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Activity Node
