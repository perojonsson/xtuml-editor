package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.MessageInSequence_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_MESSAGE_IN_SEQUENCE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class MessageInSequence_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public MessageInSequence_c(ModelRoot modelRoot, java.util.UUID p_m_msg_id,
			java.util.UUID p_m_package_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_package_id = IdAssigner.preprocessUUID(p_m_package_id);

		Object[] key = {m_msg_id, m_package_id};
		addInstanceToMap(key);
	}
	static public MessageInSequence_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, java.util.UUID p_m_package_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);
		MessageInSequence_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id, p_m_package_id};
			new_inst = (MessageInSequence_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_package_id = IdAssigner
						.preprocessUUID(p_m_package_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new MessageInSequence_c(modelRoot, p_m_msg_id,
					p_m_package_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public MessageInSequence_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, java.util.UUID p_m_package_id) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);
		MessageInSequence_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id, p_m_package_id};
			source = (MessageInSequence_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);

				return source;
			}
		}
		// there is no instance matching the id
		MessageInSequence_c new_inst = new MessageInSequence_c(modelRoot,
				p_m_msg_id, p_m_package_id);
		return new_inst;
	}
	public MessageInSequence_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_msg_id = IdAssigner.NULL_UUID;
		m_package_id = IdAssigner.NULL_UUID;
		Object[] key = {m_msg_id, m_package_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_msg_id, m_package_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_msg_id != p_newKey) {

			m_msg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof MessageInSequence_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof MessageInSequence_c)) {
			return false;
		}

		MessageInSequence_c me = (MessageInSequence_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getMsg_id()) || IdAssigner.NULL_UUID
						.equals(((MessageInSequence_c) elem).getMsg_id())) && this != elem)) {
			return false;
		}
		if (!getMsg_id().equals(((MessageInSequence_c) elem).getMsg_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID
						.equals(((MessageInSequence_c) elem).getPackage_id())) && this != elem)) {
			return false;
		}
		if (!getPackage_id().equals(
				((MessageInSequence_c) elem).getPackage_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof MessageInSequence_c)) {
			return false;
		}

		MessageInSequence_c me = (MessageInSequence_c) elem;
		if (!getMsg_idCachedValue().equals(
				((MessageInSequence_c) elem).getMsg_idCachedValue()))
			return false;
		if (!getPackage_idCachedValue().equals(
				((MessageInSequence_c) elem).getPackage_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_msg_id;
	private java.util.UUID m_package_id;

	// declare association references from this class

	// referring navigation

	Sequence_c ContainedInSequence;
	public void relateAcrossR953To(Sequence_c target) {
		relateAcrossR953To(target, true);
	}
	public void relateAcrossR953To(Sequence_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainedInSequence)
			return; // already related

		if (ContainedInSequence != target) {

			Object oldKey = getInstanceKey();

			if (ContainedInSequence != null) {

				ContainedInSequence.clearBackPointerR953To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MessageInSequence_c.relateAcrossR953To(Sequence_c target)",
									"Relate performed across R953 from Message In Sequence to Sequence without unrelate of prior instance.");
				}
			}

			ContainedInSequence = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR953To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "953", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR953From(Sequence_c target) {
		unrelateAcrossR953From(target, true);
	}
	public void unrelateAcrossR953From(Sequence_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainedInSequence == null)
			return; // already unrelated

		if (target != ContainedInSequence) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R953",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR953To(this);
		}

		if (ContainedInSequence != null) {

			m_package_id = ContainedInSequence.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = ContainedInSequence.getPackage_idCachedValue();
			}
			ContainedInSequence = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "953", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(Sequence_c[] targets) {
		return getOneSQ_MISOnR953(targets, null);
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(Sequence_c[] targets,
			ClassQueryInterface_c test) {
		MessageInSequence_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_MISOnR953(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(Sequence_c target) {
		return getOneSQ_MISOnR953(target, null);
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(Sequence_c target,
			boolean loadComponent) {
		return getOneSQ_MISOnR953(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(Sequence_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_MISOnR953(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(ModelRoot modelRoot,
			Sequence_c target, ClassQueryInterface_c test) {
		return getOneSQ_MISOnR953(modelRoot, target, test, true);
	}

	public static MessageInSequence_c getOneSQ_MISOnR953(ModelRoot modelRoot,
			Sequence_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_MISOnR953(modelRoot, target, test);
	}
	private static MessageInSequence_c find_getOneSQ_MISOnR953(
			ModelRoot modelRoot, Sequence_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsMessageInSequenceContains_R953) {
				for (int i = 0; i < target.backPointer_ContainsMessageInSequenceContains_R953
						.size(); ++i) {
					MessageInSequence_c source = (MessageInSequence_c) target.backPointer_ContainsMessageInSequenceContains_R953
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(
			Sequence_c[] targets) {
		return getManySQ_MISsOnR953(targets, null);
	}
	public static MessageInSequence_c[] getManySQ_MISsOnR953(
			Sequence_c[] targets, boolean loadComponent) {
		return getManySQ_MISsOnR953(targets, null, loadComponent);
	}
	public static MessageInSequence_c[] getManySQ_MISsOnR953(
			Sequence_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_MISsOnR953(targets, test, true);
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(
			Sequence_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MessageInSequence_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsMessageInSequenceContains_R953) {
				for (int j = 0; j < targets[i].backPointer_ContainsMessageInSequenceContains_R953
						.size(); ++j) {
					MessageInSequence_c source = (MessageInSequence_c) targets[i].backPointer_ContainsMessageInSequenceContains_R953
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MessageInSequence_c[] ret_set = new MessageInSequence_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageInSequence_c[0];
		}
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(Sequence_c target) {
		return getManySQ_MISsOnR953(target, null);
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(Sequence_c target,
			boolean loadComponent) {
		return getManySQ_MISsOnR953(target, null, loadComponent);
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(Sequence_c target,
			ClassQueryInterface_c test) {
		return getManySQ_MISsOnR953(target, test, true);
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR953(Sequence_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new MessageInSequence_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsMessageInSequenceContains_R953) {
			for (int i = 0; i < target.backPointer_ContainsMessageInSequenceContains_R953
					.size(); ++i) {
				MessageInSequence_c source = (MessageInSequence_c) target.backPointer_ContainsMessageInSequenceContains_R953
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			MessageInSequence_c[] ret_set = new MessageInSequence_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageInSequence_c[0];
		}
	}

	// referring navigation

	Message_c ProvidesContainmentMessage;
	public void relateAcrossR954To(Message_c target) {
		relateAcrossR954To(target, true);
	}
	public void relateAcrossR954To(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidesContainmentMessage)
			return; // already related

		if (ProvidesContainmentMessage != target) {

			Object oldKey = getInstanceKey();

			if (ProvidesContainmentMessage != null) {

				ProvidesContainmentMessage.clearBackPointerR954To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MessageInSequence_c.relateAcrossR954To(Message_c target)",
									"Relate performed across R954 from Message In Sequence to Message without unrelate of prior instance.");
				}
			}

			ProvidesContainmentMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR954To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "954", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR954From(Message_c target) {
		unrelateAcrossR954From(target, true);
	}
	public void unrelateAcrossR954From(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidesContainmentMessage == null)
			return; // already unrelated

		if (target != ProvidesContainmentMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R954",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR954To(this);
		}

		if (ProvidesContainmentMessage != null) {

			m_msg_id = ProvidesContainmentMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_msg_id)) {
				m_msg_id = ProvidesContainmentMessage.getMsg_idCachedValue();
			}
			ProvidesContainmentMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "954", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(Message_c[] targets) {
		return getOneSQ_MISOnR954(targets, null);
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(Message_c[] targets,
			ClassQueryInterface_c test) {
		MessageInSequence_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_MISOnR954(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(Message_c target) {
		return getOneSQ_MISOnR954(target, null);
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(Message_c target,
			boolean loadComponent) {
		return getOneSQ_MISOnR954(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(Message_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_MISOnR954(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test) {
		return getOneSQ_MISOnR954(modelRoot, target, test, true);
	}

	public static MessageInSequence_c getOneSQ_MISOnR954(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_MISOnR954(modelRoot, target, test);
	}
	private static MessageInSequence_c find_getOneSQ_MISOnR954(
			ModelRoot modelRoot, Message_c target, ClassQueryInterface_c test) {
		if (target != null) {
			MessageInSequence_c source = (MessageInSequence_c) target.backPointer_ContainedThroughMessageInSequenceContainedThrough_R954;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR954(Message_c[] targets) {
		return getManySQ_MISsOnR954(targets, null);
	}
	public static MessageInSequence_c[] getManySQ_MISsOnR954(
			Message_c[] targets, boolean loadComponent) {
		return getManySQ_MISsOnR954(targets, null, loadComponent);
	}
	public static MessageInSequence_c[] getManySQ_MISsOnR954(
			Message_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_MISsOnR954(targets, test, true);
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR954(
			Message_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MessageInSequence_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			MessageInSequence_c source = (MessageInSequence_c) targets[i].backPointer_ContainedThroughMessageInSequenceContainedThrough_R954;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			MessageInSequence_c[] ret_set = new MessageInSequence_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MessageInSequence_c[0];
		}
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR954(Message_c target) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManySQ_MISsOnR954(targetArray);
		} else {
			MessageInSequence_c[] result = new MessageInSequence_c[0];
			return result;
		}
	}

	public static MessageInSequence_c[] getManySQ_MISsOnR954(Message_c target,
			boolean loadComponent) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManySQ_MISsOnR954(targetArray, loadComponent);
		} else {
			MessageInSequence_c[] result = new MessageInSequence_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ContainedInSequence == null) {
			// R953
			Sequence_c relInst39382 = (Sequence_c) baseRoot.getInstanceList(
					Sequence_c.class).get(new Object[]{m_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39382 == null) {
				relInst39382 = (Sequence_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Sequence_c.class)
						.get(new Object[]{m_package_id});
			}
			if (relInst39382 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39382 = (Sequence_c) roots[i].getInstanceList(
							Sequence_c.class).get(new Object[]{m_package_id});
					if (relInst39382 != null)
						break;
				}
			}
			//synchronized
			if (relInst39382 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39382) && !isProxy())) {
					relInst39382.relateAcrossR953To(this, notifyChanges);
				}
			}
		}

		if (ProvidesContainmentMessage == null) {
			// R954
			Message_c relInst39383 = (Message_c) baseRoot.getInstanceList(
					Message_c.class).get(new Object[]{m_msg_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39383 == null) {
				relInst39383 = (Message_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Message_c.class)
						.get(new Object[]{m_msg_id});
			}
			if (relInst39383 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39383 = (Message_c) roots[i].getInstanceList(
							Message_c.class).get(new Object[]{m_msg_id});
					if (relInst39383 != null)
						break;
				}
			}
			//synchronized
			if (relInst39383 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39383) && !isProxy())) {
					relInst39383.relateAcrossR954To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R953
		// SQ_S
		inst = ContainedInSequence;
		unrelateAcrossR953From(ContainedInSequence, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R954
		// MSG_M
		inst = ProvidesContainmentMessage;
		unrelateAcrossR954From(ProvidesContainmentMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(MessageInSequence_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final MessageInSequence_c inst = (MessageInSequence_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static MessageInSequence_c MessageInSequenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		MessageInSequence_c result = findMessageInSequenceInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					MessageInSequence_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findMessageInSequenceInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static MessageInSequence_c findMessageInSequenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MessageInSequence_c x = (MessageInSequence_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static MessageInSequence_c MessageInSequenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MessageInSequenceInstance(modelRoot, test, true);
	}

	public static MessageInSequence_c MessageInSequenceInstance(
			ModelRoot modelRoot) {
		return MessageInSequenceInstance(modelRoot, null, true);
	}

	public static MessageInSequence_c[] MessageInSequenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					MessageInSequence_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(MessageInSequence_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MessageInSequence_c x = (MessageInSequence_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				MessageInSequence_c[] ret_set = new MessageInSequence_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new MessageInSequence_c[0];
			}
		}
	}
	public static MessageInSequence_c[] MessageInSequenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MessageInSequenceInstances(modelRoot, test, true);
	}
	public static MessageInSequence_c[] MessageInSequenceInstances(
			ModelRoot modelRoot) {
		return MessageInSequenceInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Message In Sequence.dispose call: ";
		Sequence_c testR953Inst = Sequence_c.getOneSQ_SOnR953(this, false);

		if (testR953Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "953 ";
		}
		Message_c testR954Inst = Message_c.getOneMSG_MOnR954(this, false);

		if (testR954Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "954 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Message In Sequence",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("msg_id")) {
			return true;
		}
		if (attributeName.equals("package_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getMsg_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getMsg_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getPackage_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getPackage_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getMsg_idLongBased() {
		if (ProvidesContainmentMessage != null) {
			return ProvidesContainmentMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMsg_id() {
		if (ProvidesContainmentMessage != null) {
			return ProvidesContainmentMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getMsg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_msg_id))
			return m_msg_id;
		else
			return getMsg_id();
	}

	public void setMsg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_msg_id)) {
				return;
			}
		} else if (m_msg_id != null) {
			if (m_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Msg_id", m_msg_id, newValue, true);
		m_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPackage_idLongBased() {
		if (ContainedInSequence != null) {
			return ContainedInSequence.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPackage_id() {
		if (ContainedInSequence != null) {
			return ContainedInSequence.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_package_id))
			return m_package_id;
		else
			return getPackage_id();
	}

	public void setPackage_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_package_id)) {
				return;
			}
		} else if (m_package_id != null) {
			if (m_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Package_id", m_package_id, newValue, true);
		m_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Message In Sequence", //$NON-NLS-1$
						" Operation entered: Message In Sequence::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		MessageInSequence_c[] objs = MessageInSequence_c
				.MessageInSequenceInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Message In Sequence", //$NON-NLS-1$
				" Operation entered: Message In Sequence::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class MessageInSequence_c_test39385_c implements ClassQueryInterface_c {
			MessageInSequence_c_test39385_c(java.util.UUID p39386,
					java.util.UUID p39387) {
				m_p39386 = p39386;
				m_p39387 = p39387;
			}
			private java.util.UUID m_p39386;
			private java.util.UUID m_p39387;
			public boolean evaluate(Object candidate) {
				MessageInSequence_c selected = (MessageInSequence_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p39386))
						& (selected.getPackage_id().equals(m_p39387));
				return retval;
			}
		}

		MessageInSequence_c[] objs39384 = MessageInSequence_c
				.MessageInSequenceInstances(modelRoot,
						new MessageInSequence_c_test39385_c(getMsg_id(),
								getPackage_id()));

		if (((objs39384.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message In Sequence", //$NON-NLS-1$
								"Consistency: Object: Message In Sequence: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39384.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message In Sequence: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39384.length), e);
			}
			retval = false;

		}

		if (((objs39384.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message In Sequence", //$NON-NLS-1$
								"Consistency: Object: Message In Sequence: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39384.length)
										+ " Msg_ID: " + "Not Printable" + " Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message In Sequence: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39384.length)
										+ " Msg_ID: " + "Not Printable" + " Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Message In Sequence is a referring class in association: rel.Numb = 954
		// The participating class is: Message
		class Message_c_test39391_c implements ClassQueryInterface_c {
			Message_c_test39391_c(java.util.UUID p39392) {
				m_p39392 = p39392;
			}
			private java.util.UUID m_p39392;
			public boolean evaluate(Object candidate) {
				Message_c selected = (Message_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p39392));
				return retval;
			}
		}

		Message_c[] objs39390 = Message_c.MessageInstances(modelRoot,
				new Message_c_test39391_c(getMsg_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39390.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message In Sequence", //$NON-NLS-1$
								"Consistency: Object: Message In Sequence: Association: 954: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39390.length)
										+ " Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message In Sequence: Association: 954: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39390.length)
										+ " Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Message In Sequence is a referring class in association: rel.Numb = 953
		// The participating class is: Sequence
		class Sequence_c_test39394_c implements ClassQueryInterface_c {
			Sequence_c_test39394_c(java.util.UUID p39395) {
				m_p39395 = p39395;
			}
			private java.util.UUID m_p39395;
			public boolean evaluate(Object candidate) {
				Sequence_c selected = (Sequence_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p39395));
				return retval;
			}
		}

		Sequence_c[] objs39393 = Sequence_c.SequenceInstances(modelRoot,
				new Sequence_c_test39394_c(getPackage_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39393.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Message In Sequence", //$NON-NLS-1$
								"Consistency: Object: Message In Sequence: Association: 953: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39393.length)
										+ " Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Message In Sequence: Association: 953: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39393.length)
										+ " Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Message In Sequence
