package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SubsystemInSubsystem_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SUBSYSTEM_IN_SUBSYSTEM extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SubsystemInSubsystem_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SubsystemInSubsystem_c(ModelRoot modelRoot,
			java.util.UUID p_m_parent_ss_id, java.util.UUID p_m_child_ss_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_parent_ss_id = IdAssigner.preprocessUUID(p_m_parent_ss_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_child_ss_id = IdAssigner.preprocessUUID(p_m_child_ss_id);

		Object[] key = {m_child_ss_id, m_parent_ss_id};
		addInstanceToMap(key);
	}
	static public SubsystemInSubsystem_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_parent_ss_id, java.util.UUID p_m_child_ss_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);
		SubsystemInSubsystem_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_child_ss_id, p_m_parent_ss_id};
			new_inst = (SubsystemInSubsystem_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_parent_ss_id = IdAssigner
						.preprocessUUID(p_m_parent_ss_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_child_ss_id = IdAssigner
						.preprocessUUID(p_m_child_ss_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SubsystemInSubsystem_c(modelRoot, p_m_parent_ss_id,
					p_m_child_ss_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SubsystemInSubsystem_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_parent_ss_id, java.util.UUID p_m_child_ss_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);
		SubsystemInSubsystem_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_child_ss_id, p_m_parent_ss_id};
			source = (SubsystemInSubsystem_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_parent_ss_id = IdAssigner
						.preprocessUUID(p_m_parent_ss_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_child_ss_id = IdAssigner
						.preprocessUUID(p_m_child_ss_id);

				return source;
			}
		}
		// there is no instance matching the id
		SubsystemInSubsystem_c new_inst = new SubsystemInSubsystem_c(modelRoot,
				p_m_parent_ss_id, p_m_child_ss_id);
		return new_inst;
	}
	public SubsystemInSubsystem_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_parent_ss_id = IdAssigner.NULL_UUID;
		m_child_ss_id = IdAssigner.NULL_UUID;
		Object[] key = {m_child_ss_id, m_parent_ss_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_child_ss_id, m_parent_ss_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_child_ss_id != p_newKey) {

			m_child_ss_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SubsystemInSubsystem_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SubsystemInSubsystem_c)) {
			return false;
		}

		SubsystemInSubsystem_c me = (SubsystemInSubsystem_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getChild_ss_id()) || IdAssigner.NULL_UUID
						.equals(((SubsystemInSubsystem_c) elem)
								.getChild_ss_id())) && this != elem)) {
			return false;
		}
		if (!getChild_ss_id().equals(
				((SubsystemInSubsystem_c) elem).getChild_ss_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getParent_ss_id()) || IdAssigner.NULL_UUID
						.equals(((SubsystemInSubsystem_c) elem)
								.getParent_ss_id())) && this != elem)) {
			return false;
		}
		if (!getParent_ss_id().equals(
				((SubsystemInSubsystem_c) elem).getParent_ss_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SubsystemInSubsystem_c)) {
			return false;
		}

		SubsystemInSubsystem_c me = (SubsystemInSubsystem_c) elem;
		if (!getChild_ss_idCachedValue().equals(
				((SubsystemInSubsystem_c) elem).getChild_ss_idCachedValue()))
			return false;
		if (!getParent_ss_idCachedValue().equals(
				((SubsystemInSubsystem_c) elem).getParent_ss_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_parent_ss_id;
	private java.util.UUID m_child_ss_id;

	// declare association references from this class

	// referring navigation

	Subsystem_c ContainsSubsystem;
	public void relateAcrossR42To(Subsystem_c target) {
		relateAcrossR42To(target, true);
	}
	public void relateAcrossR42To(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainsSubsystem)
			return; // already related

		if (ContainsSubsystem != target) {

			Object oldKey = getInstanceKey();

			if (ContainsSubsystem != null) {

				ContainsSubsystem.clearBackPointerR42To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SubsystemInSubsystem_c.relateAcrossR42To(Subsystem_c target)",
									"Relate performed across R42 from Subsystem in Subsystem to Subsystem without unrelate of prior instance.");
				}
			}

			ContainsSubsystem = target;
			m_child_ss_id = target.getSs_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR42To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "42", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR42From(Subsystem_c target) {
		unrelateAcrossR42From(target, true);
	}
	public void unrelateAcrossR42From(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainsSubsystem == null)
			return; // already unrelated

		if (target != ContainsSubsystem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R42",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR42To(this);
		}

		if (ContainsSubsystem != null) {

			m_child_ss_id = ContainsSubsystem.getSs_id();
			ContainsSubsystem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "42", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(Subsystem_c[] targets) {
		return getOneS_SISOnR42(targets, null);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		SubsystemInSubsystem_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_SISOnR42(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(Subsystem_c target) {
		return getOneS_SISOnR42(target, null);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(Subsystem_c target,
			boolean loadComponent) {
		return getOneS_SISOnR42(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(Subsystem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_SISOnR42(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		return getOneS_SISOnR42(modelRoot, target, test, true);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR42(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneS_SISOnR42(modelRoot, target, test);
	}
	private static SubsystemInSubsystem_c find_getOneS_SISOnR42(
			ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			SubsystemInSubsystem_c source = (SubsystemInSubsystem_c) target.backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(
			Subsystem_c[] targets) {
		return getManyS_SISsOnR42(targets, null);
	}
	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(
			Subsystem_c[] targets, boolean loadComponent) {
		return getManyS_SISsOnR42(targets, null, loadComponent);
	}
	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		return getManyS_SISsOnR42(targets, test, true);
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(
			Subsystem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SubsystemInSubsystem_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SubsystemInSubsystem_c source = (SubsystemInSubsystem_c) targets[i].backPointer_IsChildViaSubsystemInSubsystemIsChildVia_R42;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SubsystemInSubsystem_c[] ret_set = new SubsystemInSubsystem_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInSubsystem_c[0];
		}
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(Subsystem_c target) {
		if (target != null) {
			Subsystem_c[] targetArray = new Subsystem_c[1];
			targetArray[0] = target;
			return getManyS_SISsOnR42(targetArray);
		} else {
			SubsystemInSubsystem_c[] result = new SubsystemInSubsystem_c[0];
			return result;
		}
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR42(
			Subsystem_c target, boolean loadComponent) {
		if (target != null) {
			Subsystem_c[] targetArray = new Subsystem_c[1];
			targetArray[0] = target;
			return getManyS_SISsOnR42(targetArray, loadComponent);
		} else {
			SubsystemInSubsystem_c[] result = new SubsystemInSubsystem_c[0];
			return result;
		}
	}

	// referring navigation

	Subsystem_c ContainsChildrenOfSubsystem;
	public void relateAcrossR41To(Subsystem_c target) {
		relateAcrossR41To(target, true);
	}
	public void relateAcrossR41To(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainsChildrenOfSubsystem)
			return; // already related

		if (ContainsChildrenOfSubsystem != target) {

			Object oldKey = getInstanceKey();

			if (ContainsChildrenOfSubsystem != null) {
				UmlProblem
						.removeXtUMLProblem(this, ContainsChildrenOfSubsystem);

				ContainsChildrenOfSubsystem.clearBackPointerR41To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SubsystemInSubsystem_c.relateAcrossR41To(Subsystem_c target)",
									"Relate performed across R41 from Subsystem in Subsystem to Subsystem without unrelate of prior instance.");
				}
			}

			ContainsChildrenOfSubsystem = target;
			m_parent_ss_id = target.getSs_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR41To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "41", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR41From(Subsystem_c target) {
		unrelateAcrossR41From(target, true);
	}
	public void unrelateAcrossR41From(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainsChildrenOfSubsystem == null)
			return; // already unrelated

		if (target != ContainsChildrenOfSubsystem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin
					.logError(
							"Tried to unrelate from non-related instance across R41",
							e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR41To(this);
		}

		if (ContainsChildrenOfSubsystem != null) {

			m_parent_ss_id = ContainsChildrenOfSubsystem.getSs_id();
			ContainsChildrenOfSubsystem = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "41", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(Subsystem_c[] targets) {
		return getOneS_SISOnR41(targets, null);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		SubsystemInSubsystem_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneS_SISOnR41(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(Subsystem_c target) {
		return getOneS_SISOnR41(target, null);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(Subsystem_c target,
			boolean loadComponent) {
		return getOneS_SISOnR41(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(Subsystem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneS_SISOnR41(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		return getOneS_SISOnR41(modelRoot, target, test, true);
	}

	public static SubsystemInSubsystem_c getOneS_SISOnR41(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		SubsystemInSubsystem_c result = null;

		result = find_getOneS_SISOnR41(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					SubsystemInSubsystem_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneS_SISOnR41(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SubsystemInSubsystem_c find_getOneS_SISOnR41(
			ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41) {
				for (int i = 0; i < target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
						.size(); ++i) {
					SubsystemInSubsystem_c source = (SubsystemInSubsystem_c) target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c[] targets) {
		return getManyS_SISsOnR41(targets, null);
	}
	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c[] targets, boolean loadComponent) {
		return getManyS_SISsOnR41(targets, null, loadComponent);
	}
	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		return getManyS_SISsOnR41(targets, test, true);
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SubsystemInSubsystem_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					SubsystemInSubsystem_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41) {
				for (int j = 0; j < targets[i].backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
						.size(); ++j) {
					SubsystemInSubsystem_c source = (SubsystemInSubsystem_c) targets[i].backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SubsystemInSubsystem_c[] ret_set = new SubsystemInSubsystem_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInSubsystem_c[0];
		}
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(Subsystem_c target) {
		return getManyS_SISsOnR41(target, null);
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c target, boolean loadComponent) {
		return getManyS_SISsOnR41(target, null, loadComponent);
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c target, ClassQueryInterface_c test) {
		return getManyS_SISsOnR41(target, test, true);
	}

	public static SubsystemInSubsystem_c[] getManyS_SISsOnR41(
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SubsystemInSubsystem_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistenceManager.ensureAllChildInstancesLoaded(
					target.getPersistableComponent(), modelRoot,
					SubsystemInSubsystem_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41) {
			for (int i = 0; i < target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
					.size(); ++i) {
				SubsystemInSubsystem_c source = (SubsystemInSubsystem_c) target.backPointer_IsParentToOtherPackagesViaSubsystemInSubsystemIsParentToOtherPackagesVia_R41
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SubsystemInSubsystem_c[] ret_set = new SubsystemInSubsystem_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SubsystemInSubsystem_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ContainsSubsystem == null) {
			// R42
			Subsystem_c relInst56290 = (Subsystem_c) baseRoot.getInstanceList(
					Subsystem_c.class).get(new Object[]{m_child_ss_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56290 == null) {
				relInst56290 = (Subsystem_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Subsystem_c.class)
						.get(new Object[]{m_child_ss_id});
			}
			if (relInst56290 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56290 = (Subsystem_c) roots[i].getInstanceList(
							Subsystem_c.class).get(new Object[]{m_child_ss_id});
					if (relInst56290 != null)
						break;
				}
			}
			//synchronized
			if (relInst56290 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56290) && !isProxy())) {
					relInst56290.relateAcrossR42To(this, notifyChanges);
				}
			}
		}

		if (ContainsChildrenOfSubsystem == null) {
			// R41
			Subsystem_c relInst56291 = (Subsystem_c) baseRoot.getInstanceList(
					Subsystem_c.class).get(new Object[]{m_parent_ss_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst56291 == null) {
				relInst56291 = (Subsystem_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Subsystem_c.class)
						.get(new Object[]{m_parent_ss_id});
			}
			if (relInst56291 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst56291 = (Subsystem_c) roots[i].getInstanceList(
							Subsystem_c.class)
							.get(new Object[]{m_parent_ss_id});
					if (relInst56291 != null)
						break;
				}
			}
			//synchronized
			if (relInst56291 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst56291) && !isProxy())) {
					relInst56291.relateAcrossR41To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R42
		// S_SS
		inst = ContainsSubsystem;
		unrelateAcrossR42From(ContainsSubsystem, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R41
		// S_SS
		inst = ContainsChildrenOfSubsystem;
		unrelateAcrossR41From(ContainsChildrenOfSubsystem, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SubsystemInSubsystem_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SubsystemInSubsystem_c inst = (SubsystemInSubsystem_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SubsystemInSubsystem_c SubsystemInSubsystemInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SubsystemInSubsystem_c result = findSubsystemInSubsystemInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SubsystemInSubsystem_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSubsystemInSubsystemInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SubsystemInSubsystem_c findSubsystemInSubsystemInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SubsystemInSubsystem_c x = (SubsystemInSubsystem_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SubsystemInSubsystem_c SubsystemInSubsystemInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SubsystemInSubsystemInstance(modelRoot, test, true);
	}

	public static SubsystemInSubsystem_c SubsystemInSubsystemInstance(
			ModelRoot modelRoot) {
		return SubsystemInSubsystemInstance(modelRoot, null, true);
	}

	public static SubsystemInSubsystem_c[] SubsystemInSubsystemInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SubsystemInSubsystem_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SubsystemInSubsystem_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SubsystemInSubsystem_c x = (SubsystemInSubsystem_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SubsystemInSubsystem_c[] ret_set = new SubsystemInSubsystem_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SubsystemInSubsystem_c[0];
			}
		}
	}
	public static SubsystemInSubsystem_c[] SubsystemInSubsystemInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SubsystemInSubsystemInstances(modelRoot, test, true);
	}
	public static SubsystemInSubsystem_c[] SubsystemInSubsystemInstances(
			ModelRoot modelRoot) {
		return SubsystemInSubsystemInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Subsystem in Subsystem.dispose call: ";
		Subsystem_c testR42Inst = Subsystem_c.getOneS_SSOnR42(this, false);

		if (testR42Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "42 ";
		}
		Subsystem_c testR41Inst = Subsystem_c.getOneS_SSOnR41(this, false);

		if (testR41Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "41 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Subsystem in Subsystem",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("parent_ss_id")) {
			return true;
		}
		if (attributeName.equals("child_ss_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getChild_ss_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getChild_ss_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getParent_ss_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getParent_ss_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getParent_ss_idLongBased() {
		if (ContainsChildrenOfSubsystem != null) {
			return ContainsChildrenOfSubsystem.getSs_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getParent_ss_id() {
		if (ContainsChildrenOfSubsystem != null) {
			return ContainsChildrenOfSubsystem.getSs_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParent_ss_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_parent_ss_id))
			return m_parent_ss_id;
		else
			return getParent_ss_id();
	}

	public void setParent_ss_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_parent_ss_id)) {
				return;
			}
		} else if (m_parent_ss_id != null) {
			if (m_parent_ss_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Parent_ss_id", m_parent_ss_id, newValue, true);
		m_parent_ss_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getChild_ss_idLongBased() {
		if (ContainsSubsystem != null) {
			return ContainsSubsystem.getSs_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getChild_ss_id() {
		if (ContainsSubsystem != null) {
			return ContainsSubsystem.getSs_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getChild_ss_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_child_ss_id))
			return m_child_ss_id;
		else
			return getChild_ss_id();
	}

	public void setChild_ss_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_child_ss_id)) {
				return;
			}
		} else if (m_child_ss_id != null) {
			if (m_child_ss_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Child_ss_id", m_child_ss_id, newValue, true);
		m_child_ss_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Subsystem in Subsystem", //$NON-NLS-1$
						" Operation entered: Subsystem in Subsystem::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SubsystemInSubsystem_c[] objs = SubsystemInSubsystem_c
				.SubsystemInSubsystemInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Subsystem in Subsystem", //$NON-NLS-1$
				" Operation entered: Subsystem in Subsystem::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SubsystemInSubsystem_c_test56293_c
				implements
					ClassQueryInterface_c {
			SubsystemInSubsystem_c_test56293_c(java.util.UUID p56294,
					java.util.UUID p56295) {
				m_p56294 = p56294;
				m_p56295 = p56295;
			}
			private java.util.UUID m_p56294;
			private java.util.UUID m_p56295;
			public boolean evaluate(Object candidate) {
				SubsystemInSubsystem_c selected = (SubsystemInSubsystem_c) candidate;
				boolean retval = false;
				retval = (selected.getChild_ss_id().equals(m_p56294))
						& (selected.getParent_ss_id().equals(m_p56295));
				return retval;
			}
		}

		SubsystemInSubsystem_c[] objs56292 = SubsystemInSubsystem_c
				.SubsystemInSubsystemInstances(modelRoot,
						new SubsystemInSubsystem_c_test56293_c(
								getChild_ss_id(), getParent_ss_id()));

		if (((objs56292.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Subsystem", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Subsystem: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56292.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Subsystem: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56292.length), e);
			}
			retval = false;

		}

		if (((objs56292.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Subsystem", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Subsystem: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56292.length)
										+ " Child_SS_ID: " + "Not Printable" + " Parent_SS_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Subsystem: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56292.length)
										+ " Child_SS_ID: " + "Not Printable" + " Parent_SS_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Subsystem in Subsystem is a referring class in association: rel.Numb = 41
		// The participating class is: Subsystem
		class Subsystem_c_test56299_c implements ClassQueryInterface_c {
			Subsystem_c_test56299_c(java.util.UUID p56300) {
				m_p56300 = p56300;
			}
			private java.util.UUID m_p56300;
			public boolean evaluate(Object candidate) {
				Subsystem_c selected = (Subsystem_c) candidate;
				boolean retval = false;
				retval = (selected.getSs_id().equals(m_p56300));
				return retval;
			}
		}

		Subsystem_c[] objs56298 = Subsystem_c.SubsystemInstances(modelRoot,
				new Subsystem_c_test56299_c(getParent_ss_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56298.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Subsystem", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Subsystem: Association: 41: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56298.length)
										+ " Parent_SS_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Subsystem: Association: 41: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56298.length)
										+ " Parent_SS_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Subsystem in Subsystem is a referring class in association: rel.Numb = 42
		// The participating class is: Subsystem
		class Subsystem_c_test56302_c implements ClassQueryInterface_c {
			Subsystem_c_test56302_c(java.util.UUID p56303) {
				m_p56303 = p56303;
			}
			private java.util.UUID m_p56303;
			public boolean evaluate(Object candidate) {
				Subsystem_c selected = (Subsystem_c) candidate;
				boolean retval = false;
				retval = (selected.getSs_id().equals(m_p56303));
				return retval;
			}
		}

		Subsystem_c[] objs56301 = Subsystem_c.SubsystemInstances(modelRoot,
				new Subsystem_c_test56302_c(getChild_ss_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs56301.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Subsystem in Subsystem", //$NON-NLS-1$
								"Consistency: Object: Subsystem in Subsystem: Association: 42: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56301.length)
										+ " Child_SS_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Subsystem in Subsystem: Association: 42: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56301.length)
										+ " Child_SS_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Subsystem in Subsystem",
				" Operation entered: SubsystemInSubsystem::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Subsystem_c v_pss = Subsystem_c.getOneS_SSOnR41(this);

		this.unrelateAcrossR41From(v_pss);

		Subsystem_c v_css = Subsystem_c.getOneS_SSOnR42(this);

		this.unrelateAcrossR42From(v_css);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Subsystem in Subsystem
