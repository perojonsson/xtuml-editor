package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ImportedReference_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_IMPORTED_REFERENCE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ImportedReference_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ImportedReference_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_ref_id, java.util.UUID p_m_importedcomp_id,
			java.util.UUID p_m_delegation_id, String p_m_name,
			String p_m_descrip) {
		super(modelRoot);
		m_name = p_m_name;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ref_id = IdAssigner.preprocessUUID(p_m_ref_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_importedcomp_id = IdAssigner.preprocessUUID(p_m_importedcomp_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_delegation_id = IdAssigner.preprocessUUID(p_m_delegation_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ImportedReference_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_ref_id,
			java.util.UUID p_m_importedcomp_id,
			java.util.UUID p_m_delegation_id, String p_m_name,
			String p_m_descrip, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);
		ImportedReference_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ImportedReference_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_name = p_m_name;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ref_id = IdAssigner.preprocessUUID(p_m_ref_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_importedcomp_id = IdAssigner
						.preprocessUUID(p_m_importedcomp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_delegation_id = IdAssigner
						.preprocessUUID(p_m_delegation_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ImportedReference_c(modelRoot, p_m_id, p_m_ref_id,
					p_m_importedcomp_id, p_m_delegation_id, p_m_name,
					p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ImportedReference_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_ref_id,
			java.util.UUID p_m_importedcomp_id,
			java.util.UUID p_m_delegation_id, String p_m_name,
			String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);
		ImportedReference_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ImportedReference_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_name = p_m_name;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ref_id = IdAssigner.preprocessUUID(p_m_ref_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_importedcomp_id = IdAssigner
						.preprocessUUID(p_m_importedcomp_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_delegation_id = IdAssigner
						.preprocessUUID(p_m_delegation_id);

				return source;
			}
		}
		// there is no instance matching the id
		ImportedReference_c new_inst = new ImportedReference_c(modelRoot,
				p_m_id, p_m_ref_id, p_m_importedcomp_id, p_m_delegation_id,
				p_m_name, p_m_descrip);
		return new_inst;
	}
	public ImportedReference_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_name = "";
		m_descrip = "";
		m_id = idAssigner.createUUID();
		m_ref_id = IdAssigner.NULL_UUID;
		m_importedcomp_id = IdAssigner.NULL_UUID;
		m_delegation_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ImportedReference_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ImportedReference_c)) {
			return false;
		}

		ImportedReference_c me = (ImportedReference_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ImportedReference_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ImportedReference_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ImportedReference_c)) {
			return false;
		}

		ImportedReference_c me = (ImportedReference_c) elem;
		if (!getId().equals(((ImportedReference_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private String m_name;
	private String m_descrip;
	private java.util.UUID m_id;
	private long m_idLongBased;
	private java.util.UUID m_ref_id;
	private java.util.UUID m_importedcomp_id;
	private java.util.UUID m_delegation_id;

	// declare association references from this class

	// referring navigation

	InterfaceReference_c ImportsInterfaceReference;
	public void relateAcrossR4701To(InterfaceReference_c target) {
		relateAcrossR4701To(target, true);
	}
	public void relateAcrossR4701To(InterfaceReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ImportsInterfaceReference)
			return; // already related

		if (ImportsInterfaceReference != target) {

			Object oldKey = getInstanceKey();

			if (ImportsInterfaceReference != null) {
				UmlProblem.removeXtUMLProblem(this, ImportsInterfaceReference);

				ImportsInterfaceReference.clearBackPointerR4701To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ImportedReference_c.relateAcrossR4701To(InterfaceReference_c target)",
									"Relate performed across R4701 from Imported Reference to Interface Reference without unrelate of prior instance.");
				}
			}

			ImportsInterfaceReference = target;
			m_ref_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4701To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4701", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4701From(InterfaceReference_c target) {
		unrelateAcrossR4701From(target, true);
	}
	public void unrelateAcrossR4701From(InterfaceReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ImportsInterfaceReference == null)
			return; // already unrelated

		if (target != ImportsInterfaceReference) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4701",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4701To(this);
		}

		if (ImportsInterfaceReference != null) {

			m_ref_id = ImportsInterfaceReference.getId();
			ImportsInterfaceReference = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4701", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ImportedReference_c getOneCL_IIROnR4701(
			InterfaceReference_c[] targets) {
		return getOneCL_IIROnR4701(targets, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4701(
			InterfaceReference_c[] targets, ClassQueryInterface_c test) {
		ImportedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCL_IIROnR4701(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ImportedReference_c getOneCL_IIROnR4701(
			InterfaceReference_c target) {
		return getOneCL_IIROnR4701(target, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4701(
			InterfaceReference_c target, boolean loadComponent) {
		return getOneCL_IIROnR4701(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ImportedReference_c getOneCL_IIROnR4701(
			InterfaceReference_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCL_IIROnR4701(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ImportedReference_c getOneCL_IIROnR4701(ModelRoot modelRoot,
			InterfaceReference_c target, ClassQueryInterface_c test) {
		return getOneCL_IIROnR4701(modelRoot, target, test, true);
	}

	public static ImportedReference_c getOneCL_IIROnR4701(ModelRoot modelRoot,
			InterfaceReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedReference_c result = null;

		result = find_getOneCL_IIROnR4701(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ImportedReference_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneCL_IIROnR4701(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ImportedReference_c find_getOneCL_IIROnR4701(
			ModelRoot modelRoot, InterfaceReference_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsImportedImportedReferenceIsImported_R4701) {
				for (int i = 0; i < target.backPointer_IsImportedImportedReferenceIsImported_R4701
						.size(); ++i) {
					ImportedReference_c source = (ImportedReference_c) target.backPointer_IsImportedImportedReferenceIsImported_R4701
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c[] targets) {
		return getManyCL_IIRsOnR4701(targets, null);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c[] targets, boolean loadComponent) {
		return getManyCL_IIRsOnR4701(targets, null, loadComponent);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4701(targets, test, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ImportedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedReference_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsImportedImportedReferenceIsImported_R4701) {
				for (int j = 0; j < targets[i].backPointer_IsImportedImportedReferenceIsImported_R4701
						.size(); ++j) {
					ImportedReference_c source = (ImportedReference_c) targets[i].backPointer_IsImportedImportedReferenceIsImported_R4701
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ImportedReference_c[] ret_set = new ImportedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedReference_c[0];
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c target) {
		return getManyCL_IIRsOnR4701(target, null);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c target, boolean loadComponent) {
		return getManyCL_IIRsOnR4701(target, null, loadComponent);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c target, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4701(target, test, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4701(
			InterfaceReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ImportedReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedReference_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsImportedImportedReferenceIsImported_R4701) {
			for (int i = 0; i < target.backPointer_IsImportedImportedReferenceIsImported_R4701
					.size(); ++i) {
				ImportedReference_c source = (ImportedReference_c) target.backPointer_IsImportedImportedReferenceIsImported_R4701
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ImportedReference_c[] ret_set = new ImportedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedReference_c[0];
		}
	}

	// referring navigation

	Delegation_c AcceptsCommunicationThroughDelegation;
	public void relateAcrossR4704To(Delegation_c target) {
		relateAcrossR4704To(target, true);
	}
	public void relateAcrossR4704To(Delegation_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == AcceptsCommunicationThroughDelegation)
			return; // already related

		if (AcceptsCommunicationThroughDelegation != target) {

			Object oldKey = getInstanceKey();

			if (AcceptsCommunicationThroughDelegation != null) {
				UmlProblem.removeXtUMLProblem(this,
						AcceptsCommunicationThroughDelegation);

				AcceptsCommunicationThroughDelegation
						.clearBackPointerR4704To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ImportedReference_c.relateAcrossR4704To(Delegation_c target)",
									"Relate performed across R4704 from Imported Reference to Delegation without unrelate of prior instance.");
				}
			}

			AcceptsCommunicationThroughDelegation = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_delegation_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4704To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4704", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4704From(Delegation_c target) {
		unrelateAcrossR4704From(target, true);
	}
	public void unrelateAcrossR4704From(Delegation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (AcceptsCommunicationThroughDelegation == null)
			return; // already unrelated

		if (target != AcceptsCommunicationThroughDelegation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4704",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4704To(this);
		}

		if (AcceptsCommunicationThroughDelegation != null) {

			m_delegation_id = AcceptsCommunicationThroughDelegation.getId();
			if (IdAssigner.NULL_UUID.equals(m_delegation_id)) {
				m_delegation_id = AcceptsCommunicationThroughDelegation
						.getIdCachedValue();
			}
			AcceptsCommunicationThroughDelegation = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4704", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ImportedReference_c getOneCL_IIROnR4704(Delegation_c[] targets) {
		return getOneCL_IIROnR4704(targets, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4704(
			Delegation_c[] targets, ClassQueryInterface_c test) {
		ImportedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCL_IIROnR4704(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ImportedReference_c getOneCL_IIROnR4704(Delegation_c target) {
		return getOneCL_IIROnR4704(target, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4704(Delegation_c target,
			boolean loadComponent) {
		return getOneCL_IIROnR4704(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ImportedReference_c getOneCL_IIROnR4704(Delegation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCL_IIROnR4704(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ImportedReference_c getOneCL_IIROnR4704(ModelRoot modelRoot,
			Delegation_c target, ClassQueryInterface_c test) {
		return getOneCL_IIROnR4704(modelRoot, target, test, true);
	}

	public static ImportedReference_c getOneCL_IIROnR4704(ModelRoot modelRoot,
			Delegation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedReference_c result = null;

		result = find_getOneCL_IIROnR4704(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ImportedReference_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneCL_IIROnR4704(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ImportedReference_c find_getOneCL_IIROnR4704(
			ModelRoot modelRoot, Delegation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ImportedReference_c source = (ImportedReference_c) target.backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c[] targets) {
		return getManyCL_IIRsOnR4704(targets, null);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c[] targets, boolean loadComponent) {
		return getManyCL_IIRsOnR4704(targets, null, loadComponent);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4704(targets, test, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ImportedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedReference_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ImportedReference_c source = (ImportedReference_c) targets[i].backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ImportedReference_c[] ret_set = new ImportedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedReference_c[0];
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c target) {
		if (target != null) {
			Delegation_c[] targetArray = new Delegation_c[1];
			targetArray[0] = target;
			return getManyCL_IIRsOnR4704(targetArray);
		} else {
			ImportedReference_c[] result = new ImportedReference_c[0];
			return result;
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4704(
			Delegation_c target, boolean loadComponent) {
		if (target != null) {
			Delegation_c[] targetArray = new Delegation_c[1];
			targetArray[0] = target;
			return getManyCL_IIRsOnR4704(targetArray, loadComponent);
		} else {
			ImportedReference_c[] result = new ImportedReference_c[0];
			return result;
		}
	}

	// referring navigation

	ComponentReference_c OriginatesFromComponentReference;
	public void relateAcrossR4700To(ComponentReference_c target) {
		relateAcrossR4700To(target, true);
	}
	public void relateAcrossR4700To(ComponentReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OriginatesFromComponentReference)
			return; // already related

		if (OriginatesFromComponentReference != target) {

			Object oldKey = getInstanceKey();

			if (OriginatesFromComponentReference != null) {

				OriginatesFromComponentReference.clearBackPointerR4700To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ImportedReference_c.relateAcrossR4700To(ComponentReference_c target)",
									"Relate performed across R4700 from Imported Reference to Component Reference without unrelate of prior instance.");
				}
			}

			OriginatesFromComponentReference = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_importedcomp_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4700To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4700", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4700From(ComponentReference_c target) {
		unrelateAcrossR4700From(target, true);
	}
	public void unrelateAcrossR4700From(ComponentReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OriginatesFromComponentReference == null)
			return; // already unrelated

		if (target != OriginatesFromComponentReference) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4700",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4700To(this);
		}

		if (OriginatesFromComponentReference != null) {

			m_importedcomp_id = OriginatesFromComponentReference.getId();
			if (IdAssigner.NULL_UUID.equals(m_importedcomp_id)) {
				m_importedcomp_id = OriginatesFromComponentReference
						.getIdCachedValue();
			}
			OriginatesFromComponentReference = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4700", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ImportedReference_c getOneCL_IIROnR4700(
			ComponentReference_c[] targets) {
		return getOneCL_IIROnR4700(targets, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4700(
			ComponentReference_c[] targets, ClassQueryInterface_c test) {
		ImportedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCL_IIROnR4700(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ImportedReference_c getOneCL_IIROnR4700(
			ComponentReference_c target) {
		return getOneCL_IIROnR4700(target, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4700(
			ComponentReference_c target, boolean loadComponent) {
		return getOneCL_IIROnR4700(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ImportedReference_c getOneCL_IIROnR4700(
			ComponentReference_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCL_IIROnR4700(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ImportedReference_c getOneCL_IIROnR4700(ModelRoot modelRoot,
			ComponentReference_c target, ClassQueryInterface_c test) {
		return getOneCL_IIROnR4700(modelRoot, target, test, true);
	}

	public static ImportedReference_c getOneCL_IIROnR4700(ModelRoot modelRoot,
			ComponentReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCL_IIROnR4700(modelRoot, target, test);
	}
	private static ImportedReference_c find_getOneCL_IIROnR4700(
			ModelRoot modelRoot, ComponentReference_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700) {
				for (int i = 0; i < target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
						.size(); ++i) {
					ImportedReference_c source = (ImportedReference_c) target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c[] targets) {
		return getManyCL_IIRsOnR4700(targets, null);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c[] targets, boolean loadComponent) {
		return getManyCL_IIRsOnR4700(targets, null, loadComponent);
	}
	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4700(targets, test, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ImportedReference_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700) {
				for (int j = 0; j < targets[i].backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
						.size(); ++j) {
					ImportedReference_c source = (ImportedReference_c) targets[i].backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ImportedReference_c[] ret_set = new ImportedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedReference_c[0];
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c target) {
		return getManyCL_IIRsOnR4700(target, null);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c target, boolean loadComponent) {
		return getManyCL_IIRsOnR4700(target, null, loadComponent);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c target, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4700(target, test, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4700(
			ComponentReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ImportedReference_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700) {
			for (int i = 0; i < target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
					.size(); ++i) {
				ImportedReference_c source = (ImportedReference_c) target.backPointer_CommunicatesThroughImportedReferenceCommunicatesThrough_R4700
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ImportedReference_c[] ret_set = new ImportedReference_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedReference_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ImportedRequirement_c backPointer_IsSubtypeImportedRequirementIsSubtype_R4703;

	public void setImportedRequirementOrderInChildListR4703(
			ImportedRequirement_c target, int index) {
		unrelateAcrossR4703From(target);
		ImportedRequirement_c[] elements = ImportedRequirement_c
				.getManyCL_IRsOnR4703(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR4703From((ImportedRequirement_c) elements[i]);
			}
			count++;
		}
		relateAcrossR4703To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR4703To((ImportedRequirement_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR4703To(ImportedRequirement_c target) {
		if (target != null) {
			target.relateAcrossR4703To(this, true);
		}
	}

	public void relateAcrossR4703To(ImportedRequirement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR4703To(this, notifyChanges);
		}
	}

	public void setBackPointerR4703To(ImportedRequirement_c target) {
		backPointer_IsSubtypeImportedRequirementIsSubtype_R4703 = target;
	}

	public void unrelateAcrossR4703From(ImportedRequirement_c target) {
		if (target != null) {
			target.unrelateAcrossR4703From(this, true);
		}
	}

	public void unrelateAcrossR4703From(ImportedRequirement_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR4703From(this, notifyChanges);
		}
	}

	public void clearBackPointerR4703To(ImportedRequirement_c target) {
		if (target == backPointer_IsSubtypeImportedRequirementIsSubtype_R4703) {
			backPointer_IsSubtypeImportedRequirementIsSubtype_R4703 = null;
		}
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedRequirement_c[] targets) {
		return getOneCL_IIROnR4703(targets, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedRequirement_c[] targets, ClassQueryInterface_c test) {
		return getOneCL_IIROnR4703(targets, test, true);
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedRequirement_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ImportedReference_c candidate_val = getOneCL_IIROnR4703(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCL_IIROnR4703(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedRequirement_c target) {
		return getOneCL_IIROnR4703(target, true);
	}
	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedRequirement_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeImportedReference;
		} else {
			return null;
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4703(targets, test, true);
	}

	public static ImportedReference_c [] getManyCL_IIRsOnR4703(ImportedRequirement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedReference_c[0];
  
  
  LinkedHashSet<ImportedReference_c> elementsSet = new LinkedHashSet<ImportedReference_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeImportedReference == null)
	  targets[i].loadProxy();
    ImportedReference_c associate = targets[i].IsSupertypeImportedReference;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedReference_c[] result = new ImportedReference_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c[] targets) {
		return getManyCL_IIRsOnR4703(targets, null);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ImportedRequirement_c[] targetArray = new ImportedRequirement_c[1];
			targetArray[0] = target;
			return getManyCL_IIRsOnR4703(targetArray, test, loadComponent);
		} else {
			ImportedReference_c[] result = new ImportedReference_c[0];
			return result;
		}

	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c target, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4703(target, null, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c target) {
		return getManyCL_IIRsOnR4703(target, null, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedRequirement_c target, boolean loadComponent) {
		return getManyCL_IIRsOnR4703(target, null, loadComponent);
	}

	// referred to navigation

	ImportedProvision_c backPointer_IsSubtypeImportedProvisionIsSubtype_R4703;

	public void setImportedProvisionOrderInChildListR4703(
			ImportedProvision_c target, int index) {
		unrelateAcrossR4703From(target);
		ImportedProvision_c[] elements = ImportedProvision_c
				.getManyCL_IPsOnR4703(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR4703From((ImportedProvision_c) elements[i]);
			}
			count++;
		}
		relateAcrossR4703To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR4703To((ImportedProvision_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR4703To(ImportedProvision_c target) {
		if (target != null) {
			target.relateAcrossR4703To(this, true);
		}
	}

	public void relateAcrossR4703To(ImportedProvision_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR4703To(this, notifyChanges);
		}
	}

	public void setBackPointerR4703To(ImportedProvision_c target) {
		backPointer_IsSubtypeImportedProvisionIsSubtype_R4703 = target;
	}

	public void unrelateAcrossR4703From(ImportedProvision_c target) {
		if (target != null) {
			target.unrelateAcrossR4703From(this, true);
		}
	}

	public void unrelateAcrossR4703From(ImportedProvision_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR4703From(this, notifyChanges);
		}
	}

	public void clearBackPointerR4703To(ImportedProvision_c target) {
		if (target == backPointer_IsSubtypeImportedProvisionIsSubtype_R4703) {
			backPointer_IsSubtypeImportedProvisionIsSubtype_R4703 = null;
		}
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedProvision_c[] targets) {
		return getOneCL_IIROnR4703(targets, null);
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedProvision_c[] targets, ClassQueryInterface_c test) {
		return getOneCL_IIROnR4703(targets, test, true);
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedProvision_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedReference_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ImportedReference_c candidate_val = getOneCL_IIROnR4703(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCL_IIROnR4703(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedProvision_c target) {
		return getOneCL_IIROnR4703(target, true);
	}
	public static ImportedReference_c getOneCL_IIROnR4703(
			ImportedProvision_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeImportedReference;
		} else {
			return null;
		}
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4703(targets, test, true);
	}

	public static ImportedReference_c [] getManyCL_IIRsOnR4703(ImportedProvision_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ImportedReference_c[0];
  
  
  LinkedHashSet<ImportedReference_c> elementsSet = new LinkedHashSet<ImportedReference_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeImportedReference == null)
	  targets[i].loadProxy();
    ImportedReference_c associate = targets[i].IsSupertypeImportedReference;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ImportedReference_c[] result = new ImportedReference_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c[] targets) {
		return getManyCL_IIRsOnR4703(targets, null);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ImportedProvision_c[] targetArray = new ImportedProvision_c[1];
			targetArray[0] = target;
			return getManyCL_IIRsOnR4703(targetArray, test, loadComponent);
		} else {
			ImportedReference_c[] result = new ImportedReference_c[0];
			return result;
		}

	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c target, ClassQueryInterface_c test) {
		return getManyCL_IIRsOnR4703(target, null, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c target) {
		return getManyCL_IIRsOnR4703(target, null, true);
	}

	public static ImportedReference_c[] getManyCL_IIRsOnR4703(
			ImportedProvision_c target, boolean loadComponent) {
		return getManyCL_IIRsOnR4703(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ImportsInterfaceReference == null) {
			// R4701
			InterfaceReference_c relInst57249 = (InterfaceReference_c) baseRoot
					.getInstanceList(InterfaceReference_c.class).get(
							new Object[]{m_ref_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57249 == null) {
				relInst57249 = (InterfaceReference_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(InterfaceReference_c.class)
						.get(new Object[]{m_ref_id});
			}
			if (relInst57249 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57249 = (InterfaceReference_c) roots[i]
							.getInstanceList(InterfaceReference_c.class).get(
									new Object[]{m_ref_id});
					if (relInst57249 != null)
						break;
				}
			}
			//synchronized
			if (relInst57249 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57249) && !isProxy())) {
					relInst57249.relateAcrossR4701To(this, notifyChanges);
				}
			}
		}

		if (AcceptsCommunicationThroughDelegation == null) {
			// R4704
			Delegation_c relInst57250 = (Delegation_c) baseRoot
					.getInstanceList(Delegation_c.class).get(
							new Object[]{m_delegation_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57250 == null) {
				relInst57250 = (Delegation_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Delegation_c.class)
						.get(new Object[]{m_delegation_id});
			}
			if (relInst57250 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57250 = (Delegation_c) roots[i].getInstanceList(
							Delegation_c.class).get(
							new Object[]{m_delegation_id});
					if (relInst57250 != null)
						break;
				}
			}
			//synchronized
			if (relInst57250 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57250) && !isProxy())) {
					relInst57250.relateAcrossR4704To(this, notifyChanges);
				}
			}
		}

		if (OriginatesFromComponentReference == null) {
			// R4700
			ComponentReference_c relInst57251 = (ComponentReference_c) baseRoot
					.getInstanceList(ComponentReference_c.class).get(
							new Object[]{m_importedcomp_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57251 == null) {
				relInst57251 = (ComponentReference_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ComponentReference_c.class)
						.get(new Object[]{m_importedcomp_id});
			}
			if (relInst57251 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57251 = (ComponentReference_c) roots[i]
							.getInstanceList(ComponentReference_c.class).get(
									new Object[]{m_importedcomp_id});
					if (relInst57251 != null)
						break;
				}
			}
			//synchronized
			if (relInst57251 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57251) && !isProxy())) {
					relInst57251.relateAcrossR4700To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4701
		// C_IR
		inst = ImportsInterfaceReference;
		unrelateAcrossR4701From(ImportsInterfaceReference, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4704
		// C_DG
		inst = AcceptsCommunicationThroughDelegation;
		unrelateAcrossR4704From(AcceptsCommunicationThroughDelegation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4700
		// CL_IC
		inst = OriginatesFromComponentReference;
		unrelateAcrossR4700From(OriginatesFromComponentReference, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ImportedReference_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ImportedReference_c inst = (ImportedReference_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ImportedReference_c ImportedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedReference_c result = findImportedReferenceInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ImportedReference_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findImportedReferenceInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ImportedReference_c findImportedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ImportedReference_c x = (ImportedReference_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ImportedReference_c ImportedReferenceInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ImportedReferenceInstance(modelRoot, test, true);
	}

	public static ImportedReference_c ImportedReferenceInstance(
			ModelRoot modelRoot) {
		return ImportedReferenceInstance(modelRoot, null, true);
	}

	public static ImportedReference_c[] ImportedReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedReference_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ImportedReference_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ImportedReference_c x = (ImportedReference_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ImportedReference_c[] ret_set = new ImportedReference_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ImportedReference_c[0];
			}
		}
	}
	public static ImportedReference_c[] ImportedReferenceInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ImportedReferenceInstances(modelRoot, test, true);
	}
	public static ImportedReference_c[] ImportedReferenceInstances(
			ModelRoot modelRoot) {
		return ImportedReferenceInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Imported Reference.dispose call: ";
		InterfaceReference_c testR4701Inst = InterfaceReference_c
				.getOneC_IROnR4701(this, false);

		if (testR4701Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4701 ";
		}
		Delegation_c testR4704Inst = Delegation_c
				.getOneC_DGOnR4704(this, false);

		if (testR4704Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4704 ";
		}
		ImportedRequirement_c testR4703Inst1 = ImportedRequirement_c
				.getOneCL_IROnR4703(this, false);

		if (testR4703Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "4703 ";
		}
		ImportedProvision_c testR4703Inst2 = ImportedProvision_c
				.getOneCL_IPOnR4703(this, false);

		if (testR4703Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "4703 ";
		}
		ComponentReference_c testR4700Inst = ComponentReference_c
				.getOneCL_ICOnR4700(this, false);

		if (testR4700Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4700 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Imported Reference",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("ref_id")) {
			return true;
		}
		if (attributeName.equals("importedcomp_id")) {
			return true;
		}
		if (attributeName.equals("delegation_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getName() {
		ModelRoot modelRoot = getModelRoot();
		String v_name = "";

		Provision_c v_provision = Provision_c
				.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_provision != null))) {

			v_name = v_provision.getName();

		}

		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_requirement != null))) {

			v_name = v_requirement.getName();

		}

		return v_name;

	}

	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getRef_idLongBased() {
		if (ImportsInterfaceReference != null) {
			return ImportsInterfaceReference.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getRef_id() {
		if (ImportsInterfaceReference != null) {
			return ImportsInterfaceReference.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRef_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ref_id))
			return m_ref_id;
		else
			return getRef_id();
	}

	public void setRef_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ref_id)) {
				return;
			}
		} else if (m_ref_id != null) {
			if (m_ref_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Ref_id", m_ref_id, newValue, true);
		m_ref_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getImportedcomp_idLongBased() {
		if (OriginatesFromComponentReference != null) {
			return OriginatesFromComponentReference.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getImportedcomp_id() {
		if (OriginatesFromComponentReference != null) {
			return OriginatesFromComponentReference.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getImportedcomp_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_importedcomp_id))
			return m_importedcomp_id;
		else
			return getImportedcomp_id();
	}

	public void setImportedcomp_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_importedcomp_id)) {
				return;
			}
		} else if (m_importedcomp_id != null) {
			if (m_importedcomp_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Importedcomp_id", m_importedcomp_id, newValue, true);
		m_importedcomp_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDelegation_idLongBased() {
		if (AcceptsCommunicationThroughDelegation != null) {
			return AcceptsCommunicationThroughDelegation.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getDelegation_id() {
		if (AcceptsCommunicationThroughDelegation != null) {
			return AcceptsCommunicationThroughDelegation.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDelegation_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_delegation_id))
			return m_delegation_id;
		else
			return getDelegation_id();
	}

	public void setDelegation_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_delegation_id)) {
				return;
			}
		} else if (m_delegation_id != null) {
			if (m_delegation_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Delegation_id", m_delegation_id, newValue, true);
		m_delegation_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Reference", //$NON-NLS-1$
						" Operation entered: Imported Reference::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ImportedReference_c[] objs = ImportedReference_c
				.ImportedReferenceInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference", //$NON-NLS-1$
				" Operation entered: Imported Reference::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ImportedReference_c_test57253_c implements ClassQueryInterface_c {
			ImportedReference_c_test57253_c(java.util.UUID p57254) {
				m_p57254 = p57254;
			}
			private java.util.UUID m_p57254;
			public boolean evaluate(Object candidate) {
				ImportedReference_c selected = (ImportedReference_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57254));
				return retval;
			}
		}

		ImportedReference_c[] objs57252 = ImportedReference_c
				.ImportedReferenceInstances(modelRoot,
						new ImportedReference_c_test57253_c(getId()));

		if (((objs57252.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57252.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57252.length), e);
			}
			retval = false;

		}

		if (((objs57252.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57252.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57252.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Imported Reference is a referring class in association: rel.Numb = 4701
		// The participating class is: Interface Reference
		class InterfaceReference_c_test57258_c implements ClassQueryInterface_c {
			InterfaceReference_c_test57258_c(java.util.UUID p57259) {
				m_p57259 = p57259;
			}
			private java.util.UUID m_p57259;
			public boolean evaluate(Object candidate) {
				InterfaceReference_c selected = (InterfaceReference_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57259));
				return retval;
			}
		}

		InterfaceReference_c[] objs57257 = InterfaceReference_c
				.InterfaceReferenceInstances(modelRoot,
						new InterfaceReference_c_test57258_c(getRef_id()));

		if (((objs57257.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Association: 4701: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57257.length)
										+ " Ref_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Association: 4701: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57257.length)
										+ " Ref_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Imported Reference is a referring class in association: rel.Numb = 4700
		// The participating class is: Component Reference
		class ComponentReference_c_test57261_c implements ClassQueryInterface_c {
			ComponentReference_c_test57261_c(java.util.UUID p57262) {
				m_p57262 = p57262;
			}
			private java.util.UUID m_p57262;
			public boolean evaluate(Object candidate) {
				ComponentReference_c selected = (ComponentReference_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57262));
				return retval;
			}
		}

		ComponentReference_c[] objs57260 = ComponentReference_c
				.ComponentReferenceInstances(modelRoot,
						new ComponentReference_c_test57261_c(
								getImportedcomp_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57260.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Association: 4700: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57260.length)
										+ " ImportedComp_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Association: 4700: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57260.length)
										+ " ImportedComp_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Imported Reference is a referring class in association: rel.Numb = 4704
		// The participating class is: Delegation
		class Delegation_c_test57264_c implements ClassQueryInterface_c {
			Delegation_c_test57264_c(java.util.UUID p57265) {
				m_p57265 = p57265;
			}
			private java.util.UUID m_p57265;
			public boolean evaluate(Object candidate) {
				Delegation_c selected = (Delegation_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57265));
				return retval;
			}
		}

		Delegation_c[] objs57263 = Delegation_c.DelegationInstances(modelRoot,
				new Delegation_c_test57264_c(getDelegation_id()));

		if (((objs57263.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Association: 4704: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57263.length)
										+ " Delegation_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Association: 4704: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57263.length)
										+ " Delegation_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 4703
		int objs57266 = 0;
		// Subtype Object: Imported Requirement
		class ImportedRequirement_c_test57267_c
				implements
					ClassQueryInterface_c {
			ImportedRequirement_c_test57267_c(java.util.UUID p57268) {
				m_p57268 = p57268;
			}
			private java.util.UUID m_p57268;
			public boolean evaluate(Object candidate) {
				ImportedRequirement_c selected = (ImportedRequirement_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57268));
				return retval;
			}
		}

		ImportedRequirement_c[] objs57269 = ImportedRequirement_c
				.ImportedRequirementInstances(modelRoot,
						new ImportedRequirement_c_test57267_c(getId()));

		objs57266 = objs57266 + objs57269.length;
		// Subtype Object: Imported Provision
		class ImportedProvision_c_test57270_c implements ClassQueryInterface_c {
			ImportedProvision_c_test57270_c(java.util.UUID p57271) {
				m_p57271 = p57271;
			}
			private java.util.UUID m_p57271;
			public boolean evaluate(Object candidate) {
				ImportedProvision_c selected = (ImportedProvision_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57271));
				return retval;
			}
		}

		ImportedProvision_c[] objs57272 = ImportedProvision_c
				.ImportedProvisionInstances(modelRoot,
						new ImportedProvision_c_test57270_c(getId()));

		objs57266 = objs57266 + objs57272.length;
		if (objs57266 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Reference", //$NON-NLS-1$
								"Consistency: Object: Imported Reference: Association: 4703: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57266)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Reference: Association: 4703: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57266), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final boolean p_Connected_disabled, final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		Provision_c v_provision = Provision_c
				.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_provision != null))) {

			return v_provision.Get_connector_text(p_Obj_id,
					p_Obj_typeisimported, p_At, p_Parent_id);

		}

		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_requirement != null))) {

			return v_requirement.Get_connector_text(p_Obj_id,
					p_Obj_typeisimported, p_At, p_Connected_disabled,
					p_Parent_id);

		}

		return "";

	} // End get_connector_text
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getId();

	} // End get_ooa_id
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		Provision_c v_provision = Provision_c
				.getOneC_POnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_provision != null))) {

			return v_provision.Get_style(p_At);

		}

		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c.getOneC_IROnR4701(this));

		if (((v_requirement != null))) {

			return v_requirement.Get_style(p_At);

		}

		return Style_c.None;

	} // End get_style
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Converttoinstance");
		return this;
	} // End convertToInstance
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ComponentReference_c v_icomp = ComponentReference_c
				.getOneCL_ICOnR4700(this);

		if (((v_icomp != null))) {

			this.unrelateAcrossR4700From(v_icomp);

		}

		InterfaceReference_c v_ref = InterfaceReference_c
				.getOneC_IROnR4701(this);

		if (((v_ref != null))) {

			this.unrelateAcrossR4701From(v_ref);

		}

		ImportedProvision_c v_importedPro = ImportedProvision_c
				.getOneCL_IPOnR4703(this);

		if (((v_importedPro != null))) {

			this.unrelateAcrossR4703From(v_importedPro);

			if (v_importedPro != null) {
				v_importedPro.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ImportedRequirement_c v_importedReq = ImportedRequirement_c
				.getOneCL_IROnR4703(this);

		if (((v_importedReq != null))) {

			this.unrelateAcrossR4703From(v_importedReq);

			if (v_importedReq != null) {
				v_importedReq.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Delegation_c v_delegation = Delegation_c.getOneC_DGOnR4704(this);

		if (((v_delegation != null))) {

			if (v_delegation != null) {
				v_delegation.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Resolveinterfacereference() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Reference",
						" Operation entered: ImportedReference::Resolveinterfacereference");
		final ModelRoot modelRoot = getModelRoot();
		InterfaceReference_c v_referenceProxy = InterfaceReference_c
				.getOneC_IROnR4701(this);

		if (((v_referenceProxy != null))
				&& (Util_c.Isproxy(v_referenceProxy.Converttoinstance()) && !Util_c
						.Isproxy(Converttoinstance()))) {

			ComponentReference_c v_importedComp = ComponentReference_c
					.getOneCL_ICOnR4700(this);

			if (((v_importedComp != null))) {

				if (v_importedComp != null) {
					v_importedComp.Resolvecomponent();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

	} // End resolveInterfaceReference
	public boolean Issynchronized() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Reference",
				" Operation entered: ImportedReference::Issynchronized");
		final ModelRoot modelRoot = getModelRoot();
		InterfaceReference_c v_interfaceReference = InterfaceReference_c
				.getOneC_IROnR4701(this);

		Port_c v_port = Port_c.getOneC_POOnR4016(v_interfaceReference);

		Component_c v_thisComp = Component_c
				.getOneC_COnR4201(ComponentReference_c.getOneCL_ICOnR4700(this));

		Component_c v_refComp = Component_c.getOneC_COnR4010(Port_c
				.getOneC_POOnR4016(v_interfaceReference));

		if (((v_interfaceReference == null)
				|| Util_c.Isproxy(v_interfaceReference.Converttoinstance())
				|| (v_port == null) || !v_interfaceReference.Isformal() || v_thisComp != v_refComp)) {

			return false;

		}

		return true;

	} // End isSynchronized
	public boolean Isreferringtodefaultinterfacereference() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Reference",
						" Operation entered: ImportedReference::Isreferringtodefaultinterfacereference");
		final ModelRoot modelRoot = getModelRoot();
		InterfaceReference_c v_ir = InterfaceReference_c
				.getOneC_IROnR4701(this);

		if (((v_ir == null) || Util_c.Isproxy(v_ir.Converttoinstance()))) {

			return true;

		}

		return false;

	} // End isReferringToDefaultInterfaceReference
	public boolean Canrefertointerfacereference() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Reference",
						" Operation entered: ImportedReference::Canrefertointerfacereference");
		final ModelRoot modelRoot = getModelRoot();
		Component_c v_component = Component_c
				.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c
						.getOneC_IROnR4701(this)));

		Component_c v_selfComponent = Component_c
				.getOneC_COnR4201(ComponentReference_c.getOneCL_ICOnR4700(this));

		if ((v_component.getId().equals(v_selfComponent.getId()))) {

			return true;

		}

		return false;

	} // End canReferToInterfaceReference

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Imported Reference
