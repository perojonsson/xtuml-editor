package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Relate_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_RELATE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Relate_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Relate_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_one_side_var_id,
			java.util.UUID p_m_other_side_var_id,
			String p_m_relationship_phrase, java.util.UUID p_m_rel_id,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn,
			int p_m_associationphraselinenumber, int p_m_associationphrasecolumn) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_one_side_var_id = IdAssigner.preprocessUUID(p_m_one_side_var_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_other_side_var_id = IdAssigner.preprocessUUID(p_m_other_side_var_id);
		m_relationship_phrase = p_m_relationship_phrase;
		m_associationnumberlinenumber = p_m_associationnumberlinenumber;
		m_associationnumbercolumn = p_m_associationnumbercolumn;
		m_associationphraselinenumber = p_m_associationphraselinenumber;
		m_associationphrasecolumn = p_m_associationphrasecolumn;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public Relate_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_one_side_var_id,
			java.util.UUID p_m_other_side_var_id,
			String p_m_relationship_phrase, java.util.UUID p_m_rel_id,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn,
			int p_m_associationphraselinenumber,
			int p_m_associationphrasecolumn, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
		Relate_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (Relate_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_one_side_var_id = IdAssigner
						.preprocessUUID(p_m_one_side_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_other_side_var_id = IdAssigner
						.preprocessUUID(p_m_other_side_var_id);
				new_inst.m_relationship_phrase = p_m_relationship_phrase;
				new_inst.m_associationnumberlinenumber = p_m_associationnumberlinenumber;
				new_inst.m_associationnumbercolumn = p_m_associationnumbercolumn;
				new_inst.m_associationphraselinenumber = p_m_associationphraselinenumber;
				new_inst.m_associationphrasecolumn = p_m_associationphrasecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Relate_c(modelRoot, p_m_statement_id,
					p_m_one_side_var_id, p_m_other_side_var_id,
					p_m_relationship_phrase, p_m_rel_id,
					p_m_associationnumberlinenumber,
					p_m_associationnumbercolumn,
					p_m_associationphraselinenumber,
					p_m_associationphrasecolumn);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Relate_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id,
			java.util.UUID p_m_one_side_var_id,
			java.util.UUID p_m_other_side_var_id,
			String p_m_relationship_phrase, java.util.UUID p_m_rel_id,
			int p_m_associationnumberlinenumber,
			int p_m_associationnumbercolumn,
			int p_m_associationphraselinenumber, int p_m_associationphrasecolumn) {
		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
		Relate_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (Relate_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_one_side_var_id = IdAssigner
						.preprocessUUID(p_m_one_side_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_other_side_var_id = IdAssigner
						.preprocessUUID(p_m_other_side_var_id);
				source.m_relationship_phrase = p_m_relationship_phrase;
				source.m_associationnumberlinenumber = p_m_associationnumberlinenumber;
				source.m_associationnumbercolumn = p_m_associationnumbercolumn;
				source.m_associationphraselinenumber = p_m_associationphraselinenumber;
				source.m_associationphrasecolumn = p_m_associationphrasecolumn;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		Relate_c new_inst = new Relate_c(modelRoot, p_m_statement_id,
				p_m_one_side_var_id, p_m_other_side_var_id,
				p_m_relationship_phrase, p_m_rel_id,
				p_m_associationnumberlinenumber, p_m_associationnumbercolumn,
				p_m_associationphraselinenumber, p_m_associationphrasecolumn);
		return new_inst;
	}
	public Relate_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_one_side_var_id = IdAssigner.NULL_UUID;
		m_other_side_var_id = IdAssigner.NULL_UUID;
		m_relationship_phrase = "";
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Relate_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Relate_c)) {
			return false;
		}

		Relate_c me = (Relate_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((Relate_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((Relate_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Relate_c)) {
			return false;
		}

		Relate_c me = (Relate_c) elem;
		if (!getStatement_idCachedValue().equals(
				((Relate_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_one_side_var_id;
	private java.util.UUID m_other_side_var_id;
	private String m_relationship_phrase;
	private int m_associationnumberlinenumber;
	private int m_associationnumbercolumn;
	private int m_associationphraselinenumber;
	private int m_associationphrasecolumn;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	Variable_c OneVariable;
	public void relateAcrossR615To(Variable_c target) {
		relateAcrossR615To(target, true);
	}
	public void relateAcrossR615To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OneVariable)
			return; // already related

		if (OneVariable != target) {

			Object oldKey = getInstanceKey();

			if (OneVariable != null) {

				OneVariable.clearBackPointerR615To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Relate_c.relateAcrossR615To(Variable_c target)",
									"Relate performed across R615 from Relate to Variable without unrelate of prior instance.");
				}
			}

			OneVariable = target;
			m_one_side_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR615To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR615From(Variable_c target) {
		unrelateAcrossR615From(target, true);
	}
	public void unrelateAcrossR615From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (OneVariable == null)
			return; // already unrelated

		if (target != OneVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R615",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR615To(this);
		}

		if (OneVariable != null) {

			m_one_side_var_id = OneVariable.getVar_id();
			OneVariable = null;
			target.removeRef();
		}
	}

	public static Relate_c getOneACT_RELOnR615(Variable_c[] targets) {
		return getOneACT_RELOnR615(targets, null);
	}

	public static Relate_c getOneACT_RELOnR615(Variable_c[] targets,
			ClassQueryInterface_c test) {
		Relate_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_RELOnR615(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Relate_c getOneACT_RELOnR615(Variable_c target) {
		return getOneACT_RELOnR615(target, null);
	}

	public static Relate_c getOneACT_RELOnR615(Variable_c target,
			boolean loadComponent) {
		return getOneACT_RELOnR615(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Relate_c getOneACT_RELOnR615(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_RELOnR615(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Relate_c getOneACT_RELOnR615(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_RELOnR615(modelRoot, target, test, true);
	}

	public static Relate_c getOneACT_RELOnR615(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_RELOnR615(modelRoot, target, test);
	}
	private static Relate_c find_getOneACT_RELOnR615(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsOneVariableRelateIsOneVariable_R615) {
				for (int i = 0; i < target.backPointer_IsOneVariableRelateIsOneVariable_R615
						.size(); ++i) {
					Relate_c source = (Relate_c) target.backPointer_IsOneVariableRelateIsOneVariable_R615
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c[] targets) {
		return getManyACT_RELsOnR615(targets, null);
	}
	public static Relate_c[] getManyACT_RELsOnR615(Variable_c[] targets,
			boolean loadComponent) {
		return getManyACT_RELsOnR615(targets, null, loadComponent);
	}
	public static Relate_c[] getManyACT_RELsOnR615(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR615(targets, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Relate_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsOneVariableRelateIsOneVariable_R615) {
				for (int j = 0; j < targets[i].backPointer_IsOneVariableRelateIsOneVariable_R615
						.size(); ++j) {
					Relate_c source = (Relate_c) targets[i].backPointer_IsOneVariableRelateIsOneVariable_R615
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c target) {
		return getManyACT_RELsOnR615(target, null);
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c target,
			boolean loadComponent) {
		return getManyACT_RELsOnR615(target, null, loadComponent);
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR615(target, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR615(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Relate_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsOneVariableRelateIsOneVariable_R615) {
			for (int i = 0; i < target.backPointer_IsOneVariableRelateIsOneVariable_R615
					.size(); ++i) {
				Relate_c source = (Relate_c) target.backPointer_IsOneVariableRelateIsOneVariable_R615
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	// referring navigation

	Variable_c OtherVariable;
	public void relateAcrossR616To(Variable_c target) {
		relateAcrossR616To(target, true);
	}
	public void relateAcrossR616To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OtherVariable)
			return; // already related

		if (OtherVariable != target) {

			Object oldKey = getInstanceKey();

			if (OtherVariable != null) {

				OtherVariable.clearBackPointerR616To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Relate_c.relateAcrossR616To(Variable_c target)",
									"Relate performed across R616 from Relate to Variable without unrelate of prior instance.");
				}
			}

			OtherVariable = target;
			m_other_side_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR616To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR616From(Variable_c target) {
		unrelateAcrossR616From(target, true);
	}
	public void unrelateAcrossR616From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (OtherVariable == null)
			return; // already unrelated

		if (target != OtherVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R616",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR616To(this);
		}

		if (OtherVariable != null) {

			m_other_side_var_id = OtherVariable.getVar_id();
			OtherVariable = null;
			target.removeRef();
		}
	}

	public static Relate_c getOneACT_RELOnR616(Variable_c[] targets) {
		return getOneACT_RELOnR616(targets, null);
	}

	public static Relate_c getOneACT_RELOnR616(Variable_c[] targets,
			ClassQueryInterface_c test) {
		Relate_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_RELOnR616(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Relate_c getOneACT_RELOnR616(Variable_c target) {
		return getOneACT_RELOnR616(target, null);
	}

	public static Relate_c getOneACT_RELOnR616(Variable_c target,
			boolean loadComponent) {
		return getOneACT_RELOnR616(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Relate_c getOneACT_RELOnR616(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_RELOnR616(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Relate_c getOneACT_RELOnR616(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_RELOnR616(modelRoot, target, test, true);
	}

	public static Relate_c getOneACT_RELOnR616(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_RELOnR616(modelRoot, target, test);
	}
	private static Relate_c find_getOneACT_RELOnR616(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsOtherVariableRelateIsOtherVariable_R616) {
				for (int i = 0; i < target.backPointer_IsOtherVariableRelateIsOtherVariable_R616
						.size(); ++i) {
					Relate_c source = (Relate_c) target.backPointer_IsOtherVariableRelateIsOtherVariable_R616
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c[] targets) {
		return getManyACT_RELsOnR616(targets, null);
	}
	public static Relate_c[] getManyACT_RELsOnR616(Variable_c[] targets,
			boolean loadComponent) {
		return getManyACT_RELsOnR616(targets, null, loadComponent);
	}
	public static Relate_c[] getManyACT_RELsOnR616(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR616(targets, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Relate_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsOtherVariableRelateIsOtherVariable_R616) {
				for (int j = 0; j < targets[i].backPointer_IsOtherVariableRelateIsOtherVariable_R616
						.size(); ++j) {
					Relate_c source = (Relate_c) targets[i].backPointer_IsOtherVariableRelateIsOtherVariable_R616
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c target) {
		return getManyACT_RELsOnR616(target, null);
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c target,
			boolean loadComponent) {
		return getManyACT_RELsOnR616(target, null, loadComponent);
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR616(target, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR616(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Relate_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsOtherVariableRelateIsOtherVariable_R616) {
			for (int i = 0; i < target.backPointer_IsOtherVariableRelateIsOtherVariable_R616
					.size(); ++i) {
				Relate_c source = (Relate_c) target.backPointer_IsOtherVariableRelateIsOtherVariable_R616
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Relate_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from Relate to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static Relate_c getOneACT_RELOnR603(Statement_c[] targets) {
		return getOneACT_RELOnR603(targets, null);
	}

	public static Relate_c getOneACT_RELOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		Relate_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_RELOnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Relate_c getOneACT_RELOnR603(Statement_c target) {
		return getOneACT_RELOnR603(target, null);
	}

	public static Relate_c getOneACT_RELOnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_RELOnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Relate_c getOneACT_RELOnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_RELOnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Relate_c getOneACT_RELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_RELOnR603(modelRoot, target, test, true);
	}

	public static Relate_c getOneACT_RELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_RELOnR603(modelRoot, target, test);
	}
	private static Relate_c find_getOneACT_RELOnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Relate_c source = (Relate_c) target.backPointer_IsSubtypeRelateIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Relate_c[] getManyACT_RELsOnR603(Statement_c[] targets) {
		return getManyACT_RELsOnR603(targets, null);
	}
	public static Relate_c[] getManyACT_RELsOnR603(Statement_c[] targets,
			boolean loadComponent) {
		return getManyACT_RELsOnR603(targets, null, loadComponent);
	}
	public static Relate_c[] getManyACT_RELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR603(targets, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Relate_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Relate_c source = (Relate_c) targets[i].backPointer_IsSubtypeRelateIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	public static Relate_c[] getManyACT_RELsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_RELsOnR603(targetArray);
		} else {
			Relate_c[] result = new Relate_c[0];
			return result;
		}
	}

	public static Relate_c[] getManyACT_RELsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_RELsOnR603(targetArray, loadComponent);
		} else {
			Relate_c[] result = new Relate_c[0];
			return result;
		}
	}

	// referring navigation

	Association_c CreatesAssociation;
	public void relateAcrossR653To(Association_c target) {
		relateAcrossR653To(target, true);
	}
	public void relateAcrossR653To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == CreatesAssociation)
			return; // already related

		if (CreatesAssociation != target) {

			Object oldKey = getInstanceKey();

			if (CreatesAssociation != null) {

				CreatesAssociation.clearBackPointerR653To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Relate_c.relateAcrossR653To(Association_c target)",
									"Relate performed across R653 from Relate to Association without unrelate of prior instance.");
				}
			}

			CreatesAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR653To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR653From(Association_c target) {
		unrelateAcrossR653From(target, true);
	}
	public void unrelateAcrossR653From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (CreatesAssociation == null)
			return; // already unrelated

		if (target != CreatesAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R653",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR653To(this);
		}

		if (CreatesAssociation != null) {

			m_rel_id = CreatesAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = CreatesAssociation.getRel_idCachedValue();
			}
			CreatesAssociation = null;
			target.removeRef();
		}
	}

	public static Relate_c getOneACT_RELOnR653(Association_c[] targets) {
		return getOneACT_RELOnR653(targets, null);
	}

	public static Relate_c getOneACT_RELOnR653(Association_c[] targets,
			ClassQueryInterface_c test) {
		Relate_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_RELOnR653(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Relate_c getOneACT_RELOnR653(Association_c target) {
		return getOneACT_RELOnR653(target, null);
	}

	public static Relate_c getOneACT_RELOnR653(Association_c target,
			boolean loadComponent) {
		return getOneACT_RELOnR653(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Relate_c getOneACT_RELOnR653(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_RELOnR653(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Relate_c getOneACT_RELOnR653(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneACT_RELOnR653(modelRoot, target, test, true);
	}

	public static Relate_c getOneACT_RELOnR653(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_RELOnR653(modelRoot, target, test);
	}
	private static Relate_c find_getOneACT_RELOnR653(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_Relate_R653) {
				for (int i = 0; i < target.backPointer_Relate_R653.size(); ++i) {
					Relate_c source = (Relate_c) target.backPointer_Relate_R653
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c[] targets) {
		return getManyACT_RELsOnR653(targets, null);
	}
	public static Relate_c[] getManyACT_RELsOnR653(Association_c[] targets,
			boolean loadComponent) {
		return getManyACT_RELsOnR653(targets, null, loadComponent);
	}
	public static Relate_c[] getManyACT_RELsOnR653(Association_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR653(targets, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Relate_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_Relate_R653) {
				for (int j = 0; j < targets[i].backPointer_Relate_R653.size(); ++j) {
					Relate_c source = (Relate_c) targets[i].backPointer_Relate_R653
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c target) {
		return getManyACT_RELsOnR653(target, null);
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c target,
			boolean loadComponent) {
		return getManyACT_RELsOnR653(target, null, loadComponent);
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c target,
			ClassQueryInterface_c test) {
		return getManyACT_RELsOnR653(target, test, true);
	}

	public static Relate_c[] getManyACT_RELsOnR653(Association_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Relate_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_Relate_R653) {
			for (int i = 0; i < target.backPointer_Relate_R653.size(); ++i) {
				Relate_c source = (Relate_c) target.backPointer_Relate_R653
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Relate_c[] ret_set = new Relate_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Relate_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (OneVariable == null) {
			// R615
			Variable_c relInst39806 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_one_side_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39806 == null) {
				relInst39806 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_one_side_var_id});
			}
			if (relInst39806 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39806 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(
							new Object[]{m_one_side_var_id});
					if (relInst39806 != null)
						break;
				}
			}
			//synchronized
			if (relInst39806 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39806) && !isProxy())) {
					relInst39806.relateAcrossR615To(this, notifyChanges);
				}
			}
		}

		if (OtherVariable == null) {
			// R616
			Variable_c relInst39807 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_other_side_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39807 == null) {
				relInst39807 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_other_side_var_id});
			}
			if (relInst39807 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39807 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(
							new Object[]{m_other_side_var_id});
					if (relInst39807 != null)
						break;
				}
			}
			//synchronized
			if (relInst39807 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39807) && !isProxy())) {
					relInst39807.relateAcrossR616To(this, notifyChanges);
				}
			}
		}

		// R603
		Statement_c relInst39808 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39808 == null) {
			relInst39808 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst39808 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39808 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst39808 != null)
					break;
			}
		}
		//synchronized
		if (relInst39808 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39808) && !isProxy())) {
				relInst39808.relateAcrossR603To(this, notifyChanges);
			}
		}

		if (CreatesAssociation == null) {
			// R653
			Association_c relInst39809 = (Association_c) baseRoot
					.getInstanceList(Association_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39809 == null) {
				relInst39809 = (Association_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Association_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst39809 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39809 = (Association_c) roots[i].getInstanceList(
							Association_c.class).get(new Object[]{m_rel_id});
					if (relInst39809 != null)
						break;
				}
			}
			//synchronized
			if (relInst39809 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39809) && !isProxy())) {
					relInst39809.relateAcrossR653To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R615
		// V_VAR
		inst = OneVariable;
		unrelateAcrossR615From(OneVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R616
		// V_VAR
		inst = OtherVariable;
		unrelateAcrossR616From(OtherVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R653
		// R_REL
		inst = CreatesAssociation;
		unrelateAcrossR653From(CreatesAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Relate_c inst = (Relate_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Relate_c RelateInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Relate_c result = findRelateInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static Relate_c findRelateInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Relate_c x = (Relate_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Relate_c RelateInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return RelateInstance(modelRoot, test, true);
	}

	public static Relate_c RelateInstance(ModelRoot modelRoot) {
		return RelateInstance(modelRoot, null, true);
	}

	public static Relate_c[] RelateInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Relate_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Relate_c x = (Relate_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Relate_c[] ret_set = new Relate_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Relate_c[0];
			}
		}
	}
	public static Relate_c[] RelateInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return RelateInstances(modelRoot, test, true);
	}
	public static Relate_c[] RelateInstances(ModelRoot modelRoot) {
		return RelateInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Relate.dispose call: ";
		Variable_c testR615Inst = Variable_c.getOneV_VAROnR615(this, false);

		if (testR615Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "615 ";
		}
		Variable_c testR616Inst = Variable_c.getOneV_VAROnR616(this, false);

		if (testR616Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "616 ";
		}
		Statement_c testR603Inst20 = Statement_c.getOneACT_SMTOnR603(this,
				false);

		if (testR603Inst20 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Association_c testR653Inst = Association_c.getOneR_RELOnR653(this,
				false);

		if (testR653Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "653 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Relate", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("one_side_var_id")) {
			return true;
		}
		if (attributeName.equals("other_side_var_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getOne_side_var_idLongBased() {
		if (OneVariable != null) {
			return OneVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOne_side_var_id() {
		if (OneVariable != null) {
			return OneVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getOne_side_var_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_one_side_var_id))
			return m_one_side_var_id;
		else
			return getOne_side_var_id();
	}

	public void setOne_side_var_id(java.util.UUID newValue) {
		m_one_side_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getOther_side_var_idLongBased() {
		if (OtherVariable != null) {
			return OtherVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOther_side_var_id() {
		if (OtherVariable != null) {
			return OtherVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getOther_side_var_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_other_side_var_id))
			return m_other_side_var_id;
		else
			return getOther_side_var_id();
	}

	public void setOther_side_var_id(java.util.UUID newValue) {
		m_other_side_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getRelationship_phrase() {
		return m_relationship_phrase;
	}

	public void setRelationship_phrase(String newValue) {
		m_relationship_phrase = newValue;
	}
	public int getAssociationnumberlinenumber() {
		return m_associationnumberlinenumber;
	}

	public void setAssociationnumberlinenumber(int newValue) {
		m_associationnumberlinenumber = newValue;
	}
	public int getAssociationnumbercolumn() {
		return m_associationnumbercolumn;
	}

	public void setAssociationnumbercolumn(int newValue) {
		m_associationnumbercolumn = newValue;
	}
	public int getAssociationphraselinenumber() {
		return m_associationphraselinenumber;
	}

	public void setAssociationphraselinenumber(int newValue) {
		m_associationphraselinenumber = newValue;
	}
	public int getAssociationphrasecolumn() {
		return m_associationphrasecolumn;
	}

	public void setAssociationphrasecolumn(int newValue) {
		m_associationphrasecolumn = newValue;
	}
	public long getRel_idLongBased() {
		if (CreatesAssociation != null) {
			return CreatesAssociation.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (CreatesAssociation != null) {
			return CreatesAssociation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		m_rel_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Relate", //$NON-NLS-1$
				" Operation entered: Relate::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Relate_c[] objs = Relate_c.RelateInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Relate", //$NON-NLS-1$
				" Operation entered: Relate::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Relate_c_test39811_c implements ClassQueryInterface_c {
			Relate_c_test39811_c(java.util.UUID p39812) {
				m_p39812 = p39812;
			}
			private java.util.UUID m_p39812;
			public boolean evaluate(Object candidate) {
				Relate_c selected = (Relate_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39812));
				return retval;
			}
		}

		Relate_c[] objs39810 = Relate_c.RelateInstances(modelRoot,
				new Relate_c_test39811_c(getStatement_id()));

		if (((objs39810.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Relate", //$NON-NLS-1$
								"Consistency: Object: Relate: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39810.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Relate: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39810.length), e);
			}
			retval = false;

		}

		if (((objs39810.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.CONSISTENCY, "Relate", //$NON-NLS-1$
						"Consistency: Object: Relate: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs39810.length)
								+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Relate: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39810.length)
								+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Relate is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test39816_c implements ClassQueryInterface_c {
			Statement_c_test39816_c(java.util.UUID p39817) {
				m_p39817 = p39817;
			}
			private java.util.UUID m_p39817;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p39817));
				return retval;
			}
		}

		Statement_c[] objs39815 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test39816_c(getStatement_id()));

		if (((objs39815.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Relate", //$NON-NLS-1$
								"Consistency: Object: Relate: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39815.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Relate: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39815.length), e);
			}
			retval = false;

		}

		// Relate is a referring class in association: rel.Numb = 615
		// The participating class is: Variable
		class Variable_c_test39819_c implements ClassQueryInterface_c {
			Variable_c_test39819_c(java.util.UUID p39820) {
				m_p39820 = p39820;
			}
			private java.util.UUID m_p39820;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p39820));
				return retval;
			}
		}

		Variable_c[] objs39818 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test39819_c(getOne_side_var_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39818.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Relate", //$NON-NLS-1$
								"Consistency: Object: Relate: Association: 615: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39818.length)
										+ " One_Side_Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Relate: Association: 615: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39818.length)
										+ " One_Side_Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Relate is a referring class in association: rel.Numb = 616
		// The participating class is: Variable
		class Variable_c_test39822_c implements ClassQueryInterface_c {
			Variable_c_test39822_c(java.util.UUID p39823) {
				m_p39823 = p39823;
			}
			private java.util.UUID m_p39823;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p39823));
				return retval;
			}
		}

		Variable_c[] objs39821 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test39822_c(getOther_side_var_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39821.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Relate", //$NON-NLS-1$
								"Consistency: Object: Relate: Association: 616: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39821.length)
										+ " Other_Side_Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Relate: Association: 616: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39821.length)
										+ " Other_Side_Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Relate is a referring class in association: rel.Numb = 653
		// The participating class is: Association
		class Association_c_test39825_c implements ClassQueryInterface_c {
			Association_c_test39825_c(java.util.UUID p39826) {
				m_p39826 = p39826;
			}
			private java.util.UUID m_p39826;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p39826));
				return retval;
			}
		}

		Association_c[] objs39824 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test39825_c(getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39824.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Relate", //$NON-NLS-1$
								"Consistency: Object: Relate: Association: 653: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39824.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Relate: Association: 653: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39824.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Relate",
				" Operation entered: Relate::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Variable_c v_one_var = Variable_c.getOneV_VAROnR615(this);

		if (((v_one_var != null))) {

			this.unrelateAcrossR615From(v_one_var);

		}

		Variable_c v_other_var = Variable_c.getOneV_VAROnR616(this);

		if (((v_other_var != null))) {

			this.unrelateAcrossR616From(v_other_var);

		}

		Association_c v_rel = Association_c.getOneR_RELOnR653(this);

		if (((v_rel != null))) {

			this.unrelateAcrossR653From(v_rel);

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Relate",
				" Operation entered: Relate::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Relate
