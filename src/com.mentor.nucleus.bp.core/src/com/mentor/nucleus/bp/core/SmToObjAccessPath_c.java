      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SmToObjAccessPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_SM_TO_OBJ_ACCESS_PATH extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class SmToObjAccessPath_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public SmToObjAccessPath_c(ModelRoot modelRoot,
       java.util.UUID         p_m_apath_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_iobj_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
    Object [] key = {m_apath_id};
    addInstanceToMap(key);
  }
  static public SmToObjAccessPath_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_apath_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_iobj_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
      SmToObjAccessPath_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_apath_id};
          new_inst = (SmToObjAccessPath_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new SmToObjAccessPath_c(modelRoot,
p_m_apath_id,
p_m_obj_id,
p_m_iobj_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public SmToObjAccessPath_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_apath_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_iobj_id){
    InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
    SmToObjAccessPath_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_apath_id
            };
        source = (SmToObjAccessPath_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_apath_id = IdAssigner.preprocessUUID(p_m_apath_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_iobj_id = IdAssigner.preprocessUUID(p_m_iobj_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    SmToObjAccessPath_c new_inst = new SmToObjAccessPath_c(modelRoot,
p_m_apath_id,
p_m_obj_id,
p_m_iobj_id
);
    return new_inst;
  }
  public SmToObjAccessPath_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_apath_id = IdAssigner.NULL_UUID;   
     m_obj_id = IdAssigner.NULL_UUID;   
     m_iobj_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_apath_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_apath_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_apath_id !=  p_newKey ){
	
		m_apath_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof SmToObjAccessPath_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof SmToObjAccessPath_c)) {
           return false;
       }
       
       SmToObjAccessPath_c me = (SmToObjAccessPath_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getApath_id()) || IdAssigner.NULL_UUID.equals(((SmToObjAccessPath_c)elem).getApath_id())) && this != elem)) {
      	return false;
      }
      if (!getApath_id().equals(((SmToObjAccessPath_c)elem).getApath_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof SmToObjAccessPath_c)) {
           return false;
       }
       
       SmToObjAccessPath_c me = (SmToObjAccessPath_c)elem;
      if (!getApath_idCachedValue().equals(((SmToObjAccessPath_c)elem).getApath_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_apath_id ;
  private java.util.UUID         m_obj_id ;
  private java.util.UUID         m_iobj_id ;
      
// declare association references from this class
  
  
    
// referring navigation

AccessPath_c IsSupertypeAccessPath ;
public void relateAcrossR415To(AccessPath_c target)
{
	relateAcrossR415To(target, true);
}
public void relateAcrossR415To(AccessPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeAccessPath) return;  // already related

    if ( IsSupertypeAccessPath != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeAccessPath != null) {
    
        IsSupertypeAccessPath.clearBackPointerR415To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToObjAccessPath_c.relateAcrossR415To(AccessPath_c target)", 
			"Relate performed across R415 from SM to OBJ Access Path to Access Path without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeAccessPath = target ;
        m_apath_id = target.getApath_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR415To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "415", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR415From(AccessPath_c target)
{
	unrelateAcrossR415From(target, true);
}
public void unrelateAcrossR415From(AccessPath_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeAccessPath == null) return;  // already unrelated
	
	if (target != IsSupertypeAccessPath) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R415", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR415To(this);
    }
    

      if(IsSupertypeAccessPath != null) {
      
        m_apath_id = IsSupertypeAccessPath.getApath_id();
        IsSupertypeAccessPath = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "415", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToObjAccessPath_c getOneCA_SMOAOnR415(AccessPath_c [] targets)
{
    return getOneCA_SMOAOnR415(targets, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(AccessPath_c [] targets, ClassQueryInterface_c test)
{
    SmToObjAccessPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMOAOnR415(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(AccessPath_c target)
{
  return getOneCA_SMOAOnR415(target, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(AccessPath_c target, boolean loadComponent)
{
    return getOneCA_SMOAOnR415(target.getModelRoot(), target, null, loadComponent);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(AccessPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMOAOnR415(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(ModelRoot modelRoot, AccessPath_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMOAOnR415(modelRoot, target, test, true);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR415(ModelRoot modelRoot, AccessPath_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMOAOnR415(modelRoot,target,test);
}
private static SmToObjAccessPath_c find_getOneCA_SMOAOnR415(ModelRoot modelRoot, AccessPath_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    SmToObjAccessPath_c source = (SmToObjAccessPath_c)target.backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c [] targets)
{
  return getManyCA_SMOAsOnR415(targets, null);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c [] targets, boolean loadComponent)
{
  return getManyCA_SMOAsOnR415(targets, null, loadComponent);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR415(targets, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToObjAccessPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      SmToObjAccessPath_c source = (SmToObjAccessPath_c)targets[i].backPointer_IsSubtypeSmToObjAccessPathIsSubtype_R415;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToObjAccessPath_c[0];
  }
  }

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c target)
{
  if (target != null) {
    AccessPath_c [] targetArray = new AccessPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMOAsOnR415(targetArray);
  } else {
    SmToObjAccessPath_c [] result = new SmToObjAccessPath_c [0] ;
  return result ;
}
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR415(AccessPath_c target, boolean loadComponent)
{
  if (target != null) {
    AccessPath_c [] targetArray = new AccessPath_c[1];
    targetArray[0] = target;
    return getManyCA_SMOAsOnR415(targetArray, loadComponent);
  } else {
    SmToObjAccessPath_c [] result = new SmToObjAccessPath_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ModelClass_c ShowsAccessesOfDataFromModelClass ;
public void relateAcrossR417To(ModelClass_c target)
{
	relateAcrossR417To(target, true);
}
public void relateAcrossR417To(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ShowsAccessesOfDataFromModelClass) return;  // already related

    if ( ShowsAccessesOfDataFromModelClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (ShowsAccessesOfDataFromModelClass != null) {
    
        ShowsAccessesOfDataFromModelClass.clearBackPointerR417To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToObjAccessPath_c.relateAcrossR417To(ModelClass_c target)", 
			"Relate performed across R417 from SM to OBJ Access Path to Model Class without unrelate of prior instance.");  
		}
    }
                
    	ShowsAccessesOfDataFromModelClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR417To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "417", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR417From(ModelClass_c target)
{
	unrelateAcrossR417From(target, true);
}
public void unrelateAcrossR417From(ModelClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ShowsAccessesOfDataFromModelClass == null) return;  // already unrelated
	
	if (target != ShowsAccessesOfDataFromModelClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R417", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR417To(this);
    }
    

      if(ShowsAccessesOfDataFromModelClass != null) {
      
        m_obj_id = ShowsAccessesOfDataFromModelClass.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = ShowsAccessesOfDataFromModelClass.getObj_idCachedValue();
        }       
        ShowsAccessesOfDataFromModelClass = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "417", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelClass_c [] targets)
{
    return getOneCA_SMOAOnR417(targets, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelClass_c [] targets, ClassQueryInterface_c test)
{
    SmToObjAccessPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMOAOnR417(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelClass_c target)
{
  return getOneCA_SMOAOnR417(target, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelClass_c target, boolean loadComponent)
{
    return getOneCA_SMOAOnR417(target.getModelRoot(), target, null, loadComponent);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMOAOnR417(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMOAOnR417(modelRoot, target, test, true);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR417(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMOAOnR417(modelRoot,target,test);
}
private static SmToObjAccessPath_c find_getOneCA_SMOAOnR417(ModelRoot modelRoot, ModelClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417) {
	    for ( int i = 0; i < target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.size(); ++i ) {
	      SmToObjAccessPath_c source = (SmToObjAccessPath_c)target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c [] targets)
{
  return getManyCA_SMOAsOnR417(targets, null);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c [] targets, boolean loadComponent)
{
  return getManyCA_SMOAsOnR417(targets, null, loadComponent);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR417(targets, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToObjAccessPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417) {
	    for (int j = 0; j < targets[i].backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.size(); ++j) {
	      SmToObjAccessPath_c source = (SmToObjAccessPath_c)targets[i].backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToObjAccessPath_c[0];
  }
  }

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c target)
{
  return getManyCA_SMOAsOnR417(target, null);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c target, boolean loadComponent)
{
  return getManyCA_SMOAsOnR417(target, null, loadComponent);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR417(target, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR417(ModelClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToObjAccessPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417) {
    for (int i = 0; i < target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.size(); ++i) {
      SmToObjAccessPath_c source = (SmToObjAccessPath_c)target.backPointer_HasDataAccessRepresentedBySmToObjAccessPathHasDataAccessRepresentedBy_R417.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToObjAccessPath_c[0];
	}
  }


  
    
// referring navigation

ImportedClass_c DestinationObjCanBeRepresentedByImportedClass ;
public void relateAcrossR420To(ImportedClass_c target)
{
	relateAcrossR420To(target, true);
}
public void relateAcrossR420To(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == DestinationObjCanBeRepresentedByImportedClass) return;  // already related

    if ( DestinationObjCanBeRepresentedByImportedClass != target ) {
    
    Object oldKey = getInstanceKey();

    if (DestinationObjCanBeRepresentedByImportedClass != null) {
    
        DestinationObjCanBeRepresentedByImportedClass.clearBackPointerR420To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"SmToObjAccessPath_c.relateAcrossR420To(ImportedClass_c target)", 
			"Relate performed across R420 from SM to OBJ Access Path to Imported Class without unrelate of prior instance.");  
		}
    }
                
    	DestinationObjCanBeRepresentedByImportedClass = target ;
        if(IdAssigner.NULL_UUID.equals(target.getIobj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_iobj_id = target.getIobj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR420To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "420", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR420From(ImportedClass_c target)
{
	unrelateAcrossR420From(target, true);
}
public void unrelateAcrossR420From(ImportedClass_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (DestinationObjCanBeRepresentedByImportedClass == null) return;  // already unrelated
	
	if (target != DestinationObjCanBeRepresentedByImportedClass) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R420", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR420To(this);
    }
    

      if(DestinationObjCanBeRepresentedByImportedClass != null) {
      
        m_iobj_id = DestinationObjCanBeRepresentedByImportedClass.getIobj_id();
        if(IdAssigner.NULL_UUID.equals(m_iobj_id))
        {
          m_iobj_id = DestinationObjCanBeRepresentedByImportedClass.getIobj_idCachedValue();
        }       
        DestinationObjCanBeRepresentedByImportedClass = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "420", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ImportedClass_c [] targets)
{
    return getOneCA_SMOAOnR420(targets, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
    SmToObjAccessPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneCA_SMOAOnR420(targets[i], test);
        }
    }

    return ret_val;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ImportedClass_c target)
{
  return getOneCA_SMOAOnR420(target, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ImportedClass_c target, boolean loadComponent)
{
    return getOneCA_SMOAOnR420(target.getModelRoot(), target, null, loadComponent);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneCA_SMOAOnR420(target.getModelRoot(), target, test);
  }
  return null;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
	return getOneCA_SMOAOnR420(modelRoot, target, test, true);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR420(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneCA_SMOAOnR420(modelRoot,target,test);
}
private static SmToObjAccessPath_c find_getOneCA_SMOAOnR420(ModelRoot modelRoot, ImportedClass_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420) {
	    for ( int i = 0; i < target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.size(); ++i ) {
	      SmToObjAccessPath_c source = (SmToObjAccessPath_c)target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c [] targets)
{
  return getManyCA_SMOAsOnR420(targets, null);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c [] targets, boolean loadComponent)
{
  return getManyCA_SMOAsOnR420(targets, null, loadComponent);
}
public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c [] targets, ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR420(targets, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new SmToObjAccessPath_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420) {
	    for (int j = 0; j < targets[i].backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.size(); ++j) {
	      SmToObjAccessPath_c source = (SmToObjAccessPath_c)targets[i].backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new SmToObjAccessPath_c[0];
  }
  }

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c target)
{
  return getManyCA_SMOAsOnR420(target, null);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c target, boolean loadComponent)
{
  return getManyCA_SMOAsOnR420(target, null, loadComponent);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c target, ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR420(target, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR420(ImportedClass_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new SmToObjAccessPath_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420) {
    for (int i = 0; i < target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.size(); ++i) {
      SmToObjAccessPath_c source = (SmToObjAccessPath_c)target.backPointer_RepresentsTheDestinationObjForSmToObjAccessPathRepresentsTheDestinationObjFor_R420.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new SmToObjAccessPath_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<SmToObjAttributeAccess_c> backPointer_CarriesSmToObjAttributeAccessCarries_R418 = new ArrayList<SmToObjAttributeAccess_c>();

public void setSmToObjAttributeAccessOrderInChildListR418(SmToObjAttributeAccess_c target, int index) {
	unrelateAcrossR418From(target);
	SmToObjAttributeAccess_c[] elements = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR418(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR418From((SmToObjAttributeAccess_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR418To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR418To((SmToObjAttributeAccess_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR418To(SmToObjAttributeAccess_c target)
{
  if (target != null) {
    target.relateAcrossR418To(this, true) ;
  }
}

public void relateAcrossR418To(SmToObjAttributeAccess_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR418To(this, notifyChanges) ;
  }
}

public void setBackPointerR418To(SmToObjAttributeAccess_c target)
{
  	synchronized (backPointer_CarriesSmToObjAttributeAccessCarries_R418) {
		backPointer_CarriesSmToObjAttributeAccessCarries_R418.add(target);
	}
}

public void unrelateAcrossR418From(SmToObjAttributeAccess_c target)
{
  if (target != null) {
    target.unrelateAcrossR418From(this, true) ;
  }
}

public void unrelateAcrossR418From(SmToObjAttributeAccess_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR418From(this, notifyChanges) ;
  }
}

public void clearBackPointerR418To(SmToObjAttributeAccess_c target)
{
  synchronized (backPointer_CarriesSmToObjAttributeAccessCarries_R418) {
	    backPointer_CarriesSmToObjAttributeAccessCarries_R418.remove(target);
	}
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR418(SmToObjAttributeAccess_c [] targets)
{
    return getOneCA_SMOAOnR418(targets, null);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR418(SmToObjAttributeAccess_c [] targets, ClassQueryInterface_c test)
{
    return getOneCA_SMOAOnR418(targets, test, true);
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR418(SmToObjAttributeAccess_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    SmToObjAccessPath_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             SmToObjAccessPath_c candidate_val = getOneCA_SMOAOnR418(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCA_SMOAOnR418(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static SmToObjAccessPath_c getOneCA_SMOAOnR418(SmToObjAttributeAccess_c target)
{
	return getOneCA_SMOAOnR418(target, true);
}
public static SmToObjAccessPath_c getOneCA_SMOAOnR418(SmToObjAttributeAccess_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsCarriedBySmToObjAccessPath ;
  } else {
    return null;
  }
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCA_SMOAsOnR418(targets, test, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SmToObjAccessPath_c[0];
  
  
  LinkedHashSet<SmToObjAccessPath_c> elementsSet = new LinkedHashSet<SmToObjAccessPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsCarriedBySmToObjAccessPath == null)
	  targets[i].loadProxy();
    SmToObjAccessPath_c associate = targets[i].IsCarriedBySmToObjAccessPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SmToObjAccessPath_c[] result = new SmToObjAccessPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c [] targets)
{
  return getManyCA_SMOAsOnR418(targets, null);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToObjAttributeAccess_c [] targetArray = new SmToObjAttributeAccess_c[1];
    targetArray[0] = target;
    return getManyCA_SMOAsOnR418(targetArray, test, loadComponent);
  } else {
    SmToObjAccessPath_c [] result = new SmToObjAccessPath_c [0] ;
    return result ;
  }
  
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c target,
    ClassQueryInterface_c test)
{
    return getManyCA_SMOAsOnR418(target, null, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c target)
{
    return getManyCA_SMOAsOnR418(target, null, true);
}

public static SmToObjAccessPath_c [] getManyCA_SMOAsOnR418(SmToObjAttributeAccess_c target, boolean loadComponent)
{
    return getManyCA_SMOAsOnR418(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R415
      AccessPath_c relInst57373 = (AccessPath_c) baseRoot.getInstanceList(AccessPath_c.class).get(new Object[] {m_apath_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57373 == null) {
      			relInst57373 = (AccessPath_c) Ooaofooa.getDefaultInstance().getInstanceList(AccessPath_c.class).get(new Object[] {m_apath_id});
      		}
			if (relInst57373 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57373 = (AccessPath_c) roots[i].getInstanceList(AccessPath_c.class).get(new Object[] {m_apath_id});
					if (relInst57373 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57373 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57373) && !isProxy())) {
	      relInst57373.relateAcrossR415To(this, notifyChanges);
	  }
	  }
	          

	if (ShowsAccessesOfDataFromModelClass == null) {          
      // R417
      ModelClass_c relInst57374 = (ModelClass_c) baseRoot.getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57374 == null) {
      			relInst57374 = (ModelClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
      		}
			if (relInst57374 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57374 = (ModelClass_c) roots[i].getInstanceList(ModelClass_c.class).get(new Object[] {m_obj_id});
					if (relInst57374 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57374 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57374) && !isProxy())) {
	      relInst57374.relateAcrossR417To(this, notifyChanges);
	  }
	  }
	}
	          

	if (DestinationObjCanBeRepresentedByImportedClass == null) {          
      // R420
      ImportedClass_c relInst57375 = (ImportedClass_c) baseRoot.getInstanceList(ImportedClass_c.class).get(new Object[] {m_iobj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57375 == null) {
      			relInst57375 = (ImportedClass_c) Ooaofooa.getDefaultInstance().getInstanceList(ImportedClass_c.class).get(new Object[] {m_iobj_id});
      		}
			if (relInst57375 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57375 = (ImportedClass_c) roots[i].getInstanceList(ImportedClass_c.class).get(new Object[] {m_iobj_id});
					if (relInst57375 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57375 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57375) && !isProxy())) {
	      relInst57375.relateAcrossR420To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R415
      // CA_ACC
		  inst=IsSupertypeAccessPath;
			unrelateAcrossR415From(IsSupertypeAccessPath, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R417
      // O_OBJ
		  inst=ShowsAccessesOfDataFromModelClass;
			unrelateAcrossR417From(ShowsAccessesOfDataFromModelClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R420
      // O_IOBJ
		  inst=DestinationObjCanBeRepresentedByImportedClass;
			unrelateAcrossR420From(DestinationObjCanBeRepresentedByImportedClass, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SmToObjAccessPath_c inst = (SmToObjAccessPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static SmToObjAccessPath_c SmToObjAccessPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		SmToObjAccessPath_c result=findSmToObjAccessPathInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,SmToObjAccessPath_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findSmToObjAccessPathInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static SmToObjAccessPath_c findSmToObjAccessPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				SmToObjAccessPath_c x = (SmToObjAccessPath_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static SmToObjAccessPath_c SmToObjAccessPathInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return SmToObjAccessPathInstance(modelRoot,test,true);
  }
  
  public static SmToObjAccessPath_c SmToObjAccessPathInstance(ModelRoot modelRoot)
  {
	 return SmToObjAccessPathInstance(modelRoot,null,true);
  }

  public static SmToObjAccessPath_c [] SmToObjAccessPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, SmToObjAccessPath_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(SmToObjAccessPath_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					SmToObjAccessPath_c x = (SmToObjAccessPath_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				SmToObjAccessPath_c[] ret_set = new SmToObjAccessPath_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SmToObjAccessPath_c[0];
			}		
		} 
  }
  public static SmToObjAccessPath_c [] SmToObjAccessPathInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  SmToObjAccessPathInstances(modelRoot,test,true);
  }
  public static SmToObjAccessPath_c [] SmToObjAccessPathInstances(ModelRoot modelRoot)
  {
	return SmToObjAccessPathInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the SM to OBJ Access Path.dispose call: ";
	SmToObjAttributeAccess_c testR418Inst = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR418(this, false);

	if ( testR418Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "418 ";	
	}
	AccessPath_c testR415Inst1 = AccessPath_c.getOneCA_ACCOnR415(this, false);

	if ( testR415Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "415 ";
	}
	ModelClass_c testR417Inst = ModelClass_c.getOneO_OBJOnR417(this, false);

	if ( testR417Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "417 ";
	}
	ImportedClass_c testR420Inst = ImportedClass_c.getOneO_IOBJOnR420(this, false);

	if ( testR420Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "420 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "SM to OBJ Access Path", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("apath_id")){
         return true;
      }
      if(attributeName.equals("obj_id")){
         return true;
      }
      if(attributeName.equals("iobj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getApath_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getApath_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getApath_idLongBased()
  {
    if ( IsSupertypeAccessPath != null )
    {
      return IsSupertypeAccessPath.getApath_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getApath_id()
  {
    if ( IsSupertypeAccessPath != null )
    {
      return IsSupertypeAccessPath.getApath_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeAccessPath != null );
 
 }                  

  public java.util.UUID getApath_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_apath_id) )
      return m_apath_id;
    else
      return getApath_id();
  }
  
  public void setApath_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_apath_id)){
	        return;
	    }
	}else if(m_apath_id != null){
	    if(m_apath_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Apath_id", m_apath_id, newValue,true); 
   m_apath_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getObj_idLongBased()
  {
    if ( ShowsAccessesOfDataFromModelClass != null )
    {
      return ShowsAccessesOfDataFromModelClass.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( ShowsAccessesOfDataFromModelClass != null )
    {
      return ShowsAccessesOfDataFromModelClass.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public void setObj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_obj_id)){
	        return;
	    }
	}else if(m_obj_id != null){
	    if(m_obj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Obj_id", m_obj_id, newValue,true); 
   m_obj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIobj_idLongBased()
  {
    if ( DestinationObjCanBeRepresentedByImportedClass != null )
    {
      return DestinationObjCanBeRepresentedByImportedClass.getIobj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getIobj_id()
  {
    if ( DestinationObjCanBeRepresentedByImportedClass != null )
    {
      return DestinationObjCanBeRepresentedByImportedClass.getIobj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getIobj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_iobj_id) )
      return m_iobj_id;
    else
      return getIobj_id();
  }
  
  public void setIobj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_iobj_id)){
	        return;
	    }
	}else if(m_iobj_id != null){
	    if(m_iobj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Iobj_id", m_iobj_id, newValue,true); 
   m_iobj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to OBJ Access Path", //$NON-NLS-1$
	  " Operation entered: SM to OBJ Access Path::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     SmToObjAccessPath_c [] objs = SmToObjAccessPath_c.SmToObjAccessPathInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "SM to OBJ Access Path", //$NON-NLS-1$
	  " Operation entered: SM to OBJ Access Path::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class SmToObjAccessPath_c_test57377_c implements ClassQueryInterface_c
    {
	  SmToObjAccessPath_c_test57377_c( java.util.UUID            p57378, java.util.UUID            p57379 ) {
	       m_p57378 = p57378; 
m_p57379 = p57379;
	  }
	  private java.util.UUID             m_p57378; private java.util.UUID             m_p57379; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToObjAccessPath_c selected = (SmToObjAccessPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getApath_id().equals(m_p57378)) & (selected.getObj_id().equals(m_p57379));
	      return retval;
	  }
    }

    SmToObjAccessPath_c [] objs57376 = 
    SmToObjAccessPath_c.SmToObjAccessPathInstances(modelRoot, new SmToObjAccessPath_c_test57377_c(getApath_id(), getObj_id())) ;

    if ( (  (objs57376.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57376.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57376.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57376.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57376.length )  + " APath_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57376.length )  + " APath_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class SmToObjAccessPath_c_test57381_c implements ClassQueryInterface_c
    {
	  SmToObjAccessPath_c_test57381_c( java.util.UUID            p57382 ) {
	  m_p57382 = p57382;
	  }
	  private java.util.UUID             m_p57382; 
	  public boolean evaluate (Object candidate)
	  {
	      SmToObjAccessPath_c selected = (SmToObjAccessPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getApath_id().equals(m_p57382));
	      return retval;
	  }
    }

    SmToObjAccessPath_c [] objs57380 = 
    SmToObjAccessPath_c.SmToObjAccessPathInstances(modelRoot, new SmToObjAccessPath_c_test57381_c(getApath_id())) ;

    if ( (  (objs57380.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57380.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57380.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57380.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57380.length )  + " APath_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57380.length )  + " APath_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to OBJ Access Path is a subtype in association: rel.Numb = 415
          // The supertype class is: Access Path
    class AccessPath_c_test57385_c implements ClassQueryInterface_c
    {
	  AccessPath_c_test57385_c( java.util.UUID            p57386 ) {
	  m_p57386 = p57386;
	  }
	  private java.util.UUID             m_p57386; 
	  public boolean evaluate (Object candidate)
	  {
	      AccessPath_c selected = (AccessPath_c) candidate;
	      boolean retval = false;
	      retval = (selected.getApath_id().equals(m_p57386));
	      return retval;
	  }
    }

    AccessPath_c [] objs57384 = 
    AccessPath_c.AccessPathInstances(modelRoot, new AccessPath_c_test57385_c(getApath_id())) ;

    if ( (  (objs57384.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Association: 415: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57384.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Association: 415: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57384.length )  , e); 
      }
      retval = false;

    }

          // SM to OBJ Access Path is a referring class in association: rel.Numb = 417
          // The participating class is: Model Class
    class ModelClass_c_test57388_c implements ClassQueryInterface_c
    {
	  ModelClass_c_test57388_c( java.util.UUID            p57389 ) {
	  m_p57389 = p57389;
	  }
	  private java.util.UUID             m_p57389; 
	  public boolean evaluate (Object candidate)
	  {
	      ModelClass_c selected = (ModelClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getObj_id().equals(m_p57389));
	      return retval;
	  }
    }

    ModelClass_c [] objs57387 = 
    ModelClass_c.ModelClassInstances(modelRoot, new ModelClass_c_test57388_c(getObj_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs57387.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Association: 417: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57387.length )  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Association: 417: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57387.length )  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // SM to OBJ Access Path is a referring class in association: rel.Numb = 420
          // The participating class is: Imported Class
    class ImportedClass_c_test57391_c implements ClassQueryInterface_c
    {
	  ImportedClass_c_test57391_c( java.util.UUID            p57392 ) {
	  m_p57392 = p57392;
	  }
	  private java.util.UUID             m_p57392; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedClass_c selected = (ImportedClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIobj_id().equals(m_p57392));
	      return retval;
	  }
    }

    ImportedClass_c [] objs57390 = 
    ImportedClass_c.ImportedClassInstances(modelRoot, new ImportedClass_c_test57391_c(getIobj_id())) ;

    if ( (  (objs57390.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "SM to OBJ Access Path", //$NON-NLS-1$
           "Consistency: Object: SM to OBJ Access Path: Association: 420: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57390.length )  + " IObj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: SM to OBJ Access Path: Association: 420: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57390.length )  + " IObj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // SM to OBJ Access Path is a participating class in association: rel.Numb = 418
             // Object: SM to OBJ Attribute Access
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "SM to OBJ Access Path", " Operation entered: SmToObjAccessPath::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
SmToObjAttributeAccess_c [] v_smoaas = SmToObjAttributeAccess_c.getManyCA_SMOAAsOnR418(this);


SmToObjAttributeAccess_c  v_smoaa = null;
for ( int i55395 = 0; i55395 < v_smoaas.length; i55395++)
{
  v_smoaa = v_smoaas[i55395] ;

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR419(v_smoaa);


if (v_smoaa != null) {
v_smoaa.unrelateAcrossR419From(v_attr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smoaa != null) {
v_smoaa.unrelateAcrossR418From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_smoaa != null) {
// get the location of this element in the instance list
// before deleting
if ( v_smoaa.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_smoaa));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR417(this);


this.unrelateAcrossR417From(v_obj);


ImportedClass_c v_iobj = ImportedClass_c.getOneO_IOBJOnR420(this);


if (   (v_iobj != null) )
{

this.unrelateAcrossR420From(v_iobj);



}

AccessPath_c v_acp = AccessPath_c.getOneCA_ACCOnR415(this);


this.unrelateAcrossR415From(v_acp);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end SM to OBJ Access Path
