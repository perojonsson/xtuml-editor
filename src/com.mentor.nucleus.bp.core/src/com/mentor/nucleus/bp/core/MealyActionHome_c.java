package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.MealyActionHome_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_MEALY_ACTION_HOME extends genericEvent_c {
	public abstract int getEvtcode();
}

public class MealyActionHome_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public MealyActionHome_c(ModelRoot modelRoot, java.util.UUID p_m_act_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_trans_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);

		Object[] key = {m_trans_id, m_sm_id};
		addInstanceToMap(key);
	}
	static public MealyActionHome_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_trans_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);
		MealyActionHome_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_trans_id, p_m_sm_id};
			new_inst = (MealyActionHome_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new MealyActionHome_c(modelRoot, p_m_act_id, p_m_sm_id,
					p_m_trans_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public MealyActionHome_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_trans_id) {
		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);
		MealyActionHome_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_trans_id, p_m_sm_id};
			source = (MealyActionHome_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);

				return source;
			}
		}
		// there is no instance matching the id
		MealyActionHome_c new_inst = new MealyActionHome_c(modelRoot,
				p_m_act_id, p_m_sm_id, p_m_trans_id);
		return new_inst;
	}
	public MealyActionHome_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_act_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_trans_id = IdAssigner.NULL_UUID;
		Object[] key = {m_trans_id, m_sm_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_trans_id, m_sm_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_trans_id != p_newKey) {

			m_trans_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof MealyActionHome_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof MealyActionHome_c)) {
			return false;
		}

		MealyActionHome_c me = (MealyActionHome_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getTrans_id()) || IdAssigner.NULL_UUID
						.equals(((MealyActionHome_c) elem).getTrans_id())) && this != elem)) {
			return false;
		}
		if (!getTrans_id().equals(((MealyActionHome_c) elem).getTrans_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((MealyActionHome_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((MealyActionHome_c) elem).getSm_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof MealyActionHome_c)) {
			return false;
		}

		MealyActionHome_c me = (MealyActionHome_c) elem;
		if (!getTrans_idCachedValue().equals(
				((MealyActionHome_c) elem).getTrans_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((MealyActionHome_c) elem).getSm_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_act_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_trans_id;

	// declare association references from this class

	// referring navigation

	ActionHome_c IsSupertypeActionHome;
	public void relateAcrossR513To(ActionHome_c target) {
		relateAcrossR513To(target, true);
	}
	public void relateAcrossR513To(ActionHome_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeActionHome)
			return; // already related

		if (IsSupertypeActionHome != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeActionHome != null) {

				IsSupertypeActionHome.clearBackPointerR513To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MealyActionHome_c.relateAcrossR513To(ActionHome_c target)",
									"Relate performed across R513 from Mealy Action Home to Action Home without unrelate of prior instance.");
				}
			}

			IsSupertypeActionHome = target;
			if (IdAssigner.NULL_UUID.equals(target.getAct_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_act_id = target.getAct_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR513To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "513", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR513From(ActionHome_c target) {
		unrelateAcrossR513From(target, true);
	}
	public void unrelateAcrossR513From(ActionHome_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeActionHome == null)
			return; // already unrelated

		if (target != IsSupertypeActionHome) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R513",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR513To(this);
		}

		if (IsSupertypeActionHome != null) {

			m_act_id = IsSupertypeActionHome.getAct_id();
			if (IdAssigner.NULL_UUID.equals(m_act_id)) {
				m_act_id = IsSupertypeActionHome.getAct_idCachedValue();
			}
			m_sm_id = IsSupertypeActionHome.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeActionHome.getSm_idCachedValue();
			}
			IsSupertypeActionHome = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "513", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ActionHome_c[] targets) {
		return getOneSM_MEAHOnR513(targets, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ActionHome_c[] targets,
			ClassQueryInterface_c test) {
		MealyActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_MEAHOnR513(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ActionHome_c target) {
		return getOneSM_MEAHOnR513(target, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ActionHome_c target,
			boolean loadComponent) {
		return getOneSM_MEAHOnR513(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ActionHome_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_MEAHOnR513(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ModelRoot modelRoot,
			ActionHome_c target, ClassQueryInterface_c test) {
		return getOneSM_MEAHOnR513(modelRoot, target, test, true);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR513(ModelRoot modelRoot,
			ActionHome_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_MEAHOnR513(modelRoot, target, test);
	}
	private static MealyActionHome_c find_getOneSM_MEAHOnR513(
			ModelRoot modelRoot, ActionHome_c target, ClassQueryInterface_c test) {
		if (target != null) {
			MealyActionHome_c source = (MealyActionHome_c) target.backPointer_IsSubtypeMealyActionHomeIsSubtype_R513;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR513(
			ActionHome_c[] targets) {
		return getManySM_MEAHsOnR513(targets, null);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR513(
			ActionHome_c[] targets, boolean loadComponent) {
		return getManySM_MEAHsOnR513(targets, null, loadComponent);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR513(
			ActionHome_c[] targets, ClassQueryInterface_c test) {
		return getManySM_MEAHsOnR513(targets, test, true);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR513(
			ActionHome_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MealyActionHome_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			MealyActionHome_c source = (MealyActionHome_c) targets[i].backPointer_IsSubtypeMealyActionHomeIsSubtype_R513;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			MealyActionHome_c[] ret_set = new MealyActionHome_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MealyActionHome_c[0];
		}
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR513(ActionHome_c target) {
		if (target != null) {
			ActionHome_c[] targetArray = new ActionHome_c[1];
			targetArray[0] = target;
			return getManySM_MEAHsOnR513(targetArray);
		} else {
			MealyActionHome_c[] result = new MealyActionHome_c[0];
			return result;
		}
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR513(
			ActionHome_c target, boolean loadComponent) {
		if (target != null) {
			ActionHome_c[] targetArray = new ActionHome_c[1];
			targetArray[0] = target;
			return getManySM_MEAHsOnR513(targetArray, loadComponent);
		} else {
			MealyActionHome_c[] result = new MealyActionHome_c[0];
			return result;
		}
	}

	// referring navigation

	Transition_c Transition;
	public void relateAcrossR512To(Transition_c target) {
		relateAcrossR512To(target, true);
	}
	public void relateAcrossR512To(Transition_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Transition)
			return; // already related

		if (Transition != target) {

			Object oldKey = getInstanceKey();

			if (Transition != null) {

				Transition.clearBackPointerR512To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MealyActionHome_c.relateAcrossR512To(Transition_c target)",
									"Relate performed across R512 from Mealy Action Home to Transition without unrelate of prior instance.");
				}
			}

			Transition = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			m_trans_id = target.getTrans_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR512To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "512", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR512From(Transition_c target) {
		unrelateAcrossR512From(target, true);
	}
	public void unrelateAcrossR512From(Transition_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (Transition == null)
			return; // already unrelated

		if (target != Transition) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R512",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR512To(this);
		}

		if (Transition != null) {

			m_sm_id = Transition.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = Transition.getSm_idCachedValue();
			}
			m_trans_id = Transition.getTrans_id();
			Transition = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "512", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	MealyStateMachine_c MealyStateMachine;
	public void relateAcrossR512To(MealyStateMachine_c target) {
		relateAcrossR512To(target, true);
	}
	public void relateAcrossR512To(MealyStateMachine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MealyStateMachine)
			return; // already related

		if (MealyStateMachine != target) {

			Object oldKey = getInstanceKey();

			if (MealyStateMachine != null) {

				MealyStateMachine.clearBackPointerR512To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"MealyActionHome_c.relateAcrossR512To(MealyStateMachine_c target)",
									"Relate performed across R512 from Mealy Action Home to Mealy State Machine without unrelate of prior instance.");
				}
			}

			MealyStateMachine = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR512To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "512", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR512From(MealyStateMachine_c target) {
		unrelateAcrossR512From(target, true);
	}
	public void unrelateAcrossR512From(MealyStateMachine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MealyStateMachine == null)
			return; // already unrelated

		if (target != MealyStateMachine) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R512",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR512To(this);
		}

		if (MealyStateMachine != null) {

			m_sm_id = MealyStateMachine.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = MealyStateMachine.getSm_idCachedValue();
			}
			MealyStateMachine = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "512", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(Transition_c[] targets) {
		return getOneSM_MEAHOnR512(targets, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(Transition_c[] targets,
			ClassQueryInterface_c test) {
		MealyActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_MEAHOnR512(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(Transition_c target) {
		return getOneSM_MEAHOnR512(target, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(Transition_c target,
			boolean loadComponent) {
		return getOneSM_MEAHOnR512(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(Transition_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_MEAHOnR512(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(ModelRoot modelRoot,
			Transition_c target, ClassQueryInterface_c test) {
		return getOneSM_MEAHOnR512(modelRoot, target, test, true);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(ModelRoot modelRoot,
			Transition_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_MEAHOnR512(modelRoot, target, test);
	}
	private static MealyActionHome_c find_getOneSM_MEAHOnR512(
			ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MealyActionHome_R512) {
				for (int i = 0; i < target.backPointer_MealyActionHome_R512
						.size(); ++i) {
					MealyActionHome_c source = (MealyActionHome_c) target.backPointer_MealyActionHome_R512
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			Transition_c[] targets) {
		return getManySM_MEAHsOnR512(targets, null);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			Transition_c[] targets, boolean loadComponent) {
		return getManySM_MEAHsOnR512(targets, null, loadComponent);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			Transition_c[] targets, ClassQueryInterface_c test) {
		return getManySM_MEAHsOnR512(targets, test, true);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			Transition_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MealyActionHome_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MealyActionHome_R512) {
				for (int j = 0; j < targets[i].backPointer_MealyActionHome_R512
						.size(); ++j) {
					MealyActionHome_c source = (MealyActionHome_c) targets[i].backPointer_MealyActionHome_R512
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MealyActionHome_c[] ret_set = new MealyActionHome_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MealyActionHome_c[0];
		}
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(Transition_c target) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_MEAHsOnR512(targetArray);
		} else {
			MealyActionHome_c[] result = new MealyActionHome_c[0];
			return result;
		}
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			Transition_c target, boolean loadComponent) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_MEAHsOnR512(targetArray, loadComponent);
		} else {
			MealyActionHome_c[] result = new MealyActionHome_c[0];
			return result;
		}
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(
			MealyStateMachine_c[] targets) {
		return getOneSM_MEAHOnR512(targets, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(
			MealyStateMachine_c[] targets, ClassQueryInterface_c test) {
		MealyActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_MEAHOnR512(targets[i], test);
			}
		}

		return ret_val;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(
			MealyStateMachine_c target) {
		return getOneSM_MEAHOnR512(target, null);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(
			MealyStateMachine_c target, boolean loadComponent) {
		return getOneSM_MEAHOnR512(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(
			MealyStateMachine_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_MEAHOnR512(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(ModelRoot modelRoot,
			MealyStateMachine_c target, ClassQueryInterface_c test) {
		return getOneSM_MEAHOnR512(modelRoot, target, test, true);
	}

	public static MealyActionHome_c getOneSM_MEAHOnR512(ModelRoot modelRoot,
			MealyStateMachine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_MEAHOnR512(modelRoot, target, test);
	}
	private static MealyActionHome_c find_getOneSM_MEAHOnR512(
			ModelRoot modelRoot, MealyStateMachine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MealyActionHome_R512) {
				for (int i = 0; i < target.backPointer_MealyActionHome_R512
						.size(); ++i) {
					MealyActionHome_c source = (MealyActionHome_c) target.backPointer_MealyActionHome_R512
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c[] targets) {
		return getManySM_MEAHsOnR512(targets, null);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c[] targets, boolean loadComponent) {
		return getManySM_MEAHsOnR512(targets, null, loadComponent);
	}
	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c[] targets, ClassQueryInterface_c test) {
		return getManySM_MEAHsOnR512(targets, test, true);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new MealyActionHome_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MealyActionHome_R512) {
				for (int j = 0; j < targets[i].backPointer_MealyActionHome_R512
						.size(); ++j) {
					MealyActionHome_c source = (MealyActionHome_c) targets[i].backPointer_MealyActionHome_R512
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			MealyActionHome_c[] ret_set = new MealyActionHome_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MealyActionHome_c[0];
		}
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c target) {
		return getManySM_MEAHsOnR512(target, null);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c target, boolean loadComponent) {
		return getManySM_MEAHsOnR512(target, null, loadComponent);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c target, ClassQueryInterface_c test) {
		return getManySM_MEAHsOnR512(target, test, true);
	}

	public static MealyActionHome_c[] getManySM_MEAHsOnR512(
			MealyStateMachine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new MealyActionHome_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MealyActionHome_R512) {
			for (int i = 0; i < target.backPointer_MealyActionHome_R512.size(); ++i) {
				MealyActionHome_c source = (MealyActionHome_c) target.backPointer_MealyActionHome_R512
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			MealyActionHome_c[] ret_set = new MealyActionHome_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new MealyActionHome_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R513
		ActionHome_c relInst39166 = (ActionHome_c) baseRoot.getInstanceList(
				ActionHome_c.class).get(new Object[]{m_act_id, m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39166 == null) {
			relInst39166 = (ActionHome_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ActionHome_c.class)
					.get(new Object[]{m_act_id, m_sm_id});
		}
		if (relInst39166 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39166 = (ActionHome_c) roots[i].getInstanceList(
						ActionHome_c.class)
						.get(new Object[]{m_act_id, m_sm_id});
				if (relInst39166 != null)
					break;
			}
		}
		//synchronized
		if (relInst39166 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39166) && !isProxy())) {
				relInst39166.relateAcrossR513To(this, notifyChanges);
			}
		}

		// R512
		Transition_c relInst39167 = (Transition_c) baseRoot.getInstanceList(
				Transition_c.class).get(new Object[]{m_trans_id, m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39167 == null) {
			relInst39167 = (Transition_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Transition_c.class)
					.get(new Object[]{m_trans_id, m_sm_id});
		}
		if (relInst39167 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39167 = (Transition_c) roots[i].getInstanceList(
						Transition_c.class).get(
						new Object[]{m_trans_id, m_sm_id});
				if (relInst39167 != null)
					break;
			}
		}
		//synchronized
		if (relInst39167 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39167) && !isProxy())) {
				relInst39167.relateAcrossR512To(this, notifyChanges);
			}
		}

		MealyStateMachine_c relInst39168 = (MealyStateMachine_c) baseRoot
				.getInstanceList(MealyStateMachine_c.class).get(
						new Object[]{m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39168 == null) {
			relInst39168 = (MealyStateMachine_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(MealyStateMachine_c.class)
					.get(new Object[]{m_sm_id});
		}
		if (relInst39168 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39168 = (MealyStateMachine_c) roots[i].getInstanceList(
						MealyStateMachine_c.class).get(new Object[]{m_sm_id});
				if (relInst39168 != null)
					break;
			}
		}
		//synchronized
		if (relInst39168 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39168) && !isProxy())) {
				relInst39168.relateAcrossR512To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R513
		// SM_AH
		inst = IsSupertypeActionHome;
		unrelateAcrossR513From(IsSupertypeActionHome, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R512
		// SM_TXN
		inst = Transition;
		unrelateAcrossR512From(Transition, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// SM_MEALY
		inst = MealyStateMachine;
		unrelateAcrossR512From(MealyStateMachine, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(MealyActionHome_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final MealyActionHome_c inst = (MealyActionHome_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static MealyActionHome_c MealyActionHomeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		MealyActionHome_c result = findMealyActionHomeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					MealyActionHome_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findMealyActionHomeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static MealyActionHome_c findMealyActionHomeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MealyActionHome_c x = (MealyActionHome_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static MealyActionHome_c MealyActionHomeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MealyActionHomeInstance(modelRoot, test, true);
	}

	public static MealyActionHome_c MealyActionHomeInstance(ModelRoot modelRoot) {
		return MealyActionHomeInstance(modelRoot, null, true);
	}

	public static MealyActionHome_c[] MealyActionHomeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					MealyActionHome_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(MealyActionHome_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				MealyActionHome_c x = (MealyActionHome_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				MealyActionHome_c[] ret_set = new MealyActionHome_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new MealyActionHome_c[0];
			}
		}
	}
	public static MealyActionHome_c[] MealyActionHomeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return MealyActionHomeInstances(modelRoot, test, true);
	}
	public static MealyActionHome_c[] MealyActionHomeInstances(
			ModelRoot modelRoot) {
		return MealyActionHomeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Mealy Action Home.dispose call: ";
		ActionHome_c testR513Inst3 = ActionHome_c
				.getOneSM_AHOnR513(this, false);

		if (testR513Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "513 ";
		}
		MealyStateMachine_c testR512Inst = MealyStateMachine_c
				.getOneSM_MEALYOnR512(this, false);

		if (testR512Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "512 ";
		}

		Transition_c testR512InstOth = Transition_c.getOneSM_TXNOnR512(this,
				false);

		if (testR512InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "512 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Mealy Action Home",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("act_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("trans_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getTrans_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getTrans_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAct_idLongBased() {
		if (IsSupertypeActionHome != null) {
			return IsSupertypeActionHome.getAct_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAct_id() {
		if (IsSupertypeActionHome != null) {
			return IsSupertypeActionHome.getAct_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeActionHome != null);

	}

	public java.util.UUID getAct_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_act_id))
			return m_act_id;
		else
			return getAct_id();
	}

	public void setAct_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_act_id)) {
				return;
			}
		} else if (m_act_id != null) {
			if (m_act_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Act_id", m_act_id, newValue, true);
		m_act_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeActionHome != null) {
			return IsSupertypeActionHome.getSm_idLongBased();
		}
		if (Transition != null) {
			return Transition.getSm_idLongBased();
		}
		if (MealyStateMachine != null) {
			return MealyStateMachine.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeActionHome != null) {
			return IsSupertypeActionHome.getSm_id();
		}
		if (Transition != null) {
			return Transition.getSm_id();
		}
		if (MealyStateMachine != null) {
			return MealyStateMachine.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public long getTrans_idLongBased() {
		if (Transition != null) {
			return Transition.getTrans_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTrans_id() {
		if (Transition != null) {
			return Transition.getTrans_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getTrans_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_trans_id))
			return m_trans_id;
		else
			return getTrans_id();
	}

	public void setTrans_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_trans_id)) {
				return;
			}
		} else if (m_trans_id != null) {
			if (m_trans_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Trans_id", m_trans_id, newValue, true);
		m_trans_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Mealy Action Home", //$NON-NLS-1$
				" Operation entered: Mealy Action Home::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		MealyActionHome_c[] objs = MealyActionHome_c.MealyActionHomeInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Mealy Action Home", //$NON-NLS-1$
				" Operation entered: Mealy Action Home::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class MealyActionHome_c_test39170_c implements ClassQueryInterface_c {
			MealyActionHome_c_test39170_c(java.util.UUID p39171,
					java.util.UUID p39172) {
				m_p39171 = p39171;
				m_p39172 = p39172;
			}
			private java.util.UUID m_p39171;
			private java.util.UUID m_p39172;
			public boolean evaluate(Object candidate) {
				MealyActionHome_c selected = (MealyActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getTrans_id().equals(m_p39171))
						& (selected.getSm_id().equals(m_p39172));
				return retval;
			}
		}

		MealyActionHome_c[] objs39169 = MealyActionHome_c
				.MealyActionHomeInstances(modelRoot,
						new MealyActionHome_c_test39170_c(getTrans_id(),
								getSm_id()));

		if (((objs39169.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39169.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39169.length), e);
			}
			retval = false;

		}

		if (((objs39169.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39169.length)
										+ " Trans_ID: " + "Not Printable" + " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39169.length)
										+ " Trans_ID: " + "Not Printable" + " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		class MealyActionHome_c_test39174_c implements ClassQueryInterface_c {
			MealyActionHome_c_test39174_c(java.util.UUID p39175,
					java.util.UUID p39176) {
				m_p39175 = p39175;
				m_p39176 = p39176;
			}
			private java.util.UUID m_p39175;
			private java.util.UUID m_p39176;
			public boolean evaluate(Object candidate) {
				MealyActionHome_c selected = (MealyActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39175))
						& (selected.getAct_id().equals(m_p39176));
				return retval;
			}
		}

		MealyActionHome_c[] objs39173 = MealyActionHome_c
				.MealyActionHomeInstances(modelRoot,
						new MealyActionHome_c_test39174_c(getSm_id(),
								getAct_id()));

		if (((objs39173.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39173.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39173.length), e);
			}
			retval = false;

		}

		if (((objs39173.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39173.length)
										+ " SM_ID: " + "Not Printable" + " Act_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39173.length)
										+ " SM_ID: " + "Not Printable" + " Act_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Mealy Action Home is a subtype in association: rel.Numb = 513
		// The supertype class is: Action Home
		class ActionHome_c_test39179_c implements ClassQueryInterface_c {
			ActionHome_c_test39179_c(java.util.UUID p39180,
					java.util.UUID p39181) {
				m_p39180 = p39180;
				m_p39181 = p39181;
			}
			private java.util.UUID m_p39180;
			private java.util.UUID m_p39181;
			public boolean evaluate(Object candidate) {
				ActionHome_c selected = (ActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39180))
						& (selected.getSm_id().equals(m_p39181));
				return retval;
			}
		}

		ActionHome_c[] objs39178 = ActionHome_c.ActionHomeInstances(modelRoot,
				new ActionHome_c_test39179_c(getAct_id(), getSm_id()));

		if (((objs39178.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Association: 513: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39178.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Association: 513: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39178.length), e);
			}
			retval = false;

		}

		// Mealy Action Home is a link class in association: rel.Numb = 512
		// The one side class in the association is: Mealy State Machine
		class MealyStateMachine_c_test39183_c implements ClassQueryInterface_c {
			MealyStateMachine_c_test39183_c(java.util.UUID p39184) {
				m_p39184 = p39184;
			}
			private java.util.UUID m_p39184;
			public boolean evaluate(Object candidate) {
				MealyStateMachine_c selected = (MealyStateMachine_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39184));
				return retval;
			}
		}

		MealyStateMachine_c[] objs39182 = MealyStateMachine_c
				.MealyStateMachineInstances(modelRoot,
						new MealyStateMachine_c_test39183_c(getSm_id()));

		if (((objs39182.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Association: 512: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39182.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Association: 512: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39182.length), e);
			}
			retval = false;

		}

		// Other side
		// The other side class in the association is: Transition
		class Transition_c_test39186_c implements ClassQueryInterface_c {
			Transition_c_test39186_c(java.util.UUID p39187,
					java.util.UUID p39188) {
				m_p39187 = p39187;
				m_p39188 = p39188;
			}
			private java.util.UUID m_p39187;
			private java.util.UUID m_p39188;
			public boolean evaluate(Object candidate) {
				Transition_c selected = (Transition_c) candidate;
				boolean retval = false;
				retval = (selected.getTrans_id().equals(m_p39187))
						& (selected.getSm_id().equals(m_p39188));
				return retval;
			}
		}

		Transition_c[] objs39185 = Transition_c.TransitionInstances(modelRoot,
				new Transition_c_test39186_c(getTrans_id(), getSm_id()));

		// The other side class is unconditional
		if (((objs39185.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Mealy Action Home", //$NON-NLS-1$
								"Consistency: Object: Mealy Action Home: Association: 512: Cardinality of unconditional other side of link is equal to zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39185.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Mealy Action Home: Association: 512: Cardinality of unconditional other side of link is equal to zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39185.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Mealy Action Home",
				" Operation entered: MealyActionHome::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		MealyStateMachine_c v_mealy = MealyStateMachine_c
				.getOneSM_MEALYOnR512(this);

		Transition_c v_trans = Transition_c.getOneSM_TXNOnR512(this);

		unrelateAcrossR512From(v_mealy);
		unrelateAcrossR512From(v_trans);

		ActionHome_c v_ah = ActionHome_c.getOneSM_AHOnR513(this);

		this.unrelateAcrossR513From(v_ah);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Mealy Action Home
