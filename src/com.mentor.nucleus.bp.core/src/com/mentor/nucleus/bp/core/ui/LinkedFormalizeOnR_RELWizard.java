package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    LinkedFormalizeOnR_RELWizard.java
//
// WARNING: Do not edit this generated file
// Generated by arc/wizard.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * LinkedFormalizeOnR_RELWizard class
 */
public class LinkedFormalizeOnR_RELWizard extends Wizard {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;

	// the workbench instance
	protected IWorkbench m_workbench;

	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;

	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
	LinkedFormalizeOnR_RELWizardPage1 R_REL_LinkedFormalizePage1;

	// wizard state
	// constants
	protected static final int INITIAL_WIZARD_STATE = -1;
	protected static final int R_REL_LINKEDFORMALIZE0_WIZARD_STATE = 0;
	// member
	protected int m_state = INITIAL_WIZARD_STATE;
	// end wizard state

	// cache for contextual selections (public for use by unit tests)
	public Association_c v_rel = null;

	// cache for the users selections (public for use by unit tests)
	public ClassIdentifier_c v_one_id = null;
	public String v_one_idPrefix = "";
	public ClassIdentifier_c v_oth_id = null;
	public String v_oth_idPrefix = "";

	/**
	 * Constructor for LinkedFormalizeOnR_RELWizard.
	 */
	public LinkedFormalizeOnR_RELWizard() {
		super();
	}

	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {
		return m_selection;
	}

	public void addPages() {
		R_REL_LinkedFormalizePage1 = new LinkedFormalizeOnR_RELWizardPage1(
				"LinkedFormalizeOnR_RELWizardPage1");
		addPage(R_REL_LinkedFormalizePage1);
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection,
			Viewer viewer) {
		this.m_workbench = workbench;
		this.m_selection = selection;
		this.m_viewer = viewer;
		for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
			Object context = iterator.next();
			if (context instanceof Association_c) {
				v_rel = (Association_c) context;
			}
		}
	}

	public boolean canFinish() {
		boolean pagesComplete = true;
		pagesComplete = pagesComplete
				&& R_REL_LinkedFormalizePage1.isPageComplete();
		return pagesComplete;
	}

	public IWizardPage getNextPage(IWizardPage page) {
		List pages = new ArrayList(getPages().length);
		for (int i = 0; i < getPages().length; i++) {
			pages.add(getPages()[i]);
		}
		switch (pages.indexOf(page)) {
			case R_REL_LINKEDFORMALIZE0_WIZARD_STATE :
				return null;
		}
		return null;
	}

	public IWizardPage getPreviousPage(IWizardPage page) {
		if (m_pagesStack.empty()) {
			return null;
		} else {
			List pages = new ArrayList(getPages().length);
			for (int i = 0; i < getPages().length; i++) {
				pages.add(getPages()[i]);
			}
			m_state = pages.indexOf((IWizardPage) m_pagesStack.peek());
			((PtWizardPage) m_pagesStack.peek()).onPageEntry();
			return (IWizardPage) m_pagesStack.pop();
		}
	}

	private void setPrefixs(LinkedAssociation_c vARel) {
    	if (v_one_idPrefix.equalsIgnoreCase("") ){
			return;
		}
		ClassAsAssociatedOneSide_c oneSide = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209(vARel);
		ReferredToIdentifierAttribute_c[] oneSideIDs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(ReferredToClassInAssoc_c.getOneR_RTOOnR204(oneSide));
		for (ReferredToIdentifierAttribute_c oneSideID : oneSideIDs) {
			Attribute_c attr  = Attribute_c.getOneO_ATTROnR106(ReferentialAttribute_c.getOneO_RATTROnR108(AttributeReferenceInClass_c.getOneO_REFOnR111(oneSideID)));
			if (!v_one_idPrefix.equalsIgnoreCase("")){
				attr.setPrefix(v_one_idPrefix);
				attr.setPfx_mode(1);
			}
		}
		
		ClassAsAssociatedOtherSide_c otherSide = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210(vARel);
		ReferredToIdentifierAttribute_c[] otherSideIDs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(ReferredToClassInAssoc_c.getOneR_RTOOnR204(otherSide));
		for (ReferredToIdentifierAttribute_c otherSideID : otherSideIDs) {
			Attribute_c attr  = Attribute_c.getOneO_ATTROnR106(ReferentialAttribute_c.getOneO_RATTROnR108(AttributeReferenceInClass_c.getOneO_REFOnR111(otherSideID)));
			if (!v_oth_idPrefix.equalsIgnoreCase("")){
				attr.setPrefix(v_oth_idPrefix);
				attr.setPfx_mode(1);
			}
		}
	}
	public boolean performFinish() {
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_rel.getModelRoot();
		try {
			transactionGroup = TransactionUtil
					.startTransactionsOnSelectedModelRoots("Linked Formalize"); //$NON-NLS-1$
			LinkedAssociation_c v_a_rel = LinkedAssociation_c
					.getOneR_ASSOCOnR206(v_rel);

			ModelClass_c v_one_obj = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(ReferredToClassInAssoc_c
							.getOneR_RTOOnR204(ClassAsAssociatedOneSide_c
									.getOneR_AONEOnR209(v_a_rel))));

			ModelClass_c v_oth_obj = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c.getOneR_OIROnR203(ReferredToClassInAssoc_c
							.getOneR_RTOOnR204(ClassAsAssociatedOtherSide_c
									.getOneR_AOTHOnR210(v_a_rel))));

			if (((v_one_id != null) && (v_oth_id != null))) {

				if (v_a_rel != null) {
					v_a_rel.Formalize(v_one_id.getOid_id(),
							v_oth_id.getOid_id());
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

			setPrefixs(v_a_rel);
			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null)
				TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError("Transaction: Linked Formalize failed", e);//$NON-NLS-1$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null)
			TransactionUtil.endTransactions(transactionGroup);
		if (m_viewer != null) {
			if (m_viewer instanceof StructuredViewer) {
				((StructuredViewer) m_viewer).refresh(v_rel);
			} else {
				m_viewer.refresh();
			}
		}
		return true;
	}
}
