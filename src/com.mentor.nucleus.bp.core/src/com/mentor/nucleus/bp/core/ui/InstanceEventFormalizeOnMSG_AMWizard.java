package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    InstanceEventFormalizeOnMSG_AMWizard.java
//
// WARNING: Do not edit this generated file
// Generated by arc/wizard.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * InstanceEventFormalizeOnMSG_AMWizard class
 */
public class InstanceEventFormalizeOnMSG_AMWizard extends Wizard {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;

	// the workbench instance
	protected IWorkbench m_workbench;

	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;

	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
	InstanceEventFormalizeOnMSG_AMWizardPage2 MSG_AM_InstanceEventFormalizePage2;

	// wizard state
	// constants
	protected static final int INITIAL_WIZARD_STATE = -1;
	protected static final int MSG_AM_INSTANCEEVENTFORMALIZE0_WIZARD_STATE = 0;
	// member
	protected int m_state = INITIAL_WIZARD_STATE;
	// end wizard state

	// cache for contextual selections (public for use by unit tests)
	public AsynchronousMessage_c v_asyncMessage = null;

	// cache for the users selections (public for use by unit tests)
	public StateMachineEvent_c v_Message = null;

	/**
	 * Constructor for InstanceEventFormalizeOnMSG_AMWizard.
	 */
	public InstanceEventFormalizeOnMSG_AMWizard() {
		super();
	}

	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {
		return m_selection;
	}

	public void addPages() {
		MSG_AM_InstanceEventFormalizePage2 = new InstanceEventFormalizeOnMSG_AMWizardPage2(
				"InstanceEventFormalizeOnMSG_AMWizardPage2");
		addPage(MSG_AM_InstanceEventFormalizePage2);
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection,
			Viewer viewer) {
		this.m_workbench = workbench;
		this.m_selection = selection;
		this.m_viewer = viewer;
		for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
			Object context = iterator.next();
			if (context instanceof AsynchronousMessage_c) {
				v_asyncMessage = (AsynchronousMessage_c) context;
			}
		}
	}

	public boolean canFinish() {
		boolean pagesComplete = true;
		pagesComplete = pagesComplete
				&& MSG_AM_InstanceEventFormalizePage2.isPageComplete();
		return pagesComplete;
	}

	public IWizardPage getNextPage(IWizardPage page) {
		List pages = new ArrayList(getPages().length);
		for (int i = 0; i < getPages().length; i++) {
			pages.add(getPages()[i]);
		}
		switch (pages.indexOf(page)) {
			case MSG_AM_INSTANCEEVENTFORMALIZE0_WIZARD_STATE :
				return null;
		}
		return null;
	}

	public IWizardPage getPreviousPage(IWizardPage page) {
		if (m_pagesStack.empty()) {
			return null;
		} else {
			List pages = new ArrayList(getPages().length);
			for (int i = 0; i < getPages().length; i++) {
				pages.add(getPages()[i]);
			}
			m_state = pages.indexOf((IWizardPage) m_pagesStack.peek());
			((PtWizardPage) m_pagesStack.peek()).onPageEntry();
			return (IWizardPage) m_pagesStack.pop();
		}
	}

	public boolean performFinish() {
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_asyncMessage.getModelRoot();
		try {
			transactionGroup = TransactionUtil
					.startTransactionsOnSelectedModelRoots("Instance Event Formalize"); //$NON-NLS-1$
			Message_c v_message = Message_c.getOneMSG_MOnR1018(v_asyncMessage);

			InteractionParticipant_c v_participant = InteractionParticipant_c
					.getOneSQ_POnR1007(v_message);

			Lifespan_c v_ls = Lifespan_c.getOneSQ_LSOnR930(v_participant);

			ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
					.getOneSQ_CIPOnR930(InteractionParticipant_c
							.getOneSQ_POnR940(v_ls));

			ModelClass_c v_cipclass = (ModelClass_c) modelRoot.getInstanceList(
					ModelClass_c.class).getGlobal(null, Gd_c.Null_unique_id());

			if (((v_cip != null))) {

				v_cipclass = ModelClass_c.getOneO_OBJOnR934(v_cip);

			}

			else {

				v_cip = ClassInstanceParticipant_c
						.getOneSQ_CIPOnR930(InteractionParticipant_c
								.getOneSQ_POnR1007(v_message));

				if (((v_cip != null))) {

					Communication_c v_communication = Communication_c
							.getOneCOMM_COMMOnR1126(ParticipantInCommunication_c
									.getOneCOMM_PICOnR1126(InteractionParticipant_c
											.getOneSQ_POnR930(v_cip)));

					if (((v_communication != null))) {

						v_cipclass = ModelClass_c.getOneO_OBJOnR934(v_cip);

					}

				}

			}

			if (((v_cipclass != null))) {

				StateMachineEvent_c v_evt = StateMachineEvent_c
						.getOneSM_EVTOnR1009(EventMessage_c
								.getOneMSG_EOnR1019(v_asyncMessage));

				java.util.UUID v_existingId = Gd_c.Null_unique_id();

				if (((v_evt != null))) {

					v_existingId = v_evt.getSmevt_id();

				}

				StateMachine_c v_stateMachine = StateMachine_c
						.getOneSM_SMOnR517(InstanceStateMachine_c
								.getOneSM_ISMOnR518(v_cipclass));

				StateMachine_c[] v_machines = StateMachine_c
						.getManySM_SMsOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(ModelClass_c.getManyO_OBJsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(SystemModel_c.getManyS_SYSsOnR1405(Package_c
								.getManyEP_PKGsOnR8000(PackageableElement_c
										.getManyPE_PEsOnR8001(v_cipclass))))))));

				if (((v_machines.length == 0))) {

					v_machines = StateMachine_c
							.getManySM_SMsOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(ModelClass_c.getManyO_OBJsOnR2(Subsystem_c.getManyS_SSsOnR1(Domain_c
									.getManyS_DOMsOnR1(Subsystem_c
											.getManyS_SSsOnR2(v_cipclass))))));

				}

				if (((v_Message != null))) {

					if (v_asyncMessage != null) {
						v_asyncMessage.Formalizewithevent(v_Message
								.getSmevt_id());
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Attempted to call an operation on a null instance.",
										t);
					}

				}

			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null)
				TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError(
					"Transaction: Instance Event Formalize failed", e);//$NON-NLS-1$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null)
			TransactionUtil.endTransactions(transactionGroup);
		if (m_viewer != null) {
			if (m_viewer instanceof StructuredViewer) {
				((StructuredViewer) m_viewer).refresh(v_asyncMessage);
			} else {
				m_viewer.refresh();
			}
		}
		return true;
	}
}
