package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActionHome_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTION_HOME extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActionHome_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActionHome_c(ModelRoot modelRoot, java.util.UUID p_m_act_id,
			java.util.UUID p_m_sm_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

		Object[] key = {m_act_id, m_sm_id};
		addInstanceToMap(key);
	}
	static public ActionHome_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
		ActionHome_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_act_id, p_m_sm_id};
			new_inst = (ActionHome_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActionHome_c(modelRoot, p_m_act_id, p_m_sm_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActionHome_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_act_id, java.util.UUID p_m_sm_id) {
		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
		ActionHome_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_act_id, p_m_sm_id};
			source = (ActionHome_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_act_id = IdAssigner.preprocessUUID(p_m_act_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActionHome_c new_inst = new ActionHome_c(modelRoot, p_m_act_id,
				p_m_sm_id);
		return new_inst;
	}
	public ActionHome_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_act_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		Object[] key = {m_act_id, m_sm_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_act_id, m_sm_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_act_id != p_newKey) {

			m_act_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActionHome_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActionHome_c)) {
			return false;
		}

		ActionHome_c me = (ActionHome_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAct_id()) || IdAssigner.NULL_UUID
						.equals(((ActionHome_c) elem).getAct_id())) && this != elem)) {
			return false;
		}
		if (!getAct_id().equals(((ActionHome_c) elem).getAct_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((ActionHome_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((ActionHome_c) elem).getSm_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActionHome_c)) {
			return false;
		}

		ActionHome_c me = (ActionHome_c) elem;
		if (!getAct_idCachedValue().equals(
				((ActionHome_c) elem).getAct_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((ActionHome_c) elem).getSm_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_act_id;
	private java.util.UUID m_sm_id;

	// declare association references from this class

	// referring navigation

	Action_c HousesAction;
	public void relateAcrossR514To(Action_c target) {
		relateAcrossR514To(target, true);
	}
	public void relateAcrossR514To(Action_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HousesAction)
			return; // already related

		if (HousesAction != target) {

			Object oldKey = getInstanceKey();

			if (HousesAction != null) {

				HousesAction.clearBackPointerR514To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActionHome_c.relateAcrossR514To(Action_c target)",
									"Relate performed across R514 from Action Home to Action without unrelate of prior instance.");
				}
			}

			HousesAction = target;
			m_act_id = target.getAct_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR514To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "514", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR514From(Action_c target) {
		unrelateAcrossR514From(target, true);
	}
	public void unrelateAcrossR514From(Action_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HousesAction == null)
			return; // already unrelated

		if (target != HousesAction) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R514",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR514To(this);
		}

		if (HousesAction != null) {

			m_act_id = HousesAction.getAct_id();
			m_sm_id = HousesAction.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = HousesAction.getSm_idCachedValue();
			}
			HousesAction = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "514", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActionHome_c getOneSM_AHOnR514(Action_c[] targets) {
		return getOneSM_AHOnR514(targets, null);
	}

	public static ActionHome_c getOneSM_AHOnR514(Action_c[] targets,
			ClassQueryInterface_c test) {
		ActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_AHOnR514(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActionHome_c getOneSM_AHOnR514(Action_c target) {
		return getOneSM_AHOnR514(target, null);
	}

	public static ActionHome_c getOneSM_AHOnR514(Action_c target,
			boolean loadComponent) {
		return getOneSM_AHOnR514(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActionHome_c getOneSM_AHOnR514(Action_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_AHOnR514(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActionHome_c getOneSM_AHOnR514(ModelRoot modelRoot,
			Action_c target, ClassQueryInterface_c test) {
		return getOneSM_AHOnR514(modelRoot, target, test, true);
	}

	public static ActionHome_c getOneSM_AHOnR514(ModelRoot modelRoot,
			Action_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_AHOnR514(modelRoot, target, test);
	}
	private static ActionHome_c find_getOneSM_AHOnR514(ModelRoot modelRoot,
			Action_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActionHome_c source = (ActionHome_c) target.backPointer_ResidesInActionHomeResidesIn_R514;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActionHome_c[] getManySM_AHsOnR514(Action_c[] targets) {
		return getManySM_AHsOnR514(targets, null);
	}
	public static ActionHome_c[] getManySM_AHsOnR514(Action_c[] targets,
			boolean loadComponent) {
		return getManySM_AHsOnR514(targets, null, loadComponent);
	}
	public static ActionHome_c[] getManySM_AHsOnR514(Action_c[] targets,
			ClassQueryInterface_c test) {
		return getManySM_AHsOnR514(targets, test, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR514(Action_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActionHome_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActionHome_c source = (ActionHome_c) targets[i].backPointer_ResidesInActionHomeResidesIn_R514;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActionHome_c[] ret_set = new ActionHome_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActionHome_c[0];
		}
	}

	public static ActionHome_c[] getManySM_AHsOnR514(Action_c target) {
		if (target != null) {
			Action_c[] targetArray = new Action_c[1];
			targetArray[0] = target;
			return getManySM_AHsOnR514(targetArray);
		} else {
			ActionHome_c[] result = new ActionHome_c[0];
			return result;
		}
	}

	public static ActionHome_c[] getManySM_AHsOnR514(Action_c target,
			boolean loadComponent) {
		if (target != null) {
			Action_c[] targetArray = new Action_c[1];
			targetArray[0] = target;
			return getManySM_AHsOnR514(targetArray, loadComponent);
		} else {
			ActionHome_c[] result = new ActionHome_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	TransitionActionHome_c backPointer_IsSubtypeTransitionActionHomeIsSubtype_R513;

	public void setTransitionActionHomeOrderInChildListR513(
			TransitionActionHome_c target, int index) {
		unrelateAcrossR513From(target);
		TransitionActionHome_c[] elements = TransitionActionHome_c
				.getManySM_TAHsOnR513(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR513From((TransitionActionHome_c) elements[i]);
			}
			count++;
		}
		relateAcrossR513To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR513To((TransitionActionHome_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR513To(TransitionActionHome_c target) {
		if (target != null) {
			target.relateAcrossR513To(this, true);
		}
	}

	public void relateAcrossR513To(TransitionActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR513To(this, notifyChanges);
		}
	}

	public void setBackPointerR513To(TransitionActionHome_c target) {
		backPointer_IsSubtypeTransitionActionHomeIsSubtype_R513 = target;
	}

	public void unrelateAcrossR513From(TransitionActionHome_c target) {
		if (target != null) {
			target.unrelateAcrossR513From(this, true);
		}
	}

	public void unrelateAcrossR513From(TransitionActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR513From(this, notifyChanges);
		}
	}

	public void clearBackPointerR513To(TransitionActionHome_c target) {
		if (target == backPointer_IsSubtypeTransitionActionHomeIsSubtype_R513) {
			backPointer_IsSubtypeTransitionActionHomeIsSubtype_R513 = null;
		}
	}

	public static ActionHome_c getOneSM_AHOnR513(
			TransitionActionHome_c[] targets) {
		return getOneSM_AHOnR513(targets, null);
	}

	public static ActionHome_c getOneSM_AHOnR513(
			TransitionActionHome_c[] targets, ClassQueryInterface_c test) {
		return getOneSM_AHOnR513(targets, test, true);
	}

	public static ActionHome_c getOneSM_AHOnR513(
			TransitionActionHome_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionHome_c candidate_val = getOneSM_AHOnR513(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_AHOnR513(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionHome_c getOneSM_AHOnR513(TransitionActionHome_c target) {
		return getOneSM_AHOnR513(target, true);
	}
	public static ActionHome_c getOneSM_AHOnR513(TransitionActionHome_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionHome;
		} else {
			return null;
		}
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c[] targets, ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(targets, test, true);
	}

	public static ActionHome_c [] getManySM_AHsOnR513(TransitionActionHome_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionHome_c[0];
  
  
  LinkedHashSet<ActionHome_c> elementsSet = new LinkedHashSet<ActionHome_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionHome == null)
	  targets[i].loadProxy();
    ActionHome_c associate = targets[i].IsSupertypeActionHome;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionHome_c[] result = new ActionHome_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c[] targets) {
		return getManySM_AHsOnR513(targets, null);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			TransitionActionHome_c[] targetArray = new TransitionActionHome_c[1];
			targetArray[0] = target;
			return getManySM_AHsOnR513(targetArray, test, loadComponent);
		} else {
			ActionHome_c[] result = new ActionHome_c[0];
			return result;
		}

	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c target, ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c target) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			TransitionActionHome_c target, boolean loadComponent) {
		return getManySM_AHsOnR513(target, null, loadComponent);
	}

	// referred to navigation

	MooreActionHome_c backPointer_IsSubtypeMooreActionHomeIsSubtype_R513;

	public void setMooreActionHomeOrderInChildListR513(
			MooreActionHome_c target, int index) {
		unrelateAcrossR513From(target);
		MooreActionHome_c[] elements = MooreActionHome_c
				.getManySM_MOAHsOnR513(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR513From((MooreActionHome_c) elements[i]);
			}
			count++;
		}
		relateAcrossR513To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR513To((MooreActionHome_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR513To(MooreActionHome_c target) {
		if (target != null) {
			target.relateAcrossR513To(this, true);
		}
	}

	public void relateAcrossR513To(MooreActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR513To(this, notifyChanges);
		}
	}

	public void setBackPointerR513To(MooreActionHome_c target) {
		backPointer_IsSubtypeMooreActionHomeIsSubtype_R513 = target;
	}

	public void unrelateAcrossR513From(MooreActionHome_c target) {
		if (target != null) {
			target.unrelateAcrossR513From(this, true);
		}
	}

	public void unrelateAcrossR513From(MooreActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR513From(this, notifyChanges);
		}
	}

	public void clearBackPointerR513To(MooreActionHome_c target) {
		if (target == backPointer_IsSubtypeMooreActionHomeIsSubtype_R513) {
			backPointer_IsSubtypeMooreActionHomeIsSubtype_R513 = null;
		}
	}

	public static ActionHome_c getOneSM_AHOnR513(MooreActionHome_c[] targets) {
		return getOneSM_AHOnR513(targets, null);
	}

	public static ActionHome_c getOneSM_AHOnR513(MooreActionHome_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSM_AHOnR513(targets, test, true);
	}

	public static ActionHome_c getOneSM_AHOnR513(MooreActionHome_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionHome_c candidate_val = getOneSM_AHOnR513(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_AHOnR513(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionHome_c getOneSM_AHOnR513(MooreActionHome_c target) {
		return getOneSM_AHOnR513(target, true);
	}
	public static ActionHome_c getOneSM_AHOnR513(MooreActionHome_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionHome;
		} else {
			return null;
		}
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			MooreActionHome_c[] targets, ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(targets, test, true);
	}

	public static ActionHome_c [] getManySM_AHsOnR513(MooreActionHome_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionHome_c[0];
  
  
  LinkedHashSet<ActionHome_c> elementsSet = new LinkedHashSet<ActionHome_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionHome == null)
	  targets[i].loadProxy();
    ActionHome_c associate = targets[i].IsSupertypeActionHome;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionHome_c[] result = new ActionHome_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionHome_c[] getManySM_AHsOnR513(MooreActionHome_c[] targets) {
		return getManySM_AHsOnR513(targets, null);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MooreActionHome_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			MooreActionHome_c[] targetArray = new MooreActionHome_c[1];
			targetArray[0] = target;
			return getManySM_AHsOnR513(targetArray, test, loadComponent);
		} else {
			ActionHome_c[] result = new ActionHome_c[0];
			return result;
		}

	}

	public static ActionHome_c[] getManySM_AHsOnR513(MooreActionHome_c target,
			ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MooreActionHome_c target) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MooreActionHome_c target,
			boolean loadComponent) {
		return getManySM_AHsOnR513(target, null, loadComponent);
	}

	// referred to navigation

	MealyActionHome_c backPointer_IsSubtypeMealyActionHomeIsSubtype_R513;

	public void setMealyActionHomeOrderInChildListR513(
			MealyActionHome_c target, int index) {
		unrelateAcrossR513From(target);
		MealyActionHome_c[] elements = MealyActionHome_c
				.getManySM_MEAHsOnR513(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR513From((MealyActionHome_c) elements[i]);
			}
			count++;
		}
		relateAcrossR513To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR513To((MealyActionHome_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR513To(MealyActionHome_c target) {
		if (target != null) {
			target.relateAcrossR513To(this, true);
		}
	}

	public void relateAcrossR513To(MealyActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR513To(this, notifyChanges);
		}
	}

	public void setBackPointerR513To(MealyActionHome_c target) {
		backPointer_IsSubtypeMealyActionHomeIsSubtype_R513 = target;
	}

	public void unrelateAcrossR513From(MealyActionHome_c target) {
		if (target != null) {
			target.unrelateAcrossR513From(this, true);
		}
	}

	public void unrelateAcrossR513From(MealyActionHome_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR513From(this, notifyChanges);
		}
	}

	public void clearBackPointerR513To(MealyActionHome_c target) {
		if (target == backPointer_IsSubtypeMealyActionHomeIsSubtype_R513) {
			backPointer_IsSubtypeMealyActionHomeIsSubtype_R513 = null;
		}
	}

	public static ActionHome_c getOneSM_AHOnR513(MealyActionHome_c[] targets) {
		return getOneSM_AHOnR513(targets, null);
	}

	public static ActionHome_c getOneSM_AHOnR513(MealyActionHome_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSM_AHOnR513(targets, test, true);
	}

	public static ActionHome_c getOneSM_AHOnR513(MealyActionHome_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionHome_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ActionHome_c candidate_val = getOneSM_AHOnR513(targets[i],
							true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_AHOnR513(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ActionHome_c getOneSM_AHOnR513(MealyActionHome_c target) {
		return getOneSM_AHOnR513(target, true);
	}
	public static ActionHome_c getOneSM_AHOnR513(MealyActionHome_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeActionHome;
		} else {
			return null;
		}
	}

	public static ActionHome_c[] getManySM_AHsOnR513(
			MealyActionHome_c[] targets, ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(targets, test, true);
	}

	public static ActionHome_c [] getManySM_AHsOnR513(MealyActionHome_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ActionHome_c[0];
  
  
  LinkedHashSet<ActionHome_c> elementsSet = new LinkedHashSet<ActionHome_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeActionHome == null)
	  targets[i].loadProxy();
    ActionHome_c associate = targets[i].IsSupertypeActionHome;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ActionHome_c[] result = new ActionHome_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ActionHome_c[] getManySM_AHsOnR513(MealyActionHome_c[] targets) {
		return getManySM_AHsOnR513(targets, null);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MealyActionHome_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			MealyActionHome_c[] targetArray = new MealyActionHome_c[1];
			targetArray[0] = target;
			return getManySM_AHsOnR513(targetArray, test, loadComponent);
		} else {
			ActionHome_c[] result = new ActionHome_c[0];
			return result;
		}

	}

	public static ActionHome_c[] getManySM_AHsOnR513(MealyActionHome_c target,
			ClassQueryInterface_c test) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MealyActionHome_c target) {
		return getManySM_AHsOnR513(target, null, true);
	}

	public static ActionHome_c[] getManySM_AHsOnR513(MealyActionHome_c target,
			boolean loadComponent) {
		return getManySM_AHsOnR513(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (HousesAction == null) {
			// R514
			Action_c relInst39291 = (Action_c) baseRoot.getInstanceList(
					Action_c.class).get(new Object[]{m_sm_id, m_act_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39291 == null) {
				relInst39291 = (Action_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Action_c.class)
						.get(new Object[]{m_sm_id, m_act_id});
			}
			if (relInst39291 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39291 = (Action_c) roots[i].getInstanceList(
							Action_c.class)
							.get(new Object[]{m_sm_id, m_act_id});
					if (relInst39291 != null)
						break;
				}
			}
			//synchronized
			if (relInst39291 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39291) && !isProxy())) {
					relInst39291.relateAcrossR514To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R514
		// SM_ACT
		inst = HousesAction;
		unrelateAcrossR514From(HousesAction, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActionHome_c inst = (ActionHome_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActionHome_c ActionHomeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ActionHome_c result = findActionHomeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ActionHome_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActionHomeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ActionHome_c findActionHomeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActionHome_c x = (ActionHome_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ActionHome_c ActionHomeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionHomeInstance(modelRoot, test, true);
	}

	public static ActionHome_c ActionHomeInstance(ModelRoot modelRoot) {
		return ActionHomeInstance(modelRoot, null, true);
	}

	public static ActionHome_c[] ActionHomeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ActionHome_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(ActionHome_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActionHome_c x = (ActionHome_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActionHome_c[] ret_set = new ActionHome_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActionHome_c[0];
			}
		}
	}
	public static ActionHome_c[] ActionHomeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ActionHomeInstances(modelRoot, test, true);
	}
	public static ActionHome_c[] ActionHomeInstances(ModelRoot modelRoot) {
		return ActionHomeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Action Home.dispose call: ";
		TransitionActionHome_c testR513Inst1 = TransitionActionHome_c
				.getOneSM_TAHOnR513(this, false);

		if (testR513Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "513 ";
		}
		MooreActionHome_c testR513Inst2 = MooreActionHome_c
				.getOneSM_MOAHOnR513(this, false);

		if (testR513Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "513 ";
		}
		MealyActionHome_c testR513Inst3 = MealyActionHome_c
				.getOneSM_MEAHOnR513(this, false);

		if (testR513Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "513 ";
		}
		Action_c testR514Inst = Action_c.getOneSM_ACTOnR514(this, false);

		if (testR514Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "514 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Action Home", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("act_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAct_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAct_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAct_idLongBased() {
		if (HousesAction != null) {
			return HousesAction.getAct_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAct_id() {
		if (HousesAction != null) {
			return HousesAction.getAct_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAct_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_act_id))
			return m_act_id;
		else
			return getAct_id();
	}

	public void setAct_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_act_id)) {
				return;
			}
		} else if (m_act_id != null) {
			if (m_act_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Act_id", m_act_id, newValue, true);
		m_act_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (HousesAction != null) {
			return HousesAction.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (HousesAction != null) {
			return HousesAction.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Home", //$NON-NLS-1$
				" Operation entered: Action Home::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActionHome_c[] objs = ActionHome_c.ActionHomeInstances(modelRoot, null,
				false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Home", //$NON-NLS-1$
				" Operation entered: Action Home::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActionHome_c_test39293_c implements ClassQueryInterface_c {
			ActionHome_c_test39293_c(java.util.UUID p39294,
					java.util.UUID p39295) {
				m_p39294 = p39294;
				m_p39295 = p39295;
			}
			private java.util.UUID m_p39294;
			private java.util.UUID m_p39295;
			public boolean evaluate(Object candidate) {
				ActionHome_c selected = (ActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39294))
						& (selected.getSm_id().equals(m_p39295));
				return retval;
			}
		}

		ActionHome_c[] objs39292 = ActionHome_c.ActionHomeInstances(modelRoot,
				new ActionHome_c_test39293_c(getAct_id(), getSm_id()));

		if (((objs39292.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Home", //$NON-NLS-1$
								"Consistency: Object: Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39292.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Action Home: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39292.length), e);
			}
			retval = false;

		}

		if (((objs39292.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Home", //$NON-NLS-1$
								"Consistency: Object: Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39292.length)
										+ " Act_ID: " + "Not Printable" + " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Home: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39292.length)
										+ " Act_ID: " + "Not Printable" + " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Action Home is a referring class in association: rel.Numb = 514
		// The participating class is: Action
		class Action_c_test39299_c implements ClassQueryInterface_c {
			Action_c_test39299_c(java.util.UUID p39300, java.util.UUID p39301) {
				m_p39300 = p39300;
				m_p39301 = p39301;
			}
			private java.util.UUID m_p39300;
			private java.util.UUID m_p39301;
			public boolean evaluate(Object candidate) {
				Action_c selected = (Action_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39300))
						& (selected.getSm_id().equals(m_p39301));
				return retval;
			}
		}

		Action_c[] objs39298 = Action_c.ActionInstances(modelRoot,
				new Action_c_test39299_c(getAct_id(), getSm_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39298.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Home", //$NON-NLS-1$
								"Consistency: Object: Action Home: Association: 514: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39298.length)
										+ " Act_ID: " + "Not Printable" + " SM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Home: Association: 514: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39298.length)
										+ " Act_ID: " + "Not Printable" + " SM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 513
		int objs39302 = 0;
		// Subtype Object: Transition Action Home
		class TransitionActionHome_c_test39303_c
				implements
					ClassQueryInterface_c {
			TransitionActionHome_c_test39303_c(java.util.UUID p39304,
					java.util.UUID p39305) {
				m_p39304 = p39304;
				m_p39305 = p39305;
			}
			private java.util.UUID m_p39304;
			private java.util.UUID m_p39305;
			public boolean evaluate(Object candidate) {
				TransitionActionHome_c selected = (TransitionActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39304))
						& (selected.getSm_id().equals(m_p39305));
				return retval;
			}
		}

		TransitionActionHome_c[] objs39306 = TransitionActionHome_c
				.TransitionActionHomeInstances(modelRoot,
						new TransitionActionHome_c_test39303_c(getAct_id(),
								getSm_id()));

		objs39302 = objs39302 + objs39306.length;
		// Subtype Object: Moore Action Home
		class MooreActionHome_c_test39307_c implements ClassQueryInterface_c {
			MooreActionHome_c_test39307_c(java.util.UUID p39308,
					java.util.UUID p39309) {
				m_p39308 = p39308;
				m_p39309 = p39309;
			}
			private java.util.UUID m_p39308;
			private java.util.UUID m_p39309;
			public boolean evaluate(Object candidate) {
				MooreActionHome_c selected = (MooreActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39308))
						& (selected.getSm_id().equals(m_p39309));
				return retval;
			}
		}

		MooreActionHome_c[] objs39310 = MooreActionHome_c
				.MooreActionHomeInstances(modelRoot,
						new MooreActionHome_c_test39307_c(getAct_id(),
								getSm_id()));

		objs39302 = objs39302 + objs39310.length;
		// Subtype Object: Mealy Action Home
		class MealyActionHome_c_test39311_c implements ClassQueryInterface_c {
			MealyActionHome_c_test39311_c(java.util.UUID p39312,
					java.util.UUID p39313) {
				m_p39312 = p39312;
				m_p39313 = p39313;
			}
			private java.util.UUID m_p39312;
			private java.util.UUID m_p39313;
			public boolean evaluate(Object candidate) {
				MealyActionHome_c selected = (MealyActionHome_c) candidate;
				boolean retval = false;
				retval = (selected.getAct_id().equals(m_p39312))
						& (selected.getSm_id().equals(m_p39313));
				return retval;
			}
		}

		MealyActionHome_c[] objs39314 = MealyActionHome_c
				.MealyActionHomeInstances(modelRoot,
						new MealyActionHome_c_test39311_c(getAct_id(),
								getSm_id()));

		objs39302 = objs39302 + objs39314.length;
		if (objs39302 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Action Home", //$NON-NLS-1$
								"Consistency: Object: Action Home: Association: 513: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39302)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Action Home: Association: 513: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39302), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Action Home",
				" Operation entered: ActionHome::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		MooreActionHome_c v_moah = MooreActionHome_c.getOneSM_MOAHOnR513(this);

		if (((v_moah != null))) {

			if (v_moah != null) {
				v_moah.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		MealyActionHome_c v_meah = MealyActionHome_c.getOneSM_MEAHOnR513(this);

		if (((v_meah != null))) {

			if (v_meah != null) {
				v_meah.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		TransitionActionHome_c v_tah = TransitionActionHome_c
				.getOneSM_TAHOnR513(this);

		if (((v_tah != null))) {

			if (v_tah != null) {
				v_tah.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Action Home
