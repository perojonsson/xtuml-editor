      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.StateMachine_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_STATE_MACHINE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class StateMachine_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public StateMachine_c(ModelRoot modelRoot,
       java.util.UUID         p_m_sm_id,
       String       p_m_descrip,
       int          p_m_config_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //extract 28 bit value only            
       m_sm_idLongBased = 0xfffffff & p_m_sm_id.getLeastSignificantBits();
       m_descrip = p_m_descrip;
       m_config_id = p_m_config_id;
        
    setUniqueId(m_sm_id);
    Object [] key = {m_sm_id};
    addInstanceToMap(key);
  }
  static public StateMachine_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_sm_id,
       String       p_m_descrip,
       int          p_m_config_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(StateMachine_c.class);
      StateMachine_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_sm_id};
          new_inst = (StateMachine_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //extract 28 bit value only            
       new_inst.m_sm_idLongBased = 0xfffffff & p_m_sm_id.getLeastSignificantBits();
       new_inst.m_descrip = p_m_descrip;
       new_inst.m_config_id = p_m_config_id;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new StateMachine_c(modelRoot,
p_m_sm_id,
p_m_descrip,
p_m_config_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public StateMachine_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_sm_id,
       String       p_m_descrip,
       int          p_m_config_id){
    InstanceList instances = modelRoot.getInstanceList(StateMachine_c.class);
    StateMachine_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_sm_id
            };
        source = (StateMachine_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //extract 28 bit value only            
       source.m_sm_idLongBased = 0xfffffff & p_m_sm_id.getLeastSignificantBits();
       source.m_descrip = p_m_descrip;
       source.m_config_id = p_m_config_id;
        
           return source ;
        }
      }
      // there is no instance matching the id
    StateMachine_c new_inst = new StateMachine_c(modelRoot,
p_m_sm_id,
p_m_descrip,
p_m_config_id
);
    return new_inst;
  }
  public StateMachine_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_sm_id = idAssigner.createUUID();
     m_descrip = "";   
    setUniqueId(m_sm_id);
    Object [] key = {m_sm_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_sm_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_sm_id !=  p_newKey ){
	
		m_sm_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof StateMachine_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof StateMachine_c)) {
           return false;
       }
       
       StateMachine_c me = (StateMachine_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID.equals(((StateMachine_c)elem).getSm_id())) && this != elem)) {
      	return false;
      }
      if (!getSm_id().equals(((StateMachine_c)elem).getSm_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof StateMachine_c)) {
           return false;
       }
       
       StateMachine_c me = (StateMachine_c)elem;
      if (!getSm_id().equals(((StateMachine_c)elem).getSm_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_sm_id ;
  private long m_sm_idLongBased ;
  private String       m_descrip ;
  private int          m_config_id ;

// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Transition_c> backPointer_ContainsTransitionContains_R505 = new ArrayList<Transition_c>();

public void setTransitionOrderInChildListR505(Transition_c target, int index) {
	unrelateAcrossR505From(target);
	Transition_c[] elements = Transition_c.getManySM_TXNsOnR505(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR505From((Transition_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR505To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR505To((Transition_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR505To(Transition_c target)
{
  if (target != null) {
    target.relateAcrossR505To(this, true) ;
  }
}

public void relateAcrossR505To(Transition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR505To(this, notifyChanges) ;
  }
}

public void setBackPointerR505To(Transition_c target)
{
  	synchronized (backPointer_ContainsTransitionContains_R505) {
		backPointer_ContainsTransitionContains_R505.add(target);
	}
}

public void unrelateAcrossR505From(Transition_c target)
{
  if (target != null) {
    target.unrelateAcrossR505From(this, true) ;
  }
}

public void unrelateAcrossR505From(Transition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR505From(this, notifyChanges) ;
  }
}

public void clearBackPointerR505To(Transition_c target)
{
  synchronized (backPointer_ContainsTransitionContains_R505) {
	    backPointer_ContainsTransitionContains_R505.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR505(Transition_c [] targets)
{
    return getOneSM_SMOnR505(targets, null);
}

public static StateMachine_c getOneSM_SMOnR505(Transition_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR505(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR505(Transition_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR505(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR505(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR505(Transition_c target)
{
	return getOneSM_SMOnR505(target, true);
}
public static StateMachine_c getOneSM_SMOnR505(Transition_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR505(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].StateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c [] targets)
{
  return getManySM_SMsOnR505(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Transition_c [] targetArray = new Transition_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR505(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR505(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c target)
{
    return getManySM_SMsOnR505(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR505(Transition_c target, boolean loadComponent)
{
    return getManySM_SMsOnR505(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StateMachineState_c> backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501 = new ArrayList<StateMachineState_c>();

public void setStateMachineStateOrderInChildListR501(StateMachineState_c target, int index) {
	unrelateAcrossR501From(target);
	StateMachineState_c[] elements = StateMachineState_c.getManySM_STATEsOnR501(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR501From((StateMachineState_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR501To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR501To((StateMachineState_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR501To(StateMachineState_c target)
{
  if (target != null) {
    target.relateAcrossR501To(this, true) ;
  }
}

public void relateAcrossR501To(StateMachineState_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR501To(this, notifyChanges) ;
  }
}

public void setBackPointerR501To(StateMachineState_c target)
{
  	synchronized (backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501) {
		backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.add(target);
	}
}

public void unrelateAcrossR501From(StateMachineState_c target)
{
  if (target != null) {
    target.unrelateAcrossR501From(this, true) ;
  }
}

public void unrelateAcrossR501From(StateMachineState_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR501From(this, notifyChanges) ;
  }
}

public void clearBackPointerR501To(StateMachineState_c target)
{
  synchronized (backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501) {
	    backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR501(StateMachineState_c [] targets)
{
    return getOneSM_SMOnR501(targets, null);
}

public static StateMachine_c getOneSM_SMOnR501(StateMachineState_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR501(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR501(StateMachineState_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR501(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR501(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR501(StateMachineState_c target)
{
	return getOneSM_SMOnR501(target, true);
}
public static StateMachine_c getOneSM_SMOnR501(StateMachineState_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR501(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].StateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c [] targets)
{
  return getManySM_SMsOnR501(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StateMachineState_c [] targetArray = new StateMachineState_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR501(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR501(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c target)
{
    return getManySM_SMsOnR501(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR501(StateMachineState_c target, boolean loadComponent)
{
    return getManySM_SMsOnR501(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StateMachineEventDataItem_c> backPointer_CanAsynchronouslyCommunicateViaStateMachineEventDataItemCanAsynchronouslyCommunicateVia_R516 = new ArrayList<StateMachineEventDataItem_c>();

public void setStateMachineEventDataItemOrderInChildListR516(StateMachineEventDataItem_c target, int index) {
	unrelateAcrossR516From(target);
	StateMachineEventDataItem_c[] elements = StateMachineEventDataItem_c.getManySM_EVTDIsOnR516(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR516From((StateMachineEventDataItem_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR516To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR516To((StateMachineEventDataItem_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR516To(StateMachineEventDataItem_c target)
{
  if (target != null) {
    target.relateAcrossR516To(this, true) ;
  }
}

public void relateAcrossR516To(StateMachineEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR516To(this, notifyChanges) ;
  }
}

public void setBackPointerR516To(StateMachineEventDataItem_c target)
{
  	synchronized (backPointer_CanAsynchronouslyCommunicateViaStateMachineEventDataItemCanAsynchronouslyCommunicateVia_R516) {
		backPointer_CanAsynchronouslyCommunicateViaStateMachineEventDataItemCanAsynchronouslyCommunicateVia_R516.add(target);
	}
}

public void unrelateAcrossR516From(StateMachineEventDataItem_c target)
{
  if (target != null) {
    target.unrelateAcrossR516From(this, true) ;
  }
}

public void unrelateAcrossR516From(StateMachineEventDataItem_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR516From(this, notifyChanges) ;
  }
}

public void clearBackPointerR516To(StateMachineEventDataItem_c target)
{
  synchronized (backPointer_CanAsynchronouslyCommunicateViaStateMachineEventDataItemCanAsynchronouslyCommunicateVia_R516) {
	    backPointer_CanAsynchronouslyCommunicateViaStateMachineEventDataItemCanAsynchronouslyCommunicateVia_R516.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR516(StateMachineEventDataItem_c [] targets)
{
    return getOneSM_SMOnR516(targets, null);
}

public static StateMachine_c getOneSM_SMOnR516(StateMachineEventDataItem_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR516(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR516(StateMachineEventDataItem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR516(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR516(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR516(StateMachineEventDataItem_c target)
{
	return getOneSM_SMOnR516(target, true);
}
public static StateMachine_c getOneSM_SMOnR516(StateMachineEventDataItem_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsCarriedOnEventsIntoStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR516(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsCarriedOnEventsIntoStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsCarriedOnEventsIntoStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c [] targets)
{
  return getManySM_SMsOnR516(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StateMachineEventDataItem_c [] targetArray = new StateMachineEventDataItem_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR516(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR516(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c target)
{
    return getManySM_SMsOnR516(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR516(StateMachineEventDataItem_c target, boolean loadComponent)
{
    return getManySM_SMsOnR516(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StateMachineEvent_c> backPointer_CanBeCommunicatedToViaStateMachineEventCanBeCommunicatedToVia_R502 = new ArrayList<StateMachineEvent_c>();

public void setStateMachineEventOrderInChildListR502(StateMachineEvent_c target, int index) {
	unrelateAcrossR502From(target);
	StateMachineEvent_c[] elements = StateMachineEvent_c.getManySM_EVTsOnR502(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR502From((StateMachineEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR502To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR502To((StateMachineEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR502To(StateMachineEvent_c target)
{
  if (target != null) {
    target.relateAcrossR502To(this, true) ;
  }
}

public void relateAcrossR502To(StateMachineEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR502To(this, notifyChanges) ;
  }
}

public void setBackPointerR502To(StateMachineEvent_c target)
{
  	synchronized (backPointer_CanBeCommunicatedToViaStateMachineEventCanBeCommunicatedToVia_R502) {
		backPointer_CanBeCommunicatedToViaStateMachineEventCanBeCommunicatedToVia_R502.add(target);
	}
}

public void unrelateAcrossR502From(StateMachineEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR502From(this, true) ;
  }
}

public void unrelateAcrossR502From(StateMachineEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR502From(this, notifyChanges) ;
  }
}

public void clearBackPointerR502To(StateMachineEvent_c target)
{
  synchronized (backPointer_CanBeCommunicatedToViaStateMachineEventCanBeCommunicatedToVia_R502) {
	    backPointer_CanBeCommunicatedToViaStateMachineEventCanBeCommunicatedToVia_R502.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR502(StateMachineEvent_c [] targets)
{
    return getOneSM_SMOnR502(targets, null);
}

public static StateMachine_c getOneSM_SMOnR502(StateMachineEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR502(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR502(StateMachineEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR502(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR502(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR502(StateMachineEvent_c target)
{
	return getOneSM_SMOnR502(target, true);
}
public static StateMachine_c getOneSM_SMOnR502(StateMachineEvent_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR502(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].StateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c [] targets)
{
  return getManySM_SMsOnR502(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StateMachineEvent_c [] targetArray = new StateMachineEvent_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR502(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR502(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c target)
{
    return getManySM_SMsOnR502(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR502(StateMachineEvent_c target, boolean loadComponent)
{
    return getManySM_SMsOnR502(target, null, loadComponent);
}


    
  
  
// referred to navigation

MealyStateMachine_c backPointer_IsSubtypeMealyStateMachineIsSubtype_R510;

public void setMealyStateMachineOrderInChildListR510(MealyStateMachine_c target, int index) {
	unrelateAcrossR510From(target);
	MealyStateMachine_c[] elements = MealyStateMachine_c.getManySM_MEALYsOnR510(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR510From((MealyStateMachine_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR510To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR510To((MealyStateMachine_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR510To(MealyStateMachine_c target)
{
  if (target != null) {
    target.relateAcrossR510To(this, true) ;
  }
}

public void relateAcrossR510To(MealyStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR510To(this, notifyChanges) ;
  }
}

public void setBackPointerR510To(MealyStateMachine_c target)
{
    backPointer_IsSubtypeMealyStateMachineIsSubtype_R510 = target;
}

public void unrelateAcrossR510From(MealyStateMachine_c target)
{
  if (target != null) {
    target.unrelateAcrossR510From(this, true) ;
  }
}

public void unrelateAcrossR510From(MealyStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR510From(this, notifyChanges) ;
  }
}

public void clearBackPointerR510To(MealyStateMachine_c target)
{
	if (target == backPointer_IsSubtypeMealyStateMachineIsSubtype_R510) {
		backPointer_IsSubtypeMealyStateMachineIsSubtype_R510 = null;
	}
}

public static StateMachine_c getOneSM_SMOnR510(MealyStateMachine_c [] targets)
{
    return getOneSM_SMOnR510(targets, null);
}

public static StateMachine_c getOneSM_SMOnR510(MealyStateMachine_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR510(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR510(MealyStateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR510(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR510(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR510(MealyStateMachine_c target)
{
	return getOneSM_SMOnR510(target, true);
}
public static StateMachine_c getOneSM_SMOnR510(MealyStateMachine_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR510(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsSupertypeStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c [] targets)
{
  return getManySM_SMsOnR510(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MealyStateMachine_c [] targetArray = new MealyStateMachine_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR510(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR510(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c target)
{
    return getManySM_SMsOnR510(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MealyStateMachine_c target, boolean loadComponent)
{
    return getManySM_SMsOnR510(target, null, loadComponent);
}

  
  
  
// referred to navigation

MooreStateMachine_c backPointer_IsSubtypeMooreStateMachineIsSubtype_R510;

public void setMooreStateMachineOrderInChildListR510(MooreStateMachine_c target, int index) {
	unrelateAcrossR510From(target);
	MooreStateMachine_c[] elements = MooreStateMachine_c.getManySM_MOOREsOnR510(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR510From((MooreStateMachine_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR510To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR510To((MooreStateMachine_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR510To(MooreStateMachine_c target)
{
  if (target != null) {
    target.relateAcrossR510To(this, true) ;
  }
}

public void relateAcrossR510To(MooreStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR510To(this, notifyChanges) ;
  }
}

public void setBackPointerR510To(MooreStateMachine_c target)
{
    backPointer_IsSubtypeMooreStateMachineIsSubtype_R510 = target;
}

public void unrelateAcrossR510From(MooreStateMachine_c target)
{
  if (target != null) {
    target.unrelateAcrossR510From(this, true) ;
  }
}

public void unrelateAcrossR510From(MooreStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR510From(this, notifyChanges) ;
  }
}

public void clearBackPointerR510To(MooreStateMachine_c target)
{
	if (target == backPointer_IsSubtypeMooreStateMachineIsSubtype_R510) {
		backPointer_IsSubtypeMooreStateMachineIsSubtype_R510 = null;
	}
}

public static StateMachine_c getOneSM_SMOnR510(MooreStateMachine_c [] targets)
{
    return getOneSM_SMOnR510(targets, null);
}

public static StateMachine_c getOneSM_SMOnR510(MooreStateMachine_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR510(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR510(MooreStateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR510(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR510(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR510(MooreStateMachine_c target)
{
	return getOneSM_SMOnR510(target, true);
}
public static StateMachine_c getOneSM_SMOnR510(MooreStateMachine_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR510(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsSupertypeStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c [] targets)
{
  return getManySM_SMsOnR510(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MooreStateMachine_c [] targetArray = new MooreStateMachine_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR510(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR510(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c target)
{
    return getManySM_SMsOnR510(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR510(MooreStateMachine_c target, boolean loadComponent)
{
    return getManySM_SMsOnR510(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Action_c> backPointer_ContainsActionContains_R515 = new ArrayList<Action_c>();

public void setActionOrderInChildListR515(Action_c target, int index) {
	unrelateAcrossR515From(target);
	Action_c[] elements = Action_c.getManySM_ACTsOnR515(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR515From((Action_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR515To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR515To((Action_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR515To(Action_c target)
{
  if (target != null) {
    target.relateAcrossR515To(this, true) ;
  }
}

public void relateAcrossR515To(Action_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR515To(this, notifyChanges) ;
  }
}

public void setBackPointerR515To(Action_c target)
{
  	synchronized (backPointer_ContainsActionContains_R515) {
		backPointer_ContainsActionContains_R515.add(target);
	}
}

public void unrelateAcrossR515From(Action_c target)
{
  if (target != null) {
    target.unrelateAcrossR515From(this, true) ;
  }
}

public void unrelateAcrossR515From(Action_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR515From(this, notifyChanges) ;
  }
}

public void clearBackPointerR515To(Action_c target)
{
  synchronized (backPointer_ContainsActionContains_R515) {
	    backPointer_ContainsActionContains_R515.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR515(Action_c [] targets)
{
    return getOneSM_SMOnR515(targets, null);
}

public static StateMachine_c getOneSM_SMOnR515(Action_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR515(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR515(Action_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR515(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR515(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR515(Action_c target)
{
	return getOneSM_SMOnR515(target, true);
}
public static StateMachine_c getOneSM_SMOnR515(Action_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR515(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].StateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c [] targets)
{
  return getManySM_SMsOnR515(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Action_c [] targetArray = new Action_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR515(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR515(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c target)
{
    return getManySM_SMsOnR515(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR515(Action_c target, boolean loadComponent)
{
    return getManySM_SMsOnR515(target, null, loadComponent);
}


    
  
  
// referred to navigation

InstanceStateMachine_c backPointer_IsSubtypeInstanceStateMachineIsSubtype_R517;

public void setInstanceStateMachineOrderInChildListR517(InstanceStateMachine_c target, int index) {
	unrelateAcrossR517From(target);
	InstanceStateMachine_c[] elements = InstanceStateMachine_c.getManySM_ISMsOnR517(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR517From((InstanceStateMachine_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR517To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR517To((InstanceStateMachine_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR517To(InstanceStateMachine_c target)
{
  if (target != null) {
    target.relateAcrossR517To(this, true) ;
  }
}

public void relateAcrossR517To(InstanceStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR517To(this, notifyChanges) ;
  }
}

public void setBackPointerR517To(InstanceStateMachine_c target)
{
    backPointer_IsSubtypeInstanceStateMachineIsSubtype_R517 = target;
}

public void unrelateAcrossR517From(InstanceStateMachine_c target)
{
  if (target != null) {
    target.unrelateAcrossR517From(this, true) ;
  }
}

public void unrelateAcrossR517From(InstanceStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR517From(this, notifyChanges) ;
  }
}

public void clearBackPointerR517To(InstanceStateMachine_c target)
{
	if (target == backPointer_IsSubtypeInstanceStateMachineIsSubtype_R517) {
		backPointer_IsSubtypeInstanceStateMachineIsSubtype_R517 = null;
	}
}

public static StateMachine_c getOneSM_SMOnR517(InstanceStateMachine_c [] targets)
{
    return getOneSM_SMOnR517(targets, null);
}

public static StateMachine_c getOneSM_SMOnR517(InstanceStateMachine_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR517(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR517(InstanceStateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR517(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR517(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR517(InstanceStateMachine_c target)
{
	return getOneSM_SMOnR517(target, true);
}
public static StateMachine_c getOneSM_SMOnR517(InstanceStateMachine_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR517(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsSupertypeStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c [] targets)
{
  return getManySM_SMsOnR517(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceStateMachine_c [] targetArray = new InstanceStateMachine_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR517(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR517(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c target)
{
    return getManySM_SMsOnR517(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(InstanceStateMachine_c target, boolean loadComponent)
{
    return getManySM_SMsOnR517(target, null, loadComponent);
}

  
  
  
// referred to navigation

ClassStateMachine_c backPointer_IsSubtypeClassStateMachineIsSubtype_R517;

public void setClassStateMachineOrderInChildListR517(ClassStateMachine_c target, int index) {
	unrelateAcrossR517From(target);
	ClassStateMachine_c[] elements = ClassStateMachine_c.getManySM_ASMsOnR517(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR517From((ClassStateMachine_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR517To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR517To((ClassStateMachine_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR517To(ClassStateMachine_c target)
{
  if (target != null) {
    target.relateAcrossR517To(this, true) ;
  }
}

public void relateAcrossR517To(ClassStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR517To(this, notifyChanges) ;
  }
}

public void setBackPointerR517To(ClassStateMachine_c target)
{
    backPointer_IsSubtypeClassStateMachineIsSubtype_R517 = target;
}

public void unrelateAcrossR517From(ClassStateMachine_c target)
{
  if (target != null) {
    target.unrelateAcrossR517From(this, true) ;
  }
}

public void unrelateAcrossR517From(ClassStateMachine_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR517From(this, notifyChanges) ;
  }
}

public void clearBackPointerR517To(ClassStateMachine_c target)
{
	if (target == backPointer_IsSubtypeClassStateMachineIsSubtype_R517) {
		backPointer_IsSubtypeClassStateMachineIsSubtype_R517 = null;
	}
}

public static StateMachine_c getOneSM_SMOnR517(ClassStateMachine_c [] targets)
{
    return getOneSM_SMOnR517(targets, null);
}

public static StateMachine_c getOneSM_SMOnR517(ClassStateMachine_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR517(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR517(ClassStateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR517(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR517(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR517(ClassStateMachine_c target)
{
	return getOneSM_SMOnR517(target, true);
}
public static StateMachine_c getOneSM_SMOnR517(ClassStateMachine_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsSupertypeStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR517(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsSupertypeStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c [] targets)
{
  return getManySM_SMsOnR517(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ClassStateMachine_c [] targetArray = new ClassStateMachine_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR517(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR517(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c target)
{
    return getManySM_SMsOnR517(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR517(ClassStateMachine_c target, boolean loadComponent)
{
    return getManySM_SMsOnR517(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<EventSupplementalData_c> backPointer_ContainsEventSupplementalDataContains_R523 = new ArrayList<EventSupplementalData_c>();

public void setEventSupplementalDataOrderInChildListR523(EventSupplementalData_c target, int index) {
	unrelateAcrossR523From(target);
	EventSupplementalData_c[] elements = EventSupplementalData_c.getManySM_SUPDTsOnR523(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR523From((EventSupplementalData_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR523To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR523To((EventSupplementalData_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR523To(EventSupplementalData_c target)
{
  if (target != null) {
    target.relateAcrossR523To(this, true) ;
  }
}

public void relateAcrossR523To(EventSupplementalData_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR523To(this, notifyChanges) ;
  }
}

public void setBackPointerR523To(EventSupplementalData_c target)
{
  	synchronized (backPointer_ContainsEventSupplementalDataContains_R523) {
		backPointer_ContainsEventSupplementalDataContains_R523.add(target);
	}
}

public void unrelateAcrossR523From(EventSupplementalData_c target)
{
  if (target != null) {
    target.unrelateAcrossR523From(this, true) ;
  }
}

public void unrelateAcrossR523From(EventSupplementalData_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR523From(this, notifyChanges) ;
  }
}

public void clearBackPointerR523To(EventSupplementalData_c target)
{
  synchronized (backPointer_ContainsEventSupplementalDataContains_R523) {
	    backPointer_ContainsEventSupplementalDataContains_R523.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR523(EventSupplementalData_c [] targets)
{
    return getOneSM_SMOnR523(targets, null);
}

public static StateMachine_c getOneSM_SMOnR523(EventSupplementalData_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR523(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR523(EventSupplementalData_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR523(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR523(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR523(EventSupplementalData_c target)
{
	return getOneSM_SMOnR523(target, true);
}
public static StateMachine_c getOneSM_SMOnR523(EventSupplementalData_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsAssignedToStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR523(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsAssignedToStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].IsAssignedToStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c [] targets)
{
  return getManySM_SMsOnR523(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    EventSupplementalData_c [] targetArray = new EventSupplementalData_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR523(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR523(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c target)
{
    return getManySM_SMsOnR523(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR523(EventSupplementalData_c target, boolean loadComponent)
{
    return getManySM_SMsOnR523(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<EeToSmCommPath_c> backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403 = new ArrayList<EeToSmCommPath_c>();

public void setEeToSmCommPathOrderInChildListR403(EeToSmCommPath_c target, int index) {
	unrelateAcrossR403From(target);
	EeToSmCommPath_c[] elements = EeToSmCommPath_c.getManyCA_EESMCsOnR403(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR403From((EeToSmCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR403To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR403To((EeToSmCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR403To(EeToSmCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR403To(this, true) ;
  }
}

public void relateAcrossR403To(EeToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR403To(this, notifyChanges) ;
  }
}

public void setBackPointerR403To(EeToSmCommPath_c target)
{
  	synchronized (backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403) {
		backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.add(target);
	}
}

public void unrelateAcrossR403From(EeToSmCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR403From(this, true) ;
  }
}

public void unrelateAcrossR403From(EeToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR403From(this, notifyChanges) ;
  }
}

public void clearBackPointerR403To(EeToSmCommPath_c target)
{
  synchronized (backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403) {
	    backPointer_HasReceivedEventCommunicationRepresentedByEeToSmCommPathHasReceivedEventCommunicationRepresentedBy_R403.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR403(EeToSmCommPath_c [] targets)
{
    return getOneSM_SMOnR403(targets, null);
}

public static StateMachine_c getOneSM_SMOnR403(EeToSmCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR403(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR403(EeToSmCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR403(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR403(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR403(EeToSmCommPath_c target)
{
	return getOneSM_SMOnR403(target, true);
}
public static StateMachine_c getOneSM_SMOnR403(EeToSmCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ShowsEventCommunicationToStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR403(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ShowsEventCommunicationToStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].ShowsEventCommunicationToStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c [] targets)
{
  return getManySM_SMsOnR403(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    EeToSmCommPath_c [] targetArray = new EeToSmCommPath_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR403(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR403(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c target)
{
    return getManySM_SMsOnR403(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR403(EeToSmCommPath_c target, boolean loadComponent)
{
    return getManySM_SMsOnR403(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SmToEeCommPath_c> backPointer_OriginatesSmToEeCommPathOriginates_R410 = new ArrayList<SmToEeCommPath_c>();

public void setSmToEeCommPathOrderInChildListR410(SmToEeCommPath_c target, int index) {
	unrelateAcrossR410From(target);
	SmToEeCommPath_c[] elements = SmToEeCommPath_c.getManyCA_SMEECsOnR410(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR410From((SmToEeCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR410To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR410To((SmToEeCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR410To(SmToEeCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR410To(this, true) ;
  }
}

public void relateAcrossR410To(SmToEeCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR410To(this, notifyChanges) ;
  }
}

public void setBackPointerR410To(SmToEeCommPath_c target)
{
  	synchronized (backPointer_OriginatesSmToEeCommPathOriginates_R410) {
		backPointer_OriginatesSmToEeCommPathOriginates_R410.add(target);
	}
}

public void unrelateAcrossR410From(SmToEeCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR410From(this, true) ;
  }
}

public void unrelateAcrossR410From(SmToEeCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR410From(this, notifyChanges) ;
  }
}

public void clearBackPointerR410To(SmToEeCommPath_c target)
{
  synchronized (backPointer_OriginatesSmToEeCommPathOriginates_R410) {
	    backPointer_OriginatesSmToEeCommPathOriginates_R410.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR410(SmToEeCommPath_c [] targets)
{
    return getOneSM_SMOnR410(targets, null);
}

public static StateMachine_c getOneSM_SMOnR410(SmToEeCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR410(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR410(SmToEeCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR410(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR410(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR410(SmToEeCommPath_c target)
{
	return getOneSM_SMOnR410(target, true);
}
public static StateMachine_c getOneSM_SMOnR410(SmToEeCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginatesFromStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR410(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginatesFromStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].OriginatesFromStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c [] targets)
{
  return getManySM_SMsOnR410(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToEeCommPath_c [] targetArray = new SmToEeCommPath_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR410(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR410(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c target)
{
    return getManySM_SMsOnR410(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR410(SmToEeCommPath_c target, boolean loadComponent)
{
    return getManySM_SMsOnR410(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SmToSmCommPath_c> backPointer_OriginatesSmToSmCommPathOriginates_R406 = new ArrayList<SmToSmCommPath_c>();

public void setSmToSmCommPathOrderInChildListR406(SmToSmCommPath_c target, int index) {
	unrelateAcrossR406From(target);
	SmToSmCommPath_c[] elements = SmToSmCommPath_c.getManyCA_SMSMCsOnR406(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR406From((SmToSmCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR406To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR406To((SmToSmCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR406To(SmToSmCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR406To(this, true) ;
  }
}

public void relateAcrossR406To(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR406To(this, notifyChanges) ;
  }
}

public void setBackPointerR406To(SmToSmCommPath_c target)
{
  	synchronized (backPointer_OriginatesSmToSmCommPathOriginates_R406) {
		backPointer_OriginatesSmToSmCommPathOriginates_R406.add(target);
	}
}

public void unrelateAcrossR406From(SmToSmCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR406From(this, true) ;
  }
}

public void unrelateAcrossR406From(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR406From(this, notifyChanges) ;
  }
}

public void clearBackPointerR406To(SmToSmCommPath_c target)
{
  synchronized (backPointer_OriginatesSmToSmCommPathOriginates_R406) {
	    backPointer_OriginatesSmToSmCommPathOriginates_R406.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR406(SmToSmCommPath_c [] targets)
{
    return getOneSM_SMOnR406(targets, null);
}

public static StateMachine_c getOneSM_SMOnR406(SmToSmCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR406(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR406(SmToSmCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR406(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR406(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR406(SmToSmCommPath_c target)
{
	return getOneSM_SMOnR406(target, true);
}
public static StateMachine_c getOneSM_SMOnR406(SmToSmCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginatesFromStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR406(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginatesFromStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].OriginatesFromStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c [] targets)
{
  return getManySM_SMsOnR406(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToSmCommPath_c [] targetArray = new SmToSmCommPath_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR406(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR406(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c target)
{
    return getManySM_SMsOnR406(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR406(SmToSmCommPath_c target, boolean loadComponent)
{
    return getManySM_SMsOnR406(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SmToSmCommPath_c> backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407 = new ArrayList<SmToSmCommPath_c>();

public void setSmToSmCommPathOrderInChildListR407(SmToSmCommPath_c target, int index) {
	unrelateAcrossR407From(target);
	SmToSmCommPath_c[] elements = SmToSmCommPath_c.getManyCA_SMSMCsOnR407(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR407From((SmToSmCommPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR407To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR407To((SmToSmCommPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR407To(SmToSmCommPath_c target)
{
  if (target != null) {
    target.relateAcrossR407To(this, true) ;
  }
}

public void relateAcrossR407To(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR407To(this, notifyChanges) ;
  }
}

public void setBackPointerR407To(SmToSmCommPath_c target)
{
  	synchronized (backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407) {
		backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.add(target);
	}
}

public void unrelateAcrossR407From(SmToSmCommPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR407From(this, true) ;
  }
}

public void unrelateAcrossR407From(SmToSmCommPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR407From(this, notifyChanges) ;
  }
}

public void clearBackPointerR407To(SmToSmCommPath_c target)
{
  synchronized (backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407) {
	    backPointer_RepresentsTheDestinationSmForSmToSmCommPathRepresentsTheDestinationSmFor_R407.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR407(SmToSmCommPath_c [] targets)
{
    return getOneSM_SMOnR407(targets, null);
}

public static StateMachine_c getOneSM_SMOnR407(SmToSmCommPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR407(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR407(SmToSmCommPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR407(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR407(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR407(SmToSmCommPath_c target)
{
	return getOneSM_SMOnR407(target, true);
}
public static StateMachine_c getOneSM_SMOnR407(SmToSmCommPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ShowsEventCommunicationToStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR407(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ShowsEventCommunicationToStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].ShowsEventCommunicationToStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c [] targets)
{
  return getManySM_SMsOnR407(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SmToSmCommPath_c [] targetArray = new SmToSmCommPath_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR407(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR407(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c target)
{
    return getManySM_SMsOnR407(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR407(SmToSmCommPath_c target, boolean loadComponent)
{
    return getManySM_SMsOnR407(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<AccessPath_c> backPointer_OriginatesAccessPathOriginates_R416 = new ArrayList<AccessPath_c>();

public void setAccessPathOrderInChildListR416(AccessPath_c target, int index) {
	unrelateAcrossR416From(target);
	AccessPath_c[] elements = AccessPath_c.getManyCA_ACCsOnR416(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR416From((AccessPath_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR416To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR416To((AccessPath_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR416To(AccessPath_c target)
{
  if (target != null) {
    target.relateAcrossR416To(this, true) ;
  }
}

public void relateAcrossR416To(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR416To(this, notifyChanges) ;
  }
}

public void setBackPointerR416To(AccessPath_c target)
{
  	synchronized (backPointer_OriginatesAccessPathOriginates_R416) {
		backPointer_OriginatesAccessPathOriginates_R416.add(target);
	}
}

public void unrelateAcrossR416From(AccessPath_c target)
{
  if (target != null) {
    target.unrelateAcrossR416From(this, true) ;
  }
}

public void unrelateAcrossR416From(AccessPath_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR416From(this, notifyChanges) ;
  }
}

public void clearBackPointerR416To(AccessPath_c target)
{
  synchronized (backPointer_OriginatesAccessPathOriginates_R416) {
	    backPointer_OriginatesAccessPathOriginates_R416.remove(target);
	}
}

public static StateMachine_c getOneSM_SMOnR416(AccessPath_c [] targets)
{
    return getOneSM_SMOnR416(targets, null);
}

public static StateMachine_c getOneSM_SMOnR416(AccessPath_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_SMOnR416(targets, test, true);
}

public static StateMachine_c getOneSM_SMOnR416(AccessPath_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachine_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachine_c candidate_val = getOneSM_SMOnR416(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_SMOnR416(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachine_c getOneSM_SMOnR416(AccessPath_c target)
{
	return getOneSM_SMOnR416(target, true);
}
public static StateMachine_c getOneSM_SMOnR416(AccessPath_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginatesFromStateMachine ;
  } else {
    return null;
  }
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_SMsOnR416(targets, test, true);
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachine_c[0];
  
  
  LinkedHashSet<StateMachine_c> elementsSet = new LinkedHashSet<StateMachine_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginatesFromStateMachine == null)
	  targets[i].loadProxy();
    StateMachine_c associate = targets[i].OriginatesFromStateMachine;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachine_c[] result = new StateMachine_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c [] targets)
{
  return getManySM_SMsOnR416(targets, null);
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AccessPath_c [] targetArray = new AccessPath_c[1];
    targetArray[0] = target;
    return getManySM_SMsOnR416(targetArray, test, loadComponent);
  } else {
    StateMachine_c [] result = new StateMachine_c [0] ;
    return result ;
  }
  
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c target,
    ClassQueryInterface_c test)
{
    return getManySM_SMsOnR416(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c target)
{
    return getManySM_SMsOnR416(target, null, true);
}

public static StateMachine_c [] getManySM_SMsOnR416(AccessPath_c target, boolean loadComponent)
{
    return getManySM_SMsOnR416(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
	}
  public void batchUnrelate(boolean notifyChanges)
  {
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	    
      // class has no referential attributes
  
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(StateMachine_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static StateMachine_c StateMachineInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		StateMachine_c result=findStateMachineInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,StateMachine_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findStateMachineInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static StateMachine_c findStateMachineInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(StateMachine_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				StateMachine_c x = (StateMachine_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static StateMachine_c StateMachineInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return StateMachineInstance(modelRoot,test,true);
  }
  
  public static StateMachine_c StateMachineInstance(ModelRoot modelRoot)
  {
	 return StateMachineInstance(modelRoot,null,true);
  }

  public static StateMachine_c [] StateMachineInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, StateMachine_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(StateMachine_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					StateMachine_c x = (StateMachine_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				StateMachine_c[] ret_set = new StateMachine_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new StateMachine_c[0];
			}		
		} 
  }
  public static StateMachine_c [] StateMachineInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  StateMachineInstances(modelRoot,test,true);
  }
  public static StateMachine_c [] StateMachineInstances(ModelRoot modelRoot)
  {
	return StateMachineInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the State Machine.dispose call: ";
	Transition_c testR505Inst = Transition_c.getOneSM_TXNOnR505(this, false);

	if ( testR505Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "505 ";	
	}
	StateMachineState_c testR501Inst = StateMachineState_c.getOneSM_STATEOnR501(this, false);

	if ( testR501Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "501 ";	
	}
	StateMachineEventDataItem_c testR516Inst = StateMachineEventDataItem_c.getOneSM_EVTDIOnR516(this, false);

	if ( testR516Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "516 ";	
	}
	StateMachineEvent_c testR502Inst = StateMachineEvent_c.getOneSM_EVTOnR502(this, false);

	if ( testR502Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "502 ";	
	}
	MealyStateMachine_c testR510Inst1 = MealyStateMachine_c.getOneSM_MEALYOnR510(this, false);

	if ( testR510Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "510 ";
	}
	MooreStateMachine_c testR510Inst2 = MooreStateMachine_c.getOneSM_MOOREOnR510(this, false);

	if ( testR510Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "510 ";
	}
	Action_c testR515Inst = Action_c.getOneSM_ACTOnR515(this, false);

	if ( testR515Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "515 ";	
	}
	InstanceStateMachine_c testR517Inst1 = InstanceStateMachine_c.getOneSM_ISMOnR517(this, false);

	if ( testR517Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "517 ";
	}
	ClassStateMachine_c testR517Inst2 = ClassStateMachine_c.getOneSM_ASMOnR517(this, false);

	if ( testR517Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "517 ";
	}
	EventSupplementalData_c testR523Inst = EventSupplementalData_c.getOneSM_SUPDTOnR523(this, false);

	if ( testR523Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "523 ";	
	}
	EeToSmCommPath_c testR403Inst = EeToSmCommPath_c.getOneCA_EESMCOnR403(this, false);

	if ( testR403Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "403 ";	
	}
	SmToEeCommPath_c testR410Inst = SmToEeCommPath_c.getOneCA_SMEECOnR410(this, false);

	if ( testR410Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "410 ";	
	}
	SmToSmCommPath_c testR406Inst = SmToSmCommPath_c.getOneCA_SMSMCOnR406(this, false);

	if ( testR406Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "406 ";	
	}
	SmToSmCommPath_c testR407Inst = SmToSmCommPath_c.getOneCA_SMSMCOnR407(this, false);

	if ( testR407Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "407 ";	
	}
	AccessPath_c testR416Inst = AccessPath_c.getOneCA_ACCOnR416(this, false);

	if ( testR416Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "416 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "State Machine", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("sm_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getSm_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getSm_idLongBased()
  {
    if(m_sm_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_sm_id)){
    	return 0xfffffff & m_sm_id.getLeastSignificantBits();
    }
    return m_sm_idLongBased ;
  }
  public java.util.UUID getSm_id()
  {
    return m_sm_id ;
  }


  public void setSm_id(java.util.UUID newValue)
  {
   m_sm_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getConfig_id()
  {
    return m_config_id ;
  }


  public void setConfig_id(int newValue)
  {
    if(m_config_id == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Config_id", new Integer(m_config_id), new Integer(newValue),true);

   m_config_id = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "State Machine", //$NON-NLS-1$
	  " Operation entered: State Machine::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     StateMachine_c [] objs = StateMachine_c.StateMachineInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "State Machine", //$NON-NLS-1$
	  " Operation entered: State Machine::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class StateMachine_c_test38958_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test38958_c( java.util.UUID            p38959 ) {
	  m_p38959 = p38959;
	  }
	  private java.util.UUID             m_p38959; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38959));
	      return retval;
	  }
    }

    StateMachine_c [] objs38957 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test38958_c(getSm_id())) ;

    if ( (  (objs38957.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine", //$NON-NLS-1$
           "Consistency: Object: State Machine: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38957.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38957.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38957.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine", //$NON-NLS-1$
           "Consistency: Object: State Machine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38957.length )  + " SM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38957.length )  + " SM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // State Machine is a participating class in association: rel.Numb = 505
             // Object: Transition
          // State Machine is a participating class in association: rel.Numb = 501
             // Object: State Machine State
          // State Machine is a participating class in association: rel.Numb = 516
             // Object: State Machine Event Data Item
          // State Machine is a participating class in association: rel.Numb = 502
             // Object: State Machine Event
          // Supertype: rel.Numb = 510
    int objs38962 = 0;
            // Subtype Object: Mealy State Machine
    class MealyStateMachine_c_test38963_c implements ClassQueryInterface_c
    {
	  MealyStateMachine_c_test38963_c( java.util.UUID            p38964 ) {
	  m_p38964 = p38964;
	  }
	  private java.util.UUID             m_p38964; 
	  public boolean evaluate (Object candidate)
	  {
	      MealyStateMachine_c selected = (MealyStateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38964));
	      return retval;
	  }
    }

    MealyStateMachine_c [] objs38965 = 
    MealyStateMachine_c.MealyStateMachineInstances(modelRoot, new MealyStateMachine_c_test38963_c(getSm_id())) ;
 
    objs38962 = objs38962 + objs38965.length;
            // Subtype Object: Moore State Machine
    class MooreStateMachine_c_test38966_c implements ClassQueryInterface_c
    {
	  MooreStateMachine_c_test38966_c( java.util.UUID            p38967 ) {
	  m_p38967 = p38967;
	  }
	  private java.util.UUID             m_p38967; 
	  public boolean evaluate (Object candidate)
	  {
	      MooreStateMachine_c selected = (MooreStateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38967));
	      return retval;
	  }
    }

    MooreStateMachine_c [] objs38968 = 
    MooreStateMachine_c.MooreStateMachineInstances(modelRoot, new MooreStateMachine_c_test38966_c(getSm_id())) ;
 
    objs38962 = objs38962 + objs38968.length;
    if ( objs38962 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine", //$NON-NLS-1$
           "Consistency: Object: State Machine: Association: 510: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38962 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine: Association: 510: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38962 )  , e); 
      }
      retval = false;

    }

          // State Machine is a participating class in association: rel.Numb = 515
             // Object: Action
          // Supertype: rel.Numb = 517
    int objs38969 = 0;
            // Subtype Object: Instance State Machine
    class InstanceStateMachine_c_test38970_c implements ClassQueryInterface_c
    {
	  InstanceStateMachine_c_test38970_c( java.util.UUID            p38971 ) {
	  m_p38971 = p38971;
	  }
	  private java.util.UUID             m_p38971; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceStateMachine_c selected = (InstanceStateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38971));
	      return retval;
	  }
    }

    InstanceStateMachine_c [] objs38972 = 
    InstanceStateMachine_c.InstanceStateMachineInstances(modelRoot, new InstanceStateMachine_c_test38970_c(getSm_id())) ;
 
    objs38969 = objs38969 + objs38972.length;
            // Subtype Object: Class State Machine
    class ClassStateMachine_c_test38973_c implements ClassQueryInterface_c
    {
	  ClassStateMachine_c_test38973_c( java.util.UUID            p38974 ) {
	  m_p38974 = p38974;
	  }
	  private java.util.UUID             m_p38974; 
	  public boolean evaluate (Object candidate)
	  {
	      ClassStateMachine_c selected = (ClassStateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38974));
	      return retval;
	  }
    }

    ClassStateMachine_c [] objs38975 = 
    ClassStateMachine_c.ClassStateMachineInstances(modelRoot, new ClassStateMachine_c_test38973_c(getSm_id())) ;
 
    objs38969 = objs38969 + objs38975.length;
    if ( objs38969 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine", //$NON-NLS-1$
           "Consistency: Object: State Machine: Association: 517: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38969 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine: Association: 517: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38969 )  , e); 
      }
      retval = false;

    }

          // State Machine is a participating class in association: rel.Numb = 523
             // Object: Event Supplemental Data
          // State Machine is a participating class in association: rel.Numb = 403
             // Object: EE to SM Comm Path
          // State Machine is a participating class in association: rel.Numb = 410
             // Object: SM to EE Comm Path
          // State Machine is a participating class in association: rel.Numb = 406
             // Object: SM to SM Comm Path
          // State Machine is a participating class in association: rel.Numb = 407
             // Object: SM to SM Comm Path
          // State Machine is a participating class in association: rel.Numb = 416
             // Object: Access Path
    return retval;
  }


  // declare transform functions
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR517(this);


if (   (v_ism != null) )
{

return v_ism.Get_name();



}

else
{

ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR517(this);


if (   (v_asm != null) )
{

return v_asm.Get_name();



}

else
{

return "";



}


}


   } // End get_name
  public  void Newstate()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Newstate") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineState_c v_st = new StateMachineState_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_st));


  this.relateAcrossR501To(v_st);


if (v_st != null) {
v_st.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newState
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR517(this);


if ( (  (v_ism != null)) )
{

ModelClass_c v_ismclass = ModelClass_c.getOneO_OBJOnR518(v_ism);


  class Attribute_test37668_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Attribute_c selected = (Attribute_c)candidate;
		return selected.getName().equals("current_state") ;
	}
  }
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR102(v_ismclass, new Attribute_test37668_c());


if ( (  (v_attr != null)) )
{

if (v_attr != null) {
v_attr.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if (v_ism != null) {
v_ism.unrelateAcrossR518From(v_ismclass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR517From(v_ism);


if (v_ism != null) {
// get the location of this element in the instance list
// before deleting
if ( v_ism.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_ism));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR517(this);


if ( (  (v_asm != null)) )
{

ModelClass_c v_asmclass = ModelClass_c.getOneO_OBJOnR519(v_asm);


if (v_asm != null) {
v_asm.unrelateAcrossR519From(v_asmclass);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


this.unrelateAcrossR517From(v_asm);


if (v_asm != null) {
// get the location of this element in the instance list
// before deleting
if ( v_asm.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_asm));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

StateMachineEvent_c [] v_evts = StateMachineEvent_c.getManySM_EVTsOnR502(this);


StateMachineEvent_c  v_evt = null;
for ( int i37188 = 0; i37188 < v_evts.length; i37188++)
{
  v_evt = v_evts[i37188] ;

if (v_evt != null) {
v_evt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

StateMachineEventDataItem_c [] v_evtdis = StateMachineEventDataItem_c.getManySM_EVTDIsOnR516(this);


StateMachineEventDataItem_c  v_evtdi = null;
for ( int i37189 = 0; i37189 < v_evtdis.length; i37189++)
{
  v_evtdi = v_evtdis[i37189] ;

if (v_evtdi != null) {
v_evtdi.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

EventSupplementalData_c [] v_supdts = EventSupplementalData_c.getManySM_SUPDTsOnR523(this);


EventSupplementalData_c  v_supdt = null;
for ( int i37190 = 0; i37190 < v_supdts.length; i37190++)
{
  v_supdt = v_supdts[i37190] ;

if (v_supdt != null) {
v_supdt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

StateMachineState_c [] v_states = StateMachineState_c.getManySM_STATEsOnR501(this);


StateMachineState_c  v_state = null;
for ( int i37191 = 0; i37191 < v_states.length; i37191++)
{
  v_state = v_states[i37191] ;

if (v_state != null) {
v_state.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Transition_c [] v_trans = Transition_c.getManySM_TXNsOnR505(this);


Transition_c  v_tran = null;
for ( int i37192 = 0; i37192 < v_trans.length; i37192++)
{
  v_tran = v_trans[i37192] ;

if (v_tran != null) {
v_tran.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

MooreStateMachine_c v_moore = MooreStateMachine_c.getOneSM_MOOREOnR510(this);


if ( (  (v_moore != null)) )
{

if (v_moore != null) {
v_moore.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

AccessPath_c [] v_aps = AccessPath_c.getManyCA_ACCsOnR416(this);


AccessPath_c  v_ap = null;
for ( int i37193 = 0; i37193 < v_aps.length; i37193++)
{
  v_ap = v_aps[i37193] ;

if (v_ap != null) {
v_ap.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_ecps = CommunicationPath_c.getManyCA_COMMsOnR401(EeToSmCommPath_c.getManyCA_EESMCsOnR403(this));


CommunicationPath_c  v_ecp = null;
for ( int i37194 = 0; i37194 < v_ecps.length; i37194++)
{
  v_ecp = v_ecps[i37194] ;

if (v_ecp != null) {
v_ecp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_scps = CommunicationPath_c.getManyCA_COMMsOnR401(SmToSmCommPath_c.getManyCA_SMSMCsOnR406(this));


CommunicationPath_c  v_scp = null;
for ( int i37195 = 0; i37195 < v_scps.length; i37195++)
{
  v_scp = v_scps[i37195] ;

if (v_scp != null) {
v_scp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_ocps = CommunicationPath_c.getManyCA_COMMsOnR401(SmToSmCommPath_c.getManyCA_SMSMCsOnR407(this));


CommunicationPath_c  v_ocp = null;
for ( int i37196 = 0; i37196 < v_ocps.length; i37196++)
{
  v_ocp = v_ocps[i37196] ;

if (v_ocp != null) {
v_ocp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

CommunicationPath_c [] v_secps = CommunicationPath_c.getManyCA_COMMsOnR401(SmToEeCommPath_c.getManyCA_SMEECsOnR410(this));


CommunicationPath_c  v_secp = null;
for ( int i37197 = 0; i37197 < v_secps.length; i37197++)
{
  v_secp = v_secps[i37197] ;

if (v_secp != null) {
v_secp.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Newevent()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Newevent") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c v_newEvent = new StateMachineEvent_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_newEvent));


  this.relateAcrossR502To(v_newEvent);


if (v_newEvent != null) {
v_newEvent.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newEvent
  public  boolean      Newtransition(final java.util.UUID         p_From,final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Newtransition") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineState_test37669_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return (selected.getSmstt_id().equals(p_From)) ;
	}
  }
StateMachineState_c v_fromState = StateMachineState_c.getOneSM_STATEOnR501(this, new StateMachineState_test37669_c());


  class StateMachineState_test37670_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return (selected.getSmstt_id().equals(p_To)) ;
	}
  }
StateMachineState_c v_toState = StateMachineState_c.getOneSM_STATEOnR501(this, new StateMachineState_test37670_c());


if ( (  (v_fromState != null) &&   (v_toState != null)) )
{

Transition_c v_tr = new Transition_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_tr));


NoEventTransition_c v_net = new NoEventTransition_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_net));


if (v_tr != null) {
  v_tr.relateAcrossR507To(v_net);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_net != null) {
  v_net.relateAcrossR508To(v_fromState);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_tr != null) {
  v_tr.relateAcrossR506To(v_toState);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR505To(v_tr);


if (v_tr != null) {
v_tr.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return true;



}

else
{

return false;



}


   } // End newTransition
  public  boolean      Newcreationtransition(final java.util.UUID         p_From,final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Newcreationtransition") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineState_test37671_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return (selected.getSmstt_id().equals(p_From)) ;
	}
  }
StateMachineState_c v_state = StateMachineState_c.getOneSM_STATEOnR501(this, new StateMachineState_test37671_c());


if ( (  (v_state != null)) )
{

Transition_c v_tr = new Transition_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_tr));


CreationTransition_c v_ct = new CreationTransition_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ct));


if (v_tr != null) {
  v_tr.relateAcrossR507To(v_ct);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_tr != null) {
  v_tr.relateAcrossR506To(v_state);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR505To(v_tr);


if (v_tr != null) {
v_tr.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return true;



}

else
{

return false;



}


   } // End newCreationTransition
  public  boolean      Canassignevent(final java.util.UUID         p_Eventid,final java.util.UUID         p_Eventstatemachineid,final boolean      p_Iscreationtransition)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Canassignevent") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineEvent_test37390_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return selected.getSmevt_id().equals(p_Eventid) && selected.getSm_id().equals(p_Eventstatemachineid) ;
	}
  }
StateMachineEvent_c v_event = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new StateMachineEvent_test37390_c()) ;


if ( (  (v_event != null)) )
{

return v_event.Isassignabletostatemachine(			    
getSm_id()			    
,p_Iscreationtransition);



}

return false;



   } // End canAssignEvent
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getSm_id();



   } // End get_ooa_id
  public  void Pastetransition(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Pastetransition") ; 
               final ModelRoot modelRoot = getModelRoot();
  class Transition_test37391_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Transition_c selected = (Transition_c)candidate;
		return selected.getTrans_id().equals(p_Id) ;
	}
  }
Transition_c v_transition = Transition_c.TransitionInstance(modelRoot, new Transition_test37391_c()) ;


if ( (  (v_transition != null)) )
{

Action_c v_action = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(TransitionActionHome_c.getOneSM_TAHOnR530(v_transition)));


if ( (  (v_action != null)) )
{

StateMachine_c v_prevMachine = StateMachine_c.getOneSM_SMOnR515(v_action);


if ( (  (v_prevMachine != null)) )
{

if (v_action != null) {
v_action.unrelateAcrossR515From(v_prevMachine);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_action != null) {
  v_action.relateAcrossR515To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

StateMachine_c v_existingSM = StateMachine_c.getOneSM_SMOnR505(v_transition);


if ( (  (v_existingSM != null)) )
{

if (v_transition != null) {
v_transition.unrelateAcrossR505From(v_existingSM);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_transition != null) {
  v_transition.relateAcrossR505To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_transition != null) {
v_transition.Updateassignedeventorsignal() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteTransition
  public  void Pastestatemachinestate(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Pastestatemachinestate") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineState_test37392_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return (selected.getSmstt_id().equals(p_Id)) ;
	}
  }
StateMachineState_c v_state = StateMachineState_c.StateMachineStateInstance(modelRoot, new StateMachineState_test37392_c()) ;


if ( (  (v_state != null)) )
{

StateEventMatrixEntry_c [] v_semes = StateEventMatrixEntry_c.getManySM_SEMEsOnR503(v_state);


StateEventMatrixEntry_c  v_seme = null;
for ( int i37198 = 0; i37198 < v_semes.length; i37198++)
{
  v_seme = v_semes[i37198] ;

SemEvent_c v_semEvt = SemEvent_c.getOneSM_SEVTOnR503(v_seme);


if ( (  (v_semEvt == null)) )
{

if (v_seme != null) {
v_seme.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

Action_c v_action = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(MooreActionHome_c.getOneSM_MOAHOnR511(v_state)));


StateMachine_c v_prevMachine = StateMachine_c.getOneSM_SMOnR515(v_action);


if ( (  (v_prevMachine != null)) )
{

if (v_action != null) {
v_action.unrelateAcrossR515From(v_prevMachine);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR517(this);


ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR517(this);


if (v_action != null) {
  v_action.relateAcrossR515To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if ( (  (v_asm != null)) )
{

if (v_state != null) {
  v_state.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_state.Converttoinstance()			    
,v_state.getName()			    
,v_asm.Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else if ( (  (v_ism != null)) )
{

if (v_state != null) {
  v_state.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_state.Converttoinstance()			    
,v_state.getName()			    
,v_ism.Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

MooreActionHome_c v_mah = MooreActionHome_c.getOneSM_MOAHOnR511(v_state);


MooreStateMachine_c v_prevMooreMachine = MooreStateMachine_c.getOneSM_MOOREOnR511(v_mah);


if ( (  (v_prevMooreMachine != null)) )
{

if (v_mah != null) {
v_mah.unrelateAcrossR511From( v_state ) ; v_mah.unrelateAcrossR511From( v_prevMooreMachine ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}

MooreStateMachine_c v_msm = MooreStateMachine_c.getOneSM_MOOREOnR510(this);


if (v_mah != null) {
  v_mah.relateAcrossR511To( v_state ) ;   v_mah.relateAcrossR511To( v_msm ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


StateMachineState_c [] v_existingStates = StateMachineState_c.getManySM_STATEsOnR501(this);


  class StateMachineState_test37672_c implements ClassQueryInterface_c
  {
	StateMachineState_test37672_c( int          p37673 ) {
		m_p37673 = p37673;
	}
	private int          m_p37673;
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return (selected.getNumb() == m_p37673) ;
	}
  }
StateMachineState_c v_sameNumberState = StateMachineState_c.getOneSM_STATEOnR501(this, new StateMachineState_test37672_c(v_state.getNumb()));


if ( (  (v_sameNumberState != null)) )
{

int          v_greatestNumb = 1 ;


StateMachineState_c  v_existingState = null;
for ( int i37199 = 0; i37199 < v_existingStates.length; i37199++)
{
  v_existingState = v_existingStates[i37199] ;

if ( (v_existingState.getNumb() > v_greatestNumb) )
{

v_greatestNumb = v_existingState.getNumb() ;



}


}

if (v_state != null) {
  v_state.setNumb( v_greatestNumb + 1) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

SemEvent_c [] v_event_set = SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(this));


SemEvent_c  v_event = null;
for ( int i37200 = 0; i37200 < v_event_set.length; i37200++)
{
  v_event = v_event_set[i37200] ;

StateEventMatrixEntry_c v_sem = new StateEventMatrixEntry_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sem));


CantHappen_c v_ch = new CantHappen_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ch));


if (v_sem != null) {
  v_sem.relateAcrossR503To( v_state ) ;   v_sem.relateAcrossR503To( v_event ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_ch != null) {
  v_ch.relateAcrossR504To(v_sem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if (v_state != null) {
  v_state.relateAcrossR501To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End pasteStateMachineState
  public  void Removeincompletenonlocalevents()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Removeincompletenonlocalevents") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c [] v_evts = StateMachineEvent_c.getManySM_EVTsOnR502(this);


StateMachineEvent_c  v_evt = null;
for ( int i37201 = 0; i37201 < v_evts.length; i37201++)
{
  v_evt = v_evts[i37201] ;

NonLocalEvent_c v_nlevt = NonLocalEvent_c.getOneSM_NLEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


if ( (  (v_nlevt != null)) )
{

if (v_nlevt != null) {
v_nlevt.Resolveinheritedevent() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SignalEvent_c v_sigEvt = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


if ( (  (v_sigEvt != null)) )
{

Transition_c [] v_transitions = Transition_c.getManySM_TXNsOnR507(NewStateTransition_c.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(SemEvent_c.getManySM_SEVTsOnR525(v_evt))));


Transition_c  v_transition = null;
for ( int i37202 = 0; i37202 < v_transitions.length; i37202++)
{
  v_transition = v_transitions[i37202] ;

if (v_transition != null) {
v_transition.Updateassignedsignal() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


   } // End removeIncompleteNonLocalEvents
  public  java.util.UUID         Findmatchingevent(final java.util.UUID         p_Id,final boolean      p_Iscreation,final java.util.UUID         p_Machineid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Findmatchingevent") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_foundMatch = false ;


StateMachineEvent_c v_existingEvt = StateMachineEvent_c.getOneSM_EVTOnR502(this);


StateMachineEvent_c v_evt = (StateMachineEvent_c) modelRoot.getInstanceList(StateMachineEvent_c.class).getGlobal(null, p_Id);


if ( (  (v_evt != null)) )
{

NonLocalEvent_c v_nlevt = NonLocalEvent_c.getOneSM_NLEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


boolean      v_isPoly = false ;


if ( (  (v_nlevt != null)) )
{

v_isPoly = true ;



}

String       v_name = v_evt.getMning() ;


int          v_numb = v_evt.getNumb() ;


StateMachineEvent_c [] v_events = StateMachineEvent_c.getManySM_EVTsOnR502(this);


StateMachineEvent_c  v_existingEvent = null;
for ( int i37203 = 0; i37203 < v_events.length; i37203++)
{
  v_existingEvent = v_events[i37203] ;

if ( (p_Iscreation) )
{

CreationTransition_c [] v_creationTransitionsAssigned = CreationTransition_c.getManySM_CRTXNsOnR509(LocalEvent_c.getManySM_LEVTsOnR526(SemEvent_c.getManySM_SEVTsOnR525(v_events)));


if ( (  !(  (v_events.length) >   (v_creationTransitionsAssigned.length))) )
{

continue;



}

else
{

  class StateMachineEvent_test37674_c implements ClassQueryInterface_c
  {
	StateMachineEvent_test37674_c( String       p37675 ) {
		m_p37675 = p37675;
	}
	private String       m_p37675;
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return selected.getMning().equals(m_p37675) ;
	}
  }
StateMachineEvent_c v_otherEvt = StateMachineEvent_c.getOneSM_EVTOnR502(this, new StateMachineEvent_test37674_c(v_name));


CreationTransition_c v_existingCreationTrans = CreationTransition_c.getOneSM_CRTXNOnR509(LocalEvent_c.getOneSM_LEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_otherEvt)));


if ( (  (v_existingCreationTrans != null)) )
{

continue;



}


}


}

if ( (v_existingEvent.getMning().equals(v_name)) )
{

PolymorphicEvent_c v_poly = PolymorphicEvent_c.getOneSM_PEVTOnR525(v_existingEvent);


if ( (  (v_poly != null)) )
{

v_nlevt = NonLocalEvent_c.getOneSM_NLEVTOnR527(v_poly);


if ( (  (v_nlevt != null)) )
{

StateMachine_c v_evtSM = (StateMachine_c) modelRoot.getInstanceList(StateMachine_c.class).getGlobal(null, p_Machineid);


if ( (v_evtSM == this) )
{

continue;



}


}


}

v_foundMatch = true ;


v_existingEvt = v_existingEvent ;


break;



}


}


}

if ( (v_foundMatch) )
{

return v_existingEvt.getSmevt_id();



}

return Gd_c.Null_unique_id();



   } // End findMatchingEvent
  public  boolean      Canassignsignal(final java.util.UUID         p_Interface_id,final java.util.UUID         p_Signal_id,final java.util.UUID         p_Transition_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Canassignsignal") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ExecutableProperty_test37676_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ExecutableProperty_c selected = (ExecutableProperty_c)candidate;
		return (selected.getId().equals(p_Signal_id)) ;
	}
  }
ExecutableProperty_c v_interfaceSignal = ExecutableProperty_c.getOneC_EPOnR4003(Interface_c.getManyC_IsOnR4012(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(Component_c.getManyC_CsOnR4204(DomainAsComponent_c.getManyCN_DCsOnR4204(Domain_c.getManyS_DOMsOnR1(Subsystem_c.getManyS_SSsOnR2(ModelClass_c.getManyO_OBJsOnR519(ClassStateMachine_c.getManySM_ASMsOnR517(this))))))))), new ExecutableProperty_test37676_c());


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ;


if ( (v_isInGenericPackage) )
{

Component_c v_containingComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, Gd_c.Null_unique_id());


if (   (v_package != null) )
{

java.util.UUID         v_containingComponentId = v_package.Getcontainingcomponentid() ;


v_containingComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_containingComponentId);



}

  class ExecutableProperty_test37677_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ExecutableProperty_c selected = (ExecutableProperty_c)candidate;
		return (selected.getId().equals(p_Signal_id)) ;
	}
  }
v_interfaceSignal = ExecutableProperty_c.getOneC_EPOnR4003(Interface_c.getManyC_IsOnR4012(InterfaceReference_c.getManyC_IRsOnR4016(Port_c.getManyC_POsOnR4010(v_containingComponent))), new ExecutableProperty_test37677_c());



}

  class RequiredExecutableProperty_test37678_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		RequiredExecutableProperty_c selected = (RequiredExecutableProperty_c)candidate;
		return selected.getExecutableproperty_id().equals(p_Signal_id) && selected.getRequirement_id().equals(p_Interface_id) ;
	}
  }
RequiredExecutableProperty_c v_reqEP = RequiredExecutableProperty_c.getOneSPR_REPOnR4500(v_interfaceSignal, new RequiredExecutableProperty_test37678_c());


if (   (v_reqEP != null) )
{

RequiredSignal_c v_reqSig = RequiredSignal_c.getOneSPR_RSOnR4502(v_reqEP);


return v_reqSig.Isavailableforallocationto(			    
p_Transition_id);



}

else
{

  class ProvidedExecutableProperty_test37679_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ProvidedExecutableProperty_c selected = (ProvidedExecutableProperty_c)candidate;
		return selected.getExecutableproperty_id().equals(p_Signal_id) && selected.getProvision_id().equals(p_Interface_id) ;
	}
  }
ProvidedExecutableProperty_c v_provEP = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501(v_interfaceSignal, new ProvidedExecutableProperty_test37679_c());


if (   (v_provEP != null) )
{

ProvidedSignal_c v_provSig = ProvidedSignal_c.getOneSPR_PSOnR4503(v_provEP);


return v_provSig.Isavailableforallocationto(			    
p_Transition_id);



}


}

return false;



   } // End canAssignSignal
  public  boolean      Hasvalidsignals(final java.util.UUID         p_Interface_id,final java.util.UUID         p_Transition_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Hasvalidsignals") ; 
               final ModelRoot modelRoot = getModelRoot();
  class InterfaceReference_test37680_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceReference_c selected = (InterfaceReference_c)candidate;
		return selected.getId().equals(p_Interface_id) ;
	}
  }
InterfaceReference_c v_ifRef = InterfaceReference_c.getOneC_IROnR4016(Port_c.getManyC_POsOnR4010(Component_c.getManyC_CsOnR4204(DomainAsComponent_c.getManyCN_DCsOnR4204(Domain_c.getManyS_DOMsOnR1(Subsystem_c.getManyS_SSsOnR2(ModelClass_c.getManyO_OBJsOnR519(ClassStateMachine_c.getManySM_ASMsOnR517(this))))))), new InterfaceReference_test37680_c());


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ;


if ( (v_isInGenericPackage) )
{

java.util.UUID         v_containingComponentId = v_package.Getcontainingcomponentid() ;


Component_c v_containingComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_containingComponentId);


  class InterfaceReference_test37681_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceReference_c selected = (InterfaceReference_c)candidate;
		return selected.getId().equals(p_Interface_id) ;
	}
  }
v_ifRef = InterfaceReference_c.getOneC_IROnR4016(Port_c.getManyC_POsOnR4010(v_containingComponent), new InterfaceReference_test37681_c());



}

InterfaceSignal_c [] v_signals = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(Interface_c.getManyC_IsOnR4012(v_ifRef)));


InterfaceSignal_c  v_sig = null;
for ( int i37204 = 0; i37204 < v_signals.length; i37204++)
{
  v_sig = v_signals[i37204] ;

if ( Canassignsignal(			    
v_ifRef.getId()			    
,v_sig.getId()			    
,p_Transition_id) )
{

return true;



}


}

return false;



   } // End hasValidSignals
  public  java.util.UUID         Getcontainingcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Getcontainingcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(this));


if ( (  (v_clazz == null)) )
{

v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(this));



}

return v_clazz.Getcontainingcomponentid();



   } // End getContainingComponentId
  public  java.util.UUID         Getcontainerid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Getcontainerid") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(this));


if ( (  (v_clazz == null)) )
{

v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(this));



}

return v_clazz.Getcontainerid();



   } // End getContainerId
  public  void Pastestatemachineevent(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Pastestatemachineevent") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c v_evt = (StateMachineEvent_c) modelRoot.getInstanceList(StateMachineEvent_c.class).getGlobal(null, p_Id);


if ( (  (v_evt != null)) )
{

StateMachine_c v_existingMachine = StateMachine_c.getOneSM_SMOnR502(v_evt);


if ( (  (v_existingMachine != null)) )
{

if (v_existingMachine != null) {
v_existingMachine.unrelateAcrossR502From(v_evt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

  this.relateAcrossR502To(v_evt);


InstanceStateMachine_c v_ism = InstanceStateMachine_c.getOneSM_ISMOnR517(this);


if ( (  (v_ism != null)) )
{

if (v_evt != null) {
  v_evt.setMning( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_evt.Converttoinstance()			    
,v_evt.getMning()			    
,v_ism.Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

else
{

ClassStateMachine_c v_asm = ClassStateMachine_c.getOneSM_ASMOnR517(this);


if (v_evt != null) {
  v_evt.setMning( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_evt.Converttoinstance()			    
,v_evt.getMning()			    
,v_asm.Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}

if (v_evt != null) {
v_evt.Setuniquenumber(			    
false ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


SemEvent_c v_sem = SemEvent_c.getOneSM_SEVTOnR525(v_evt);


if (v_sem != null) {
v_sem.Createdefaultmatrixentries() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


StateMachineEventDataItem_c [] v_items = StateMachineEventDataItem_c.getManySM_EVTDIsOnR532(v_evt);


StateMachineEventDataItem_c  v_item = null;
for ( int i37205 = 0; i37205 < v_items.length; i37205++)
{
  v_item = v_items[i37205] ;

StateMachine_c v_existingSm = StateMachine_c.getOneSM_SMOnR516(v_item);


if ( (  (v_existingSm != null)) )
{

if (v_item != null) {
v_item.unrelateAcrossR516From(v_existingSm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_item != null) {
  v_item.relateAcrossR516To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


   } // End pasteStateMachineEvent
  public  boolean      Cancopystatemachineevent(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Cancopystatemachineevent") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c v_evt = (StateMachineEvent_c) modelRoot.getInstanceList(StateMachineEvent_c.class).getGlobal(null, p_Id);


if ( (  (v_evt != null)) )
{

PolymorphicEvent_c v_poly = PolymorphicEvent_c.getOneSM_PEVTOnR525(v_evt);


if ( (  (v_poly != null)) )
{

return false;



}

NonLocalEvent_c v_nonlocal = NonLocalEvent_c.getOneSM_NLEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


if ( (  (v_nonlocal != null)) )
{

return false;



}


}

else
{

return false;



}

return true;



   } // End canCopyStateMachineEvent
  public  void Removeincompletesignalevents()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Removeincompletesignalevents") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachineEvent_c [] v_evts = StateMachineEvent_c.getManySM_EVTsOnR502(this);


StateMachineEvent_c  v_evt = null;
for ( int i37206 = 0; i37206 < v_evts.length; i37206++)
{
  v_evt = v_evts[i37206] ;

SignalEvent_c v_sigEvt = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


if ( (  (v_sigEvt != null)) )
{

Transition_c [] v_transitions = Transition_c.getManySM_TXNsOnR507(NewStateTransition_c.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(SemEvent_c.getManySM_SEVTsOnR525(v_evt))));


Transition_c  v_transition = null;
for ( int i37207 = 0; i37207 < v_transitions.length; i37207++)
{
  v_transition = v_transitions[i37207] ;

if (v_transition != null) {
v_transition.Updateassignedsignal() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}


   } // End removeIncompleteSignalEvents
  public  String       Getpath()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine", " Operation entered: StateMachine::Getpath") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


ClassStateMachine_c v_classSM = ClassStateMachine_c.getOneSM_ASMOnR517(this);


InstanceStateMachine_c v_instSM = InstanceStateMachine_c.getOneSM_ISMOnR517(this);


if ( (  (v_classSM != null)) )
{

ModelClass_c v_modelClass = ModelClass_c.getOneO_OBJOnR519(v_classSM);


v_result = "::Class Based Satate Machine::" + v_modelClass.Getpath(			    
true			    
,v_modelClass.getName()) ;



}

else if ( (  (v_instSM != null)) )
{

ModelClass_c v_modelClass = ModelClass_c.getOneO_OBJOnR518(v_instSM);


v_result = "::Instance Based Satate Machine::" + v_modelClass.Getpath(			    
true			    
,v_modelClass.getName()) ;



}

return v_result;



   } // End getPath

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end State Machine
