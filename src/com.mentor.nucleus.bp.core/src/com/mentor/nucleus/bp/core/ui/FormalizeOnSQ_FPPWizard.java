package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    FormalizeOnSQ_FPPWizard.java
//
// WARNING: Do not edit this generated file
// Generated by arc/wizard.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * FormalizeOnSQ_FPPWizard class
 */
public class FormalizeOnSQ_FPPWizard extends Wizard {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;

	// the workbench instance
	protected IWorkbench m_workbench;

	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;

	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
	FormalizeOnSQ_FPPWizardPage2 SQ_FPP_FormalizePage2;

	// wizard state
	// constants
	protected static final int INITIAL_WIZARD_STATE = -1;
	protected static final int SQ_FPP_FORMALIZE0_WIZARD_STATE = 0;
	// member
	protected int m_state = INITIAL_WIZARD_STATE;
	// end wizard state

	// cache for contextual selections (public for use by unit tests)
	public FunctionPackageParticipant_c v_fpp = null;

	// cache for the users selections (public for use by unit tests)
	public FunctionPackage_c v_Package = null;

	/**
	 * Constructor for FormalizeOnSQ_FPPWizard.
	 */
	public FormalizeOnSQ_FPPWizard() {
		super();
	}

	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {
		return m_selection;
	}

	public void addPages() {
		SQ_FPP_FormalizePage2 = new FormalizeOnSQ_FPPWizardPage2(
				"FormalizeOnSQ_FPPWizardPage2");
		addPage(SQ_FPP_FormalizePage2);
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection,
			Viewer viewer) {
		this.m_workbench = workbench;
		this.m_selection = selection;
		this.m_viewer = viewer;
		for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
			Object context = iterator.next();
			if (context instanceof FunctionPackageParticipant_c) {
				v_fpp = (FunctionPackageParticipant_c) context;
			}
		}
	}

	public boolean canFinish() {
		boolean pagesComplete = true;
		pagesComplete = pagesComplete && SQ_FPP_FormalizePage2.isPageComplete();
		return pagesComplete;
	}

	public IWizardPage getNextPage(IWizardPage page) {
		List pages = new ArrayList(getPages().length);
		for (int i = 0; i < getPages().length; i++) {
			pages.add(getPages()[i]);
		}
		switch (pages.indexOf(page)) {
			case SQ_FPP_FORMALIZE0_WIZARD_STATE :
				return null;
		}
		return null;
	}

	public IWizardPage getPreviousPage(IWizardPage page) {
		if (m_pagesStack.empty()) {
			return null;
		} else {
			List pages = new ArrayList(getPages().length);
			for (int i = 0; i < getPages().length; i++) {
				pages.add(getPages()[i]);
			}
			m_state = pages.indexOf((IWizardPage) m_pagesStack.peek());
			((PtWizardPage) m_pagesStack.peek()).onPageEntry();
			return (IWizardPage) m_pagesStack.pop();
		}
	}

	public boolean performFinish() {
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_fpp.getModelRoot();
		try {
			transactionGroup = TransactionUtil
					.startTransactionsOnSelectedModelRoots("Function Package Participant Formalize"); //$NON-NLS-1$
			FunctionPackage_c v_fpk = FunctionPackage_c
					.getOneS_FPKOnR932(v_fpp);

			java.util.UUID v_existingId = Gd_c.Null_unique_id();

			if (((v_fpk != null))) {

				v_existingId = v_fpk.getFunpack_id();

			}

			InteractionParticipant_c v_participant = InteractionParticipant_c
					.getOneSQ_POnR930(v_fpp);

			PackageableElement_c v_packageableElem = PackageableElement_c
					.getOnePE_PEOnR8001(v_participant);

			Package_c v_package = Package_c
					.getOneEP_PKGOnR8000(v_packageableElem);

			Component_c v_component = Component_c
					.getOneC_COnR8003(v_packageableElem);

			boolean v_isInGenericPackage = (v_package != null)
					|| (v_component != null);

			Sequence_c v_sequence = Sequence_c.getOneSQ_SOnR929(v_participant);

			Communication_c v_communication = Communication_c
					.getOneCOMM_COMMOnR1126(v_participant);

			String v_domName = "";

			if (((v_sequence != null))) {

				v_domName = v_sequence.Getpath(true);

			}

			else if (((v_communication != null))) {

				v_domName = v_communication.Getpath(true);

			}

			class Domain_test9785_c implements ClassQueryInterface_c {
				Domain_test9785_c(String p9786) {
					m_p9786 = p9786;
				}
				private String m_p9786;
				public boolean evaluate(Object candidate) {
					Domain_c selected = (Domain_c) candidate;
					return (selected.getName().equals(m_p9786));
				}
			}
			Domain_c v_domain = Domain_c.DomainInstance(modelRoot,
					new Domain_test9785_c(v_domName));

			if (((v_domain != null))) {

				if (((v_Package != null))) {

					if (v_fpp != null) {
						v_fpp.Formalize(v_Package.getFunpack_id());
					} else {
						Throwable t = new Throwable();
						t.fillInStackTrace();
						CorePlugin
								.logError(
										"Attempted to call an operation on a null instance.",
										t);
					}

				}

			}

			// catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null)
				TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin
					.logError(
							"Transaction: Function Package Participant Formalize failed", e);//$NON-NLS-1$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null)
			TransactionUtil.endTransactions(transactionGroup);
		if (m_viewer != null) {
			if (m_viewer instanceof StructuredViewer) {
				((StructuredViewer) m_viewer).refresh(v_fpp);
			} else {
				m_viewer.refresh();
			}
		}
		return true;
	}
}
