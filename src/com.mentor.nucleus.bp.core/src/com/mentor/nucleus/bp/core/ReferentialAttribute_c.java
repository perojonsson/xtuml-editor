      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ReferentialAttribute_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_REFERENTIAL_ATTRIBUTE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class ReferentialAttribute_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public ReferentialAttribute_c(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_battr_id,
       java.util.UUID         p_m_bobj_id,
       int          p_m_ref_mode,
       String       p_m_baseattrname)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_battr_id = IdAssigner.preprocessUUID(p_m_battr_id);
       m_ref_mode = p_m_ref_mode;
       m_baseattrname = p_m_baseattrname;
       // default value for m_recorderid
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_bobj_id = IdAssigner.preprocessUUID(p_m_bobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
    Object [] key = {m_attr_id,m_obj_id};
    addInstanceToMap(key);
  }
  static public ReferentialAttribute_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_battr_id,
       java.util.UUID         p_m_bobj_id,
       int          p_m_ref_mode,
       String       p_m_baseattrname, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
      ReferentialAttribute_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_attr_id,p_m_obj_id};
          new_inst = (ReferentialAttribute_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_battr_id = IdAssigner.preprocessUUID(p_m_battr_id);
       new_inst.m_ref_mode = p_m_ref_mode;
       new_inst.m_baseattrname = p_m_baseattrname;
       // default value for m_recorderid
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_bobj_id = IdAssigner.preprocessUUID(p_m_bobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new ReferentialAttribute_c(modelRoot,
p_m_attr_id,
p_m_obj_id,
p_m_battr_id,
p_m_bobj_id,
p_m_ref_mode,
p_m_baseattrname
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public ReferentialAttribute_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_attr_id,
       java.util.UUID         p_m_obj_id,
       java.util.UUID         p_m_battr_id,
       java.util.UUID         p_m_bobj_id,
       int          p_m_ref_mode,
       String       p_m_baseattrname){
    InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
    ReferentialAttribute_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_attr_id
        ,
        p_m_obj_id
            };
        source = (ReferentialAttribute_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_battr_id = IdAssigner.preprocessUUID(p_m_battr_id);
       source.m_ref_mode = p_m_ref_mode;
       source.m_baseattrname = p_m_baseattrname;
       // default value for m_recorderid
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_bobj_id = IdAssigner.preprocessUUID(p_m_bobj_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    ReferentialAttribute_c new_inst = new ReferentialAttribute_c(modelRoot,
p_m_attr_id,
p_m_obj_id,
p_m_battr_id,
p_m_bobj_id,
p_m_ref_mode,
p_m_baseattrname
);
    return new_inst;
  }
  public ReferentialAttribute_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_attr_id = IdAssigner.NULL_UUID;   
     m_battr_id = IdAssigner.NULL_UUID;   
     m_baseattrname = "";   
     m_recorderid = IdAssigner.NULL_UUID;   
     m_bobj_id = IdAssigner.NULL_UUID;   
     m_obj_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_attr_id,m_obj_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_attr_id,m_obj_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_attr_id !=  p_newKey ){
	
		m_attr_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof ReferentialAttribute_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof ReferentialAttribute_c)) {
           return false;
       }
       
       ReferentialAttribute_c me = (ReferentialAttribute_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getAttr_id()) || IdAssigner.NULL_UUID.equals(((ReferentialAttribute_c)elem).getAttr_id())) && this != elem)) {
      	return false;
      }
      if (!getAttr_id().equals(((ReferentialAttribute_c)elem).getAttr_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID.equals(((ReferentialAttribute_c)elem).getObj_id())) && this != elem)) {
      	return false;
      }
      if (!getObj_id().equals(((ReferentialAttribute_c)elem).getObj_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof ReferentialAttribute_c)) {
           return false;
       }
       
       ReferentialAttribute_c me = (ReferentialAttribute_c)elem;
      if (!getAttr_idCachedValue().equals(((ReferentialAttribute_c)elem).getAttr_idCachedValue())) return false;
      if (!getObj_idCachedValue().equals(((ReferentialAttribute_c)elem).getObj_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_attr_id ;
  private java.util.UUID         m_battr_id ;
  private int          m_ref_mode ;
  private String       m_baseattrname ;
  private java.util.UUID         m_recorderid ;
  private java.util.UUID         m_bobj_id ;
  private java.util.UUID         m_obj_id ;
      
// declare association references from this class
  
  
    
// referring navigation

ReferentialAttributeVisitedRecorder_c ReferentialAttributeVisitedRecorder ;
public void relateAcrossR119To(ReferentialAttributeVisitedRecorder_c target)
{
	relateAcrossR119To(target, true);
}
public void relateAcrossR119To(ReferentialAttributeVisitedRecorder_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ReferentialAttributeVisitedRecorder) return;  // already related

    if ( ReferentialAttributeVisitedRecorder != target ) {
    
    Object oldKey = getInstanceKey();

    if (ReferentialAttributeVisitedRecorder != null) {
    
        ReferentialAttributeVisitedRecorder.clearBackPointerR119To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ReferentialAttribute_c.relateAcrossR119To(ReferentialAttributeVisitedRecorder_c target)", 
			"Relate performed across R119 from Referential Attribute to Referential Attribute Visited Recorder without unrelate of prior instance.");  
		}
    }
                
    	ReferentialAttributeVisitedRecorder = target ;
        m_recorderid = target.getRecorderid();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR119To(this);
        target.addRef();
    }
}
public void unrelateAcrossR119From(ReferentialAttributeVisitedRecorder_c target)
{
	unrelateAcrossR119From(target, true);
}
public void unrelateAcrossR119From(ReferentialAttributeVisitedRecorder_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ReferentialAttributeVisitedRecorder == null) return;  // already unrelated
	
	if (target != ReferentialAttributeVisitedRecorder) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R119", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR119To(this);
    }
    

      if(ReferentialAttributeVisitedRecorder != null) {
      
        m_recorderid = ReferentialAttributeVisitedRecorder.getRecorderid();
        ReferentialAttributeVisitedRecorder = null ;
        target.removeRef();
    }
}

  
    
      
public static ReferentialAttribute_c getOneO_RATTROnR119(ReferentialAttributeVisitedRecorder_c [] targets)
{
    return getOneO_RATTROnR119(targets, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ReferentialAttributeVisitedRecorder_c [] targets, ClassQueryInterface_c test)
{
    ReferentialAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_RATTROnR119(targets[i], test);
        }
    }

    return ret_val;
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ReferentialAttributeVisitedRecorder_c target)
{
  return getOneO_RATTROnR119(target, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ReferentialAttributeVisitedRecorder_c target, boolean loadComponent)
{
    return getOneO_RATTROnR119(target.getModelRoot(), target, null, loadComponent);
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_RATTROnR119(target.getModelRoot(), target, test);
  }
  return null;
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ModelRoot modelRoot, ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test)
{
	return getOneO_RATTROnR119(modelRoot, target, test, true);
}

public static ReferentialAttribute_c getOneO_RATTROnR119(ModelRoot modelRoot, ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_RATTROnR119(modelRoot,target,test);
}
private static ReferentialAttribute_c find_getOneO_RATTROnR119(ModelRoot modelRoot, ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_VisitedReferentialAttributeVisited_R119) {
	    for ( int i = 0; i < target.backPointer_VisitedReferentialAttributeVisited_R119.size(); ++i ) {
	      ReferentialAttribute_c source = (ReferentialAttribute_c)target.backPointer_VisitedReferentialAttributeVisited_R119.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c [] targets)
{
  return getManyO_RATTRsOnR119(targets, null);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c [] targets, boolean loadComponent)
{
  return getManyO_RATTRsOnR119(targets, null, loadComponent);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR119(targets, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ReferentialAttribute_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_VisitedReferentialAttributeVisited_R119) {
	    for (int j = 0; j < targets[i].backPointer_VisitedReferentialAttributeVisited_R119.size(); ++j) {
	      ReferentialAttribute_c source = (ReferentialAttribute_c)targets[i].backPointer_VisitedReferentialAttributeVisited_R119.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ReferentialAttribute_c[0];
  }
  }

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c target)
{
  return getManyO_RATTRsOnR119(target, null);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c target, boolean loadComponent)
{
  return getManyO_RATTRsOnR119(target, null, loadComponent);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR119(target, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR119(ReferentialAttributeVisitedRecorder_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ReferentialAttribute_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_VisitedReferentialAttributeVisited_R119) {
    for (int i = 0; i < target.backPointer_VisitedReferentialAttributeVisited_R119.size(); ++i) {
      ReferentialAttribute_c source = (ReferentialAttribute_c)target.backPointer_VisitedReferentialAttributeVisited_R119.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ReferentialAttribute_c[0];
	}
  }


  
    
// referring navigation

Attribute_c IsSupertypeAttribute ;
public void relateAcrossR106To(Attribute_c target)
{
	relateAcrossR106To(target, true);
}
public void relateAcrossR106To(Attribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeAttribute) return;  // already related

    if ( IsSupertypeAttribute != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeAttribute != null) {
    
        IsSupertypeAttribute.clearBackPointerR106To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ReferentialAttribute_c.relateAcrossR106To(Attribute_c target)", 
			"Relate performed across R106 from Referential Attribute to Attribute without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeAttribute = target ;
        m_attr_id = target.getAttr_id();
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_obj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR106To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "106", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR106From(Attribute_c target)
{
	unrelateAcrossR106From(target, true);
}
public void unrelateAcrossR106From(Attribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeAttribute == null) return;  // already unrelated
	
	if (target != IsSupertypeAttribute) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R106", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR106To(this);
    }
    

      if(IsSupertypeAttribute != null) {
      
        m_attr_id = IsSupertypeAttribute.getAttr_id();
        m_obj_id = IsSupertypeAttribute.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_obj_id))
        {
          m_obj_id = IsSupertypeAttribute.getObj_idCachedValue();
        }       
        IsSupertypeAttribute = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "106", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ReferentialAttribute_c getOneO_RATTROnR106(Attribute_c [] targets)
{
    return getOneO_RATTROnR106(targets, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR106(Attribute_c [] targets, ClassQueryInterface_c test)
{
    ReferentialAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_RATTROnR106(targets[i], test);
        }
    }

    return ret_val;
}

public static ReferentialAttribute_c getOneO_RATTROnR106(Attribute_c target)
{
  return getOneO_RATTROnR106(target, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR106(Attribute_c target, boolean loadComponent)
{
    return getOneO_RATTROnR106(target.getModelRoot(), target, null, loadComponent);
}

public static ReferentialAttribute_c getOneO_RATTROnR106(Attribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_RATTROnR106(target.getModelRoot(), target, test);
  }
  return null;
}

public static ReferentialAttribute_c getOneO_RATTROnR106(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test)
{
	return getOneO_RATTROnR106(modelRoot, target, test, true);
}

public static ReferentialAttribute_c getOneO_RATTROnR106(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneO_RATTROnR106(modelRoot,target,test);
}
private static ReferentialAttribute_c find_getOneO_RATTROnR106(ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    ReferentialAttribute_c source = (ReferentialAttribute_c)target.backPointer_IsSubtypeReferentialAttributeIsSubtype_R106;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c [] targets)
{
  return getManyO_RATTRsOnR106(targets, null);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c [] targets, boolean loadComponent)
{
  return getManyO_RATTRsOnR106(targets, null, loadComponent);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR106(targets, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ReferentialAttribute_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      ReferentialAttribute_c source = (ReferentialAttribute_c)targets[i].backPointer_IsSubtypeReferentialAttributeIsSubtype_R106;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ReferentialAttribute_c[0];
  }
  }

public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c target)
{
  if (target != null) {
    Attribute_c [] targetArray = new Attribute_c[1];
    targetArray[0] = target;
    return getManyO_RATTRsOnR106(targetArray);
  } else {
    ReferentialAttribute_c [] result = new ReferentialAttribute_c [0] ;
  return result ;
}
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR106(Attribute_c target, boolean loadComponent)
{
  if (target != null) {
    Attribute_c [] targetArray = new Attribute_c[1];
    targetArray[0] = target;
    return getManyO_RATTRsOnR106(targetArray, loadComponent);
  } else {
    ReferentialAttribute_c [] result = new ReferentialAttribute_c [0] ;
  return result ;
}
}



  
    
// referring navigation

BaseAttribute_c NavigatesBackToBaseAttribute ;
public void relateAcrossR113To(BaseAttribute_c target)
{
	relateAcrossR113To(target, true);
}
public void relateAcrossR113To(BaseAttribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == NavigatesBackToBaseAttribute) return;  // already related

    if ( NavigatesBackToBaseAttribute != target ) {
    
    Object oldKey = getInstanceKey();

    if (NavigatesBackToBaseAttribute != null) {
        UmlProblem.removeXtUMLProblem(this, NavigatesBackToBaseAttribute);
    
        NavigatesBackToBaseAttribute.clearBackPointerR113To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"ReferentialAttribute_c.relateAcrossR113To(BaseAttribute_c target)", 
			"Relate performed across R113 from Referential Attribute to Base Attribute without unrelate of prior instance.");  
		}
    }
                
    	NavigatesBackToBaseAttribute = target ;
        if(IdAssigner.NULL_UUID.equals(target.getAttr_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_battr_id = target.getAttr_idCachedValue();
        }
        if(IdAssigner.NULL_UUID.equals(target.getObj_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_bobj_id = target.getObj_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR113To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "113", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR113From(BaseAttribute_c target)
{
	unrelateAcrossR113From(target, true);
}
public void unrelateAcrossR113From(BaseAttribute_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (NavigatesBackToBaseAttribute == null) return;  // already unrelated
	
	if (target != NavigatesBackToBaseAttribute) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R113", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR113To(this);
    }
    

      if(NavigatesBackToBaseAttribute != null) {
      
        m_battr_id = NavigatesBackToBaseAttribute.getAttr_id();
        if(IdAssigner.NULL_UUID.equals(m_battr_id))
        {
          m_battr_id = NavigatesBackToBaseAttribute.getAttr_idCachedValue();
        }       
        m_bobj_id = NavigatesBackToBaseAttribute.getObj_id();
        if(IdAssigner.NULL_UUID.equals(m_bobj_id))
        {
          m_bobj_id = NavigatesBackToBaseAttribute.getObj_idCachedValue();
        }       
        NavigatesBackToBaseAttribute = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "113", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static ReferentialAttribute_c getOneO_RATTROnR113(BaseAttribute_c [] targets)
{
    return getOneO_RATTROnR113(targets, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR113(BaseAttribute_c [] targets, ClassQueryInterface_c test)
{
    ReferentialAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneO_RATTROnR113(targets[i], test);
        }
    }

    return ret_val;
}

public static ReferentialAttribute_c getOneO_RATTROnR113(BaseAttribute_c target)
{
  return getOneO_RATTROnR113(target, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR113(BaseAttribute_c target, boolean loadComponent)
{
    return getOneO_RATTROnR113(target.getModelRoot(), target, null, loadComponent);
}

public static ReferentialAttribute_c getOneO_RATTROnR113(BaseAttribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneO_RATTROnR113(target.getModelRoot(), target, test);
  }
  return null;
}

public static ReferentialAttribute_c getOneO_RATTROnR113(ModelRoot modelRoot, BaseAttribute_c target, ClassQueryInterface_c test)
{
	return getOneO_RATTROnR113(modelRoot, target, test, true);
}

public static ReferentialAttribute_c getOneO_RATTROnR113(ModelRoot modelRoot, BaseAttribute_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  ReferentialAttribute_c result = null;
  
  result=find_getOneO_RATTROnR113(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,ReferentialAttribute_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneO_RATTROnR113(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static ReferentialAttribute_c find_getOneO_RATTROnR113(ModelRoot modelRoot, BaseAttribute_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113) {
	    for ( int i = 0; i < target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.size(); ++i ) {
	      ReferentialAttribute_c source = (ReferentialAttribute_c)target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c [] targets)
{
  return getManyO_RATTRsOnR113(targets, null);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c [] targets, boolean loadComponent)
{
  return getManyO_RATTRsOnR113(targets, null, loadComponent);
}
public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c [] targets, ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR113(targets, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new ReferentialAttribute_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ReferentialAttribute_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113) {
	    for (int j = 0; j < targets[i].backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.size(); ++j) {
	      ReferentialAttribute_c source = (ReferentialAttribute_c)targets[i].backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new ReferentialAttribute_c[0];
  }
  }

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c target)
{
  return getManyO_RATTRsOnR113(target, null);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c target, boolean loadComponent)
{
  return getManyO_RATTRsOnR113(target, null, loadComponent);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c target, ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR113(target, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR113(BaseAttribute_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new ReferentialAttribute_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, ReferentialAttribute_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113) {
    for (int i = 0; i < target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.size(); ++i) {
      ReferentialAttribute_c source = (ReferentialAttribute_c)target.backPointer_CanBeTheBaseOfReferentialAttributeCanBeTheBaseOf_R113.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new ReferentialAttribute_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<AttributeReferenceInClass_c> backPointer_ResolvesAttributeReferenceInClassResolves_R108 = new ArrayList<AttributeReferenceInClass_c>();

public void setAttributeReferenceInClassOrderInChildListR108(AttributeReferenceInClass_c target, int index) {
	unrelateAcrossR108From(target);
	AttributeReferenceInClass_c[] elements = AttributeReferenceInClass_c.getManyO_REFsOnR108(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR108From((AttributeReferenceInClass_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR108To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR108To((AttributeReferenceInClass_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR108To(AttributeReferenceInClass_c target)
{
  if (target != null) {
    target.relateAcrossR108To(this, true) ;
  }
}

public void relateAcrossR108To(AttributeReferenceInClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR108To(this, notifyChanges) ;
  }
}

public void setBackPointerR108To(AttributeReferenceInClass_c target)
{
  	synchronized (backPointer_ResolvesAttributeReferenceInClassResolves_R108) {
		backPointer_ResolvesAttributeReferenceInClassResolves_R108.add(target);
	}
}

public void unrelateAcrossR108From(AttributeReferenceInClass_c target)
{
  if (target != null) {
    target.unrelateAcrossR108From(this, true) ;
  }
}

public void unrelateAcrossR108From(AttributeReferenceInClass_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR108From(this, notifyChanges) ;
  }
}

public void clearBackPointerR108To(AttributeReferenceInClass_c target)
{
  synchronized (backPointer_ResolvesAttributeReferenceInClassResolves_R108) {
	    backPointer_ResolvesAttributeReferenceInClassResolves_R108.remove(target);
	}
}

public static ReferentialAttribute_c getOneO_RATTROnR108(AttributeReferenceInClass_c [] targets)
{
    return getOneO_RATTROnR108(targets, null);
}

public static ReferentialAttribute_c getOneO_RATTROnR108(AttributeReferenceInClass_c [] targets, ClassQueryInterface_c test)
{
    return getOneO_RATTROnR108(targets, test, true);
}

public static ReferentialAttribute_c getOneO_RATTROnR108(AttributeReferenceInClass_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    ReferentialAttribute_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             ReferentialAttribute_c candidate_val = getOneO_RATTROnR108(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneO_RATTROnR108(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static ReferentialAttribute_c getOneO_RATTROnR108(AttributeReferenceInClass_c target)
{
	return getOneO_RATTROnR108(target, true);
}
public static ReferentialAttribute_c getOneO_RATTROnR108(AttributeReferenceInClass_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsResolvedByReferentialAttribute ;
  } else {
    return null;
  }
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyO_RATTRsOnR108(targets, test, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ReferentialAttribute_c[0];
  
  
  LinkedHashSet<ReferentialAttribute_c> elementsSet = new LinkedHashSet<ReferentialAttribute_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsResolvedByReferentialAttribute == null)
	  targets[i].loadProxy();
    ReferentialAttribute_c associate = targets[i].IsResolvedByReferentialAttribute;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ReferentialAttribute_c[] result = new ReferentialAttribute_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c [] targets)
{
  return getManyO_RATTRsOnR108(targets, null);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AttributeReferenceInClass_c [] targetArray = new AttributeReferenceInClass_c[1];
    targetArray[0] = target;
    return getManyO_RATTRsOnR108(targetArray, test, loadComponent);
  } else {
    ReferentialAttribute_c [] result = new ReferentialAttribute_c [0] ;
    return result ;
  }
  
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c target,
    ClassQueryInterface_c test)
{
    return getManyO_RATTRsOnR108(target, null, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c target)
{
    return getManyO_RATTRsOnR108(target, null, true);
}

public static ReferentialAttribute_c [] getManyO_RATTRsOnR108(AttributeReferenceInClass_c target, boolean loadComponent)
{
    return getManyO_RATTRsOnR108(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ReferentialAttributeVisitedRecorder == null) {          
      // R119
	  instances = baseRoot.getInstanceList(ReferentialAttributeVisitedRecorder_c.class);
      ReferentialAttributeVisitedRecorder_c relInst38597 = null;
      synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
        while (cursor.hasNext())
        {
           ReferentialAttributeVisitedRecorder_c source = (ReferentialAttributeVisitedRecorder_c)cursor.next() ;
           if (     source.getRecorderid().equals(m_recorderid) 		){
  		relInst38597 = source;
			break;
		  }
	  }
     }//synchronized
			//synchronized
      if ( relInst38597 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38597) && !isProxy())) {
	      relInst38597.relateAcrossR119To(this, notifyChanges);
	  }
	  }
	}
	          

      // R106
      Attribute_c relInst38598 = (Attribute_c) baseRoot.getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38598 == null) {
      			relInst38598 = (Attribute_c) Ooaofooa.getDefaultInstance().getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
      		}
			if (relInst38598 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38598 = (Attribute_c) roots[i].getInstanceList(Attribute_c.class).get(new Object[] {m_attr_id,m_obj_id});
					if (relInst38598 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38598 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38598) && !isProxy())) {
	      relInst38598.relateAcrossR106To(this, notifyChanges);
	  }
	  }
	          

	if (NavigatesBackToBaseAttribute == null) {          
      // R113
      BaseAttribute_c relInst38599 = (BaseAttribute_c) baseRoot.getInstanceList(BaseAttribute_c.class).get(new Object[] {m_battr_id,m_bobj_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38599 == null) {
      			relInst38599 = (BaseAttribute_c) Ooaofooa.getDefaultInstance().getInstanceList(BaseAttribute_c.class).get(new Object[] {m_battr_id,m_bobj_id});
      		}
			if (relInst38599 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38599 = (BaseAttribute_c) roots[i].getInstanceList(BaseAttribute_c.class).get(new Object[] {m_battr_id,m_bobj_id});
					if (relInst38599 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38599 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38599) && !isProxy())) {
	      relInst38599.relateAcrossR113To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R119
      // O_RAVR
		  inst=ReferentialAttributeVisitedRecorder;
			unrelateAcrossR119From(ReferentialAttributeVisitedRecorder, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R106
      // O_ATTR
		  inst=IsSupertypeAttribute;
			unrelateAcrossR106From(IsSupertypeAttribute, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R113
      // O_BATTR
		  inst=NavigatesBackToBaseAttribute;
			unrelateAcrossR113From(NavigatesBackToBaseAttribute, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ReferentialAttribute_c inst = (ReferentialAttribute_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static ReferentialAttribute_c ReferentialAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		ReferentialAttribute_c result=findReferentialAttributeInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,ReferentialAttribute_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findReferentialAttributeInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static ReferentialAttribute_c findReferentialAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				ReferentialAttribute_c x = (ReferentialAttribute_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static ReferentialAttribute_c ReferentialAttributeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ReferentialAttributeInstance(modelRoot,test,true);
  }
  
  public static ReferentialAttribute_c ReferentialAttributeInstance(ModelRoot modelRoot)
  {
	 return ReferentialAttributeInstance(modelRoot,null,true);
  }

  public static ReferentialAttribute_c [] ReferentialAttributeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, ReferentialAttribute_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(ReferentialAttribute_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					ReferentialAttribute_c x = (ReferentialAttribute_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				ReferentialAttribute_c[] ret_set = new ReferentialAttribute_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ReferentialAttribute_c[0];
			}		
		} 
  }
  public static ReferentialAttribute_c [] ReferentialAttributeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ReferentialAttributeInstances(modelRoot,test,true);
  }
  public static ReferentialAttribute_c [] ReferentialAttributeInstances(ModelRoot modelRoot)
  {
	return ReferentialAttributeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Referential Attribute.dispose call: ";
	ReferentialAttributeVisitedRecorder_c testR119Inst = ReferentialAttributeVisitedRecorder_c.getOneO_RAVROnR119(this, false);

	if ( testR119Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "119 ";
	}
	Attribute_c testR106Inst1 = Attribute_c.getOneO_ATTROnR106(this, false);

	if ( testR106Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "106 ";
	}
	BaseAttribute_c testR113Inst = BaseAttribute_c.getOneO_BATTROnR113(this, false);

	if ( testR113Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "113 ";
	}
	AttributeReferenceInClass_c testR108Inst = AttributeReferenceInClass_c.getOneO_REFOnR108(this, false);

	if ( testR108Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "108 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Referential Attribute", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("attr_id")){
         return true;
      }
      if(attributeName.equals("battr_id")){
         return true;
      }
      if(attributeName.equals("recorderid")){
         return true;
      }
      if(attributeName.equals("bobj_id")){
         return true;
      }
      if(attributeName.equals("obj_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getAttr_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getAttr_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getObj_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getObj_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getAttr_idLongBased()
  {
    if ( IsSupertypeAttribute != null )
    {
      return IsSupertypeAttribute.getAttr_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getAttr_id()
  {
    if ( IsSupertypeAttribute != null )
    {
      return IsSupertypeAttribute.getAttr_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeAttribute != null );
 
 }                  

  public java.util.UUID getAttr_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_attr_id) )
      return m_attr_id;
    else
      return getAttr_id();
  }
  
  public void setAttr_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_attr_id)){
	        return;
	    }
	}else if(m_attr_id != null){
	    if(m_attr_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Attr_id", m_attr_id, newValue,true); 
   m_attr_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getBattr_idLongBased()
  {
    if ( NavigatesBackToBaseAttribute != null )
    {
      return NavigatesBackToBaseAttribute.getAttr_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBattr_id()
  {
    if ( NavigatesBackToBaseAttribute != null )
    {
      return NavigatesBackToBaseAttribute.getAttr_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBattr_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_battr_id) )
      return m_battr_id;
    else
      return getBattr_id();
  }
  
  public void setBattr_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_battr_id)){
	        return;
	    }
	}else if(m_battr_id != null){
	    if(m_battr_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Battr_id", m_battr_id, newValue,true); 
   m_battr_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getRef_mode()
  {
    return m_ref_mode ;
  }


  public void setRef_mode(int newValue)
  {
    if(m_ref_mode == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ref_mode", new Integer(m_ref_mode), new Integer(newValue),true);

   m_ref_mode = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getBaseattrname()
  {
Attribute_c base_attr = Attribute_c.getOneO_ATTROnR106(BaseAttribute_c.getOneO_BATTROnR113(this));
if (base_attr != null){
	m_baseattrname = base_attr.getName();
	return m_baseattrname;
}
else{
	return m_baseattrname;
}
  }


  public long getRecorderidLongBased()
  {
    if ( ReferentialAttributeVisitedRecorder != null )
    {
      return ReferentialAttributeVisitedRecorder.getRecorderidLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRecorderid()
  {
    if ( ReferentialAttributeVisitedRecorder != null )
    {
      return ReferentialAttributeVisitedRecorder.getRecorderid();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getRecorderidCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_recorderid) )
      return m_recorderid;
    else
      return getRecorderid();
  }
  
  public void setRecorderid(java.util.UUID newValue)
  {
   m_recorderid = IdAssigner.preprocessUUID(newValue);
  }
  public long getBobj_idLongBased()
  {
    if ( NavigatesBackToBaseAttribute != null )
    {
      return NavigatesBackToBaseAttribute.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBobj_id()
  {
    if ( NavigatesBackToBaseAttribute != null )
    {
      return NavigatesBackToBaseAttribute.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBobj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_bobj_id) )
      return m_bobj_id;
    else
      return getBobj_id();
  }
  
  public void setBobj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_bobj_id)){
	        return;
	    }
	}else if(m_bobj_id != null){
	    if(m_bobj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Bobj_id", m_bobj_id, newValue,true); 
   m_bobj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getObj_idLongBased()
  {
    if ( IsSupertypeAttribute != null )
    {
      return IsSupertypeAttribute.getObj_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getObj_id()
  {
    if ( IsSupertypeAttribute != null )
    {
      return IsSupertypeAttribute.getObj_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getObj_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_obj_id) )
      return m_obj_id;
    else
      return getObj_id();
  }
  
  public void setObj_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_obj_id)){
	        return;
	    }
	}else if(m_obj_id != null){
	    if(m_obj_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Obj_id", m_obj_id, newValue,true); 
   m_obj_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Referential Attribute", //$NON-NLS-1$
	  " Operation entered: Referential Attribute::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     ReferentialAttribute_c [] objs = ReferentialAttribute_c.ReferentialAttributeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Referential Attribute", //$NON-NLS-1$
	  " Operation entered: Referential Attribute::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class ReferentialAttribute_c_test38601_c implements ClassQueryInterface_c
    {
	  ReferentialAttribute_c_test38601_c( java.util.UUID            p38602, java.util.UUID            p38603 ) {
	       m_p38602 = p38602; 
m_p38603 = p38603;
	  }
	  private java.util.UUID             m_p38602; private java.util.UUID             m_p38603; 
	  public boolean evaluate (Object candidate)
	  {
	      ReferentialAttribute_c selected = (ReferentialAttribute_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAttr_id().equals(m_p38602)) & (selected.getObj_id().equals(m_p38603));
	      return retval;
	  }
    }

    ReferentialAttribute_c [] objs38600 = 
    ReferentialAttribute_c.ReferentialAttributeInstances(modelRoot, new ReferentialAttribute_c_test38601_c(getAttr_id(), getObj_id())) ;

    if ( (  (objs38600.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38600.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38600.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38600.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38600.length )  + " Attr_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38600.length )  + " Attr_ID: " + "Not Printable"  + " Obj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Referential Attribute is a subtype in association: rel.Numb = 106
          // The supertype class is: Attribute
    class Attribute_c_test38607_c implements ClassQueryInterface_c
    {
	  Attribute_c_test38607_c( java.util.UUID            p38608, java.util.UUID            p38609 ) {
	       m_p38608 = p38608; 
m_p38609 = p38609;
	  }
	  private java.util.UUID             m_p38608; private java.util.UUID             m_p38609; 
	  public boolean evaluate (Object candidate)
	  {
	      Attribute_c selected = (Attribute_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAttr_id().equals(m_p38608)) & (selected.getObj_id().equals(m_p38609));
	      return retval;
	  }
    }

    Attribute_c [] objs38606 = 
    Attribute_c.AttributeInstances(modelRoot, new Attribute_c_test38607_c(getAttr_id(), getObj_id())) ;

    if ( (  (objs38606.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Association: 106: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38606.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Association: 106: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38606.length )  , e); 
      }
      retval = false;

    }

          // Referential Attribute is a referring class in association: rel.Numb = 113
          // The participating class is: Base Attribute
    class BaseAttribute_c_test38611_c implements ClassQueryInterface_c
    {
	  BaseAttribute_c_test38611_c( java.util.UUID            p38612, java.util.UUID            p38613 ) {
	       m_p38612 = p38612; 
m_p38613 = p38613;
	  }
	  private java.util.UUID             m_p38612; private java.util.UUID             m_p38613; 
	  public boolean evaluate (Object candidate)
	  {
	      BaseAttribute_c selected = (BaseAttribute_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAttr_id().equals(m_p38612)) & (selected.getObj_id().equals(m_p38613));
	      return retval;
	  }
    }

    BaseAttribute_c [] objs38610 = 
    BaseAttribute_c.BaseAttributeInstances(modelRoot, new BaseAttribute_c_test38611_c(getBattr_id(), getBobj_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs38610.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Association: 113: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38610.length )  + " BAttr_ID: " + "Not Printable"  + " BObj_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Association: 113: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38610.length )  + " BAttr_ID: " + "Not Printable"  + " BObj_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Referential Attribute is a referring class in association: rel.Numb = 119
          // The participating class is: Referential Attribute Visited Recorder
    class ReferentialAttributeVisitedRecorder_c_test38615_c implements ClassQueryInterface_c
    {
	  ReferentialAttributeVisitedRecorder_c_test38615_c( java.util.UUID            p38616 ) {
	  m_p38616 = p38616;
	  }
	  private java.util.UUID             m_p38616; 
	  public boolean evaluate (Object candidate)
	  {
	      ReferentialAttributeVisitedRecorder_c selected = (ReferentialAttributeVisitedRecorder_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRecorderid().equals(m_p38616));
	      return retval;
	  }
    }

    ReferentialAttributeVisitedRecorder_c [] objs38614 = 
    ReferentialAttributeVisitedRecorder_c.ReferentialAttributeVisitedRecorderInstances(modelRoot, new ReferentialAttributeVisitedRecorder_c_test38615_c(getRecorderid())) ;

    if ( (  (objs38614.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Association: 119: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38614.length )  + " recorderId: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Association: 119: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38614.length )  + " recorderId: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Referential Attribute is a participating class in association: rel.Numb = 108
             // Object: Attribute Reference in Class
    class AttributeReferenceInClass_c_test38618_c implements ClassQueryInterface_c
    {
	  AttributeReferenceInClass_c_test38618_c( java.util.UUID            p38619, java.util.UUID            p38620 ) {
	       m_p38619 = p38619; 
m_p38620 = p38620;
	  }
	  private java.util.UUID             m_p38619; private java.util.UUID             m_p38620; 
	  public boolean evaluate (Object candidate)
	  {
	      AttributeReferenceInClass_c selected = (AttributeReferenceInClass_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAttr_id().equals(m_p38619)) & (selected.getObj_id().equals(m_p38620));
	      return retval;
	  }
    }

    AttributeReferenceInClass_c [] objs38617 = 
    AttributeReferenceInClass_c.AttributeReferenceInClassInstances(modelRoot, new AttributeReferenceInClass_c_test38618_c(getAttr_id(), getObj_id())) ;

    if ( (  (objs38617.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Referential Attribute", //$NON-NLS-1$
           "Consistency: Object: Referential Attribute: Association: 108: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38617.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Referential Attribute: Association: 108: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38617.length )  , e); 
      }
      retval = false;

    }
                
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
BaseAttribute_c v_battr = BaseAttribute_c.getOneO_BATTROnR113(this);


if ( (  (v_battr != null)) )
{

this.unrelateAcrossR113From(v_battr);



}

AttributeReferenceInClass_c [] v_refs = AttributeReferenceInClass_c.getManyO_REFsOnR108(this);


AttributeReferenceInClass_c  v_ref = null;
for ( int i37059 = 0; i37059 < v_refs.length; i37059++)
{
  v_ref = v_refs[i37059] ;

this.unrelateAcrossR108From(v_ref);


if (v_ref != null) {
v_ref.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


if ( (  (v_attr != null)) )
{

this.unrelateAcrossR106From(v_attr);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Migratetobase()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Migratetobase") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


this.unrelateAcrossR106From(v_attr);


BaseAttribute_c v_battr = BaseAttribute_c.getOneO_BATTROnR113(this);


if ( (  (v_battr != null)) )
{

this.unrelateAcrossR113From(v_battr);


DataType_c v_battrType = DataType_c.getOneS_DTOnR114(Attribute_c.getOneO_ATTROnR106(v_battr));


DataType_c v_attrType = DataType_c.getOneS_DTOnR114(v_attr);


if (v_attr != null) {
v_attr.unrelateAcrossR114From(v_attrType);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_attr != null) {
  v_attr.relateAcrossR114To(v_battrType);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

v_battr = new BaseAttribute_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_battr));


if (v_attr != null) {
  v_attr.relateAcrossR106To(v_battr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


NewBaseAttribute_c v_nbattr = new NewBaseAttribute_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_nbattr));


if (v_nbattr != null) {
  v_nbattr.relateAcrossR107To(v_battr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


ReferentialAttribute_c [] v_rtoRefs = ReferentialAttribute_c.getManyO_RATTRsOnR108(AttributeReferenceInClass_c.getManyO_REFsOnR111(ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c.getManyO_OIDAsOnR105(v_attr))));


ReferentialAttribute_c  v_ref = null;
for ( int i37060 = 0; i37060 < v_rtoRefs.length; i37060++)
{
  v_ref = v_rtoRefs[i37060] ;

BaseAttribute_c v_oldBattr = BaseAttribute_c.getOneO_BATTROnR113(v_ref);


if (v_ref != null) {
v_ref.unrelateAcrossR113From(v_oldBattr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_ref != null) {
  v_ref.relateAcrossR113To(v_battr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

Dispose() ;



   } // End migrateToBase
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


String       v_result = v_attr.getName() ;


AttributeReferenceInClass_c [] v_ref_set = AttributeReferenceInClass_c.getManyO_REFsOnR108(this);


AttributeReferenceInClass_c  v_ref = null;
for ( int i37061 = 0; i37061 < v_ref_set.length; i37061++)
{
  v_ref = v_ref_set[i37061] ;

v_result = v_result + " (" + v_ref.Get_text(			    
true) + ")" ;



}

return v_result;



   } // End get_name
  public  boolean      Isorphaned()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Isorphaned") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_rattr_root = Attribute_c.getOneO_ATTROnR105(ClassIdentifierAttribute_c.getManyO_OIDAsOnR110(ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR111(AttributeReferenceInClass_c.getManyO_REFsOnR108(this))));


return   (v_rattr_root == null);



   } // End isOrphaned
  public  void Combine_refs(final java.util.UUID         p_Other_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Combine_refs") ; 
               final ModelRoot modelRoot = getModelRoot();
  class Attribute_test37441_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Attribute_c selected = (Attribute_c)candidate;
		return selected.getAttr_id().equals(p_Other_id) ;
	}
  }
Attribute_c v_other_attr = Attribute_c.getOneO_ATTROnR102(ModelClass_c.getManyO_OBJsOnR102(Attribute_c.getManyO_ATTRsOnR106(this)), new Attribute_test37441_c());


ReferentialAttribute_c v_other_rattr = ReferentialAttribute_c.getOneO_RATTROnR106(v_other_attr);


AttributeReferenceInClass_c [] v_other_ref_set = AttributeReferenceInClass_c.getManyO_REFsOnR108(v_other_rattr);


AttributeReferenceInClass_c v_ref = AttributeReferenceInClass_c.getOneO_REFOnR108(this);


AttributeReferenceInClass_c v_next_ref = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes(v_ref);


while ( (  (v_next_ref != null)) )
{

v_next_ref = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes(v_ref);


if ( (  (v_next_ref != null)) )
{

v_ref = v_next_ref ;



}


}

AttributeReferenceInClass_c  v_other_ref = null;
for ( int i37062 = 0; i37062 < v_other_ref_set.length; i37062++)
{
  v_other_ref = v_other_ref_set[i37062] ;

if (v_other_ref != null) {
v_other_ref.unrelateAcrossR108From(v_other_rattr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_other_ref != null) {
  v_other_ref.relateAcrossR108To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_other_ref != null) {
  v_other_ref.relateAcrossR112ToSucceeds(v_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_ref = v_other_ref ;



}

ClassIdentifierAttribute_c v_oida = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(v_other_attr);


if ( (  (v_oida != null)) )
{

if (v_other_rattr != null) {
v_other_rattr.Migratetobase() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

if (v_other_attr != null) {
v_other_attr.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End combine_refs
  public  void Split_refs(final java.util.UUID         p_Other_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Split_refs") ; 
               final ModelRoot modelRoot = getModelRoot();
  class AttributeReferenceInClass_test37442_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		AttributeReferenceInClass_c selected = (AttributeReferenceInClass_c)candidate;
		return selected.getAref_id().equals(p_Other_id) ;
	}
  }
AttributeReferenceInClass_c v_other_ref = AttributeReferenceInClass_c.getOneO_REFOnR108(this, new AttributeReferenceInClass_test37442_c());


AttributeReferenceInClass_c v_next_ref = AttributeReferenceInClass_c.getOneO_REFOnR112Precedes(v_other_ref);


AttributeReferenceInClass_c v_prev_ref = AttributeReferenceInClass_c.getOneO_REFOnR112Succeeds(v_other_ref);


if ( (  (v_next_ref == null)) )
{

if (v_prev_ref != null) {
v_prev_ref.unrelateAcrossR112FromPrecedes(v_other_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

else if ( (  (v_prev_ref == null)) )
{

if (v_other_ref != null) {
v_other_ref.unrelateAcrossR112FromPrecedes(v_next_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

else
{

if (v_other_ref != null) {
v_other_ref.unrelateAcrossR112FromPrecedes(v_next_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_prev_ref != null) {
v_prev_ref.unrelateAcrossR112FromPrecedes(v_other_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_next_ref != null) {
  v_next_ref.relateAcrossR112ToSucceeds(v_prev_ref);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if (v_other_ref != null) {
v_other_ref.unrelateAcrossR108From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


ModelClass_c v_mc = ModelClass_c.getOneO_OBJOnR102(Attribute_c.getOneO_ATTROnR106(this));


java.util.UUID         v_newAttr_id = v_mc.Newreferentialattribute(			    
-1			    
,v_other_ref.getRattr_id()			    
,v_other_ref.getRobj_id()			    
,v_other_ref.getRoid_id()) ;


  class ReferentialAttribute_test37443_c implements ClassQueryInterface_c
  {
	ReferentialAttribute_test37443_c( java.util.UUID         p37444 ) {
		m_p37444 = p37444;
	}
	private java.util.UUID         m_p37444;
	public boolean evaluate (Object candidate)
	{
		ReferentialAttribute_c selected = (ReferentialAttribute_c)candidate;
		return selected.getAttr_id().equals(m_p37444) ;
	}
  }
ReferentialAttribute_c v_newRattr = ReferentialAttribute_c.getOneO_RATTROnR106(Attribute_c.getManyO_ATTRsOnR102(v_mc), new ReferentialAttribute_test37443_c(v_newAttr_id));


if (v_other_ref != null) {
  v_other_ref.relateAcrossR108To(v_newRattr);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End split_refs
  public  boolean      Alreadycombinedwith(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Alreadycombinedwith") ; 
               final ModelRoot modelRoot = getModelRoot();
  class AttributeReferenceInClass_test37445_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		AttributeReferenceInClass_c selected = (AttributeReferenceInClass_c)candidate;
		return (selected.getAttr_id().equals(p_Id)) ;
	}
  }
AttributeReferenceInClass_c v_ref = AttributeReferenceInClass_c.getOneO_REFOnR108(this, new AttributeReferenceInClass_test37445_c());


return   (v_ref != null);



   } // End alreadyCombinedWith
  public  String       Get_root_name_internal()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_root_name_internal") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (getRef_mode() == 0) )
{

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


return v_attr.getRoot_nam();



}

else
{

AttributeReferenceInClass_c [] v_oref_set = AttributeReferenceInClass_c.getManyO_REFsOnR108(this);


AttributeReferenceInClass_c  v_oref = null;
for ( int i37063 = 0; i37063 < v_oref_set.length; i37063++)
{
  v_oref = v_oref_set[i37063] ;

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR105(ClassIdentifierAttribute_c.getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR111(v_oref)));


if ( (  (v_attr != null)) )
{

String       v_root_name = v_attr.Get_root() ;


if ( (! v_root_name.equals(ReferentialAttribute_c.Root_loop_string(modelRoot))) )
{

return v_root_name;



}


}

else
{

return getBaseattrname();



}


}


}

return getBaseattrname();



   } // End get_root_name_internal
  public  String       Get_prefix_string_internal()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_prefix_string_internal") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


if ( (v_attr.getPfx_mode() == 1) )
{

return v_attr.getPrefix();



}

else if ( (v_attr.getPfx_mode() == 2) )
{

AttributeReferenceInClass_c [] v_oref_set = AttributeReferenceInClass_c.getManyO_REFsOnR108(this);


AttributeReferenceInClass_c  v_oref = null;
for ( int i37064 = 0; i37064 < v_oref_set.length; i37064++)
{
  v_oref = v_oref_set[i37064] ;

Attribute_c v_root_attr = Attribute_c.getOneO_ATTROnR105(ClassIdentifierAttribute_c.getOneO_OIDAOnR110(ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR111(v_oref)));


if ( (  (v_root_attr != null)) )
{

String       v_prefix = v_root_attr.Get_prefix() ;


if ( (! v_prefix.equals(ReferentialAttribute_c.Prefix_loop_string(modelRoot))) )
{

return v_prefix;



}


}

else
{

return getBaseattrname();



}


}

return getBaseattrname();



}

else
{

return "";



}


   } // End get_prefix_string_internal
  public  void Setdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Setdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


DataType_c v_dt = DataType_c.getOneS_DTOnR114(v_attr);


if ( (  (v_dt != null)) )
{

if ( (v_dt.getName().equals("same_as<Base_Attribute>")) )
{

return ;



}

else
{

if (v_attr != null) {
v_attr.unrelateAcrossR114From(v_dt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}


}

boolean      v_isInGenericPkg = false ;


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(ModelClass_c.getOneO_OBJOnR102(v_attr)));


if ( (  (v_pkg != null)) )
{

v_isInGenericPkg = true ;



}

if ( (v_isInGenericPkg) )
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_pkg);


java.util.UUID         v_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_dt_id = v_system.Getcoretypeid(			    
"same_as<Base_Attribute>") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_dt_id);


DataType_c v_ref_attr_dt = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_ref_attr_dt == null)) )
{

User_c.Logerror(			    
"Unable to locate expected data type: same_as<Base_Attribute>"			    
,"PathNotProvided" ) ;



}

else
{

if (v_attr != null) {
  v_attr.relateAcrossR114To(v_ref_attr_dt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

else
{

Domain_c v_dom = Domain_c.DomainInstance(modelRoot) ;


  class DataType_test37446_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals("same_as<Base_Attribute>") ;
	}
  }
DataType_c v_ref_attr_dt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test37446_c());


if ( (  (v_ref_attr_dt == null)) )
{

if ( (v_dom.Participatesinsystem()) )
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4606(ComponentPackage_c.getOneCP_CPOnR4608(Component_c.getOneC_COnR4204(DomainAsComponent_c.getOneCN_DCOnR4204(v_dom))));


java.util.UUID         v_dt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_dt_id = v_system.Getcoretypeid(			    
"same_as<Base_Attribute>") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_dt_id);


v_ref_attr_dt = DataType_c.getOneS_DTOnR8001(v_pe);



}

else
{

User_c.Logerror(			    
"Unable to locate expected data type: same_as<Base_Attribute>"			    
,"PathNotProvided" ) ;



}


}

if (v_attr != null) {
  v_attr.relateAcrossR114To(v_ref_attr_dt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End setDatatype
  public  String       Get_root()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_root") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_tmp_root = "" ;


ReferentialAttributeVisitedRecorder_c v_recorder = ReferentialAttributeVisitedRecorder_c.getOneO_RAVROnR119(this);


if ( (  (v_recorder != null)) )
{

v_tmp_root = ReferentialAttribute_c.Root_loop_string(modelRoot) ;



}

else if ( (getRef_mode() == 0) )
{

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


v_tmp_root = v_attr.getRoot_nam() ;



}

else if ( (getRef_mode() == 1) )
{

v_recorder = ReferentialAttributeVisitedRecorder_c.ReferentialAttributeVisitedRecorderInstance(modelRoot) ;


if ( (  (v_recorder == null)) )
{

v_recorder = new ReferentialAttributeVisitedRecorder_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_recorder));



}

  this.relateAcrossR119To(v_recorder);


v_tmp_root = Get_root_name_internal() ;


this.unrelateAcrossR119From(v_recorder);



}

return v_tmp_root;



   } // End get_root
  public static String       Root_loop_string(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Root_loop_string") ; 
return "< Name Loop >";



   } // End ROOT_LOOP_STRING
  public static String       Prefix_loop_string(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Prefix_loop_string") ; 
return "< Prefix Loop >";



   } // End PREFIX_LOOP_STRING
  public  String       Get_prefix()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_prefix") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_tmp_prefix = "" ;


ReferentialAttributeVisitedRecorder_c v_recorder = ReferentialAttributeVisitedRecorder_c.getOneO_RAVROnR119(this);


if ( (  (v_recorder != null)) )
{

v_tmp_prefix = ReferentialAttribute_c.Prefix_loop_string(modelRoot) ;



}

else
{

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR106(this);


if ( (v_attr.getPfx_mode() == 1) )
{

v_tmp_prefix = v_attr.getPrefix() ;



}

else if ( (v_attr.getPfx_mode() == 2) )
{

v_recorder = ReferentialAttributeVisitedRecorder_c.ReferentialAttributeVisitedRecorderInstance(modelRoot) ;


if ( (  (v_recorder == null)) )
{

v_recorder = new ReferentialAttributeVisitedRecorder_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_recorder));



}

  this.relateAcrossR119To(v_recorder);


v_tmp_prefix = Get_prefix_string_internal() ;


this.unrelateAcrossR119From(v_recorder);



}


}

return v_tmp_prefix;



   } // End get_prefix
  public  String       Get_root_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_root_name") ; 
               final ModelRoot modelRoot = getModelRoot();
ReferentialAttributeVisitedRecorder_c v_recorder = ReferentialAttributeVisitedRecorder_c.ReferentialAttributeVisitedRecorderInstance(modelRoot) ;


if ( (  (v_recorder == null)) )
{

v_recorder = new ReferentialAttributeVisitedRecorder_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_recorder));



}

if (v_recorder != null) {
v_recorder.Setalltonotvisited() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


String       v_result = Get_root_name_internal() ;


if ( (v_recorder.Areanyvisited()) )
{

User_c.Logerror(			    
"Assertion failed: get_root_name(): referential attribute is still marked as visited"			    
,"" ) ;



}

return v_result;



   } // End get_root_name
  public  String       Get_prefix_string()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Referential Attribute", " Operation entered: ReferentialAttribute::Get_prefix_string") ; 
               final ModelRoot modelRoot = getModelRoot();
ReferentialAttributeVisitedRecorder_c v_recorder = ReferentialAttributeVisitedRecorder_c.ReferentialAttributeVisitedRecorderInstance(modelRoot) ;


if ( (  (v_recorder == null)) )
{

v_recorder = new ReferentialAttributeVisitedRecorder_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_recorder));



}

if (v_recorder != null) {
v_recorder.Setalltonotvisited() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


String       v_result = Get_prefix_string_internal() ;


if ( (v_recorder.Areanyvisited()) )
{

User_c.Logerror(			    
"Assertion failed: get_prefix_string(): referential attribute is still marked as visited"			    
,"" ) ;



}

return v_result;



   } // End get_prefix_string

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Referential Attribute
