package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Query_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_QUERY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Query_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Query_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_engine_id, String p_m_pattern,
			boolean p_m_regex, boolean p_m_casesensitive, int p_m_scope) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		m_pattern = p_m_pattern;
		m_regex = p_m_regex;
		m_casesensitive = p_m_casesensitive;
		m_scope = p_m_scope;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public Query_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_engine_id,
			String p_m_pattern, boolean p_m_regex, boolean p_m_casesensitive,
			int p_m_scope, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Query_c.class);
		Query_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (Query_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				new_inst.m_pattern = p_m_pattern;
				new_inst.m_regex = p_m_regex;
				new_inst.m_casesensitive = p_m_casesensitive;
				new_inst.m_scope = p_m_scope;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Query_c(modelRoot, p_m_id, p_m_engine_id,
					p_m_pattern, p_m_regex, p_m_casesensitive, p_m_scope);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Query_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_engine_id,
			String p_m_pattern, boolean p_m_regex, boolean p_m_casesensitive,
			int p_m_scope) {
		InstanceList instances = modelRoot.getInstanceList(Query_c.class);
		Query_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (Query_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				source.m_pattern = p_m_pattern;
				source.m_regex = p_m_regex;
				source.m_casesensitive = p_m_casesensitive;
				source.m_scope = p_m_scope;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_engine_id = IdAssigner.preprocessUUID(p_m_engine_id);

				return source;
			}
		}
		// there is no instance matching the id
		Query_c new_inst = new Query_c(modelRoot, p_m_id, p_m_engine_id,
				p_m_pattern, p_m_regex, p_m_casesensitive, p_m_scope);
		return new_inst;
	}
	public Query_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = idAssigner.createUUID();
		m_pattern = "";
		m_scope = Searchscope_c.OOA_UNINITIALIZED_ENUM;
		m_engine_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Query_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Query_c)) {
			return false;
		}

		Query_c me = (Query_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((Query_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((Query_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Query_c)) {
			return false;
		}

		Query_c me = (Query_c) elem;
		if (!getId().equals(((Query_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private long m_idLongBased;
	private String m_pattern;
	private boolean m_regex;
	private boolean m_casesensitive;
	private int m_scope;
	private java.util.UUID m_engine_id;

	// declare association references from this class

	// referring navigation

	SearchEngine_c ProcessedBySearchEngine;
	public void relateAcrossR9500To(SearchEngine_c target) {
		relateAcrossR9500To(target, true);
	}
	public void relateAcrossR9500To(SearchEngine_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProcessedBySearchEngine)
			return; // already related

		if (ProcessedBySearchEngine != target) {

			Object oldKey = getInstanceKey();

			if (ProcessedBySearchEngine != null) {

				ProcessedBySearchEngine.clearBackPointerR9500To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Query_c.relateAcrossR9500To(SearchEngine_c target)",
									"Relate performed across R9500 from Query to Search Engine without unrelate of prior instance.");
				}
			}

			ProcessedBySearchEngine = target;
			m_engine_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR9500To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "9500", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR9500From(SearchEngine_c target) {
		unrelateAcrossR9500From(target, true);
	}
	public void unrelateAcrossR9500From(SearchEngine_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProcessedBySearchEngine == null)
			return; // already unrelated

		if (target != ProcessedBySearchEngine) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R9500",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR9500To(this);
		}

		if (ProcessedBySearchEngine != null) {

			m_engine_id = ProcessedBySearchEngine.getId();
			ProcessedBySearchEngine = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "9500", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Query_c getOneSQU_QOnR9500(SearchEngine_c[] targets) {
		return getOneSQU_QOnR9500(targets, null);
	}

	public static Query_c getOneSQU_QOnR9500(SearchEngine_c[] targets,
			ClassQueryInterface_c test) {
		Query_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQU_QOnR9500(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Query_c getOneSQU_QOnR9500(SearchEngine_c target) {
		return getOneSQU_QOnR9500(target, null);
	}

	public static Query_c getOneSQU_QOnR9500(SearchEngine_c target,
			boolean loadComponent) {
		return getOneSQU_QOnR9500(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Query_c getOneSQU_QOnR9500(SearchEngine_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQU_QOnR9500(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Query_c getOneSQU_QOnR9500(ModelRoot modelRoot,
			SearchEngine_c target, ClassQueryInterface_c test) {
		return getOneSQU_QOnR9500(modelRoot, target, test, true);
	}

	public static Query_c getOneSQU_QOnR9500(ModelRoot modelRoot,
			SearchEngine_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSQU_QOnR9500(modelRoot, target, test);
	}
	private static Query_c find_getOneSQU_QOnR9500(ModelRoot modelRoot,
			SearchEngine_c target, ClassQueryInterface_c test) {
		if (target != null) {
			Query_c source = (Query_c) target.backPointer_ProcessesQueryProcesses_R9500;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c[] targets) {
		return getManySQU_QsOnR9500(targets, null);
	}
	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c[] targets,
			boolean loadComponent) {
		return getManySQU_QsOnR9500(targets, null, loadComponent);
	}
	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9500(targets, test, true);
	}

	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Query_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Query_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Query_c source = (Query_c) targets[i].backPointer_ProcessesQueryProcesses_R9500;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Query_c[] ret_set = new Query_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Query_c[0];
		}
	}

	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c target) {
		if (target != null) {
			SearchEngine_c[] targetArray = new SearchEngine_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9500(targetArray);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}
	}

	public static Query_c[] getManySQU_QsOnR9500(SearchEngine_c target,
			boolean loadComponent) {
		if (target != null) {
			SearchEngine_c[] targetArray = new SearchEngine_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9500(targetArray, loadComponent);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ReferencesQuery_c backPointer_IsSubtypeReferencesQueryIsSubtype_R9600;

	public void setReferencesQueryOrderInChildListR9600(
			ReferencesQuery_c target, int index) {
		unrelateAcrossR9600From(target);
		ReferencesQuery_c[] elements = ReferencesQuery_c
				.getManySQU_RsOnR9600(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9600From((ReferencesQuery_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9600To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9600To((ReferencesQuery_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9600To(ReferencesQuery_c target) {
		if (target != null) {
			target.relateAcrossR9600To(this, true);
		}
	}

	public void relateAcrossR9600To(ReferencesQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9600To(this, notifyChanges);
		}
	}

	public void setBackPointerR9600To(ReferencesQuery_c target) {
		backPointer_IsSubtypeReferencesQueryIsSubtype_R9600 = target;
	}

	public void unrelateAcrossR9600From(ReferencesQuery_c target) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, true);
		}
	}

	public void unrelateAcrossR9600From(ReferencesQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9600To(ReferencesQuery_c target) {
		if (target == backPointer_IsSubtypeReferencesQueryIsSubtype_R9600) {
			backPointer_IsSubtypeReferencesQueryIsSubtype_R9600 = null;
		}
	}

	public static Query_c getOneSQU_QOnR9600(ReferencesQuery_c[] targets) {
		return getOneSQU_QOnR9600(targets, null);
	}

	public static Query_c getOneSQU_QOnR9600(ReferencesQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSQU_QOnR9600(targets, test, true);
	}

	public static Query_c getOneSQU_QOnR9600(ReferencesQuery_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Query_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Query_c candidate_val = getOneSQU_QOnR9600(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQU_QOnR9600(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Query_c getOneSQU_QOnR9600(ReferencesQuery_c target) {
		return getOneSQU_QOnR9600(target, true);
	}
	public static Query_c getOneSQU_QOnR9600(ReferencesQuery_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeQuery;
		} else {
			return null;
		}
	}

	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(targets, test, true);
	}

	public static Query_c [] getManySQU_QsOnR9600(ReferencesQuery_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Query_c[0];
  
  
  LinkedHashSet<Query_c> elementsSet = new LinkedHashSet<Query_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeQuery == null)
	  targets[i].loadProxy();
    Query_c associate = targets[i].IsSupertypeQuery;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Query_c[] result = new Query_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c[] targets) {
		return getManySQU_QsOnR9600(targets, null);
	}

	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ReferencesQuery_c[] targetArray = new ReferencesQuery_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9600(targetArray, test, loadComponent);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}

	}

	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c target,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c target) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(ReferencesQuery_c target,
			boolean loadComponent) {
		return getManySQU_QsOnR9600(target, null, loadComponent);
	}

	// referred to navigation

	DeclarationQuery_c backPointer_IsSubtypeDeclarationQueryIsSubtype_R9600;

	public void setDeclarationQueryOrderInChildListR9600(
			DeclarationQuery_c target, int index) {
		unrelateAcrossR9600From(target);
		DeclarationQuery_c[] elements = DeclarationQuery_c
				.getManySQU_DsOnR9600(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9600From((DeclarationQuery_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9600To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9600To((DeclarationQuery_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9600To(DeclarationQuery_c target) {
		if (target != null) {
			target.relateAcrossR9600To(this, true);
		}
	}

	public void relateAcrossR9600To(DeclarationQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9600To(this, notifyChanges);
		}
	}

	public void setBackPointerR9600To(DeclarationQuery_c target) {
		backPointer_IsSubtypeDeclarationQueryIsSubtype_R9600 = target;
	}

	public void unrelateAcrossR9600From(DeclarationQuery_c target) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, true);
		}
	}

	public void unrelateAcrossR9600From(DeclarationQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9600To(DeclarationQuery_c target) {
		if (target == backPointer_IsSubtypeDeclarationQueryIsSubtype_R9600) {
			backPointer_IsSubtypeDeclarationQueryIsSubtype_R9600 = null;
		}
	}

	public static Query_c getOneSQU_QOnR9600(DeclarationQuery_c[] targets) {
		return getOneSQU_QOnR9600(targets, null);
	}

	public static Query_c getOneSQU_QOnR9600(DeclarationQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSQU_QOnR9600(targets, test, true);
	}

	public static Query_c getOneSQU_QOnR9600(DeclarationQuery_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Query_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Query_c candidate_val = getOneSQU_QOnR9600(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQU_QOnR9600(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Query_c getOneSQU_QOnR9600(DeclarationQuery_c target) {
		return getOneSQU_QOnR9600(target, true);
	}
	public static Query_c getOneSQU_QOnR9600(DeclarationQuery_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeQuery;
		} else {
			return null;
		}
	}

	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(targets, test, true);
	}

	public static Query_c [] getManySQU_QsOnR9600(DeclarationQuery_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Query_c[0];
  
  
  LinkedHashSet<Query_c> elementsSet = new LinkedHashSet<Query_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeQuery == null)
	  targets[i].loadProxy();
    Query_c associate = targets[i].IsSupertypeQuery;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Query_c[] result = new Query_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c[] targets) {
		return getManySQU_QsOnR9600(targets, null);
	}

	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			DeclarationQuery_c[] targetArray = new DeclarationQuery_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9600(targetArray, test, loadComponent);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}

	}

	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c target,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c target) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(DeclarationQuery_c target,
			boolean loadComponent) {
		return getManySQU_QsOnR9600(target, null, loadComponent);
	}

	// referred to navigation

	DescriptionQuery_c backPointer_IsSubtypeDescriptionQueryIsSubtype_R9600;

	public void setDescriptionQueryOrderInChildListR9600(
			DescriptionQuery_c target, int index) {
		unrelateAcrossR9600From(target);
		DescriptionQuery_c[] elements = DescriptionQuery_c
				.getManySQU_DEsOnR9600(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9600From((DescriptionQuery_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9600To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9600To((DescriptionQuery_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9600To(DescriptionQuery_c target) {
		if (target != null) {
			target.relateAcrossR9600To(this, true);
		}
	}

	public void relateAcrossR9600To(DescriptionQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9600To(this, notifyChanges);
		}
	}

	public void setBackPointerR9600To(DescriptionQuery_c target) {
		backPointer_IsSubtypeDescriptionQueryIsSubtype_R9600 = target;
	}

	public void unrelateAcrossR9600From(DescriptionQuery_c target) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, true);
		}
	}

	public void unrelateAcrossR9600From(DescriptionQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9600To(DescriptionQuery_c target) {
		if (target == backPointer_IsSubtypeDescriptionQueryIsSubtype_R9600) {
			backPointer_IsSubtypeDescriptionQueryIsSubtype_R9600 = null;
		}
	}

	public static Query_c getOneSQU_QOnR9600(DescriptionQuery_c[] targets) {
		return getOneSQU_QOnR9600(targets, null);
	}

	public static Query_c getOneSQU_QOnR9600(DescriptionQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSQU_QOnR9600(targets, test, true);
	}

	public static Query_c getOneSQU_QOnR9600(DescriptionQuery_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Query_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Query_c candidate_val = getOneSQU_QOnR9600(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQU_QOnR9600(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Query_c getOneSQU_QOnR9600(DescriptionQuery_c target) {
		return getOneSQU_QOnR9600(target, true);
	}
	public static Query_c getOneSQU_QOnR9600(DescriptionQuery_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeQuery;
		} else {
			return null;
		}
	}

	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(targets, test, true);
	}

	public static Query_c [] getManySQU_QsOnR9600(DescriptionQuery_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Query_c[0];
  
  
  LinkedHashSet<Query_c> elementsSet = new LinkedHashSet<Query_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeQuery == null)
	  targets[i].loadProxy();
    Query_c associate = targets[i].IsSupertypeQuery;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Query_c[] result = new Query_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c[] targets) {
		return getManySQU_QsOnR9600(targets, null);
	}

	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			DescriptionQuery_c[] targetArray = new DescriptionQuery_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9600(targetArray, test, loadComponent);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}

	}

	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c target,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c target) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(DescriptionQuery_c target,
			boolean loadComponent) {
		return getManySQU_QsOnR9600(target, null, loadComponent);
	}

	// referred to navigation

	ActionLanguageQuery_c backPointer_IsSubtypeActionLanguageQueryIsSubtype_R9600;

	public void setActionLanguageQueryOrderInChildListR9600(
			ActionLanguageQuery_c target, int index) {
		unrelateAcrossR9600From(target);
		ActionLanguageQuery_c[] elements = ActionLanguageQuery_c
				.getManySQU_AsOnR9600(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9600From((ActionLanguageQuery_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9600To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9600To((ActionLanguageQuery_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9600To(ActionLanguageQuery_c target) {
		if (target != null) {
			target.relateAcrossR9600To(this, true);
		}
	}

	public void relateAcrossR9600To(ActionLanguageQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9600To(this, notifyChanges);
		}
	}

	public void setBackPointerR9600To(ActionLanguageQuery_c target) {
		backPointer_IsSubtypeActionLanguageQueryIsSubtype_R9600 = target;
	}

	public void unrelateAcrossR9600From(ActionLanguageQuery_c target) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, true);
		}
	}

	public void unrelateAcrossR9600From(ActionLanguageQuery_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9600From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9600To(ActionLanguageQuery_c target) {
		if (target == backPointer_IsSubtypeActionLanguageQueryIsSubtype_R9600) {
			backPointer_IsSubtypeActionLanguageQueryIsSubtype_R9600 = null;
		}
	}

	public static Query_c getOneSQU_QOnR9600(ActionLanguageQuery_c[] targets) {
		return getOneSQU_QOnR9600(targets, null);
	}

	public static Query_c getOneSQU_QOnR9600(ActionLanguageQuery_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSQU_QOnR9600(targets, test, true);
	}

	public static Query_c getOneSQU_QOnR9600(ActionLanguageQuery_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Query_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Query_c candidate_val = getOneSQU_QOnR9600(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQU_QOnR9600(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Query_c getOneSQU_QOnR9600(ActionLanguageQuery_c target) {
		return getOneSQU_QOnR9600(target, true);
	}
	public static Query_c getOneSQU_QOnR9600(ActionLanguageQuery_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeQuery;
		} else {
			return null;
		}
	}

	public static Query_c[] getManySQU_QsOnR9600(
			ActionLanguageQuery_c[] targets, ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(targets, test, true);
	}

	public static Query_c [] getManySQU_QsOnR9600(ActionLanguageQuery_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Query_c[0];
  
  
  LinkedHashSet<Query_c> elementsSet = new LinkedHashSet<Query_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeQuery == null)
	  targets[i].loadProxy();
    Query_c associate = targets[i].IsSupertypeQuery;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Query_c[] result = new Query_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Query_c[] getManySQU_QsOnR9600(ActionLanguageQuery_c[] targets) {
		return getManySQU_QsOnR9600(targets, null);
	}

	public static Query_c[] getManySQU_QsOnR9600(ActionLanguageQuery_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ActionLanguageQuery_c[] targetArray = new ActionLanguageQuery_c[1];
			targetArray[0] = target;
			return getManySQU_QsOnR9600(targetArray, test, loadComponent);
		} else {
			Query_c[] result = new Query_c[0];
			return result;
		}

	}

	public static Query_c[] getManySQU_QsOnR9600(ActionLanguageQuery_c target,
			ClassQueryInterface_c test) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(ActionLanguageQuery_c target) {
		return getManySQU_QsOnR9600(target, null, true);
	}

	public static Query_c[] getManySQU_QsOnR9600(ActionLanguageQuery_c target,
			boolean loadComponent) {
		return getManySQU_QsOnR9600(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ProcessedBySearchEngine == null) {
			// R9500
			SearchEngine_c relInst39568 = (SearchEngine_c) baseRoot
					.getInstanceList(SearchEngine_c.class).get(
							new Object[]{m_engine_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39568 == null) {
				relInst39568 = (SearchEngine_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(SearchEngine_c.class)
						.get(new Object[]{m_engine_id});
			}
			if (relInst39568 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39568 = (SearchEngine_c) roots[i].getInstanceList(
							SearchEngine_c.class)
							.get(new Object[]{m_engine_id});
					if (relInst39568 != null)
						break;
				}
			}
			//synchronized
			if (relInst39568 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39568) && !isProxy())) {
					relInst39568.relateAcrossR9500To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R9500
		// SEN_E
		inst = ProcessedBySearchEngine;
		unrelateAcrossR9500From(ProcessedBySearchEngine, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Query_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Query_c inst = (Query_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Query_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Query_c QueryInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Query_c result = findQueryInstance(modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					Query_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findQueryInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static Query_c findQueryInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Query_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Query_c x = (Query_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static Query_c QueryInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return QueryInstance(modelRoot, test, true);
	}

	public static Query_c QueryInstance(ModelRoot modelRoot) {
		return QueryInstance(modelRoot, null, true);
	}

	public static Query_c[] QueryInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					Query_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(Query_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Query_c x = (Query_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Query_c[] ret_set = new Query_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Query_c[0];
			}
		}
	}
	public static Query_c[] QueryInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return QueryInstances(modelRoot, test, true);
	}
	public static Query_c[] QueryInstances(ModelRoot modelRoot) {
		return QueryInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Query.dispose call: ";
		ReferencesQuery_c testR9600Inst1 = ReferencesQuery_c
				.getOneSQU_ROnR9600(this, false);

		if (testR9600Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9600 ";
		}
		DeclarationQuery_c testR9600Inst2 = DeclarationQuery_c
				.getOneSQU_DOnR9600(this, false);

		if (testR9600Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9600 ";
		}
		DescriptionQuery_c testR9600Inst3 = DescriptionQuery_c
				.getOneSQU_DEOnR9600(this, false);

		if (testR9600Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9600 ";
		}
		ActionLanguageQuery_c testR9600Inst4 = ActionLanguageQuery_c
				.getOneSQU_AOnR9600(this, false);

		if (testR9600Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9600 ";
		}
		SearchEngine_c testR9500Inst = SearchEngine_c.getOneSEN_EOnR9500(this,
				false);

		if (testR9500Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "9500 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Query", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("engine_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getPattern() {
		return m_pattern;
	}

	public void setPattern(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_pattern)) {
				return;
			}
		} else if (m_pattern != null) {
			if (m_pattern.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Pattern", m_pattern, newValue, true);
		m_pattern = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public boolean getRegex() {
		return m_regex;
	}

	public void setRegex(boolean newValue) {
		if (m_regex == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Regex",
				new Boolean(m_regex), new Boolean(newValue), true);

		m_regex = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public boolean getCasesensitive() {
		return m_casesensitive;
	}

	public void setCasesensitive(boolean newValue) {
		if (m_casesensitive == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Casesensitive", new Boolean(m_casesensitive), new Boolean(
						newValue), true);

		m_casesensitive = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public int getScope() {
		return m_scope;
	}

	public void setScope(int newValue) {
		if (m_scope == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Scope",
				new Integer(m_scope), new Integer(newValue), true);

		m_scope = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getEngine_idLongBased() {
		if (ProcessedBySearchEngine != null) {
			return ProcessedBySearchEngine.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getEngine_id() {
		if (ProcessedBySearchEngine != null) {
			return ProcessedBySearchEngine.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getEngine_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_engine_id))
			return m_engine_id;
		else
			return getEngine_id();
	}

	public void setEngine_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_engine_id)) {
				return;
			}
		} else if (m_engine_id != null) {
			if (m_engine_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Engine_id", m_engine_id, newValue, true);
		m_engine_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query", //$NON-NLS-1$
				" Operation entered: Query::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Query_c[] objs = Query_c.QueryInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Query", //$NON-NLS-1$
				" Operation entered: Query::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Query_c_test39570_c implements ClassQueryInterface_c {
			Query_c_test39570_c(java.util.UUID p39571) {
				m_p39571 = p39571;
			}
			private java.util.UUID m_p39571;
			public boolean evaluate(Object candidate) {
				Query_c selected = (Query_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39571));
				return retval;
			}
		}

		Query_c[] objs39569 = Query_c.QueryInstances(modelRoot,
				new Query_c_test39570_c(getId()));

		if (((objs39569.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Query", //$NON-NLS-1$
								"Consistency: Object: Query: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39569.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Query: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39569.length), e);
			}
			retval = false;

		}

		if (((objs39569.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.CONSISTENCY, "Query", //$NON-NLS-1$
						"Consistency: Object: Query: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs39569.length)
								+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Query: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39569.length)
								+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Query is a referring class in association: rel.Numb = 9500
		// The participating class is: Search Engine
		class SearchEngine_c_test39575_c implements ClassQueryInterface_c {
			SearchEngine_c_test39575_c(java.util.UUID p39576) {
				m_p39576 = p39576;
			}
			private java.util.UUID m_p39576;
			public boolean evaluate(Object candidate) {
				SearchEngine_c selected = (SearchEngine_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39576));
				return retval;
			}
		}

		SearchEngine_c[] objs39574 = SearchEngine_c.SearchEngineInstances(
				modelRoot, new SearchEngine_c_test39575_c(getEngine_id()));

		if (((objs39574.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Query", //$NON-NLS-1$
								"Consistency: Object: Query: Association: 9500: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39574.length)
										+ " Engine_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Query: Association: 9500: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39574.length)
										+ " Engine_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 9600
		int objs39577 = 0;
		// Subtype Object: References Query
		class ReferencesQuery_c_test39578_c implements ClassQueryInterface_c {
			ReferencesQuery_c_test39578_c(java.util.UUID p39579) {
				m_p39579 = p39579;
			}
			private java.util.UUID m_p39579;
			public boolean evaluate(Object candidate) {
				ReferencesQuery_c selected = (ReferencesQuery_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39579));
				return retval;
			}
		}

		ReferencesQuery_c[] objs39580 = ReferencesQuery_c
				.ReferencesQueryInstances(modelRoot,
						new ReferencesQuery_c_test39578_c(getId()));

		objs39577 = objs39577 + objs39580.length;
		// Subtype Object: Declaration Query
		class DeclarationQuery_c_test39581_c implements ClassQueryInterface_c {
			DeclarationQuery_c_test39581_c(java.util.UUID p39582) {
				m_p39582 = p39582;
			}
			private java.util.UUID m_p39582;
			public boolean evaluate(Object candidate) {
				DeclarationQuery_c selected = (DeclarationQuery_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39582));
				return retval;
			}
		}

		DeclarationQuery_c[] objs39583 = DeclarationQuery_c
				.DeclarationQueryInstances(modelRoot,
						new DeclarationQuery_c_test39581_c(getId()));

		objs39577 = objs39577 + objs39583.length;
		// Subtype Object: Description Query
		class DescriptionQuery_c_test39584_c implements ClassQueryInterface_c {
			DescriptionQuery_c_test39584_c(java.util.UUID p39585) {
				m_p39585 = p39585;
			}
			private java.util.UUID m_p39585;
			public boolean evaluate(Object candidate) {
				DescriptionQuery_c selected = (DescriptionQuery_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39585));
				return retval;
			}
		}

		DescriptionQuery_c[] objs39586 = DescriptionQuery_c
				.DescriptionQueryInstances(modelRoot,
						new DescriptionQuery_c_test39584_c(getId()));

		objs39577 = objs39577 + objs39586.length;
		// Subtype Object: Action Language Query
		class ActionLanguageQuery_c_test39587_c
				implements
					ClassQueryInterface_c {
			ActionLanguageQuery_c_test39587_c(java.util.UUID p39588) {
				m_p39588 = p39588;
			}
			private java.util.UUID m_p39588;
			public boolean evaluate(Object candidate) {
				ActionLanguageQuery_c selected = (ActionLanguageQuery_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39588));
				return retval;
			}
		}

		ActionLanguageQuery_c[] objs39589 = ActionLanguageQuery_c
				.ActionLanguageQueryInstances(modelRoot,
						new ActionLanguageQuery_c_test39587_c(getId()));

		objs39577 = objs39577 + objs39589.length;
		if (objs39577 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Query", //$NON-NLS-1$
								"Consistency: Object: Query: Association: 9600: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39577)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Query: Association: 9600: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39577), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public boolean Run(final Object p_Monitor) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Run");
		final ModelRoot modelRoot = getModelRoot();
		SearchEngine_c v_engine = SearchEngine_c.getOneSEN_EOnR9500(this);

		if (v_engine != null) {
			v_engine.Processquery(p_Monitor, getId());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		SearchResult_c v_result = SearchResult_c.getOneSR_SROnR9503(v_engine);

		if (((v_result != null))) {

			return true;

		}

		return false;

	} // End run
	public static java.util.UUID Createdeclarationquery(ModelRoot modelRoot,
			final boolean p_Casesensitive, final String p_Pattern,
			final boolean p_Regex, final int p_Scope) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Createdeclarationquery");
		Query_c v_query = new Query_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_query));

		DeclarationQuery_c v_declarationQuery = new DeclarationQuery_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_declarationQuery));

		if (v_query != null) {
			v_query.relateAcrossR9600To(v_declarationQuery);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		DeclarationsEngine_c v_declarationEngine = DeclarationsEngine_c
				.DeclarationsEngineInstance(modelRoot);

		if (((v_declarationEngine == null))) {

			v_declarationEngine = new DeclarationsEngine_c(modelRoot);
			Ooaofooa.getDefaultInstance().fireModelElementCreated(
					new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
							v_declarationEngine));

		}

		SearchEngine_c v_engine = SearchEngine_c
				.getOneSEN_EOnR9501(v_declarationEngine);

		if (v_query != null) {
			v_query.relateAcrossR9500To(v_engine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.setPattern(p_Pattern);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setRegex(p_Regex);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setCasesensitive(p_Casesensitive);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setScope(p_Scope);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return v_query.getId();

	} // End createDeclarationQuery
	public static java.util.UUID Createreferencesquery(ModelRoot modelRoot,
			final boolean p_Casesensitive, final String p_Pattern,
			final boolean p_Regex, final int p_Scope) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Createreferencesquery");
		Query_c v_query = new Query_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_query));

		ReferencesQuery_c v_referencesQuery = new ReferencesQuery_c(modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_referencesQuery));

		if (v_query != null) {
			v_query.relateAcrossR9600To(v_referencesQuery);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ReferencesEngine_c v_referencesEngine = ReferencesEngine_c
				.ReferencesEngineInstance(modelRoot);

		if (((v_referencesEngine == null))) {

			v_referencesEngine = new ReferencesEngine_c(modelRoot);
			Ooaofooa.getDefaultInstance().fireModelElementCreated(
					new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
							v_referencesEngine));

		}

		SearchEngine_c v_engine = SearchEngine_c
				.getOneSEN_EOnR9501(v_referencesEngine);

		if (v_query != null) {
			v_query.relateAcrossR9500To(v_engine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.setPattern(p_Pattern);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setRegex(p_Regex);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setCasesensitive(p_Casesensitive);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setScope(p_Scope);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return v_query.getId();

	} // End createReferencesQuery
	public static java.util.UUID Createactionlanguagequery(ModelRoot modelRoot,
			final boolean p_Casesensitive, final String p_Pattern,
			final boolean p_Regex, final int p_Scope) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Createactionlanguagequery");
		Query_c v_query = new Query_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_query));

		ActionLanguageQuery_c v_actionLanguageQuery = new ActionLanguageQuery_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_actionLanguageQuery));

		if (v_query != null) {
			v_query.relateAcrossR9600To(v_actionLanguageQuery);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ActionLanguageEngine_c v_actionLanguageEngine = new ActionLanguageEngine_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_actionLanguageEngine));

		SearchEngine_c v_engine = new SearchEngine_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_engine));

		if (v_engine != null) {
			v_engine.relateAcrossR9501To(v_actionLanguageEngine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.relateAcrossR9500To(v_engine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.setPattern(p_Pattern);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setRegex(p_Regex);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setCasesensitive(p_Casesensitive);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setScope(p_Scope);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return v_query.getId();

	} // End createActionLanguageQuery
	public static java.util.UUID Createdescriptionquery(ModelRoot modelRoot,
			final boolean p_Casesensitive, final String p_Pattern,
			final boolean p_Regex, final int p_Scope) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Createdescriptionquery");
		Query_c v_query = new Query_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_query));

		DescriptionQuery_c v_descriptionQuery = new DescriptionQuery_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_descriptionQuery));

		if (v_query != null) {
			v_query.relateAcrossR9600To(v_descriptionQuery);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		DescriptionEngine_c v_descriptionEngine = new DescriptionEngine_c(
				modelRoot);
		Ooaofooa.getDefaultInstance().fireModelElementCreated(
				new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
						v_descriptionEngine));

		SearchEngine_c v_engine = new SearchEngine_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_engine));

		if (v_engine != null) {
			v_engine.relateAcrossR9501To(v_descriptionEngine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.relateAcrossR9500To(v_engine);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_query != null) {
			v_query.setPattern(p_Pattern);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setRegex(p_Regex);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setCasesensitive(p_Casesensitive);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_query != null) {
			v_query.setScope(p_Scope);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		return v_query.getId();

	} // End createDescriptionQuery
	public void Configureparticipants(final Object p_Monitor) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Configureparticipants");
		final ModelRoot modelRoot = getModelRoot();
		ActionLanguageQuery_c v_actionLanguageQuery = ActionLanguageQuery_c
				.getOneSQU_AOnR9600(this);

		if (((v_actionLanguageQuery != null))) {

			if (v_actionLanguageQuery != null) {
				v_actionLanguageQuery.Configureparticipants(p_Monitor);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		DescriptionQuery_c v_descriptionQuery = DescriptionQuery_c
				.getOneSQU_DEOnR9600(this);

		if (((v_descriptionQuery != null))) {

			if (v_descriptionQuery != null) {
				v_descriptionQuery.Configureparticipants(p_Monitor);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End configureParticipants
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ActionLanguageQuery_c v_alq = ActionLanguageQuery_c
				.getOneSQU_AOnR9600(this);

		DeclarationQuery_c v_decq = DeclarationQuery_c.getOneSQU_DOnR9600(this);

		DescriptionQuery_c v_descq = DescriptionQuery_c
				.getOneSQU_DEOnR9600(this);

		ReferencesQuery_c v_rq = ReferencesQuery_c.getOneSQU_ROnR9600(this);

		if (((v_alq != null))) {

			if (v_alq != null) {
				v_alq.unrelateAcrossR9600From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_alq != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_alq.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_alq));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (((v_decq != null))) {

			if (v_decq != null) {
				v_decq.unrelateAcrossR9600From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_decq != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_decq.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_decq));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (((v_descq != null))) {

			if (v_descq != null) {
				v_descq.unrelateAcrossR9600From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_descq != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_descq.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_descq));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (((v_rq != null))) {

			if (v_rq != null) {
				v_rq.unrelateAcrossR9600From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_rq != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_rq.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_rq));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		SearchEngine_c v_engine = SearchEngine_c.getOneSEN_EOnR9500(this);

		if (((v_engine != null))) {

			this.unrelateAcrossR9500From(v_engine);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Createparticipant(final String p_Classname,
			final Object p_Elementid, final String p_Modelrootid,
			final String p_Searchablevalue) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Createparticipant");
		final ModelRoot modelRoot = getModelRoot();
		ActionLanguageQuery_c v_actionLanguageQuery = ActionLanguageQuery_c
				.getOneSQU_AOnR9600(this);

		if (((v_actionLanguageQuery != null))) {

			if (v_actionLanguageQuery != null) {
				v_actionLanguageQuery.Createparticipant(p_Classname,
						p_Elementid, p_Modelrootid, p_Searchablevalue);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		DescriptionQuery_c v_descriptionQuery = DescriptionQuery_c
				.getOneSQU_DEOnR9600(this);

		if (((v_descriptionQuery != null))) {

			if (v_descriptionQuery != null) {
				v_descriptionQuery.Createparticipant(p_Classname, p_Elementid,
						p_Modelrootid, p_Searchablevalue);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End createParticipant
	public static void Configurescope(ModelRoot modelRoot,
			final Object p_Monitor, final int p_Scope) {
		Ooaofooa.log.println(ILogger.OPERATION, "Query",
				" Operation entered: Query::Configurescope");
		Search_c.Configurescope(p_Monitor, p_Scope);

	} // End configureScope

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Query
