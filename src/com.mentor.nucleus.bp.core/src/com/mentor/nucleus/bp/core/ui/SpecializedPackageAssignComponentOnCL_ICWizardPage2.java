package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SpecializedPackageAssignComponentOnCL_ICWizardPage2.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SpecializedPackageAssignComponentOnCL_ICWizardPage2
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo PackageCombo;
	public Label PackageLabel;

	// cache for user choices
	ComponentPackage_c Package = null;
	ComponentPackage_c[] PackageInstances;

	/**
	 * Constructors for SpecializedPackageAssignComponentOnCL_ICWizardPage2.
	 */
	public SpecializedPackageAssignComponentOnCL_ICWizardPage2() {
		super("");
		init();
	}

	public SpecializedPackageAssignComponentOnCL_ICWizardPage2(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Assign Component");
		setDescription("Choose the component to reference");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		Component_c v_Component = ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Component;

		// cache for context
		ComponentReference_c v_icomp = ((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_icomp;

		ComponentPackage_c v_compPackage = ComponentPackage_c
				.getOneCP_CPOnR4605(v_icomp);

		if (((v_compPackage == null))) {

			Component_c v_container = Component_c.getOneC_COnR4205(v_icomp);

			if (((v_container != null))) {

				while (((v_compPackage == null))) {

					v_compPackage = ComponentPackage_c
							.getOneCP_CPOnR4604(v_container);

					v_container = Component_c
							.getOneC_COnR4202(ComponentInComponent_c
									.getOneCN_CICOnR4203(v_container));

				}

			}

		}

		Component_c v_component = Component_c.getOneC_COnR4201(v_icomp);

		java.util.UUID v_existingId = Gd_c.Null_unique_id();

		if ((v_component != null)) {

			v_existingId = v_component.getId();

		}

		if ((v_compPackage != null)) {

			SystemModel_c v_system = SystemModel_c
					.getOneS_SYSOnR4606(v_compPackage);

			// select related by where USER::selectOne
			ComponentPackage_c[] v_PackageInstances = ComponentPackage_c
					.getManyCP_CPsOnR4606(v_system);
			ComponentPackage_c v_Package = null;
			int PackageInstCount;
			int PackageResultCount = 0;
			for (PackageInstCount = 0; PackageInstCount < v_PackageInstances.length; PackageInstCount++) {
				ComponentPackage_c selected = v_PackageInstances[PackageInstCount];
				if (User_c.Selectone(selected.getPackage_id())
						&& v_icomp.Canassigntocompinpackage(selected
								.getPackage_id())) {
					PackageResultCount++;
				}
			}
			this.PackageInstances = new ComponentPackage_c[PackageResultCount];
			PackageResultCount = 0;
			for (PackageInstCount = 0; PackageInstCount < v_PackageInstances.length; PackageInstCount++) {
				ComponentPackage_c selected = v_PackageInstances[PackageInstCount];
				if (User_c.Selectone(selected.getPackage_id())
						&& v_icomp.Canassigntocompinpackage(selected
								.getPackage_id())) {
					this.PackageInstances[PackageResultCount] = selected;
					PackageResultCount++;
				}
			}
			PackageCombo.removeAll();
			for (PackageInstCount = 0; PackageInstCount < PackageResultCount; PackageInstCount++)
				PackageCombo
						.add(((ComponentPackage_c) this.PackageInstances[PackageInstCount])
								.getName());
			if (PackageResultCount == 1) {
				PackageCombo.select(0);
				updateSelectedPackage();
			}

			if ((v_Package != null)) {

				if ((v_Component != null)) {

				}

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		PackageLabel = new Label(composite, SWT.NONE);
		PackageLabel.setText("Package");
		PackageCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		PackageCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		PackageCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedPackage() {
		this.Package = PackageInstances[PackageCombo.getSelectionIndex()];
		((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Package = this.Package;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == PackageCombo) {
			updateSelectedPackage();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Package == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SpecializedPackageAssignComponentOnCL_ICWizard) getWizard()).v_Package = Package;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Package == null)
			return false;
		return true;
	}

}
