package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ForStmt_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_FOR_STMT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ForStmt_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ForStmt_c(ModelRoot modelRoot, java.util.UUID p_m_statement_id,
			java.util.UUID p_m_block_id, boolean p_m_is_implicit,
			java.util.UUID p_m_loop_var_id, java.util.UUID p_m_set_var_id,
			java.util.UUID p_m_obj_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
		m_is_implicit = p_m_is_implicit;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_loop_var_id = IdAssigner.preprocessUUID(p_m_loop_var_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_set_var_id = IdAssigner.preprocessUUID(p_m_set_var_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}
	static public ForStmt_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			boolean p_m_is_implicit, java.util.UUID p_m_loop_var_id,
			java.util.UUID p_m_set_var_id, java.util.UUID p_m_obj_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
		ForStmt_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			new_inst = (ForStmt_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				new_inst.m_is_implicit = p_m_is_implicit;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_loop_var_id = IdAssigner
						.preprocessUUID(p_m_loop_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_set_var_id = IdAssigner
						.preprocessUUID(p_m_set_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ForStmt_c(modelRoot, p_m_statement_id, p_m_block_id,
					p_m_is_implicit, p_m_loop_var_id, p_m_set_var_id,
					p_m_obj_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ForStmt_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_statement_id, java.util.UUID p_m_block_id,
			boolean p_m_is_implicit, java.util.UUID p_m_loop_var_id,
			java.util.UUID p_m_set_var_id, java.util.UUID p_m_obj_id) {
		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
		ForStmt_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_statement_id};
			source = (ForStmt_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_statement_id = IdAssigner
						.preprocessUUID(p_m_statement_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
				source.m_is_implicit = p_m_is_implicit;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_loop_var_id = IdAssigner
						.preprocessUUID(p_m_loop_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_set_var_id = IdAssigner.preprocessUUID(p_m_set_var_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		ForStmt_c new_inst = new ForStmt_c(modelRoot, p_m_statement_id,
				p_m_block_id, p_m_is_implicit, p_m_loop_var_id, p_m_set_var_id,
				p_m_obj_id);
		return new_inst;
	}
	public ForStmt_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_statement_id = IdAssigner.NULL_UUID;
		m_block_id = IdAssigner.NULL_UUID;
		m_loop_var_id = IdAssigner.NULL_UUID;
		m_set_var_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		Object[] key = {m_statement_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_statement_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_statement_id != p_newKey) {

			m_statement_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ForStmt_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ForStmt_c)) {
			return false;
		}

		ForStmt_c me = (ForStmt_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID
						.equals(((ForStmt_c) elem).getStatement_id())) && this != elem)) {
			return false;
		}
		if (!getStatement_id().equals(((ForStmt_c) elem).getStatement_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ForStmt_c)) {
			return false;
		}

		ForStmt_c me = (ForStmt_c) elem;
		if (!getStatement_idCachedValue().equals(
				((ForStmt_c) elem).getStatement_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_statement_id;
	private java.util.UUID m_block_id;
	private boolean m_is_implicit;
	private java.util.UUID m_loop_var_id;
	private java.util.UUID m_set_var_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Statement_c IsSupertypeStatement;
	public void relateAcrossR603To(Statement_c target) {
		relateAcrossR603To(target, true);
	}
	public void relateAcrossR603To(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeStatement)
			return; // already related

		if (IsSupertypeStatement != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeStatement != null) {

				IsSupertypeStatement.clearBackPointerR603To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ForStmt_c.relateAcrossR603To(Statement_c target)",
									"Relate performed across R603 from For Stmt to Statement without unrelate of prior instance.");
				}
			}

			IsSupertypeStatement = target;
			m_statement_id = target.getStatement_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR603To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR603From(Statement_c target) {
		unrelateAcrossR603From(target, true);
	}
	public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeStatement == null)
			return; // already unrelated

		if (target != IsSupertypeStatement) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R603",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR603To(this);
		}

		if (IsSupertypeStatement != null) {

			m_statement_id = IsSupertypeStatement.getStatement_id();
			IsSupertypeStatement = null;
			target.removeRef();
		}
	}

	public static ForStmt_c getOneACT_FOROnR603(Statement_c[] targets) {
		return getOneACT_FOROnR603(targets, null);
	}

	public static ForStmt_c getOneACT_FOROnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		ForStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FOROnR603(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ForStmt_c getOneACT_FOROnR603(Statement_c target) {
		return getOneACT_FOROnR603(target, null);
	}

	public static ForStmt_c getOneACT_FOROnR603(Statement_c target,
			boolean loadComponent) {
		return getOneACT_FOROnR603(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ForStmt_c getOneACT_FOROnR603(Statement_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FOROnR603(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ForStmt_c getOneACT_FOROnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		return getOneACT_FOROnR603(modelRoot, target, test, true);
	}

	public static ForStmt_c getOneACT_FOROnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_FOROnR603(modelRoot, target, test);
	}
	private static ForStmt_c find_getOneACT_FOROnR603(ModelRoot modelRoot,
			Statement_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ForStmt_c source = (ForStmt_c) target.backPointer_IsSubtypeForStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c[] targets) {
		return getManyACT_FORsOnR603(targets, null);
	}
	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c[] targets,
			boolean loadComponent) {
		return getManyACT_FORsOnR603(targets, null, loadComponent);
	}
	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR603(targets, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ForStmt_c source = (ForStmt_c) targets[i].backPointer_IsSubtypeForStmtIsSubtype_R603;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c target) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_FORsOnR603(targetArray);
		} else {
			ForStmt_c[] result = new ForStmt_c[0];
			return result;
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR603(Statement_c target,
			boolean loadComponent) {
		if (target != null) {
			Statement_c[] targetArray = new Statement_c[1];
			targetArray[0] = target;
			return getManyACT_FORsOnR603(targetArray, loadComponent);
		} else {
			ForStmt_c[] result = new ForStmt_c[0];
			return result;
		}
	}

	// referring navigation

	Block_c ControlsBlock;
	public void relateAcrossR605To(Block_c target) {
		relateAcrossR605To(target, true);
	}
	public void relateAcrossR605To(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ControlsBlock)
			return; // already related

		if (ControlsBlock != target) {

			Object oldKey = getInstanceKey();

			if (ControlsBlock != null) {

				ControlsBlock.clearBackPointerR605To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ForStmt_c.relateAcrossR605To(Block_c target)",
									"Relate performed across R605 from For Stmt to Block without unrelate of prior instance.");
				}
			}

			ControlsBlock = target;
			m_block_id = target.getBlock_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR605To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR605From(Block_c target) {
		unrelateAcrossR605From(target, true);
	}
	public void unrelateAcrossR605From(Block_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ControlsBlock == null)
			return; // already unrelated

		if (target != ControlsBlock) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R605",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR605To(this);
		}

		if (ControlsBlock != null) {

			m_block_id = ControlsBlock.getBlock_id();
			ControlsBlock = null;
			target.removeRef();
		}
	}

	public static ForStmt_c getOneACT_FOROnR605(Block_c[] targets) {
		return getOneACT_FOROnR605(targets, null);
	}

	public static ForStmt_c getOneACT_FOROnR605(Block_c[] targets,
			ClassQueryInterface_c test) {
		ForStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FOROnR605(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ForStmt_c getOneACT_FOROnR605(Block_c target) {
		return getOneACT_FOROnR605(target, null);
	}

	public static ForStmt_c getOneACT_FOROnR605(Block_c target,
			boolean loadComponent) {
		return getOneACT_FOROnR605(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ForStmt_c getOneACT_FOROnR605(Block_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FOROnR605(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ForStmt_c getOneACT_FOROnR605(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		return getOneACT_FOROnR605(modelRoot, target, test, true);
	}

	public static ForStmt_c getOneACT_FOROnR605(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_FOROnR605(modelRoot, target, test);
	}
	private static ForStmt_c find_getOneACT_FOROnR605(ModelRoot modelRoot,
			Block_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ForStmt_c source = (ForStmt_c) target.backPointer_ForStmt_R605;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c[] targets) {
		return getManyACT_FORsOnR605(targets, null);
	}
	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c[] targets,
			boolean loadComponent) {
		return getManyACT_FORsOnR605(targets, null, loadComponent);
	}
	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR605(targets, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ForStmt_c source = (ForStmt_c) targets[i].backPointer_ForStmt_R605;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c target) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_FORsOnR605(targetArray);
		} else {
			ForStmt_c[] result = new ForStmt_c[0];
			return result;
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR605(Block_c target,
			boolean loadComponent) {
		if (target != null) {
			Block_c[] targetArray = new Block_c[1];
			targetArray[0] = target;
			return getManyACT_FORsOnR605(targetArray, loadComponent);
		} else {
			ForStmt_c[] result = new ForStmt_c[0];
			return result;
		}
	}

	// referring navigation

	Variable_c LoopVariable;
	public void relateAcrossR614To(Variable_c target) {
		relateAcrossR614To(target, true);
	}
	public void relateAcrossR614To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == LoopVariable)
			return; // already related

		if (LoopVariable != target) {

			Object oldKey = getInstanceKey();

			if (LoopVariable != null) {

				LoopVariable.clearBackPointerR614To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ForStmt_c.relateAcrossR614To(Variable_c target)",
									"Relate performed across R614 from For Stmt to Variable without unrelate of prior instance.");
				}
			}

			LoopVariable = target;
			m_loop_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR614To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR614From(Variable_c target) {
		unrelateAcrossR614From(target, true);
	}
	public void unrelateAcrossR614From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (LoopVariable == null)
			return; // already unrelated

		if (target != LoopVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R614",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR614To(this);
		}

		if (LoopVariable != null) {

			m_loop_var_id = LoopVariable.getVar_id();
			LoopVariable = null;
			target.removeRef();
		}
	}

	public static ForStmt_c getOneACT_FOROnR614(Variable_c[] targets) {
		return getOneACT_FOROnR614(targets, null);
	}

	public static ForStmt_c getOneACT_FOROnR614(Variable_c[] targets,
			ClassQueryInterface_c test) {
		ForStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FOROnR614(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ForStmt_c getOneACT_FOROnR614(Variable_c target) {
		return getOneACT_FOROnR614(target, null);
	}

	public static ForStmt_c getOneACT_FOROnR614(Variable_c target,
			boolean loadComponent) {
		return getOneACT_FOROnR614(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ForStmt_c getOneACT_FOROnR614(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FOROnR614(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ForStmt_c getOneACT_FOROnR614(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_FOROnR614(modelRoot, target, test, true);
	}

	public static ForStmt_c getOneACT_FOROnR614(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_FOROnR614(modelRoot, target, test);
	}
	private static ForStmt_c find_getOneACT_FOROnR614(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614) {
				for (int i = 0; i < target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614
						.size(); ++i) {
					ForStmt_c source = (ForStmt_c) target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c[] targets) {
		return getManyACT_FORsOnR614(targets, null);
	}
	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c[] targets,
			boolean loadComponent) {
		return getManyACT_FORsOnR614(targets, null, loadComponent);
	}
	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR614(targets, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsLoopVariableForStmtIsLoopVariable_R614) {
				for (int j = 0; j < targets[i].backPointer_IsLoopVariableForStmtIsLoopVariable_R614
						.size(); ++j) {
					ForStmt_c source = (ForStmt_c) targets[i].backPointer_IsLoopVariableForStmtIsLoopVariable_R614
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c target) {
		return getManyACT_FORsOnR614(target, null);
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c target,
			boolean loadComponent) {
		return getManyACT_FORsOnR614(target, null, loadComponent);
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR614(target, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR614(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614) {
			for (int i = 0; i < target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614
					.size(); ++i) {
				ForStmt_c source = (ForStmt_c) target.backPointer_IsLoopVariableForStmtIsLoopVariable_R614
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	// referring navigation

	ModelClass_c IteratesASetOfModelClass;
	public void relateAcrossR670To(ModelClass_c target) {
		relateAcrossR670To(target, true);
	}
	public void relateAcrossR670To(ModelClass_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IteratesASetOfModelClass)
			return; // already related

		if (IteratesASetOfModelClass != target) {

			Object oldKey = getInstanceKey();

			if (IteratesASetOfModelClass != null) {

				IteratesASetOfModelClass.clearBackPointerR670To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ForStmt_c.relateAcrossR670To(ModelClass_c target)",
									"Relate performed across R670 from For Stmt to Model Class without unrelate of prior instance.");
				}
			}

			IteratesASetOfModelClass = target;
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR670To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR670From(ModelClass_c target) {
		unrelateAcrossR670From(target, true);
	}
	public void unrelateAcrossR670From(ModelClass_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IteratesASetOfModelClass == null)
			return; // already unrelated

		if (target != IteratesASetOfModelClass) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R670",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR670To(this);
		}

		if (IteratesASetOfModelClass != null) {

			m_obj_id = IteratesASetOfModelClass.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IteratesASetOfModelClass.getObj_idCachedValue();
			}
			IteratesASetOfModelClass = null;
			target.removeRef();
		}
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelClass_c[] targets) {
		return getOneACT_FOROnR670(targets, null);
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelClass_c[] targets,
			ClassQueryInterface_c test) {
		ForStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FOROnR670(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelClass_c target) {
		return getOneACT_FOROnR670(target, null);
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelClass_c target,
			boolean loadComponent) {
		return getOneACT_FOROnR670(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelClass_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FOROnR670(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		return getOneACT_FOROnR670(modelRoot, target, test, true);
	}

	public static ForStmt_c getOneACT_FOROnR670(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_FOROnR670(modelRoot, target, test);
	}
	private static ForStmt_c find_getOneACT_FOROnR670(ModelRoot modelRoot,
			ModelClass_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ForStmt_R670) {
				for (int i = 0; i < target.backPointer_ForStmt_R670.size(); ++i) {
					ForStmt_c source = (ForStmt_c) target.backPointer_ForStmt_R670
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c[] targets) {
		return getManyACT_FORsOnR670(targets, null);
	}
	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c[] targets,
			boolean loadComponent) {
		return getManyACT_FORsOnR670(targets, null, loadComponent);
	}
	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR670(targets, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ForStmt_R670) {
				for (int j = 0; j < targets[i].backPointer_ForStmt_R670.size(); ++j) {
					ForStmt_c source = (ForStmt_c) targets[i].backPointer_ForStmt_R670
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c target) {
		return getManyACT_FORsOnR670(target, null);
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c target,
			boolean loadComponent) {
		return getManyACT_FORsOnR670(target, null, loadComponent);
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c target,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR670(target, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR670(ModelClass_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ForStmt_R670) {
			for (int i = 0; i < target.backPointer_ForStmt_R670.size(); ++i) {
				ForStmt_c source = (ForStmt_c) target.backPointer_ForStmt_R670
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	// referring navigation

	Variable_c SetVariable;
	public void relateAcrossR652To(Variable_c target) {
		relateAcrossR652To(target, true);
	}
	public void relateAcrossR652To(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == SetVariable)
			return; // already related

		if (SetVariable != target) {

			Object oldKey = getInstanceKey();

			if (SetVariable != null) {

				SetVariable.clearBackPointerR652To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ForStmt_c.relateAcrossR652To(Variable_c target)",
									"Relate performed across R652 from For Stmt to Variable without unrelate of prior instance.");
				}
			}

			SetVariable = target;
			m_set_var_id = target.getVar_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR652To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR652From(Variable_c target) {
		unrelateAcrossR652From(target, true);
	}
	public void unrelateAcrossR652From(Variable_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (SetVariable == null)
			return; // already unrelated

		if (target != SetVariable) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R652",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR652To(this);
		}

		if (SetVariable != null) {

			m_set_var_id = SetVariable.getVar_id();
			SetVariable = null;
			target.removeRef();
		}
	}

	public static ForStmt_c getOneACT_FOROnR652(Variable_c[] targets) {
		return getOneACT_FOROnR652(targets, null);
	}

	public static ForStmt_c getOneACT_FOROnR652(Variable_c[] targets,
			ClassQueryInterface_c test) {
		ForStmt_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_FOROnR652(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ForStmt_c getOneACT_FOROnR652(Variable_c target) {
		return getOneACT_FOROnR652(target, null);
	}

	public static ForStmt_c getOneACT_FOROnR652(Variable_c target,
			boolean loadComponent) {
		return getOneACT_FOROnR652(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ForStmt_c getOneACT_FOROnR652(Variable_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_FOROnR652(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ForStmt_c getOneACT_FOROnR652(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		return getOneACT_FOROnR652(modelRoot, target, test, true);
	}

	public static ForStmt_c getOneACT_FOROnR652(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_FOROnR652(modelRoot, target, test);
	}
	private static ForStmt_c find_getOneACT_FOROnR652(ModelRoot modelRoot,
			Variable_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsSetVariableForStmtIsSetVariable_R652) {
				for (int i = 0; i < target.backPointer_IsSetVariableForStmtIsSetVariable_R652
						.size(); ++i) {
					ForStmt_c source = (ForStmt_c) target.backPointer_IsSetVariableForStmtIsSetVariable_R652
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c[] targets) {
		return getManyACT_FORsOnR652(targets, null);
	}
	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c[] targets,
			boolean loadComponent) {
		return getManyACT_FORsOnR652(targets, null, loadComponent);
	}
	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR652(targets, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsSetVariableForStmtIsSetVariable_R652) {
				for (int j = 0; j < targets[i].backPointer_IsSetVariableForStmtIsSetVariable_R652
						.size(); ++j) {
					ForStmt_c source = (ForStmt_c) targets[i].backPointer_IsSetVariableForStmtIsSetVariable_R652
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c target) {
		return getManyACT_FORsOnR652(target, null);
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c target,
			boolean loadComponent) {
		return getManyACT_FORsOnR652(target, null, loadComponent);
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c target,
			ClassQueryInterface_c test) {
		return getManyACT_FORsOnR652(target, test, true);
	}

	public static ForStmt_c[] getManyACT_FORsOnR652(Variable_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new ForStmt_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsSetVariableForStmtIsSetVariable_R652) {
			for (int i = 0; i < target.backPointer_IsSetVariableForStmtIsSetVariable_R652
					.size(); ++i) {
				ForStmt_c source = (ForStmt_c) target.backPointer_IsSetVariableForStmtIsSetVariable_R652
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ForStmt_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R603
		Statement_c relInst57877 = (Statement_c) baseRoot.getInstanceList(
				Statement_c.class).get(new Object[]{m_statement_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst57877 == null) {
			relInst57877 = (Statement_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Statement_c.class)
					.get(new Object[]{m_statement_id});
		}
		if (relInst57877 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst57877 = (Statement_c) roots[i].getInstanceList(
						Statement_c.class).get(new Object[]{m_statement_id});
				if (relInst57877 != null)
					break;
			}
		}
		//synchronized
		if (relInst57877 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst57877) && !isProxy())) {
				relInst57877.relateAcrossR603To(this, notifyChanges);
			}
		}

		if (ControlsBlock == null) {
			// R605
			Block_c relInst57878 = (Block_c) baseRoot.getInstanceList(
					Block_c.class).get(new Object[]{m_block_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57878 == null) {
				relInst57878 = (Block_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Block_c.class)
						.get(new Object[]{m_block_id});
			}
			if (relInst57878 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57878 = (Block_c) roots[i].getInstanceList(
							Block_c.class).get(new Object[]{m_block_id});
					if (relInst57878 != null)
						break;
				}
			}
			//synchronized
			if (relInst57878 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57878) && !isProxy())) {
					relInst57878.relateAcrossR605To(this, notifyChanges);
				}
			}
		}

		if (LoopVariable == null) {
			// R614
			Variable_c relInst57879 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_loop_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57879 == null) {
				relInst57879 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_loop_var_id});
			}
			if (relInst57879 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57879 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_loop_var_id});
					if (relInst57879 != null)
						break;
				}
			}
			//synchronized
			if (relInst57879 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57879) && !isProxy())) {
					relInst57879.relateAcrossR614To(this, notifyChanges);
				}
			}
		}

		if (IteratesASetOfModelClass == null) {
			// R670
			ModelClass_c relInst57880 = (ModelClass_c) baseRoot
					.getInstanceList(ModelClass_c.class).get(
							new Object[]{m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57880 == null) {
				relInst57880 = (ModelClass_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(ModelClass_c.class)
						.get(new Object[]{m_obj_id});
			}
			if (relInst57880 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57880 = (ModelClass_c) roots[i].getInstanceList(
							ModelClass_c.class).get(new Object[]{m_obj_id});
					if (relInst57880 != null)
						break;
				}
			}
			//synchronized
			if (relInst57880 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57880) && !isProxy())) {
					relInst57880.relateAcrossR670To(this, notifyChanges);
				}
			}
		}

		if (SetVariable == null) {
			// R652
			Variable_c relInst57881 = (Variable_c) baseRoot.getInstanceList(
					Variable_c.class).get(new Object[]{m_set_var_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57881 == null) {
				relInst57881 = (Variable_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Variable_c.class)
						.get(new Object[]{m_set_var_id});
			}
			if (relInst57881 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57881 = (Variable_c) roots[i].getInstanceList(
							Variable_c.class).get(new Object[]{m_set_var_id});
					if (relInst57881 != null)
						break;
				}
			}
			//synchronized
			if (relInst57881 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57881) && !isProxy())) {
					relInst57881.relateAcrossR652To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R603
		// ACT_SMT
		inst = IsSupertypeStatement;
		unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R605
		// ACT_BLK
		inst = ControlsBlock;
		unrelateAcrossR605From(ControlsBlock, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R614
		// V_VAR
		inst = LoopVariable;
		unrelateAcrossR614From(LoopVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R670
		// O_OBJ
		inst = IteratesASetOfModelClass;
		unrelateAcrossR670From(IteratesASetOfModelClass, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R652
		// V_VAR
		inst = SetVariable;
		unrelateAcrossR652From(SetVariable, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ForStmt_c inst = (ForStmt_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ForStmt_c ForStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ForStmt_c result = findForStmtInstance(modelRoot, test, loadComponent);
		return result;
	}
	private static ForStmt_c findForStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ForStmt_c x = (ForStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static ForStmt_c ForStmtInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ForStmtInstance(modelRoot, test, true);
	}

	public static ForStmt_c ForStmtInstance(ModelRoot modelRoot) {
		return ForStmtInstance(modelRoot, null, true);
	}

	public static ForStmt_c[] ForStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ForStmt_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ForStmt_c x = (ForStmt_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ForStmt_c[] ret_set = new ForStmt_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ForStmt_c[0];
			}
		}
	}
	public static ForStmt_c[] ForStmtInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ForStmtInstances(modelRoot, test, true);
	}
	public static ForStmt_c[] ForStmtInstances(ModelRoot modelRoot) {
		return ForStmtInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the For Stmt.dispose call: ";
		Statement_c testR603Inst2 = Statement_c
				.getOneACT_SMTOnR603(this, false);

		if (testR603Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "603 ";
		}
		Block_c testR605Inst = Block_c.getOneACT_BLKOnR605(this, false);

		if (testR605Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "605 ";
		}
		Variable_c testR614Inst = Variable_c.getOneV_VAROnR614(this, false);

		if (testR614Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "614 ";
		}
		ModelClass_c testR670Inst = ModelClass_c.getOneO_OBJOnR670(this, false);

		if (testR670Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "670 ";
		}
		Variable_c testR652Inst = Variable_c.getOneV_VAROnR652(this, false);

		if (testR652Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "652 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "For Stmt", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("statement_id")) {
			return true;
		}
		if (attributeName.equals("block_id")) {
			return true;
		}
		if (attributeName.equals("loop_var_id")) {
			return true;
		}
		if (attributeName.equals("set_var_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getStatement_idLongBased() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getStatement_id() {
		if (IsSupertypeStatement != null) {
			return IsSupertypeStatement.getStatement_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeStatement != null);

	}

	public java.util.UUID getStatement_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_statement_id))
			return m_statement_id;
		else
			return getStatement_id();
	}

	public void setStatement_id(java.util.UUID newValue) {
		m_statement_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getBlock_idLongBased() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getBlock_id() {
		if (ControlsBlock != null) {
			return ControlsBlock.getBlock_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getBlock_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_block_id))
			return m_block_id;
		else
			return getBlock_id();
	}

	public void setBlock_id(java.util.UUID newValue) {
		m_block_id = IdAssigner.preprocessUUID(newValue);
	}
	public boolean getIs_implicit() {
		return m_is_implicit;
	}

	public void setIs_implicit(boolean newValue) {
		m_is_implicit = newValue;
	}
	public long getLoop_var_idLongBased() {
		if (LoopVariable != null) {
			return LoopVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getLoop_var_id() {
		if (LoopVariable != null) {
			return LoopVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getLoop_var_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_loop_var_id))
			return m_loop_var_id;
		else
			return getLoop_var_id();
	}

	public void setLoop_var_id(java.util.UUID newValue) {
		m_loop_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSet_var_idLongBased() {
		if (SetVariable != null) {
			return SetVariable.getVar_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSet_var_id() {
		if (SetVariable != null) {
			return SetVariable.getVar_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSet_var_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_set_var_id))
			return m_set_var_id;
		else
			return getSet_var_id();
	}

	public void setSet_var_id(java.util.UUID newValue) {
		m_set_var_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getObj_idLongBased() {
		if (IteratesASetOfModelClass != null) {
			return IteratesASetOfModelClass.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IteratesASetOfModelClass != null) {
			return IteratesASetOfModelClass.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		m_obj_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "For Stmt", //$NON-NLS-1$
				" Operation entered: For Stmt::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ForStmt_c[] objs = ForStmt_c.ForStmtInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "For Stmt", //$NON-NLS-1$
				" Operation entered: For Stmt::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ForStmt_c_test57883_c implements ClassQueryInterface_c {
			ForStmt_c_test57883_c(java.util.UUID p57884) {
				m_p57884 = p57884;
			}
			private java.util.UUID m_p57884;
			public boolean evaluate(Object candidate) {
				ForStmt_c selected = (ForStmt_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57884));
				return retval;
			}
		}

		ForStmt_c[] objs57882 = ForStmt_c.ForStmtInstances(modelRoot,
				new ForStmt_c_test57883_c(getStatement_id()));

		if (((objs57882.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57882.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: For Stmt: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs57882.length), e);
			}
			retval = false;

		}

		if (((objs57882.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57882.length)
										+ " Statement_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57882.length)
										+ " Statement_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// For Stmt is a subtype in association: rel.Numb = 603
		// The supertype class is: Statement
		class Statement_c_test57888_c implements ClassQueryInterface_c {
			Statement_c_test57888_c(java.util.UUID p57889) {
				m_p57889 = p57889;
			}
			private java.util.UUID m_p57889;
			public boolean evaluate(Object candidate) {
				Statement_c selected = (Statement_c) candidate;
				boolean retval = false;
				retval = (selected.getStatement_id().equals(m_p57889));
				return retval;
			}
		}

		Statement_c[] objs57887 = Statement_c.StatementInstances(modelRoot,
				new Statement_c_test57888_c(getStatement_id()));

		if (((objs57887.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57887.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57887.length), e);
			}
			retval = false;

		}

		// For Stmt is a referring class in association: rel.Numb = 605
		// The participating class is: Block
		class Block_c_test57891_c implements ClassQueryInterface_c {
			Block_c_test57891_c(java.util.UUID p57892) {
				m_p57892 = p57892;
			}
			private java.util.UUID m_p57892;
			public boolean evaluate(Object candidate) {
				Block_c selected = (Block_c) candidate;
				boolean retval = false;
				retval = (selected.getBlock_id().equals(m_p57892));
				return retval;
			}
		}

		Block_c[] objs57890 = Block_c.BlockInstances(modelRoot,
				new Block_c_test57891_c(getBlock_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57890.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Association: 605: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57890.length)
										+ " Block_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Association: 605: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57890.length)
										+ " Block_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// For Stmt is a referring class in association: rel.Numb = 614
		// The participating class is: Variable
		class Variable_c_test57894_c implements ClassQueryInterface_c {
			Variable_c_test57894_c(java.util.UUID p57895) {
				m_p57895 = p57895;
			}
			private java.util.UUID m_p57895;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p57895));
				return retval;
			}
		}

		Variable_c[] objs57893 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test57894_c(getLoop_var_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57893.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Association: 614: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57893.length)
										+ " Loop_Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Association: 614: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57893.length)
										+ " Loop_Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// For Stmt is a referring class in association: rel.Numb = 652
		// The participating class is: Variable
		class Variable_c_test57897_c implements ClassQueryInterface_c {
			Variable_c_test57897_c(java.util.UUID p57898) {
				m_p57898 = p57898;
			}
			private java.util.UUID m_p57898;
			public boolean evaluate(Object candidate) {
				Variable_c selected = (Variable_c) candidate;
				boolean retval = false;
				retval = (selected.getVar_id().equals(m_p57898));
				return retval;
			}
		}

		Variable_c[] objs57896 = Variable_c.VariableInstances(modelRoot,
				new Variable_c_test57897_c(getSet_var_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57896.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Association: 652: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57896.length)
										+ " Set_Var_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Association: 652: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57896.length)
										+ " Set_Var_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// For Stmt is a referring class in association: rel.Numb = 670
		// The participating class is: Model Class
		class ModelClass_c_test57900_c implements ClassQueryInterface_c {
			ModelClass_c_test57900_c(java.util.UUID p57901) {
				m_p57901 = p57901;
			}
			private java.util.UUID m_p57901;
			public boolean evaluate(Object candidate) {
				ModelClass_c selected = (ModelClass_c) candidate;
				boolean retval = false;
				retval = (selected.getObj_id().equals(m_p57901));
				return retval;
			}
		}

		ModelClass_c[] objs57899 = ModelClass_c.ModelClassInstances(modelRoot,
				new ModelClass_c_test57900_c(getObj_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57899.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"For Stmt", //$NON-NLS-1$
								"Consistency: Object: For Stmt: Association: 670: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57899.length)
										+ " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: For Stmt: Association: 670: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57899.length)
										+ " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "For Stmt",
				" Operation entered: ForStmt::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c.getOneO_OBJOnR670(this);

		if (((v_obj != null))) {

			this.unrelateAcrossR670From(v_obj);

		}

		Variable_c v_iter = Variable_c.getOneV_VAROnR614(this);

		if (((v_iter != null))) {

			this.unrelateAcrossR614From(v_iter);

		}

		Variable_c v_iter_set = Variable_c.getOneV_VAROnR652(this);

		if (((v_iter_set != null))) {

			this.unrelateAcrossR652From(v_iter_set);

		}

		Block_c v_blk = Block_c.getOneACT_BLKOnR605(this);

		if (((v_blk != null))) {

			this.unrelateAcrossR605From(v_blk);

			if (v_blk != null) {
				v_blk.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		delete();

	} // End dispose
	public void Execute(final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "For Stmt",
				" Operation entered: ForStmt::Execute");
		final ModelRoot modelRoot = getModelRoot();

	} // End execute
	public java.util.UUID Getlocalloopvarid(
			final java.util.UUID p_Stack_frame_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "For Stmt",
				" Operation entered: ForStmt::Getlocalloopvarid");
		final ModelRoot modelRoot = getModelRoot();
		return Gd_c.Null_unique_id();

	} // End getLocalLoopVarID

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end For Stmt
