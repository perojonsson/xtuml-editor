package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.LinkedAssociation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_LINKED_ASSOCIATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class LinkedAssociation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public LinkedAssociation_c(ModelRoot modelRoot, java.util.UUID p_m_rel_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_rel_id};
		addInstanceToMap(key);
	}
	static public LinkedAssociation_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_rel_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);
		LinkedAssociation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id};
			new_inst = (LinkedAssociation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new LinkedAssociation_c(modelRoot, p_m_rel_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public LinkedAssociation_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_rel_id) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);
		LinkedAssociation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_rel_id};
			source = (LinkedAssociation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		LinkedAssociation_c new_inst = new LinkedAssociation_c(modelRoot,
				p_m_rel_id);
		return new_inst;
	}
	public LinkedAssociation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_rel_id != p_newKey) {

			m_rel_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof LinkedAssociation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof LinkedAssociation_c)) {
			return false;
		}

		LinkedAssociation_c me = (LinkedAssociation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((LinkedAssociation_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((LinkedAssociation_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof LinkedAssociation_c)) {
			return false;
		}

		LinkedAssociation_c me = (LinkedAssociation_c) elem;
		if (!getRel_idCachedValue().equals(
				((LinkedAssociation_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	Association_c IsSupertypeAssociation;
	public void relateAcrossR206To(Association_c target) {
		relateAcrossR206To(target, true);
	}
	public void relateAcrossR206To(Association_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeAssociation)
			return; // already related

		if (IsSupertypeAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeAssociation != null) {

				IsSupertypeAssociation.clearBackPointerR206To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"LinkedAssociation_c.relateAcrossR206To(Association_c target)",
									"Relate performed across R206 from Linked Association to Association without unrelate of prior instance.");
				}
			}

			IsSupertypeAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR206To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR206From(Association_c target) {
		unrelateAcrossR206From(target, true);
	}
	public void unrelateAcrossR206From(Association_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeAssociation == null)
			return; // already unrelated

		if (target != IsSupertypeAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R206",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR206To(this);
		}

		if (IsSupertypeAssociation != null) {

			m_rel_id = IsSupertypeAssociation.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsSupertypeAssociation.getRel_idCachedValue();
			}
			IsSupertypeAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "206", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(
			Association_c[] targets) {
		return getOneR_ASSOCOnR206(targets, null);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(
			Association_c[] targets, ClassQueryInterface_c test) {
		LinkedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_ASSOCOnR206(targets[i], test);
			}
		}

		return ret_val;
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(Association_c target) {
		return getOneR_ASSOCOnR206(target, null);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(Association_c target,
			boolean loadComponent) {
		return getOneR_ASSOCOnR206(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_ASSOCOnR206(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test) {
		return getOneR_ASSOCOnR206(modelRoot, target, test, true);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR206(ModelRoot modelRoot,
			Association_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_ASSOCOnR206(modelRoot, target, test);
	}
	private static LinkedAssociation_c find_getOneR_ASSOCOnR206(
			ModelRoot modelRoot, Association_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			LinkedAssociation_c source = (LinkedAssociation_c) target.backPointer_IsSubtypeLinkedAssociationIsSubtype_R206;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c[] targets) {
		return getManyR_ASSOCsOnR206(targets, null);
	}
	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c[] targets, boolean loadComponent) {
		return getManyR_ASSOCsOnR206(targets, null, loadComponent);
	}
	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c[] targets, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR206(targets, test, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new LinkedAssociation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			LinkedAssociation_c source = (LinkedAssociation_c) targets[i].backPointer_IsSubtypeLinkedAssociationIsSubtype_R206;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			LinkedAssociation_c[] ret_set = new LinkedAssociation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new LinkedAssociation_c[0];
		}
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c target) {
		if (target != null) {
			Association_c[] targetArray = new Association_c[1];
			targetArray[0] = target;
			return getManyR_ASSOCsOnR206(targetArray);
		} else {
			LinkedAssociation_c[] result = new LinkedAssociation_c[0];
			return result;
		}
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR206(
			Association_c target, boolean loadComponent) {
		if (target != null) {
			Association_c[] targetArray = new Association_c[1];
			targetArray[0] = target;
			return getManyR_ASSOCsOnR206(targetArray, loadComponent);
		} else {
			LinkedAssociation_c[] result = new LinkedAssociation_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ClassAsAssociatedOneSide_c backPointer_RelatesClassAsAssociatedOneSideRelates_R209;

	public void setClassAsAssociatedOneSideOrderInChildListR209(
			ClassAsAssociatedOneSide_c target, int index) {
		unrelateAcrossR209From(target);
		ClassAsAssociatedOneSide_c[] elements = ClassAsAssociatedOneSide_c
				.getManyR_AONEsOnR209(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR209From((ClassAsAssociatedOneSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR209To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR209To((ClassAsAssociatedOneSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR209To(ClassAsAssociatedOneSide_c target) {
		if (target != null) {
			target.relateAcrossR209To(this, true);
		}
	}

	public void relateAcrossR209To(ClassAsAssociatedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR209To(this, notifyChanges);
		}
	}

	public void setBackPointerR209To(ClassAsAssociatedOneSide_c target) {
		backPointer_RelatesClassAsAssociatedOneSideRelates_R209 = target;
	}

	public void unrelateAcrossR209From(ClassAsAssociatedOneSide_c target) {
		if (target != null) {
			target.unrelateAcrossR209From(this, true);
		}
	}

	public void unrelateAcrossR209From(ClassAsAssociatedOneSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR209From(this, notifyChanges);
		}
	}

	public void clearBackPointerR209To(ClassAsAssociatedOneSide_c target) {
		if (target == backPointer_RelatesClassAsAssociatedOneSideRelates_R209) {
			backPointer_RelatesClassAsAssociatedOneSideRelates_R209 = null;
		}
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR209(
			ClassAsAssociatedOneSide_c[] targets) {
		return getOneR_ASSOCOnR209(targets, null);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR209(
			ClassAsAssociatedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_ASSOCOnR209(targets, test, true);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR209(
			ClassAsAssociatedOneSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		LinkedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkedAssociation_c candidate_val = getOneR_ASSOCOnR209(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_ASSOCOnR209(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR209(
			ClassAsAssociatedOneSide_c target) {
		return getOneR_ASSOCOnR209(target, true);
	}
	public static LinkedAssociation_c getOneR_ASSOCOnR209(
			ClassAsAssociatedOneSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsRelatedToOtherSideViaLinkedAssociation;
		} else {
			return null;
		}
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR209(targets, test, true);
	}

	public static LinkedAssociation_c [] getManyR_ASSOCsOnR209(ClassAsAssociatedOneSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkedAssociation_c[0];
  
  
  LinkedHashSet<LinkedAssociation_c> elementsSet = new LinkedHashSet<LinkedAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToOtherSideViaLinkedAssociation == null)
	  targets[i].loadProxy();
    LinkedAssociation_c associate = targets[i].IsRelatedToOtherSideViaLinkedAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkedAssociation_c[] result = new LinkedAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c[] targets) {
		return getManyR_ASSOCsOnR209(targets, null);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsAssociatedOneSide_c[] targetArray = new ClassAsAssociatedOneSide_c[1];
			targetArray[0] = target;
			return getManyR_ASSOCsOnR209(targetArray, test, loadComponent);
		} else {
			LinkedAssociation_c[] result = new LinkedAssociation_c[0];
			return result;
		}

	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c target, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR209(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c target) {
		return getManyR_ASSOCsOnR209(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR209(
			ClassAsAssociatedOneSide_c target, boolean loadComponent) {
		return getManyR_ASSOCsOnR209(target, null, loadComponent);
	}

	// referred to navigation

	ClassAsAssociatedOtherSide_c backPointer_RelatesClassAsAssociatedOtherSideRelates_R210;

	public void setClassAsAssociatedOtherSideOrderInChildListR210(
			ClassAsAssociatedOtherSide_c target, int index) {
		unrelateAcrossR210From(target);
		ClassAsAssociatedOtherSide_c[] elements = ClassAsAssociatedOtherSide_c
				.getManyR_AOTHsOnR210(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR210From((ClassAsAssociatedOtherSide_c) elements[i]);
			}
			count++;
		}
		relateAcrossR210To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR210To((ClassAsAssociatedOtherSide_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR210To(ClassAsAssociatedOtherSide_c target) {
		if (target != null) {
			target.relateAcrossR210To(this, true);
		}
	}

	public void relateAcrossR210To(ClassAsAssociatedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR210To(this, notifyChanges);
		}
	}

	public void setBackPointerR210To(ClassAsAssociatedOtherSide_c target) {
		backPointer_RelatesClassAsAssociatedOtherSideRelates_R210 = target;
	}

	public void unrelateAcrossR210From(ClassAsAssociatedOtherSide_c target) {
		if (target != null) {
			target.unrelateAcrossR210From(this, true);
		}
	}

	public void unrelateAcrossR210From(ClassAsAssociatedOtherSide_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR210From(this, notifyChanges);
		}
	}

	public void clearBackPointerR210To(ClassAsAssociatedOtherSide_c target) {
		if (target == backPointer_RelatesClassAsAssociatedOtherSideRelates_R210) {
			backPointer_RelatesClassAsAssociatedOtherSideRelates_R210 = null;
		}
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR210(
			ClassAsAssociatedOtherSide_c[] targets) {
		return getOneR_ASSOCOnR210(targets, null);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR210(
			ClassAsAssociatedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getOneR_ASSOCOnR210(targets, test, true);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR210(
			ClassAsAssociatedOtherSide_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		LinkedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkedAssociation_c candidate_val = getOneR_ASSOCOnR210(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_ASSOCOnR210(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR210(
			ClassAsAssociatedOtherSide_c target) {
		return getOneR_ASSOCOnR210(target, true);
	}
	public static LinkedAssociation_c getOneR_ASSOCOnR210(
			ClassAsAssociatedOtherSide_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsRelatedToOneSideViaLinkedAssociation;
		} else {
			return null;
		}
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c[] targets, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR210(targets, test, true);
	}

	public static LinkedAssociation_c [] getManyR_ASSOCsOnR210(ClassAsAssociatedOtherSide_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkedAssociation_c[0];
  
  
  LinkedHashSet<LinkedAssociation_c> elementsSet = new LinkedHashSet<LinkedAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsRelatedToOneSideViaLinkedAssociation == null)
	  targets[i].loadProxy();
    LinkedAssociation_c associate = targets[i].IsRelatedToOneSideViaLinkedAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkedAssociation_c[] result = new LinkedAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c[] targets) {
		return getManyR_ASSOCsOnR210(targets, null);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsAssociatedOtherSide_c[] targetArray = new ClassAsAssociatedOtherSide_c[1];
			targetArray[0] = target;
			return getManyR_ASSOCsOnR210(targetArray, test, loadComponent);
		} else {
			LinkedAssociation_c[] result = new LinkedAssociation_c[0];
			return result;
		}

	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c target, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR210(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c target) {
		return getManyR_ASSOCsOnR210(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR210(
			ClassAsAssociatedOtherSide_c target, boolean loadComponent) {
		return getManyR_ASSOCsOnR210(target, null, loadComponent);
	}

	// referred to navigation

	ClassAsLink_c backPointer_UsesAFormalizerClassAsLinkUsesAFormalizer_R211;

	public void setClassAsLinkOrderInChildListR211(ClassAsLink_c target,
			int index) {
		unrelateAcrossR211From(target);
		ClassAsLink_c[] elements = ClassAsLink_c.getManyR_ASSRsOnR211(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR211From((ClassAsLink_c) elements[i]);
			}
			count++;
		}
		relateAcrossR211To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR211To((ClassAsLink_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR211To(ClassAsLink_c target) {
		if (target != null) {
			target.relateAcrossR211To(this, true);
		}
	}

	public void relateAcrossR211To(ClassAsLink_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR211To(this, notifyChanges);
		}
	}

	public void setBackPointerR211To(ClassAsLink_c target) {
		backPointer_UsesAFormalizerClassAsLinkUsesAFormalizer_R211 = target;
	}

	public void unrelateAcrossR211From(ClassAsLink_c target) {
		if (target != null) {
			target.unrelateAcrossR211From(this, true);
		}
	}

	public void unrelateAcrossR211From(ClassAsLink_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR211From(this, notifyChanges);
		}
	}

	public void clearBackPointerR211To(ClassAsLink_c target) {
		if (target == backPointer_UsesAFormalizerClassAsLinkUsesAFormalizer_R211) {
			backPointer_UsesAFormalizerClassAsLinkUsesAFormalizer_R211 = null;
		}
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR211(
			ClassAsLink_c[] targets) {
		return getOneR_ASSOCOnR211(targets, null);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR211(
			ClassAsLink_c[] targets, ClassQueryInterface_c test) {
		return getOneR_ASSOCOnR211(targets, test, true);
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR211(
			ClassAsLink_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		LinkedAssociation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					LinkedAssociation_c candidate_val = getOneR_ASSOCOnR211(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneR_ASSOCOnR211(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static LinkedAssociation_c getOneR_ASSOCOnR211(ClassAsLink_c target) {
		return getOneR_ASSOCOnR211(target, true);
	}
	public static LinkedAssociation_c getOneR_ASSOCOnR211(ClassAsLink_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.FormalizesAssociationBetweenAssociatedClassesLinkedAssociation;
		} else {
			return null;
		}
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c[] targets, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR211(targets, test, true);
	}

	public static LinkedAssociation_c [] getManyR_ASSOCsOnR211(ClassAsLink_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new LinkedAssociation_c[0];
  
  
  LinkedHashSet<LinkedAssociation_c> elementsSet = new LinkedHashSet<LinkedAssociation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].FormalizesAssociationBetweenAssociatedClassesLinkedAssociation == null)
	  targets[i].loadProxy();
    LinkedAssociation_c associate = targets[i].FormalizesAssociationBetweenAssociatedClassesLinkedAssociation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  LinkedAssociation_c[] result = new LinkedAssociation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c[] targets) {
		return getManyR_ASSOCsOnR211(targets, null);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ClassAsLink_c[] targetArray = new ClassAsLink_c[1];
			targetArray[0] = target;
			return getManyR_ASSOCsOnR211(targetArray, test, loadComponent);
		} else {
			LinkedAssociation_c[] result = new LinkedAssociation_c[0];
			return result;
		}

	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c target, ClassQueryInterface_c test) {
		return getManyR_ASSOCsOnR211(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c target) {
		return getManyR_ASSOCsOnR211(target, null, true);
	}

	public static LinkedAssociation_c[] getManyR_ASSOCsOnR211(
			ClassAsLink_c target, boolean loadComponent) {
		return getManyR_ASSOCsOnR211(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R206
		Association_c relInst58207 = (Association_c) baseRoot.getInstanceList(
				Association_c.class).get(new Object[]{m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58207 == null) {
			relInst58207 = (Association_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Association_c.class)
					.get(new Object[]{m_rel_id});
		}
		if (relInst58207 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58207 = (Association_c) roots[i].getInstanceList(
						Association_c.class).get(new Object[]{m_rel_id});
				if (relInst58207 != null)
					break;
			}
		}
		//synchronized
		if (relInst58207 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58207) && !isProxy())) {
				relInst58207.relateAcrossR206To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R206
		// R_REL
		inst = IsSupertypeAssociation;
		unrelateAcrossR206From(IsSupertypeAssociation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(LinkedAssociation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final LinkedAssociation_c inst = (LinkedAssociation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static LinkedAssociation_c LinkedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		LinkedAssociation_c result = findLinkedAssociationInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					LinkedAssociation_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findLinkedAssociationInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static LinkedAssociation_c findLinkedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LinkedAssociation_c x = (LinkedAssociation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static LinkedAssociation_c LinkedAssociationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LinkedAssociationInstance(modelRoot, test, true);
	}

	public static LinkedAssociation_c LinkedAssociationInstance(
			ModelRoot modelRoot) {
		return LinkedAssociationInstance(modelRoot, null, true);
	}

	public static LinkedAssociation_c[] LinkedAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					LinkedAssociation_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(LinkedAssociation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				LinkedAssociation_c x = (LinkedAssociation_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				LinkedAssociation_c[] ret_set = new LinkedAssociation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new LinkedAssociation_c[0];
			}
		}
	}
	public static LinkedAssociation_c[] LinkedAssociationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return LinkedAssociationInstances(modelRoot, test, true);
	}
	public static LinkedAssociation_c[] LinkedAssociationInstances(
			ModelRoot modelRoot) {
		return LinkedAssociationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Linked Association.dispose call: ";
		Association_c testR206Inst4 = Association_c.getOneR_RELOnR206(this,
				false);

		if (testR206Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "206 ";
		}
		ClassAsAssociatedOneSide_c testR209Inst = ClassAsAssociatedOneSide_c
				.getOneR_AONEOnR209(this, false);

		if (testR209Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "209 ";
		}
		ClassAsAssociatedOtherSide_c testR210Inst = ClassAsAssociatedOtherSide_c
				.getOneR_AOTHOnR210(this, false);

		if (testR210Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "210 ";
		}
		ClassAsLink_c testR211Inst = ClassAsLink_c.getOneR_ASSROnR211(this,
				false);

		if (testR211Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "211 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Linked Association",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getRel_idLongBased() {
		if (IsSupertypeAssociation != null) {
			return IsSupertypeAssociation.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (IsSupertypeAssociation != null) {
			return IsSupertypeAssociation.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeAssociation != null);

	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	public void setRel_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_rel_id)) {
				return;
			}
		} else if (m_rel_id != null) {
			if (m_rel_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Rel_id", m_rel_id, newValue, true);
		m_rel_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Linked Association", //$NON-NLS-1$
						" Operation entered: Linked Association::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		LinkedAssociation_c[] objs = LinkedAssociation_c
				.LinkedAssociationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association", //$NON-NLS-1$
				" Operation entered: Linked Association::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class LinkedAssociation_c_test58209_c implements ClassQueryInterface_c {
			LinkedAssociation_c_test58209_c(java.util.UUID p58210) {
				m_p58210 = p58210;
			}
			private java.util.UUID m_p58210;
			public boolean evaluate(Object candidate) {
				LinkedAssociation_c selected = (LinkedAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58210));
				return retval;
			}
		}

		LinkedAssociation_c[] objs58208 = LinkedAssociation_c
				.LinkedAssociationInstances(modelRoot,
						new LinkedAssociation_c_test58209_c(getRel_id()));

		if (((objs58208.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58208.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58208.length), e);
			}
			retval = false;

		}

		if (((objs58208.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58208.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58208.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Linked Association is a subtype in association: rel.Numb = 206
		// The supertype class is: Association
		class Association_c_test58214_c implements ClassQueryInterface_c {
			Association_c_test58214_c(java.util.UUID p58215) {
				m_p58215 = p58215;
			}
			private java.util.UUID m_p58215;
			public boolean evaluate(Object candidate) {
				Association_c selected = (Association_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58215));
				return retval;
			}
		}

		Association_c[] objs58213 = Association_c.AssociationInstances(
				modelRoot, new Association_c_test58214_c(getRel_id()));

		if (((objs58213.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58213.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Association: 206: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58213.length), e);
			}
			retval = false;

		}

		// Linked Association is a participating class in association: rel.Numb = 209
		// Object: Class As Associated One Side
		class ClassAsAssociatedOneSide_c_test58217_c
				implements
					ClassQueryInterface_c {
			ClassAsAssociatedOneSide_c_test58217_c(java.util.UUID p58218) {
				m_p58218 = p58218;
			}
			private java.util.UUID m_p58218;
			public boolean evaluate(Object candidate) {
				ClassAsAssociatedOneSide_c selected = (ClassAsAssociatedOneSide_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58218));
				return retval;
			}
		}

		ClassAsAssociatedOneSide_c[] objs58216 = ClassAsAssociatedOneSide_c
				.ClassAsAssociatedOneSideInstances(modelRoot,
						new ClassAsAssociatedOneSide_c_test58217_c(getRel_id()));

		if (((objs58216.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Association: 209: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58216.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Association: 209: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58216.length), e);
			}
			retval = false;

		}

		// Linked Association is a participating class in association: rel.Numb = 210
		// Object: Class As Associated Other Side
		class ClassAsAssociatedOtherSide_c_test58220_c
				implements
					ClassQueryInterface_c {
			ClassAsAssociatedOtherSide_c_test58220_c(java.util.UUID p58221) {
				m_p58221 = p58221;
			}
			private java.util.UUID m_p58221;
			public boolean evaluate(Object candidate) {
				ClassAsAssociatedOtherSide_c selected = (ClassAsAssociatedOtherSide_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58221));
				return retval;
			}
		}

		ClassAsAssociatedOtherSide_c[] objs58219 = ClassAsAssociatedOtherSide_c
				.ClassAsAssociatedOtherSideInstances(modelRoot,
						new ClassAsAssociatedOtherSide_c_test58220_c(
								getRel_id()));

		if (((objs58219.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Association: 210: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58219.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Association: 210: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58219.length), e);
			}
			retval = false;

		}

		// Linked Association is a participating class in association: rel.Numb = 211
		// Object: Class As Link
		class ClassAsLink_c_test58223_c implements ClassQueryInterface_c {
			ClassAsLink_c_test58223_c(java.util.UUID p58224) {
				m_p58224 = p58224;
			}
			private java.util.UUID m_p58224;
			public boolean evaluate(Object candidate) {
				ClassAsLink_c selected = (ClassAsLink_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58224));
				return retval;
			}
		}

		ClassAsLink_c[] objs58222 = ClassAsLink_c.ClassAsLinkInstances(
				modelRoot, new ClassAsLink_c_test58223_c(getRel_id()));

		if (((objs58222.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Linked Association", //$NON-NLS-1$
								"Consistency: Object: Linked Association: Association: 211: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58222.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Linked Association: Association: 211: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58222.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		Association_c v_rel = Association_c.getOneR_RELOnR206(this);

		boolean v_isReflexive = false;

		if (((v_rel != null))) {

			v_isReflexive = v_rel.Is_reflexive();

		}

		if ((v_isReflexive)) {

			if ((p_At == End_c.Start || p_At == End_c.Start_Fixed)) {

				ClassAsAssociatedOneSide_c v_aone = ClassAsAssociatedOneSide_c
						.getOneR_AONEOnR209(this);

				if (((v_aone != null))) {

					v_result = v_aone.Get_connector_text(p_At);

				}

			}

			else if ((p_At == End_c.End || p_At == End_c.End_Fixed)) {

				ClassAsAssociatedOtherSide_c v_aoth = ClassAsAssociatedOtherSide_c
						.getOneR_AOTHOnR210(this);

				if (((v_aoth != null))) {

					v_result = v_aoth.Get_connector_text(p_At);

				}

			}

		}

		else {

			class ClassAsAssociatedOneSide_test55990_c
					implements
						ClassQueryInterface_c {
				public boolean evaluate(Object candidate) {
					ClassAsAssociatedOneSide_c selected = (ClassAsAssociatedOneSide_c) candidate;
					return (selected.getObj_id().equals(p_Obj_id));
				}
			}
			ClassAsAssociatedOneSide_c v_oneside = ClassAsAssociatedOneSide_c
					.getOneR_AONEOnR209(this,
							new ClassAsAssociatedOneSide_test55990_c());

			if (((v_oneside != null))) {

				v_result = v_oneside.Get_connector_text(p_At);

			}

			else {

				class ClassAsAssociatedOtherSide_test55991_c
						implements
							ClassQueryInterface_c {
					public boolean evaluate(Object candidate) {
						ClassAsAssociatedOtherSide_c selected = (ClassAsAssociatedOtherSide_c) candidate;
						return (selected.getObj_id().equals(p_Obj_id));
					}
				}
				ClassAsAssociatedOtherSide_c v_other = ClassAsAssociatedOtherSide_c
						.getOneR_AOTHOnR210(this,
								new ClassAsAssociatedOtherSide_test55991_c());

				if (((v_other != null))) {

					v_result = v_other.Get_connector_text(p_At);

				}

			}

		}

		return v_result;

	} // End get_connector_text
	public void Migratetosimple() {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Migratetosimple");
		final ModelRoot modelRoot = getModelRoot();
		if ((Isformalized())) {

			Unformalize();

		}

		Association_c v_origAssoc = Association_c.getOneR_RELOnR206(this);

		this.unrelateAcrossR206From(v_origAssoc);

		SimpleAssociation_c v_simple = new SimpleAssociation_c(modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_simple));

		if (v_origAssoc != null) {
			v_origAssoc.relateAcrossR206To(v_simple);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ClassAsAssociatedOneSide_c v_aone = ClassAsAssociatedOneSide_c
				.getOneR_AONEOnR209(this);

		ClassAsSimpleParticipant_c v_rpart1 = new ClassAsSimpleParticipant_c(
				modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_rpart1));

		if (v_rpart1 != null) {
			v_rpart1.setMult(v_aone.getMult());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_rpart1 != null) {
			v_rpart1.setCond(v_aone.getCond());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_rpart1 != null) {
			v_rpart1.setTxt_phrs(v_aone.getTxt_phrs());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_simple != null) {
			v_simple.relateAcrossR207To(v_rpart1);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(v_aone);

		if (v_aone != null) {
			v_aone.unrelateAcrossR204From(v_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Unrelate attempted on null left hand instance.", t);
		}

		if (v_rpart1 != null) {
			v_rpart1.relateAcrossR204To(v_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		this.unrelateAcrossR209From(v_aone);

		if (v_aone != null) {
			// get the location of this element in the instance list
			// before deleting
			if (v_aone.delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, v_aone));
			}
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Delete attempted on null instance.", t);
		}

		ClassAsAssociatedOtherSide_c v_aoth = ClassAsAssociatedOtherSide_c
				.getOneR_AOTHOnR210(this);

		ClassAsSimpleParticipant_c v_rpart2 = new ClassAsSimpleParticipant_c(
				modelRoot);
		Ooaofooa.getDefaultInstance()
				.fireModelElementCreated(
						new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
								v_rpart2));

		if (v_rpart2 != null) {
			v_rpart2.setMult(v_aoth.getMult());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_rpart2 != null) {
			v_rpart2.setCond(v_aoth.getCond());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_rpart2 != null) {
			v_rpart2.setTxt_phrs(v_aoth.getTxt_phrs());
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Attribute write attempted on null instance.",
					t);
		}

		if (v_simple != null) {
			v_simple.relateAcrossR207To(v_rpart2);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		v_rto = ReferredToClassInAssoc_c.getOneR_RTOOnR204(v_aoth);

		if (v_aoth != null) {
			v_aoth.unrelateAcrossR204From(v_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Unrelate attempted on null left hand instance.", t);
		}

		if (v_rpart2 != null) {
			v_rpart2.relateAcrossR204To(v_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		this.unrelateAcrossR210From(v_aoth);

		if (v_aoth != null) {
			// get the location of this element in the instance list
			// before deleting
			if (v_aoth.delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, v_aoth));
			}
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Delete attempted on null instance.", t);
		}

		ClassAsLink_c v_assr = ClassAsLink_c.getOneR_ASSROnR211(this);

		this.unrelateAcrossR211From(v_assr);

		ClassInAssociation_c v_assr_oir = ClassInAssociation_c
				.getOneR_OIROnR203(ReferringClassInAssoc_c
						.getOneR_RGOOnR205(v_assr));

		if (v_assr_oir != null) {
			v_assr_oir.Dispose();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End migrateToSimple
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Association_c v_assoc = Association_c.getOneR_RELOnR206(this);

		this.unrelateAcrossR206From(v_assoc);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public boolean Isformalized() {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Isformalized");
		final ModelRoot modelRoot = getModelRoot();
		ReferredToClassInAssoc_c v_rto1 = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOneSide_c
						.getOneR_AONEOnR209(this));

		ReferredToIdentifierAttribute_c v_rtida1 = ReferredToIdentifierAttribute_c
				.getOneO_RTIDAOnR110(v_rto1);

		ReferredToClassInAssoc_c v_rto2 = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOtherSide_c
						.getOneR_AOTHOnR210(this));

		ReferredToIdentifierAttribute_c v_rtida2 = ReferredToIdentifierAttribute_c
				.getOneO_RTIDAOnR110(v_rto2);

		return (v_rtida1 != null) && (v_rtida2 != null);

	} // End isFormalized
	public void Formalize(final int p_One_id, final int p_Oth_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Formalize");
		final ModelRoot modelRoot = getModelRoot();
		if ((Isformalized())) {

			Unformalize();

		}

		ReferredToClassInAssoc_c v_aone_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOneSide_c
						.getOneR_AONEOnR209(this));

		ModelClass_c v_aone_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(v_aone_rto));

		class ClassIdentifier_test55992_c implements ClassQueryInterface_c {
			public boolean evaluate(Object candidate) {
				ClassIdentifier_c selected = (ClassIdentifier_c) candidate;
				return selected.getOid_id() == p_One_id;
			}
		}
		ClassIdentifier_c v_aone_oid = ClassIdentifier_c.getOneO_IDOnR104(
				v_aone_obj, new ClassIdentifier_test55992_c());

		if (v_aone_oid != null) {
			v_aone_oid.relateAcrossR109To(v_aone_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ReferredToClassInAssoc_c v_aoth_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOtherSide_c
						.getOneR_AOTHOnR210(this));

		ModelClass_c v_aoth_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(v_aoth_rto));

		class ClassIdentifier_test55993_c implements ClassQueryInterface_c {
			public boolean evaluate(Object candidate) {
				ClassIdentifier_c selected = (ClassIdentifier_c) candidate;
				return selected.getOid_id() == p_Oth_id;
			}
		}
		ClassIdentifier_c v_aoth_oid = ClassIdentifier_c.getOneO_IDOnR104(
				v_aoth_obj, new ClassIdentifier_test55993_c());

		if (v_aoth_oid != null) {
			v_aoth_oid.relateAcrossR109To(v_aoth_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		ReferringClassInAssoc_c v_assr_rgo = ReferringClassInAssoc_c
				.getOneR_RGOOnR205(ClassAsLink_c.getOneR_ASSROnR211(this));

		ModelClass_c v_assr_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(v_assr_rgo));

		int v_unused_oid = v_assr_obj.Findunusedidentifier();

		ClassIdentifierAttribute_c[] v_aone_oida_set = ClassIdentifierAttribute_c
				.getManyO_OIDAsOnR105(v_aone_oid);

		ClassIdentifierAttribute_c v_oida = null;
		for (int i55432 = 0; i55432 < v_aone_oida_set.length; i55432++) {
			v_oida = v_aone_oida_set[i55432];

			java.util.UUID v_newAttr_id = v_oida.Addreference(v_unused_oid,
					getRel_id(), v_assr_rgo.getObj_id(),
					v_assr_rgo.getOir_id(), v_aone_rto.getObj_id(),
					v_aone_rto.getOir_id());

		}

		ClassIdentifierAttribute_c[] v_aoth_oida_set = ClassIdentifierAttribute_c
				.getManyO_OIDAsOnR105(v_aoth_oid);

		for (int i55433 = 0; i55433 < v_aoth_oida_set.length; i55433++) {
			v_oida = v_aoth_oida_set[i55433];

			java.util.UUID v_newAttr_id = v_oida.Addreference(v_unused_oid,
					getRel_id(), v_assr_rgo.getObj_id(),
					v_assr_rgo.getOir_id(), v_aoth_rto.getObj_id(),
					v_aoth_rto.getOir_id());

		}

	} // End formalize
	public void Unformalize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Linked Association",
				" Operation entered: LinkedAssociation::Unformalize");
		final ModelRoot modelRoot = getModelRoot();
		ReferredToClassInAssoc_c v_aone_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOneSide_c
						.getOneR_AONEOnR209(this));

		ClassInAssociation_c v_aone_oir = ClassInAssociation_c
				.getOneR_OIROnR203(v_aone_rto);

		ReferredToClassInAssoc_c v_aoth_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(ClassAsAssociatedOtherSide_c
						.getOneR_AOTHOnR210(this));

		ClassInAssociation_c v_aoth_oir = ClassInAssociation_c
				.getOneR_OIROnR203(v_aoth_rto);

		if (v_aone_rto != null) {
			v_aone_rto.Unformalize();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		if (v_aoth_rto != null) {
			v_aoth_rto.Unformalize();
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError(
					"Attempted to call an operation on a null instance.", t);
		}

		if (v_aone_oir != null) {
			v_aone_oir.relateAcrossR203To(v_aone_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

		if (v_aoth_oir != null) {
			v_aoth_oir.relateAcrossR203To(v_aoth_rto);
		} else {
			Throwable t = new Throwable();
			t.fillInStackTrace();
			CorePlugin.logError("Relate attempted on null left hand instance.",
					t);
		}

	} // End unformalize

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Linked Association
