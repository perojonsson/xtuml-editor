package com.mentor.nucleus.bp.core.inspector;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/inspector/ActivityInspector.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_object_inspector.inc
// Version:      $Revision: 1.23 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class is responsible for decoupling the client model entity
// class Activity_c from the traversal mechanisms that it provides to
// model diff.
//
import com.mentor.nucleus.bp.core.*;

import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.sorter.MetadataSortingManager;
import java.util.*;

/**
 * This file adapts the meta-model entity; 'Activity_c' to provide 
 * support of traversing to its children and parents.
 * <p>
 * Do not edit this class, it was created using the Mentor Graphics
 * MC-Java code generator product.
 * </p>
 */
public class ActivityInspector extends BaseModelClassInspector {

  private String parentAssoc;
  
  public ActivityInspector(MetadataSortingManager sortingManager){
    super(sortingManager);
  }

  /**
   * @see IModelClassInspector#getParent(Object)
   * Returns the parent(s) of this node
   */
  public Object getParent(Object arg) {
    SystemModel_c result1 = SystemModel_c.getOneS_SYSOnR1113((Activity_c)arg);
     if (result1 != null) {
        return result1;
    }               
    Domain_c result2 = Domain_c.getOneS_DOMOnR1100((Activity_c)arg);
     if (result2 != null) {
        return result2;
    }               
    Subsystem_c result3 = Subsystem_c.getOneS_SSOnR1108((Activity_c)arg);
     if (result3 != null) {
        return result3;
    }               
    Activity_c result4 = Activity_c.getOneA_AOnR1109(ActivityInActivity_c.getOneA_AIAOnR1110((Activity_c)arg));
     if (result4 != null) {
        return result4;
    }               
    ComponentPackage_c result5 = ComponentPackage_c.getOneCP_CPOnR1114((Activity_c)arg);
     if (result5 != null) {
        return result5;
    }               
    Component_c result6 = Component_c.getOneC_COnR1115((Activity_c)arg);
     if (result6 != null) {
        return result6;
    }               
    Package_c result7 = Package_c.getOneEP_PKGOnR1400(SpecificationPackage_c.getOneEP_SPKGOnR1402((Activity_c)arg));
     if (result7 != null) {
        return result7;
    }               
        return null;    //No parent found           
  }
  	  
  /**
   * @see IModelClassInspector#getChildRelations(Object)
   * Returns the children of this node
   */
  public ObjectElement[] getChildRelations(Object arg) {
    int resultSize = 0;
    Activity_c [] v_activities = 
Activity_c.getManyA_AsOnR1110(
ActivityInActivity_c.getManyA_AIAsOnR1109(
(Activity_c)arg)
)
;



    sort(v_activities);
    ForkJoinNode_c [] v_forkjoins = 
ForkJoinNode_c.getManyA_FJsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_forkjoins);
    InitialNode_c [] v_initialnodes = 
InitialNode_c.getManyA_INIsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_initialnodes);
    ActivityEdge_c [] v_activityedges = 
ActivityEdge_c.getManyA_EsOnR1102(
(Activity_c)arg)
;



    sort(v_activityedges);
    ActivityFinalNode_c [] v_activityfinalnodes = 
ActivityFinalNode_c.getManyA_AFsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_activityfinalnodes);
    FlowFinalNode_c [] v_flowfinalnodes = 
FlowFinalNode_c.getManyA_FFsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_flowfinalnodes);
    ActivityDiagramAction_c [] v_activitydiagramactions = 
ActivityDiagramAction_c.getManyA_GAsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_activitydiagramactions);
    DecisionMergeNode_c [] v_decisionmergenodes = 
DecisionMergeNode_c.getManyA_DMsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_decisionmergenodes);
    ObjectNode_c [] v_objectnodes = 
ObjectNode_c.getManyA_OBJsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
;



    sort(v_objectnodes);
    AcceptEventAction_c [] v_accepteventactions = 
AcceptEventAction_c.getManyA_AEAsOnR1112(
AcceptEvent_c.getManyA_AEsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
)
;



    sort(v_accepteventactions);
    SendSignal_c [] v_sendsignalactions = 
SendSignal_c.getManyA_SSsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    sort(v_sendsignalactions);
    ActivityPartition_c [] v_activitypartitions = 
ActivityPartition_c.getManyA_APsOnR1111(
(Activity_c)arg)
;



    sort(v_activitypartitions);
    AcceptTimeEventAction_c [] v_accepttimeeventactions = 
AcceptTimeEventAction_c.getManyA_ATEsOnR1112(
AcceptEvent_c.getManyA_AEsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
)
;



    sort(v_accepttimeeventactions);
    List<ObjectElement> result = new ArrayList<ObjectElement> ();
    for (int i = 0 ; i < v_activities.length ; i++) {   
        result.add(new ObjectElement("v_activities", ObjectElement.RELATION_ROLE_ELEMENT, v_activities[i], arg, false));
    }
    for (int i = 0 ; i < v_forkjoins.length ; i++) {   
        result.add(new ObjectElement("v_forkjoins", ObjectElement.RELATION_ROLE_ELEMENT, v_forkjoins[i], arg, false));
    }
    for (int i = 0 ; i < v_initialnodes.length ; i++) {   
        result.add(new ObjectElement("v_initialnodes", ObjectElement.RELATION_ROLE_ELEMENT, v_initialnodes[i], arg, false));
    }
    for (int i = 0 ; i < v_activityedges.length ; i++) {   
        result.add(new ObjectElement("v_activityedges", ObjectElement.RELATION_ROLE_ELEMENT, v_activityedges[i], arg, false));
    }
    for (int i = 0 ; i < v_activityfinalnodes.length ; i++) {   
        result.add(new ObjectElement("v_activityfinalnodes", ObjectElement.RELATION_ROLE_ELEMENT, v_activityfinalnodes[i], arg, false));
    }
    for (int i = 0 ; i < v_flowfinalnodes.length ; i++) {   
        result.add(new ObjectElement("v_flowfinalnodes", ObjectElement.RELATION_ROLE_ELEMENT, v_flowfinalnodes[i], arg, false));
    }
    for (int i = 0 ; i < v_activitydiagramactions.length ; i++) {   
        result.add(new ObjectElement("v_activitydiagramactions", ObjectElement.RELATION_ROLE_ELEMENT, v_activitydiagramactions[i], arg, false));
    }
    for (int i = 0 ; i < v_decisionmergenodes.length ; i++) {   
        result.add(new ObjectElement("v_decisionmergenodes", ObjectElement.RELATION_ROLE_ELEMENT, v_decisionmergenodes[i], arg, false));
    }
    for (int i = 0 ; i < v_objectnodes.length ; i++) {   
        result.add(new ObjectElement("v_objectnodes", ObjectElement.RELATION_ROLE_ELEMENT, v_objectnodes[i], arg, false));
    }
    for (int i = 0 ; i < v_accepteventactions.length ; i++) {   
        result.add(new ObjectElement("v_accepteventactions", ObjectElement.RELATION_ROLE_ELEMENT, v_accepteventactions[i], arg, false));
    }
    for (int i = 0 ; i < v_sendsignalactions.length ; i++) {   
        result.add(new ObjectElement("v_sendsignalactions", ObjectElement.RELATION_ROLE_ELEMENT, v_sendsignalactions[i], arg, false));
    }
    for (int i = 0 ; i < v_activitypartitions.length ; i++) {   
        result.add(new ObjectElement("v_activitypartitions", ObjectElement.RELATION_ROLE_ELEMENT, v_activitypartitions[i], arg, false));
    }
    for (int i = 0 ; i < v_accepttimeeventactions.length ; i++) {   
        result.add(new ObjectElement("v_accepttimeeventactions", ObjectElement.RELATION_ROLE_ELEMENT, v_accepttimeeventactions[i], arg, false));
    }
    return result.toArray(new ObjectElement[result.size()]);
  }
  /**
   * @see IModelClassInspector#hasChildren(Object)
   * Returns true if this node has any children
   */
  public boolean hasChildRelations(Object arg) {
    Activity_c [] v_activities = 
Activity_c.getManyA_AsOnR1110(
ActivityInActivity_c.getManyA_AIAsOnR1109(
(Activity_c)arg)
)
;



    if (v_activities.length > 0) return true;
    ForkJoinNode_c [] v_forkjoins = 
ForkJoinNode_c.getManyA_FJsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_forkjoins.length > 0) return true;
    InitialNode_c [] v_initialnodes = 
InitialNode_c.getManyA_INIsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_initialnodes.length > 0) return true;
    ActivityEdge_c [] v_activityedges = 
ActivityEdge_c.getManyA_EsOnR1102(
(Activity_c)arg)
;



    if (v_activityedges.length > 0) return true;
    ActivityFinalNode_c [] v_activityfinalnodes = 
ActivityFinalNode_c.getManyA_AFsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_activityfinalnodes.length > 0) return true;
    FlowFinalNode_c [] v_flowfinalnodes = 
FlowFinalNode_c.getManyA_FFsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_flowfinalnodes.length > 0) return true;
    ActivityDiagramAction_c [] v_activitydiagramactions = 
ActivityDiagramAction_c.getManyA_GAsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_activitydiagramactions.length > 0) return true;
    DecisionMergeNode_c [] v_decisionmergenodes = 
DecisionMergeNode_c.getManyA_DMsOnR1106(
ControlNode_c.getManyA_CTLsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_decisionmergenodes.length > 0) return true;
    ObjectNode_c [] v_objectnodes = 
ObjectNode_c.getManyA_OBJsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
;



    if (v_objectnodes.length > 0) return true;
    AcceptEventAction_c [] v_accepteventactions = 
AcceptEventAction_c.getManyA_AEAsOnR1112(
AcceptEvent_c.getManyA_AEsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
)
;



    if (v_accepteventactions.length > 0) return true;
    SendSignal_c [] v_sendsignalactions = 
SendSignal_c.getManyA_SSsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
;



    if (v_sendsignalactions.length > 0) return true;
    ActivityPartition_c [] v_activitypartitions = 
ActivityPartition_c.getManyA_APsOnR1111(
(Activity_c)arg)
;



    if (v_activitypartitions.length > 0) return true;
    AcceptTimeEventAction_c [] v_accepttimeeventactions = 
AcceptTimeEventAction_c.getManyA_ATEsOnR1112(
AcceptEvent_c.getManyA_AEsOnR1107(
ActionNode_c.getManyA_ACTsOnR1105(
ActivityNode_c.getManyA_NsOnR1101(
(Activity_c)arg)
)
)
)
;



    if (v_accepttimeeventactions.length > 0) return true;
    return false;
  }
  
  public Object[] getReferentialDetails(Class<?> referentialClass, Object arg) {
  	Object[] details = new Object[4];
	return details;
  }
  
  /**
  * @seee IModelClassInspector#getReferentials(Object)
  * Returns the an array of Role Objects specifying the referenctial attibutes of
  * this model element
  * Role Name: <T_TPS.NameOnly>
  * Role Value: <Chain_result>
  * Role Type: "Referential"
  */
  public ObjectElement[] getReferentials(Object arg) {
     List<ObjectElement> referentials = new ArrayList<ObjectElement>();
    return referentials.toArray(new ObjectElement [referentials.size()]);        
  }

  /**
  * @seee IModelClassInspector#getAttributes(Object)
  * Returns the an array of Role objects that give the attibutes of the model 
  * element it self e.g.
  * Role Name: "Name"
  * Role Value: metaModelElement.getName()
  * Role Type: "Primitive"
  */
  public ObjectElement[] getAttributes(Object arg) {
    ObjectElement attrSet[] = new ObjectElement[9];
      attrSet[0] = new ObjectElement("Name", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getName"), arg, "getName", true);
      attrSet[1] = new ObjectElement("Descrip", ObjectElement.ATTRIBUTE_ELEMENT,  invokeMethod(arg, "getDescrip"), arg, "getDescrip", true);
    ObjectElement compAttrSet[] = new ObjectElement[2];    
    for (int i = 0; i < 2 ; i++) {
        compAttrSet[i] = attrSet[i];
    }
    return compAttrSet;
  }

    /**
     * Return configured image if none exists for the element type
     */
    public Image getImage(Object element) {
		Image image = CorePlugin.getImageFor(element, false);
		if(image != null) {
			return image;
		}
		return CorePlugin.getImageFor("Activity.gif");
	}

  /**
  * Returns a "slot number" to be used when comparing and merging tree elements
  * that contain multiple children.  All model element inspector's contain this 
  * function, but it only returns a value for cases where it a parent element
  * in a tree and the parent has multiple children.
  * 
  * @returns 0 if this is not a "parent" in the tree OR if the parent has less 
  * than 2 children. 
  */
	@Override
	public int getTreeDifferenceSlot(Object element) {
    	if (element instanceof Activity_c) {
			return 1;
		}
    	if (element instanceof ForkJoinNode_c) {
			return 2;
		}
    	if (element instanceof InitialNode_c) {
			return 3;
		}
    	if (element instanceof ActivityEdge_c) {
			return 4;
		}
    	if (element instanceof ActivityPartition_c) {
			return 5;
		}
    	if (element instanceof ActivityFinalNode_c) {
			return 6;
		}
    	if (element instanceof FlowFinalNode_c) {
			return 7;
		}
    	if (element instanceof ActivityDiagramAction_c) {
			return 8;
		}
    	if (element instanceof DecisionMergeNode_c) {
			return 9;
		}
    	if (element instanceof ObjectNode_c) {
			return 10;
		}
    	if (element instanceof AcceptEventAction_c) {
			return 11;
		}
    	if (element instanceof SendSignal_c) {
			return 12;
		}
    	if (element instanceof AcceptTimeEventAction_c) {
			return 13;
		}
		return 0;
	}

	}       

