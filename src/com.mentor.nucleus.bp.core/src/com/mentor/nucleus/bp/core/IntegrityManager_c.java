      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.IntegrityManager_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INTEGRITY_MANAGER extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class IntegrityManager_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public IntegrityManager_c(ModelRoot modelRoot,
       java.util.UUID         p_m_im_id,
       java.util.UUID         p_m_sys_id,
       Object p_m_rootelement)
  {
    super(modelRoot);
       m_rootelement = p_m_rootelement;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
       //extract 28 bit value only            
       m_im_idLongBased = 0xfffffff & p_m_im_id.getLeastSignificantBits();
        
    setUniqueId(m_im_id);
    Object [] key = {m_im_id};
    addInstanceToMap(key);
  }
  static public IntegrityManager_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_im_id,
       java.util.UUID         p_m_sys_id,
       Object p_m_rootelement, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
      IntegrityManager_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_im_id};
          new_inst = (IntegrityManager_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_rootelement = p_m_rootelement;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
       //extract 28 bit value only            
       new_inst.m_im_idLongBased = 0xfffffff & p_m_im_id.getLeastSignificantBits();
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new IntegrityManager_c(modelRoot,
p_m_im_id,
p_m_sys_id,
p_m_rootelement
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public IntegrityManager_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_im_id,
       java.util.UUID         p_m_sys_id,
       Object p_m_rootelement){
    InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
    IntegrityManager_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_im_id
            };
        source = (IntegrityManager_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_rootelement = p_m_rootelement;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_im_id = IdAssigner.preprocessUUID(p_m_im_id);
       //extract 28 bit value only            
       source.m_im_idLongBased = 0xfffffff & p_m_im_id.getLeastSignificantBits();
        
           return source ;
        }
      }
      // there is no instance matching the id
    IntegrityManager_c new_inst = new IntegrityManager_c(modelRoot,
p_m_im_id,
p_m_sys_id,
p_m_rootelement
);
    return new_inst;
  }
  public IntegrityManager_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_sys_id = IdAssigner.NULL_UUID;   
     m_im_id = idAssigner.createUUID();
    setUniqueId(m_im_id);
    Object [] key = {m_im_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_im_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_im_id !=  p_newKey ){
	
		m_im_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof IntegrityManager_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof IntegrityManager_c)) {
           return false;
       }
       
       IntegrityManager_c me = (IntegrityManager_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getIm_id()) || IdAssigner.NULL_UUID.equals(((IntegrityManager_c)elem).getIm_id())) && this != elem)) {
      	return false;
      }
      if (!getIm_id().equals(((IntegrityManager_c)elem).getIm_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof IntegrityManager_c)) {
           return false;
       }
       
       IntegrityManager_c me = (IntegrityManager_c)elem;
      if (!getIm_id().equals(((IntegrityManager_c)elem).getIm_id())) return false;
      return true;
    }


  // Attributes
  private Object m_rootelement ;
  private java.util.UUID         m_sys_id ;
  private java.util.UUID         m_im_id ;
  private long m_im_idLongBased ;
      
// declare association references from this class
  
  
    
// referring navigation

SystemModel_c ContainedWithinSystemModel ;
public void relateAcrossR1301To(SystemModel_c target)
{
	relateAcrossR1301To(target, true);
}
public void relateAcrossR1301To(SystemModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ContainedWithinSystemModel) return;  // already related

    if ( ContainedWithinSystemModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (ContainedWithinSystemModel != null) {
    
        ContainedWithinSystemModel.clearBackPointerR1301To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"IntegrityManager_c.relateAcrossR1301To(SystemModel_c target)", 
			"Relate performed across R1301 from Integrity Manager to System Model without unrelate of prior instance.");  
		}
    }
                
    	ContainedWithinSystemModel = target ;
        m_sys_id = target.getSys_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1301To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1301", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1301From(SystemModel_c target)
{
	unrelateAcrossR1301From(target, true);
}
public void unrelateAcrossR1301From(SystemModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ContainedWithinSystemModel == null) return;  // already unrelated
	
	if (target != ContainedWithinSystemModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1301", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1301To(this);
    }
    

      if(ContainedWithinSystemModel != null) {
      
        m_sys_id = ContainedWithinSystemModel.getSys_id();
        ContainedWithinSystemModel = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1301", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static IntegrityManager_c getOneMI_IMOnR1301(SystemModel_c [] targets)
{
    return getOneMI_IMOnR1301(targets, null);
}

public static IntegrityManager_c getOneMI_IMOnR1301(SystemModel_c [] targets, ClassQueryInterface_c test)
{
    IntegrityManager_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneMI_IMOnR1301(targets[i], test);
        }
    }

    return ret_val;
}

public static IntegrityManager_c getOneMI_IMOnR1301(SystemModel_c target)
{
  return getOneMI_IMOnR1301(target, null);
}

public static IntegrityManager_c getOneMI_IMOnR1301(SystemModel_c target, boolean loadComponent)
{
    return getOneMI_IMOnR1301(target.getModelRoot(), target, null, loadComponent);
}

public static IntegrityManager_c getOneMI_IMOnR1301(SystemModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneMI_IMOnR1301(target.getModelRoot(), target, test);
  }
  return null;
}

public static IntegrityManager_c getOneMI_IMOnR1301(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test)
{
	return getOneMI_IMOnR1301(modelRoot, target, test, true);
}

public static IntegrityManager_c getOneMI_IMOnR1301(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneMI_IMOnR1301(modelRoot,target,test);
}
private static IntegrityManager_c find_getOneMI_IMOnR1301(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    IntegrityManager_c source = (IntegrityManager_c)target.backPointer_ContainsIntegrityManagerContains_R1301;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c [] targets)
{
  return getManyMI_IMsOnR1301(targets, null);
}
public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c [] targets, boolean loadComponent)
{
  return getManyMI_IMsOnR1301(targets, null, loadComponent);
}
public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c [] targets, ClassQueryInterface_c test)
{
	return getManyMI_IMsOnR1301(targets, test, true);
}

public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new IntegrityManager_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      IntegrityManager_c source = (IntegrityManager_c)targets[i].backPointer_ContainsIntegrityManagerContains_R1301;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	IntegrityManager_c[] ret_set = new IntegrityManager_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new IntegrityManager_c[0];
  }
  }

public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c target)
{
  if (target != null) {
    SystemModel_c [] targetArray = new SystemModel_c[1];
    targetArray[0] = target;
    return getManyMI_IMsOnR1301(targetArray);
  } else {
    IntegrityManager_c [] result = new IntegrityManager_c [0] ;
  return result ;
}
}

public static IntegrityManager_c [] getManyMI_IMsOnR1301(SystemModel_c target, boolean loadComponent)
{
  if (target != null) {
    SystemModel_c [] targetArray = new SystemModel_c[1];
    targetArray[0] = target;
    return getManyMI_IMsOnR1301(targetArray, loadComponent);
  } else {
    IntegrityManager_c [] result = new IntegrityManager_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<IntegrityIssue_c> backPointer_ManagesIntegrityIssueManages_R1300 = new ArrayList<IntegrityIssue_c>();

public void setIntegrityIssueOrderInChildListR1300(IntegrityIssue_c target, int index) {
	unrelateAcrossR1300From(target);
	IntegrityIssue_c[] elements = IntegrityIssue_c.getManyMI_IIsOnR1300(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1300From((IntegrityIssue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1300To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1300To((IntegrityIssue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1300To(IntegrityIssue_c target)
{
  if (target != null) {
    target.relateAcrossR1300To(this, true) ;
  }
}

public void relateAcrossR1300To(IntegrityIssue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1300To(this, notifyChanges) ;
  }
}

public void setBackPointerR1300To(IntegrityIssue_c target)
{
  	synchronized (backPointer_ManagesIntegrityIssueManages_R1300) {
		backPointer_ManagesIntegrityIssueManages_R1300.add(target);
	}
}

public void unrelateAcrossR1300From(IntegrityIssue_c target)
{
  if (target != null) {
    target.unrelateAcrossR1300From(this, true) ;
  }
}

public void unrelateAcrossR1300From(IntegrityIssue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1300From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1300To(IntegrityIssue_c target)
{
  synchronized (backPointer_ManagesIntegrityIssueManages_R1300) {
	    backPointer_ManagesIntegrityIssueManages_R1300.remove(target);
	}
}

public static IntegrityManager_c getOneMI_IMOnR1300(IntegrityIssue_c [] targets)
{
    return getOneMI_IMOnR1300(targets, null);
}

public static IntegrityManager_c getOneMI_IMOnR1300(IntegrityIssue_c [] targets, ClassQueryInterface_c test)
{
    return getOneMI_IMOnR1300(targets, test, true);
}

public static IntegrityManager_c getOneMI_IMOnR1300(IntegrityIssue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    IntegrityManager_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             IntegrityManager_c candidate_val = getOneMI_IMOnR1300(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneMI_IMOnR1300(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static IntegrityManager_c getOneMI_IMOnR1300(IntegrityIssue_c target)
{
	return getOneMI_IMOnR1300(target, true);
}
public static IntegrityManager_c getOneMI_IMOnR1300(IntegrityIssue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ManagedByIntegrityManager ;
  } else {
    return null;
  }
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyMI_IMsOnR1300(targets, test, true);
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new IntegrityManager_c[0];
  
  
  LinkedHashSet<IntegrityManager_c> elementsSet = new LinkedHashSet<IntegrityManager_c>();
  for (int i = 0; i < targets.length; i++) {
    IntegrityManager_c associate = targets[i].ManagedByIntegrityManager;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  IntegrityManager_c[] result = new IntegrityManager_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c [] targets)
{
  return getManyMI_IMsOnR1300(targets, null);
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    IntegrityIssue_c [] targetArray = new IntegrityIssue_c[1];
    targetArray[0] = target;
    return getManyMI_IMsOnR1300(targetArray, test, loadComponent);
  } else {
    IntegrityManager_c [] result = new IntegrityManager_c [0] ;
    return result ;
  }
  
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c target,
    ClassQueryInterface_c test)
{
    return getManyMI_IMsOnR1300(target, null, true);
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c target)
{
    return getManyMI_IMsOnR1300(target, null, true);
}

public static IntegrityManager_c [] getManyMI_IMsOnR1300(IntegrityIssue_c target, boolean loadComponent)
{
    return getManyMI_IMsOnR1300(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (ContainedWithinSystemModel == null) {          
      // R1301
      baseRoot = Ooaofooa.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
      SystemModel_c relInst39983 = (SystemModel_c) baseRoot.getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst39983 == null) {
      			relInst39983 = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
      		}
			if (relInst39983 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst39983 = (SystemModel_c) roots[i].getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
					if (relInst39983 != null)
						break;
				}
			}
			//synchronized
      if ( relInst39983 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst39983) && !isProxy())) {
	      relInst39983.relateAcrossR1301To(this, notifyChanges);
	  }
	      // set the root in the Domain's model root, not the System Model's
	      // modelRoot is the SystemModel's root when we are loading a Domain proxy
	      ((Ooaofooa)getModelRoot()).setRoot(relInst39983);
	  }
          baseRoot = modelRoot;
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R1301
      // S_SYS
		  inst=ContainedWithinSystemModel;
			unrelateAcrossR1301From(ContainedWithinSystemModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final IntegrityManager_c inst = (IntegrityManager_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static IntegrityManager_c IntegrityManagerInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		IntegrityManager_c result=findIntegrityManagerInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static IntegrityManager_c findIntegrityManagerInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				IntegrityManager_c x = (IntegrityManager_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static IntegrityManager_c IntegrityManagerInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return IntegrityManagerInstance(modelRoot,test,true);
  }
  
  public static IntegrityManager_c IntegrityManagerInstance(ModelRoot modelRoot)
  {
	 return IntegrityManagerInstance(modelRoot,null,true);
  }

  public static IntegrityManager_c [] IntegrityManagerInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(IntegrityManager_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					IntegrityManager_c x = (IntegrityManager_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				IntegrityManager_c[] ret_set = new IntegrityManager_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new IntegrityManager_c[0];
			}		
		} 
  }
  public static IntegrityManager_c [] IntegrityManagerInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  IntegrityManagerInstances(modelRoot,test,true);
  }
  public static IntegrityManager_c [] IntegrityManagerInstances(ModelRoot modelRoot)
  {
	return IntegrityManagerInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Integrity Manager.dispose call: ";
	IntegrityIssue_c testR1300Inst = IntegrityIssue_c.getOneMI_IIOnR1300(this, false);

	if ( testR1300Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1300 ";	
	}
	SystemModel_c testR1301Inst = SystemModel_c.getOneS_SYSOnR1301(this, false);

	if ( testR1301Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1301 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Integrity Manager", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("sys_id")){
         return true;
      }
      if(attributeName.equals("im_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public Object getRootelement()
  {
    return m_rootelement ;
  }


  public void setRootelement(Object newValue)
  {
    if(m_rootelement == newValue){
        return;
    }
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Rootelement", m_rootelement, newValue,false); 
   m_rootelement = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSys_idLongBased()
  {
    if ( ContainedWithinSystemModel != null )
    {
      return ContainedWithinSystemModel.getSys_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSys_id()
  {
    if ( ContainedWithinSystemModel != null )
    {
      return ContainedWithinSystemModel.getSys_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSys_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sys_id) )
      return m_sys_id;
    else
      return getSys_id();
  }
  
  public void setSys_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sys_id)){
	        return;
	    }
	}else if(m_sys_id != null){
	    if(m_sys_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sys_id", m_sys_id, newValue,false); 
   m_sys_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIm_idLongBased()
  {
    if(m_im_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_im_id)){
    	return 0xfffffff & m_im_id.getLeastSignificantBits();
    }
    return m_im_idLongBased ;
  }
  public java.util.UUID getIm_id()
  {
    return m_im_id ;
  }


  public void setIm_id(java.util.UUID newValue)
  {
   m_im_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Integrity Manager", //$NON-NLS-1$
	  " Operation entered: Integrity Manager::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     IntegrityManager_c [] objs = IntegrityManager_c.IntegrityManagerInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Integrity Manager", //$NON-NLS-1$
	  " Operation entered: Integrity Manager::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class IntegrityManager_c_test39985_c implements ClassQueryInterface_c
    {
	  IntegrityManager_c_test39985_c( java.util.UUID            p39986 ) {
	  m_p39986 = p39986;
	  }
	  private java.util.UUID             m_p39986; 
	  public boolean evaluate (Object candidate)
	  {
	      IntegrityManager_c selected = (IntegrityManager_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIm_id().equals(m_p39986));
	      return retval;
	  }
    }

    IntegrityManager_c [] objs39984 = 
    IntegrityManager_c.IntegrityManagerInstances(modelRoot, new IntegrityManager_c_test39985_c(getIm_id())) ;

    if ( (  (objs39984.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Integrity Manager", //$NON-NLS-1$
           "Consistency: Object: Integrity Manager: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs39984.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Integrity Manager: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39984.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs39984.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Integrity Manager", //$NON-NLS-1$
           "Consistency: Object: Integrity Manager: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39984.length )  + " IM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Integrity Manager: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39984.length )  + " IM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Integrity Manager is a referring class in association: rel.Numb = 1301
          // The participating class is: System Model
    class SystemModel_c_test39990_c implements ClassQueryInterface_c
    {
	  SystemModel_c_test39990_c( java.util.UUID            p39991 ) {
	  m_p39991 = p39991;
	  }
	  private java.util.UUID             m_p39991; 
	  public boolean evaluate (Object candidate)
	  {
	      SystemModel_c selected = (SystemModel_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSys_id().equals(m_p39991));
	      return retval;
	  }
    }

    SystemModel_c [] objs39989 = 
    SystemModel_c.SystemModelInstances(Ooaofooa.getDefaultInstance(), new SystemModel_c_test39990_c(getSys_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs39989.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Integrity Manager", //$NON-NLS-1$
           "Consistency: Object: Integrity Manager: Association: 1301: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs39989.length )  + " Sys_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Integrity Manager: Association: 1301: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs39989.length )  + " Sys_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Integrity Manager is a participating class in association: rel.Numb = 1300
             // Object: Integrity Issue
    return retval;
  }


  // declare transform functions
  public static void Createissue(ModelRoot modelRoot,final String       p_Description,final Object p_Element,final java.util.UUID         p_Id,final String       p_Name,final String       p_Path,final int  p_Severity,final java.util.UUID         p_Sys_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Integrity Manager", " Operation entered: IntegrityManager::Createissue") ; 
SystemModel_c v_system = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(p_Sys_id);


IntegrityManager_c v_manager = IntegrityManager_c.getOneMI_IMOnR1301(v_system);


if ( (  (v_manager != null)) )
{

IntegrityIssue_c v_issue = new IntegrityIssue_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_issue));


if (v_issue != null) {
  v_issue.relateAcrossR1300To(v_manager);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_issue != null) {
  v_issue.setDescription( p_Description) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_issue != null) {
  v_issue.setSeverity( p_Severity) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_issue != null) {
  v_issue.setElementname( p_Name) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_issue != null) {
  v_issue.setElementpath( p_Path) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_issue != null) {
  v_issue.setElementid( p_Id) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_issue != null) {
  v_issue.setElement( p_Element) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


   } // End createIssue

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Integrity Manager
