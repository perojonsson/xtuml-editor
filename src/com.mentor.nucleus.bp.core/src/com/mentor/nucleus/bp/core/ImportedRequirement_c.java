package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ImportedRequirement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_IMPORTED_REQUIREMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ImportedRequirement_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ImportedRequirement_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_satisfaction_element_id, String p_m_name,
			String p_m_descrip) {
		super(modelRoot);
		m_name = p_m_name;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_satisfaction_element_id = IdAssigner
				.preprocessUUID(p_m_satisfaction_element_id);

		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ImportedRequirement_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_satisfaction_element_id,
			String p_m_name, String p_m_descrip, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);
		ImportedRequirement_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ImportedRequirement_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_name = p_m_name;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_satisfaction_element_id = IdAssigner
						.preprocessUUID(p_m_satisfaction_element_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ImportedRequirement_c(modelRoot, p_m_id,
					p_m_satisfaction_element_id, p_m_name, p_m_descrip);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ImportedRequirement_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_satisfaction_element_id,
			String p_m_name, String p_m_descrip) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);
		ImportedRequirement_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ImportedRequirement_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_name = p_m_name;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_satisfaction_element_id = IdAssigner
						.preprocessUUID(p_m_satisfaction_element_id);

				return source;
			}
		}
		// there is no instance matching the id
		ImportedRequirement_c new_inst = new ImportedRequirement_c(modelRoot,
				p_m_id, p_m_satisfaction_element_id, p_m_name, p_m_descrip);
		return new_inst;
	}
	public ImportedRequirement_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_name = "";
		m_descrip = "";
		m_id = IdAssigner.NULL_UUID;
		m_satisfaction_element_id = IdAssigner.NULL_UUID;
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ImportedRequirement_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ImportedRequirement_c)) {
			return false;
		}

		ImportedRequirement_c me = (ImportedRequirement_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ImportedRequirement_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ImportedRequirement_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ImportedRequirement_c)) {
			return false;
		}

		ImportedRequirement_c me = (ImportedRequirement_c) elem;
		if (!getIdCachedValue().equals(
				((ImportedRequirement_c) elem).getIdCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_name;
	private String m_descrip;
	private java.util.UUID m_id;
	private java.util.UUID m_satisfaction_element_id;

	// declare association references from this class

	// referring navigation

	Satisfaction_c ProvidesSatisfactionThroughSatisfaction;
	public void relateAcrossR4706To(Satisfaction_c target) {
		relateAcrossR4706To(target, true);
	}
	public void relateAcrossR4706To(Satisfaction_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidesSatisfactionThroughSatisfaction)
			return; // already related

		if (ProvidesSatisfactionThroughSatisfaction != target) {

			Object oldKey = getInstanceKey();

			if (ProvidesSatisfactionThroughSatisfaction != null) {
				UmlProblem.removeXtUMLProblem(this,
						ProvidesSatisfactionThroughSatisfaction);

				ProvidesSatisfactionThroughSatisfaction
						.clearBackPointerR4706To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ImportedRequirement_c.relateAcrossR4706To(Satisfaction_c target)",
									"Relate performed across R4706 from Imported Requirement to Satisfaction without unrelate of prior instance.");
				}
			}

			ProvidesSatisfactionThroughSatisfaction = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_satisfaction_element_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4706To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4706", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4706From(Satisfaction_c target) {
		unrelateAcrossR4706From(target, true);
	}
	public void unrelateAcrossR4706From(Satisfaction_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidesSatisfactionThroughSatisfaction == null)
			return; // already unrelated

		if (target != ProvidesSatisfactionThroughSatisfaction) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4706",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4706To(this);
		}

		if (ProvidesSatisfactionThroughSatisfaction != null) {

			m_satisfaction_element_id = ProvidesSatisfactionThroughSatisfaction
					.getId();
			if (IdAssigner.NULL_UUID.equals(m_satisfaction_element_id)) {
				m_satisfaction_element_id = ProvidesSatisfactionThroughSatisfaction
						.getIdCachedValue();
			}
			ProvidesSatisfactionThroughSatisfaction = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4706", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(
			Satisfaction_c[] targets) {
		return getOneCL_IROnR4706(targets, null);
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(
			Satisfaction_c[] targets, ClassQueryInterface_c test) {
		ImportedRequirement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCL_IROnR4706(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(Satisfaction_c target) {
		return getOneCL_IROnR4706(target, null);
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(
			Satisfaction_c target, boolean loadComponent) {
		return getOneCL_IROnR4706(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(
			Satisfaction_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCL_IROnR4706(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(ModelRoot modelRoot,
			Satisfaction_c target, ClassQueryInterface_c test) {
		return getOneCL_IROnR4706(modelRoot, target, test, true);
	}

	public static ImportedRequirement_c getOneCL_IROnR4706(ModelRoot modelRoot,
			Satisfaction_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedRequirement_c result = null;

		result = find_getOneCL_IROnR4706(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					ImportedRequirement_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneCL_IROnR4706(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ImportedRequirement_c find_getOneCL_IROnR4706(
			ModelRoot modelRoot, Satisfaction_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ImportedRequirement_c source = (ImportedRequirement_c) target.backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c[] targets) {
		return getManyCL_IRsOnR4706(targets, null);
	}
	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c[] targets, boolean loadComponent) {
		return getManyCL_IRsOnR4706(targets, null, loadComponent);
	}
	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IRsOnR4706(targets, test, true);
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ImportedRequirement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedRequirement_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ImportedRequirement_c source = (ImportedRequirement_c) targets[i].backPointer_SatisfactionMadeWithImportedRequirementSatisfactionMadeWith_R4706;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ImportedRequirement_c[] ret_set = new ImportedRequirement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedRequirement_c[0];
		}
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c target) {
		if (target != null) {
			Satisfaction_c[] targetArray = new Satisfaction_c[1];
			targetArray[0] = target;
			return getManyCL_IRsOnR4706(targetArray);
		} else {
			ImportedRequirement_c[] result = new ImportedRequirement_c[0];
			return result;
		}
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4706(
			Satisfaction_c target, boolean loadComponent) {
		if (target != null) {
			Satisfaction_c[] targetArray = new Satisfaction_c[1];
			targetArray[0] = target;
			return getManyCL_IRsOnR4706(targetArray, loadComponent);
		} else {
			ImportedRequirement_c[] result = new ImportedRequirement_c[0];
			return result;
		}
	}

	// referring navigation

	ImportedReference_c IsSupertypeImportedReference;
	public void relateAcrossR4703To(ImportedReference_c target) {
		relateAcrossR4703To(target, true);
	}
	public void relateAcrossR4703To(ImportedReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeImportedReference)
			return; // already related

		if (IsSupertypeImportedReference != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeImportedReference != null) {

				IsSupertypeImportedReference.clearBackPointerR4703To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ImportedRequirement_c.relateAcrossR4703To(ImportedReference_c target)",
									"Relate performed across R4703 from Imported Requirement to Imported Reference without unrelate of prior instance.");
				}
			}

			IsSupertypeImportedReference = target;
			m_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4703To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4703", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4703From(ImportedReference_c target) {
		unrelateAcrossR4703From(target, true);
	}
	public void unrelateAcrossR4703From(ImportedReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeImportedReference == null)
			return; // already unrelated

		if (target != IsSupertypeImportedReference) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4703",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4703To(this);
		}

		if (IsSupertypeImportedReference != null) {

			m_id = IsSupertypeImportedReference.getId();
			IsSupertypeImportedReference = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4703", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(
			ImportedReference_c[] targets) {
		return getOneCL_IROnR4703(targets, null);
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(
			ImportedReference_c[] targets, ClassQueryInterface_c test) {
		ImportedRequirement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCL_IROnR4703(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(
			ImportedReference_c target) {
		return getOneCL_IROnR4703(target, null);
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(
			ImportedReference_c target, boolean loadComponent) {
		return getOneCL_IROnR4703(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(
			ImportedReference_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCL_IROnR4703(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(ModelRoot modelRoot,
			ImportedReference_c target, ClassQueryInterface_c test) {
		return getOneCL_IROnR4703(modelRoot, target, test, true);
	}

	public static ImportedRequirement_c getOneCL_IROnR4703(ModelRoot modelRoot,
			ImportedReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCL_IROnR4703(modelRoot, target, test);
	}
	private static ImportedRequirement_c find_getOneCL_IROnR4703(
			ModelRoot modelRoot, ImportedReference_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ImportedRequirement_c source = (ImportedRequirement_c) target.backPointer_IsSubtypeImportedRequirementIsSubtype_R4703;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c[] targets) {
		return getManyCL_IRsOnR4703(targets, null);
	}
	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c[] targets, boolean loadComponent) {
		return getManyCL_IRsOnR4703(targets, null, loadComponent);
	}
	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c[] targets, ClassQueryInterface_c test) {
		return getManyCL_IRsOnR4703(targets, test, true);
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ImportedRequirement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ImportedRequirement_c source = (ImportedRequirement_c) targets[i].backPointer_IsSubtypeImportedRequirementIsSubtype_R4703;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ImportedRequirement_c[] ret_set = new ImportedRequirement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ImportedRequirement_c[0];
		}
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c target) {
		if (target != null) {
			ImportedReference_c[] targetArray = new ImportedReference_c[1];
			targetArray[0] = target;
			return getManyCL_IRsOnR4703(targetArray);
		} else {
			ImportedRequirement_c[] result = new ImportedRequirement_c[0];
			return result;
		}
	}

	public static ImportedRequirement_c[] getManyCL_IRsOnR4703(
			ImportedReference_c target, boolean loadComponent) {
		if (target != null) {
			ImportedReference_c[] targetArray = new ImportedReference_c[1];
			targetArray[0] = target;
			return getManyCL_IRsOnR4703(targetArray, loadComponent);
		} else {
			ImportedRequirement_c[] result = new ImportedRequirement_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ProvidesSatisfactionThroughSatisfaction == null) {
			// R4706
			Satisfaction_c relInst57236 = (Satisfaction_c) baseRoot
					.getInstanceList(Satisfaction_c.class).get(
							new Object[]{m_satisfaction_element_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57236 == null) {
				relInst57236 = (Satisfaction_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Satisfaction_c.class)
						.get(new Object[]{m_satisfaction_element_id});
			}
			if (relInst57236 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57236 = (Satisfaction_c) roots[i].getInstanceList(
							Satisfaction_c.class).get(
							new Object[]{m_satisfaction_element_id});
					if (relInst57236 != null)
						break;
				}
			}
			//synchronized
			if (relInst57236 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57236) && !isProxy())) {
					relInst57236.relateAcrossR4706To(this, notifyChanges);
				}
			}
		}

		// R4703
		ImportedReference_c relInst57237 = (ImportedReference_c) baseRoot
				.getInstanceList(ImportedReference_c.class).get(
						new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst57237 == null) {
			relInst57237 = (ImportedReference_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ImportedReference_c.class)
					.get(new Object[]{m_id});
		}
		if (relInst57237 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst57237 = (ImportedReference_c) roots[i].getInstanceList(
						ImportedReference_c.class).get(new Object[]{m_id});
				if (relInst57237 != null)
					break;
			}
		}
		//synchronized
		if (relInst57237 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst57237) && !isProxy())) {
				relInst57237.relateAcrossR4703To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4706
		// C_SF
		inst = ProvidesSatisfactionThroughSatisfaction;
		unrelateAcrossR4706From(ProvidesSatisfactionThroughSatisfaction,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4703
		// CL_IIR
		inst = IsSupertypeImportedReference;
		unrelateAcrossR4703From(IsSupertypeImportedReference, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ImportedRequirement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ImportedRequirement_c inst = (ImportedRequirement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ImportedRequirement_c ImportedRequirementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ImportedRequirement_c result = findImportedRequirementInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ImportedRequirement_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findImportedRequirementInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ImportedRequirement_c findImportedRequirementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ImportedRequirement_c x = (ImportedRequirement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ImportedRequirement_c ImportedRequirementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ImportedRequirementInstance(modelRoot, test, true);
	}

	public static ImportedRequirement_c ImportedRequirementInstance(
			ModelRoot modelRoot) {
		return ImportedRequirementInstance(modelRoot, null, true);
	}

	public static ImportedRequirement_c[] ImportedRequirementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ImportedRequirement_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ImportedRequirement_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ImportedRequirement_c x = (ImportedRequirement_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ImportedRequirement_c[] ret_set = new ImportedRequirement_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ImportedRequirement_c[0];
			}
		}
	}
	public static ImportedRequirement_c[] ImportedRequirementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ImportedRequirementInstances(modelRoot, test, true);
	}
	public static ImportedRequirement_c[] ImportedRequirementInstances(
			ModelRoot modelRoot) {
		return ImportedRequirementInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Imported Requirement.dispose call: ";
		Satisfaction_c testR4706Inst = Satisfaction_c.getOneC_SFOnR4706(this,
				false);

		if (testR4706Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4706 ";
		}
		ImportedReference_c testR4703Inst1 = ImportedReference_c
				.getOneCL_IIROnR4703(this, false);

		if (testR4703Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "4703 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Imported Requirement",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("satisfaction_element_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getIdCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getName() {
		ModelRoot modelRoot = getModelRoot();
		String v_name = Getcachedname();

		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c
						.getOneC_IROnR4701(ImportedReference_c
								.getOneCL_IIROnR4703(this)));

		if (((v_requirement != null))) {

			v_name = v_requirement.getName();

		}

		Setcachedname(v_name);

		return v_name;

	}

	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (IsSupertypeImportedReference != null) {
			return IsSupertypeImportedReference.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsSupertypeImportedReference != null) {
			return IsSupertypeImportedReference.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeImportedReference != null);

	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_id)) {
				return;
			}
		} else if (m_id != null) {
			if (m_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id",
				m_id, newValue, true);
		m_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSatisfaction_element_idLongBased() {
		if (ProvidesSatisfactionThroughSatisfaction != null) {
			return ProvidesSatisfactionThroughSatisfaction.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getSatisfaction_element_id() {
		if (ProvidesSatisfactionThroughSatisfaction != null) {
			return ProvidesSatisfactionThroughSatisfaction.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSatisfaction_element_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_satisfaction_element_id))
			return m_satisfaction_element_id;
		else
			return getSatisfaction_element_id();
	}

	public void setSatisfaction_element_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_satisfaction_element_id)) {
				return;
			}
		} else if (m_satisfaction_element_id != null) {
			if (m_satisfaction_element_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Satisfaction_element_id", m_satisfaction_element_id, newValue,
				true);
		m_satisfaction_element_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Requirement", //$NON-NLS-1$
						" Operation entered: Imported Requirement::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ImportedRequirement_c[] objs = ImportedRequirement_c
				.ImportedRequirementInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement", //$NON-NLS-1$
				" Operation entered: Imported Requirement::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ImportedRequirement_c_test57239_c
				implements
					ClassQueryInterface_c {
			ImportedRequirement_c_test57239_c(java.util.UUID p57240) {
				m_p57240 = p57240;
			}
			private java.util.UUID m_p57240;
			public boolean evaluate(Object candidate) {
				ImportedRequirement_c selected = (ImportedRequirement_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57240));
				return retval;
			}
		}

		ImportedRequirement_c[] objs57238 = ImportedRequirement_c
				.ImportedRequirementInstances(modelRoot,
						new ImportedRequirement_c_test57239_c(getId()));

		if (((objs57238.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Requirement", //$NON-NLS-1$
								"Consistency: Object: Imported Requirement: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57238.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Requirement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57238.length), e);
			}
			retval = false;

		}

		if (((objs57238.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Requirement", //$NON-NLS-1$
								"Consistency: Object: Imported Requirement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57238.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Requirement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57238.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Imported Requirement is a subtype in association: rel.Numb = 4703
		// The supertype class is: Imported Reference
		class ImportedReference_c_test57244_c implements ClassQueryInterface_c {
			ImportedReference_c_test57244_c(java.util.UUID p57245) {
				m_p57245 = p57245;
			}
			private java.util.UUID m_p57245;
			public boolean evaluate(Object candidate) {
				ImportedReference_c selected = (ImportedReference_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57245));
				return retval;
			}
		}

		ImportedReference_c[] objs57243 = ImportedReference_c
				.ImportedReferenceInstances(modelRoot,
						new ImportedReference_c_test57244_c(getId()));

		if (((objs57243.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Requirement", //$NON-NLS-1$
								"Consistency: Object: Imported Requirement: Association: 4703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57243.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Requirement: Association: 4703: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57243.length), e);
			}
			retval = false;

		}

		// Imported Requirement is a referring class in association: rel.Numb = 4706
		// The participating class is: Satisfaction
		class Satisfaction_c_test57247_c implements ClassQueryInterface_c {
			Satisfaction_c_test57247_c(java.util.UUID p57248) {
				m_p57248 = p57248;
			}
			private java.util.UUID m_p57248;
			public boolean evaluate(Object candidate) {
				Satisfaction_c selected = (Satisfaction_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57248));
				return retval;
			}
		}

		Satisfaction_c[] objs57246 = Satisfaction_c.SatisfactionInstances(
				modelRoot, new Satisfaction_c_test57247_c(
						getSatisfaction_element_id()));

		if (((objs57246.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Imported Requirement", //$NON-NLS-1$
								"Consistency: Object: Imported Requirement: Association: 4706: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57246.length)
										+ " Satisfaction_Element_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Imported Requirement: Association: 4706: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57246.length)
										+ " Satisfaction_Element_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final boolean p_Connected_disabled, final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		Satisfaction_c v_satisfaction = Satisfaction_c.getOneC_SFOnR4706(this);

		if (((v_satisfaction != null) && !p_Connected_disabled)) {

			return "";

		}

		else {

			Requirement_c v_req = Requirement_c
					.getOneC_ROnR4009(InterfaceReference_c
							.getOneC_IROnR4701(ImportedReference_c
									.getOneCL_IIROnR4703(this)));

			if (((v_req == null))) {

				return "";

			}

			if ((p_At == End_c.Middle)) {

				return v_req.getName();

			}

			else if ((p_At == End_c.Start_Fixed)) {

				return v_req.Get_connector_text(p_Obj_id, p_Obj_typeisimported,
						p_At, p_Connected_disabled, p_Parent_id);

			}

		}

		return "";

	} // End get_connector_text
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getId();

	} // End get_ooa_id
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c
						.getOneC_IROnR4701(ImportedReference_c
								.getOneCL_IIROnR4703(this)));

		if (((v_requirement != null))) {

			return v_requirement.Get_style(p_At);

		}

		return Style_c.None;

	} // End get_style
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Converttoinstance");
		return this;
	} // End convertToInstance
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Dissatisfy();

		ImportedReference_c v_importedRef = ImportedReference_c
				.getOneCL_IIROnR4703(this);

		if (((v_importedRef != null))) {

			this.unrelateAcrossR4703From(v_importedRef);

			if (v_importedRef != null) {
				v_importedRef.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public boolean Linkconnector(final java.util.UUID p_To) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Linkconnector");
		final ModelRoot modelRoot = getModelRoot();
		if ((Canlinkconnector(p_To))) {

			boolean v_isLinked = false;

			ImportedReference_c v_selfImportedRef = ImportedReference_c
					.getOneCL_IIROnR4703(this);

			Component_c v_component = Component_c.getOneC_COnR4010(Port_c
					.getOneC_POOnR4016(InterfaceReference_c
							.getOneC_IROnR4701(v_selfImportedRef)));

			if ((!p_To.equals(Gd_c.Null_unique_id()))) {

				Provision_c v_provision = (Provision_c) modelRoot
						.getInstanceList(Provision_c.class).getGlobal(null,
								p_To);

				if (((v_provision != null))) {

					v_isLinked = v_component.Initializerequirement(true,
							v_provision.getProvision_id(),
							v_selfImportedRef.getId());

				}

				else {

					ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot
							.getInstanceList(ImportedReference_c.class)
							.getGlobal(null, p_To);

					if (((v_importedRef != null))) {

						v_isLinked = v_component.Initializerequirement(true,
								v_importedRef.getId(),
								v_selfImportedRef.getId());

					}

				}

			}

			return v_isLinked;

		}

		return false;

	} // End linkConnector
	public void Dissatisfy() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Dissatisfy");
		final ModelRoot modelRoot = getModelRoot();
		Satisfaction_c v_satisfaction = Satisfaction_c.getOneC_SFOnR4706(this);

		if (((v_satisfaction != null))) {

			this.unrelateAcrossR4706From(v_satisfaction);

			if (v_satisfaction != null) {
				v_satisfaction.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End dissatisfy
	public boolean Actionfilter(final String p_Name, final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Actionfilter");
		final ModelRoot modelRoot = getModelRoot();
		if (p_Name.equals("can")) {

			if (p_Value.equals("dissatisfy")) {

				Satisfaction_c v_satisfaction = Satisfaction_c
						.getOneC_SFOnR4706(this);

				if ((v_satisfaction != null)) {

					return true;

				}

			}

		}

		return false;

	} // End actionFilter
	public int Getsatisfactioncount(final boolean p_Filterdelegations) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Requirement",
						" Operation entered: ImportedRequirement::Getsatisfactioncount");
		final ModelRoot modelRoot = getModelRoot();
		Satisfaction_c v_satisfaction = Satisfaction_c.getOneC_SFOnR4706(this);

		if ((v_satisfaction != null)) {

			return 1;

		}

		else {

			return 0;

		}

	} // End getSatisfactionCount
	public boolean Canlinkconnector(final java.util.UUID p_To) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Canlinkconnector");
		final ModelRoot modelRoot = getModelRoot();
		boolean v_isLinked = false;

		ImportedReference_c v_selfImportedRef = ImportedReference_c
				.getOneCL_IIROnR4703(this);

		Component_c v_component = Component_c.getOneC_COnR4010(Port_c
				.getOneC_POOnR4016(InterfaceReference_c
						.getOneC_IROnR4701(v_selfImportedRef)));

		if ((!p_To.equals(Gd_c.Null_unique_id()))) {

			Provision_c v_provision = (Provision_c) modelRoot.getInstanceList(
					Provision_c.class).getGlobal(null, p_To);

			if (((v_provision != null))) {

				v_isLinked = v_component.Initializerequirement(false,
						v_provision.getProvision_id(),
						v_selfImportedRef.getId());

			}

			else {

				ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot
						.getInstanceList(ImportedReference_c.class).getGlobal(
								null, p_To);

				if (((v_importedRef != null))) {

					v_isLinked = v_component.Initializerequirement(false,
							v_importedRef.getId(), v_selfImportedRef.getId());

				}

			}

		}

		return v_isLinked;

	} // End canLinkConnector
	public String Get_connector_tooltip(final int p_End) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Requirement",
						" Operation entered: ImportedRequirement::Get_connector_tooltip");
		final ModelRoot modelRoot = getModelRoot();
		Requirement_c v_req = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c
						.getOneC_IROnR4701(ImportedReference_c
								.getOneCL_IIROnR4703(this)));

		if (((v_req != null))) {

			return v_req.Get_connector_tooltip(p_End);

		}

		return "";

	} // End get_connector_tooltip
	public Object Getconfigurationinheritanceelementid() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Imported Requirement",
						" Operation entered: ImportedRequirement::Getconfigurationinheritanceelementid");
		final ModelRoot modelRoot = getModelRoot();
		Requirement_c v_requirement = Requirement_c
				.getOneC_ROnR4009(InterfaceReference_c
						.getOneC_IROnR4701(ImportedReference_c
								.getOneCL_IIROnR4703(this)));

		if (((v_requirement != null))) {

			return v_requirement.Converttoinstance();

		}

		return Converttoinstance();

	} // End getConfigurationInheritanceElementId
	public boolean Issynchronized() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Issynchronized");
		final ModelRoot modelRoot = getModelRoot();
		ImportedReference_c v_importedRef = ImportedReference_c
				.getOneCL_IIROnR4703(this);

		if (((v_importedRef != null))) {

			return v_importedRef.Issynchronized();

		}

		return true;

	} // End isSynchronized
	public String Getcachedname() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Getcachedname");
		return m_name;
	} // End getCachedName
	public void Setcachedname(final String p_Name) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Setcachedname");
		m_name = p_Name;
	} // End setCachedName
	public void Collectchanges(final Object p_Changelist) {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Collectchanges");
		final ModelRoot modelRoot = getModelRoot();
		if ((!Issynchronized())) {

			Util_c.Createelementchange("removed", p_Changelist,
					Converttoinstance(), true);

		}

	} // End collectChanges
	public void Synchronize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Imported Requirement",
				" Operation entered: ImportedRequirement::Synchronize");
		final ModelRoot modelRoot = getModelRoot();
		if ((!Issynchronized())) {

			Dispose();

		}

	} // End synchronize

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		if (adapter == IActionFilter.class) {
			return ImportedRequirementActionFilter.getSingleton();
		}
		return null;
	}
} // end Imported Requirement
