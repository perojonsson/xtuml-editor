      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Block_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_BLOCK extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Block_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Block_c(ModelRoot modelRoot,
       java.util.UUID         p_m_block_id,
       boolean      p_m_wherespecok,
       boolean      p_m_inwherespec,
       boolean      p_m_selectedfound,
       String       p_m_tempbuffer,
       String       p_m_supdata1,
       String       p_m_supdata2,
       int          p_m_currentline,
       int          p_m_currentcol,
       int          p_m_currentkeyletterslinenumber,
       int          p_m_currentkeyletterscolumn,
       int          p_m_currentparameterassignmentnamelinenumber,
       int          p_m_currentparameterassignmentnamecolumn,
       int          p_m_currentassociationnumberlinenumber,
       int          p_m_currentassociationnumbercolumn,
       int          p_m_currentassociationphraselinenumber,
       int          p_m_currentassociationphrasecolumn,
       int          p_m_currentdatatypenamelinenumber,
       int          p_m_currentdatatypenamecolumn,
       boolean      p_m_blockinstackframecreated,
       java.util.UUID         p_m_action_id,
       java.util.UUID         p_m_parsed_action_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //extract 28 bit value only            
       m_block_idLongBased = 0xfffffff & p_m_block_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
       m_wherespecok = p_m_wherespecok;
       m_inwherespec = p_m_inwherespec;
       m_selectedfound = p_m_selectedfound;
       m_tempbuffer = p_m_tempbuffer;
       m_supdata1 = p_m_supdata1;
       m_supdata2 = p_m_supdata2;
       m_currentline = p_m_currentline;
       m_currentcol = p_m_currentcol;
       m_currentkeyletterslinenumber = p_m_currentkeyletterslinenumber;
       m_currentkeyletterscolumn = p_m_currentkeyletterscolumn;
       m_currentparameterassignmentnamelinenumber = p_m_currentparameterassignmentnamelinenumber;
       m_currentparameterassignmentnamecolumn = p_m_currentparameterassignmentnamecolumn;
       m_currentassociationnumberlinenumber = p_m_currentassociationnumberlinenumber;
       m_currentassociationnumbercolumn = p_m_currentassociationnumbercolumn;
       m_currentassociationphraselinenumber = p_m_currentassociationphraselinenumber;
       m_currentassociationphrasecolumn = p_m_currentassociationphrasecolumn;
       m_currentdatatypenamelinenumber = p_m_currentdatatypenamelinenumber;
       m_currentdatatypenamecolumn = p_m_currentdatatypenamecolumn;
       m_blockinstackframecreated = p_m_blockinstackframecreated;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_parsed_action_id = IdAssigner.preprocessUUID(p_m_parsed_action_id);
        
    setUniqueId(m_block_id);
    Object [] key = {m_block_id};
    addInstanceToMap(key);
  }
  static public Block_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_block_id,
       boolean      p_m_wherespecok,
       boolean      p_m_inwherespec,
       boolean      p_m_selectedfound,
       String       p_m_tempbuffer,
       String       p_m_supdata1,
       String       p_m_supdata2,
       int          p_m_currentline,
       int          p_m_currentcol,
       int          p_m_currentkeyletterslinenumber,
       int          p_m_currentkeyletterscolumn,
       int          p_m_currentparameterassignmentnamelinenumber,
       int          p_m_currentparameterassignmentnamecolumn,
       int          p_m_currentassociationnumberlinenumber,
       int          p_m_currentassociationnumbercolumn,
       int          p_m_currentassociationphraselinenumber,
       int          p_m_currentassociationphrasecolumn,
       int          p_m_currentdatatypenamelinenumber,
       int          p_m_currentdatatypenamecolumn,
       boolean      p_m_blockinstackframecreated,
       java.util.UUID         p_m_action_id,
       java.util.UUID         p_m_parsed_action_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Block_c.class);
      Block_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_block_id};
          new_inst = (Block_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //extract 28 bit value only            
       new_inst.m_block_idLongBased = 0xfffffff & p_m_block_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
       new_inst.m_wherespecok = p_m_wherespecok;
       new_inst.m_inwherespec = p_m_inwherespec;
       new_inst.m_selectedfound = p_m_selectedfound;
       new_inst.m_tempbuffer = p_m_tempbuffer;
       new_inst.m_supdata1 = p_m_supdata1;
       new_inst.m_supdata2 = p_m_supdata2;
       new_inst.m_currentline = p_m_currentline;
       new_inst.m_currentcol = p_m_currentcol;
       new_inst.m_currentkeyletterslinenumber = p_m_currentkeyletterslinenumber;
       new_inst.m_currentkeyletterscolumn = p_m_currentkeyletterscolumn;
       new_inst.m_currentparameterassignmentnamelinenumber = p_m_currentparameterassignmentnamelinenumber;
       new_inst.m_currentparameterassignmentnamecolumn = p_m_currentparameterassignmentnamecolumn;
       new_inst.m_currentassociationnumberlinenumber = p_m_currentassociationnumberlinenumber;
       new_inst.m_currentassociationnumbercolumn = p_m_currentassociationnumbercolumn;
       new_inst.m_currentassociationphraselinenumber = p_m_currentassociationphraselinenumber;
       new_inst.m_currentassociationphrasecolumn = p_m_currentassociationphrasecolumn;
       new_inst.m_currentdatatypenamelinenumber = p_m_currentdatatypenamelinenumber;
       new_inst.m_currentdatatypenamecolumn = p_m_currentdatatypenamecolumn;
       new_inst.m_blockinstackframecreated = p_m_blockinstackframecreated;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_parsed_action_id = IdAssigner.preprocessUUID(p_m_parsed_action_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Block_c(modelRoot,
p_m_block_id,
p_m_wherespecok,
p_m_inwherespec,
p_m_selectedfound,
p_m_tempbuffer,
p_m_supdata1,
p_m_supdata2,
p_m_currentline,
p_m_currentcol,
p_m_currentkeyletterslinenumber,
p_m_currentkeyletterscolumn,
p_m_currentparameterassignmentnamelinenumber,
p_m_currentparameterassignmentnamecolumn,
p_m_currentassociationnumberlinenumber,
p_m_currentassociationnumbercolumn,
p_m_currentassociationphraselinenumber,
p_m_currentassociationphrasecolumn,
p_m_currentdatatypenamelinenumber,
p_m_currentdatatypenamecolumn,
p_m_blockinstackframecreated,
p_m_action_id,
p_m_parsed_action_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Block_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_block_id,
       boolean      p_m_wherespecok,
       boolean      p_m_inwherespec,
       boolean      p_m_selectedfound,
       String       p_m_tempbuffer,
       String       p_m_supdata1,
       String       p_m_supdata2,
       int          p_m_currentline,
       int          p_m_currentcol,
       int          p_m_currentkeyletterslinenumber,
       int          p_m_currentkeyletterscolumn,
       int          p_m_currentparameterassignmentnamelinenumber,
       int          p_m_currentparameterassignmentnamecolumn,
       int          p_m_currentassociationnumberlinenumber,
       int          p_m_currentassociationnumbercolumn,
       int          p_m_currentassociationphraselinenumber,
       int          p_m_currentassociationphrasecolumn,
       int          p_m_currentdatatypenamelinenumber,
       int          p_m_currentdatatypenamecolumn,
       boolean      p_m_blockinstackframecreated,
       java.util.UUID         p_m_action_id,
       java.util.UUID         p_m_parsed_action_id){
    InstanceList instances = modelRoot.getInstanceList(Block_c.class);
    Block_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_block_id
            };
        source = (Block_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       //extract 28 bit value only            
       source.m_block_idLongBased = 0xfffffff & p_m_block_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
       source.m_wherespecok = p_m_wherespecok;
       source.m_inwherespec = p_m_inwherespec;
       source.m_selectedfound = p_m_selectedfound;
       source.m_tempbuffer = p_m_tempbuffer;
       source.m_supdata1 = p_m_supdata1;
       source.m_supdata2 = p_m_supdata2;
       source.m_currentline = p_m_currentline;
       source.m_currentcol = p_m_currentcol;
       source.m_currentkeyletterslinenumber = p_m_currentkeyletterslinenumber;
       source.m_currentkeyletterscolumn = p_m_currentkeyletterscolumn;
       source.m_currentparameterassignmentnamelinenumber = p_m_currentparameterassignmentnamelinenumber;
       source.m_currentparameterassignmentnamecolumn = p_m_currentparameterassignmentnamecolumn;
       source.m_currentassociationnumberlinenumber = p_m_currentassociationnumberlinenumber;
       source.m_currentassociationnumbercolumn = p_m_currentassociationnumbercolumn;
       source.m_currentassociationphraselinenumber = p_m_currentassociationphraselinenumber;
       source.m_currentassociationphrasecolumn = p_m_currentassociationphrasecolumn;
       source.m_currentdatatypenamelinenumber = p_m_currentdatatypenamelinenumber;
       source.m_currentdatatypenamecolumn = p_m_currentdatatypenamecolumn;
       source.m_blockinstackframecreated = p_m_blockinstackframecreated;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_parsed_action_id = IdAssigner.preprocessUUID(p_m_parsed_action_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Block_c new_inst = new Block_c(modelRoot,
p_m_block_id,
p_m_wherespecok,
p_m_inwherespec,
p_m_selectedfound,
p_m_tempbuffer,
p_m_supdata1,
p_m_supdata2,
p_m_currentline,
p_m_currentcol,
p_m_currentkeyletterslinenumber,
p_m_currentkeyletterscolumn,
p_m_currentparameterassignmentnamelinenumber,
p_m_currentparameterassignmentnamecolumn,
p_m_currentassociationnumberlinenumber,
p_m_currentassociationnumbercolumn,
p_m_currentassociationphraselinenumber,
p_m_currentassociationphrasecolumn,
p_m_currentdatatypenamelinenumber,
p_m_currentdatatypenamecolumn,
p_m_blockinstackframecreated,
p_m_action_id,
p_m_parsed_action_id
);
    return new_inst;
  }
  public Block_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_block_id = idAssigner.createUUID();
     m_action_id = IdAssigner.NULL_UUID;   
     m_tempbuffer = "";   
     m_supdata1 = "";   
     m_supdata2 = "";   
     m_parsed_action_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_block_id);
    Object [] key = {m_block_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_block_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_block_id !=  p_newKey ){
	
		m_block_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Block_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Block_c)) {
           return false;
       }
       
       Block_c me = (Block_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getBlock_id()) || IdAssigner.NULL_UUID.equals(((Block_c)elem).getBlock_id())) && this != elem)) {
      	return false;
      }
      if (!getBlock_id().equals(((Block_c)elem).getBlock_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Block_c)) {
           return false;
       }
       
       Block_c me = (Block_c)elem;
      if (!getBlock_id().equals(((Block_c)elem).getBlock_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_block_id ;
  private long m_block_idLongBased ;
  private java.util.UUID         m_action_id ;
  private boolean      m_wherespecok ;
  private boolean      m_inwherespec ;
  private boolean      m_selectedfound ;
  private String       m_tempbuffer ;
  private String       m_supdata1 ;
  private String       m_supdata2 ;
  private int          m_currentline ;
  private int          m_currentcol ;
  private int          m_currentkeyletterslinenumber ;
  private int          m_currentkeyletterscolumn ;
  private int          m_currentparameterassignmentnamelinenumber ;
  private int          m_currentparameterassignmentnamecolumn ;
  private int          m_currentassociationnumberlinenumber ;
  private int          m_currentassociationnumbercolumn ;
  private int          m_currentassociationphraselinenumber ;
  private int          m_currentassociationphrasecolumn ;
  private int          m_currentdatatypenamelinenumber ;
  private int          m_currentdatatypenamecolumn ;
  private boolean      m_blockinstackframecreated ;
  private java.util.UUID         m_parsed_action_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Body_c IsCommittedFromBody ;
public void relateAcrossR601To(Body_c target)
{
	relateAcrossR601To(target, true);
}
public void relateAcrossR601To(Body_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsCommittedFromBody) return;  // already related

    if ( IsCommittedFromBody != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsCommittedFromBody != null) {
    
        IsCommittedFromBody.clearBackPointerR601To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Block_c.relateAcrossR601To(Body_c target)", 
			"Relate performed across R601 from Block to Body without unrelate of prior instance.");  
		}
    }
                
    	IsCommittedFromBody = target ;
        m_action_id = target.getAction_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR601To(this);
        target.addRef();
    }
}
public void unrelateAcrossR601From(Body_c target)
{
	unrelateAcrossR601From(target, true);
}
public void unrelateAcrossR601From(Body_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsCommittedFromBody == null) return;  // already unrelated
	
	if (target != IsCommittedFromBody) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R601", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR601To(this);
    }
    

      if(IsCommittedFromBody != null) {
      
        m_action_id = IsCommittedFromBody.getAction_id();
        IsCommittedFromBody = null ;
        target.removeRef();
    }
}

  
    
      
public static Block_c getOneACT_BLKOnR601(Body_c [] targets)
{
    return getOneACT_BLKOnR601(targets, null);
}

public static Block_c getOneACT_BLKOnR601(Body_c [] targets, ClassQueryInterface_c test)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_BLKOnR601(targets[i], test);
        }
    }

    return ret_val;
}

public static Block_c getOneACT_BLKOnR601(Body_c target)
{
  return getOneACT_BLKOnR601(target, null);
}

public static Block_c getOneACT_BLKOnR601(Body_c target, boolean loadComponent)
{
    return getOneACT_BLKOnR601(target.getModelRoot(), target, null, loadComponent);
}

public static Block_c getOneACT_BLKOnR601(Body_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_BLKOnR601(target.getModelRoot(), target, test);
  }
  return null;
}

public static Block_c getOneACT_BLKOnR601(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test)
{
	return getOneACT_BLKOnR601(modelRoot, target, test, true);
}

public static Block_c getOneACT_BLKOnR601(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_BLKOnR601(modelRoot,target,test);
}
private static Block_c find_getOneACT_BLKOnR601(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasCommittedBlockHasCommitted_R601) {
	    for ( int i = 0; i < target.backPointer_HasCommittedBlockHasCommitted_R601.size(); ++i ) {
	      Block_c source = (Block_c)target.backPointer_HasCommittedBlockHasCommitted_R601.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Block_c [] getManyACT_BLKsOnR601(Body_c [] targets)
{
  return getManyACT_BLKsOnR601(targets, null);
}
public static Block_c [] getManyACT_BLKsOnR601(Body_c [] targets, boolean loadComponent)
{
  return getManyACT_BLKsOnR601(targets, null, loadComponent);
}
public static Block_c [] getManyACT_BLKsOnR601(Body_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR601(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR601(Body_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Block_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Block_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasCommittedBlockHasCommitted_R601) {
	    for (int j = 0; j < targets[i].backPointer_HasCommittedBlockHasCommitted_R601.size(); ++j) {
	      Block_c source = (Block_c)targets[i].backPointer_HasCommittedBlockHasCommitted_R601.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Block_c[] ret_set = new Block_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Block_c[0];
  }
  }

public static Block_c [] getManyACT_BLKsOnR601(Body_c target)
{
  return getManyACT_BLKsOnR601(target, null);
}

public static Block_c [] getManyACT_BLKsOnR601(Body_c target, boolean loadComponent)
{
  return getManyACT_BLKsOnR601(target, null, loadComponent);
}

public static Block_c [] getManyACT_BLKsOnR601(Body_c target, ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR601(target, test, true);
}

public static Block_c [] getManyACT_BLKsOnR601(Body_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Block_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasCommittedBlockHasCommitted_R601) {
    for (int i = 0; i < target.backPointer_HasCommittedBlockHasCommitted_R601.size(); ++i) {
      Block_c source = (Block_c)target.backPointer_HasCommittedBlockHasCommitted_R601.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Block_c[] ret_set = new Block_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Block_c[0];
	}
  }


  
    
// referring navigation

Body_c IsParsedFromBody ;
public void relateAcrossR612To(Body_c target)
{
	relateAcrossR612To(target, true);
}
public void relateAcrossR612To(Body_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsParsedFromBody) return;  // already related

    if ( IsParsedFromBody != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsParsedFromBody != null) {
    
        IsParsedFromBody.clearBackPointerR612To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Block_c.relateAcrossR612To(Body_c target)", 
			"Relate performed across R612 from Block to Body without unrelate of prior instance.");  
		}
    }
                
    	IsParsedFromBody = target ;
        m_parsed_action_id = target.getAction_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR612To(this);
        target.addRef();
    }
}
public void unrelateAcrossR612From(Body_c target)
{
	unrelateAcrossR612From(target, true);
}
public void unrelateAcrossR612From(Body_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsParsedFromBody == null) return;  // already unrelated
	
	if (target != IsParsedFromBody) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R612", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR612To(this);
    }
    

      if(IsParsedFromBody != null) {
      
        m_parsed_action_id = IsParsedFromBody.getAction_id();
        IsParsedFromBody = null ;
        target.removeRef();
    }
}

  
    
      
public static Block_c getOneACT_BLKOnR612(Body_c [] targets)
{
    return getOneACT_BLKOnR612(targets, null);
}

public static Block_c getOneACT_BLKOnR612(Body_c [] targets, ClassQueryInterface_c test)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_BLKOnR612(targets[i], test);
        }
    }

    return ret_val;
}

public static Block_c getOneACT_BLKOnR612(Body_c target)
{
  return getOneACT_BLKOnR612(target, null);
}

public static Block_c getOneACT_BLKOnR612(Body_c target, boolean loadComponent)
{
    return getOneACT_BLKOnR612(target.getModelRoot(), target, null, loadComponent);
}

public static Block_c getOneACT_BLKOnR612(Body_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_BLKOnR612(target.getModelRoot(), target, test);
  }
  return null;
}

public static Block_c getOneACT_BLKOnR612(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test)
{
	return getOneACT_BLKOnR612(modelRoot, target, test, true);
}

public static Block_c getOneACT_BLKOnR612(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_BLKOnR612(modelRoot,target,test);
}
private static Block_c find_getOneACT_BLKOnR612(ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasParsedBlockHasParsed_R612) {
	    for ( int i = 0; i < target.backPointer_HasParsedBlockHasParsed_R612.size(); ++i ) {
	      Block_c source = (Block_c)target.backPointer_HasParsedBlockHasParsed_R612.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Block_c [] getManyACT_BLKsOnR612(Body_c [] targets)
{
  return getManyACT_BLKsOnR612(targets, null);
}
public static Block_c [] getManyACT_BLKsOnR612(Body_c [] targets, boolean loadComponent)
{
  return getManyACT_BLKsOnR612(targets, null, loadComponent);
}
public static Block_c [] getManyACT_BLKsOnR612(Body_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR612(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR612(Body_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Block_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Block_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasParsedBlockHasParsed_R612) {
	    for (int j = 0; j < targets[i].backPointer_HasParsedBlockHasParsed_R612.size(); ++j) {
	      Block_c source = (Block_c)targets[i].backPointer_HasParsedBlockHasParsed_R612.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Block_c[] ret_set = new Block_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Block_c[0];
  }
  }

public static Block_c [] getManyACT_BLKsOnR612(Body_c target)
{
  return getManyACT_BLKsOnR612(target, null);
}

public static Block_c [] getManyACT_BLKsOnR612(Body_c target, boolean loadComponent)
{
  return getManyACT_BLKsOnR612(target, null, loadComponent);
}

public static Block_c [] getManyACT_BLKsOnR612(Body_c target, ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR612(target, test, true);
}

public static Block_c [] getManyACT_BLKsOnR612(Body_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Block_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasParsedBlockHasParsed_R612) {
    for (int i = 0; i < target.backPointer_HasParsedBlockHasParsed_R612.size(); ++i) {
      Block_c source = (Block_c)target.backPointer_HasParsedBlockHasParsed_R612.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Block_c[] ret_set = new Block_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Block_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

WhileStmt_c backPointer_WhileStmt_R608;

public void setWhileStmtOrderInChildListR608(WhileStmt_c target, int index) {
	unrelateAcrossR608From(target);
	WhileStmt_c[] elements = WhileStmt_c.getManyACT_WHLsOnR608(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR608From((WhileStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR608To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR608To((WhileStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR608To(WhileStmt_c target)
{
  if (target != null) {
    target.relateAcrossR608To(this, true) ;
  }
}

public void relateAcrossR608To(WhileStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR608To(this, notifyChanges) ;
  }
}

public void setBackPointerR608To(WhileStmt_c target)
{
    backPointer_WhileStmt_R608 = target;
}

public void unrelateAcrossR608From(WhileStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR608From(this, true) ;
  }
}

public void unrelateAcrossR608From(WhileStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR608From(this, notifyChanges) ;
  }
}

public void clearBackPointerR608To(WhileStmt_c target)
{
	if (target == backPointer_WhileStmt_R608) {
		backPointer_WhileStmt_R608 = null;
	}
}

public static Block_c getOneACT_BLKOnR608(WhileStmt_c [] targets)
{
    return getOneACT_BLKOnR608(targets, null);
}

public static Block_c getOneACT_BLKOnR608(WhileStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR608(targets, test, true);
}

public static Block_c getOneACT_BLKOnR608(WhileStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR608(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR608(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR608(WhileStmt_c target)
{
	return getOneACT_BLKOnR608(target, true);
}
public static Block_c getOneACT_BLKOnR608(WhileStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ControlsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR608(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ControlsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c [] targets)
{
  return getManyACT_BLKsOnR608(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    WhileStmt_c [] targetArray = new WhileStmt_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR608(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR608(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c target)
{
    return getManyACT_BLKsOnR608(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR608(WhileStmt_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR608(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Statement_c> backPointer_ContainedByStatementContainedBy_R602 = new ArrayList<Statement_c>();

public void setStatementOrderInChildListR602(Statement_c target, int index) {
	unrelateAcrossR602From(target);
	Statement_c[] elements = Statement_c.getManyACT_SMTsOnR602(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR602From((Statement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR602To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR602To((Statement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR602To(Statement_c target)
{
  if (target != null) {
    target.relateAcrossR602To(this, true) ;
  }
}

public void relateAcrossR602To(Statement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR602To(this, notifyChanges) ;
  }
}

public void setBackPointerR602To(Statement_c target)
{
  	synchronized (backPointer_ContainedByStatementContainedBy_R602) {
		backPointer_ContainedByStatementContainedBy_R602.add(target);
	}
}

public void unrelateAcrossR602From(Statement_c target)
{
  if (target != null) {
    target.unrelateAcrossR602From(this, true) ;
  }
}

public void unrelateAcrossR602From(Statement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR602From(this, notifyChanges) ;
  }
}

public void clearBackPointerR602To(Statement_c target)
{
  synchronized (backPointer_ContainedByStatementContainedBy_R602) {
	    backPointer_ContainedByStatementContainedBy_R602.remove(target);
	}
}

public static Block_c getOneACT_BLKOnR602(Statement_c [] targets)
{
    return getOneACT_BLKOnR602(targets, null);
}

public static Block_c getOneACT_BLKOnR602(Statement_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR602(targets, test, true);
}

public static Block_c getOneACT_BLKOnR602(Statement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR602(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR602(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR602(Statement_c target)
{
	return getOneACT_BLKOnR602(target, true);
}
public static Block_c getOneACT_BLKOnR602(Statement_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ContainsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR602(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ContainsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c [] targets)
{
  return getManyACT_BLKsOnR602(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR602(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR602(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c target)
{
    return getManyACT_BLKsOnR602(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR602(Statement_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR602(target, null, loadComponent);
}


    
  
  
// referred to navigation

IfStmt_c backPointer_IfStmt_R607;

public void setIfStmtOrderInChildListR607(IfStmt_c target, int index) {
	unrelateAcrossR607From(target);
	IfStmt_c[] elements = IfStmt_c.getManyACT_IFsOnR607(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR607From((IfStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR607To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR607To((IfStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR607To(IfStmt_c target)
{
  if (target != null) {
    target.relateAcrossR607To(this, true) ;
  }
}

public void relateAcrossR607To(IfStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR607To(this, notifyChanges) ;
  }
}

public void setBackPointerR607To(IfStmt_c target)
{
    backPointer_IfStmt_R607 = target;
}

public void unrelateAcrossR607From(IfStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR607From(this, true) ;
  }
}

public void unrelateAcrossR607From(IfStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR607From(this, notifyChanges) ;
  }
}

public void clearBackPointerR607To(IfStmt_c target)
{
	if (target == backPointer_IfStmt_R607) {
		backPointer_IfStmt_R607 = null;
	}
}

public static Block_c getOneACT_BLKOnR607(IfStmt_c [] targets)
{
    return getOneACT_BLKOnR607(targets, null);
}

public static Block_c getOneACT_BLKOnR607(IfStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR607(targets, test, true);
}

public static Block_c getOneACT_BLKOnR607(IfStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR607(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR607(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR607(IfStmt_c target)
{
	return getOneACT_BLKOnR607(target, true);
}
public static Block_c getOneACT_BLKOnR607(IfStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ControlsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR607(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ControlsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c [] targets)
{
  return getManyACT_BLKsOnR607(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    IfStmt_c [] targetArray = new IfStmt_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR607(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR607(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c target)
{
    return getManyACT_BLKsOnR607(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR607(IfStmt_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR607(target, null, loadComponent);
}


    
  
  
// referred to navigation

ForStmt_c backPointer_ForStmt_R605;

public void setForStmtOrderInChildListR605(ForStmt_c target, int index) {
	unrelateAcrossR605From(target);
	ForStmt_c[] elements = ForStmt_c.getManyACT_FORsOnR605(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR605From((ForStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR605To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR605To((ForStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR605To(ForStmt_c target)
{
  if (target != null) {
    target.relateAcrossR605To(this, true) ;
  }
}

public void relateAcrossR605To(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR605To(this, notifyChanges) ;
  }
}

public void setBackPointerR605To(ForStmt_c target)
{
    backPointer_ForStmt_R605 = target;
}

public void unrelateAcrossR605From(ForStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR605From(this, true) ;
  }
}

public void unrelateAcrossR605From(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR605From(this, notifyChanges) ;
  }
}

public void clearBackPointerR605To(ForStmt_c target)
{
	if (target == backPointer_ForStmt_R605) {
		backPointer_ForStmt_R605 = null;
	}
}

public static Block_c getOneACT_BLKOnR605(ForStmt_c [] targets)
{
    return getOneACT_BLKOnR605(targets, null);
}

public static Block_c getOneACT_BLKOnR605(ForStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR605(targets, test, true);
}

public static Block_c getOneACT_BLKOnR605(ForStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR605(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR605(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR605(ForStmt_c target)
{
	return getOneACT_BLKOnR605(target, true);
}
public static Block_c getOneACT_BLKOnR605(ForStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ControlsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR605(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ControlsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c [] targets)
{
  return getManyACT_BLKsOnR605(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ForStmt_c [] targetArray = new ForStmt_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR605(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR605(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c target)
{
    return getManyACT_BLKsOnR605(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR605(ForStmt_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR605(target, null, loadComponent);
}


    
  
  
// referred to navigation

ElseifStmt_c backPointer_ElseifStmt_R658;

public void setElseifStmtOrderInChildListR658(ElseifStmt_c target, int index) {
	unrelateAcrossR658From(target);
	ElseifStmt_c[] elements = ElseifStmt_c.getManyACT_ELsOnR658(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR658From((ElseifStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR658To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR658To((ElseifStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR658To(ElseifStmt_c target)
{
  if (target != null) {
    target.relateAcrossR658To(this, true) ;
  }
}

public void relateAcrossR658To(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR658To(this, notifyChanges) ;
  }
}

public void setBackPointerR658To(ElseifStmt_c target)
{
    backPointer_ElseifStmt_R658 = target;
}

public void unrelateAcrossR658From(ElseifStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR658From(this, true) ;
  }
}

public void unrelateAcrossR658From(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR658From(this, notifyChanges) ;
  }
}

public void clearBackPointerR658To(ElseifStmt_c target)
{
	if (target == backPointer_ElseifStmt_R658) {
		backPointer_ElseifStmt_R658 = null;
	}
}

public static Block_c getOneACT_BLKOnR658(ElseifStmt_c [] targets)
{
    return getOneACT_BLKOnR658(targets, null);
}

public static Block_c getOneACT_BLKOnR658(ElseifStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR658(targets, test, true);
}

public static Block_c getOneACT_BLKOnR658(ElseifStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR658(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR658(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR658(ElseifStmt_c target)
{
	return getOneACT_BLKOnR658(target, true);
}
public static Block_c getOneACT_BLKOnR658(ElseifStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ControlsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR658(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ControlsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c [] targets)
{
  return getManyACT_BLKsOnR658(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElseifStmt_c [] targetArray = new ElseifStmt_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR658(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR658(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c target)
{
    return getManyACT_BLKsOnR658(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR658(ElseifStmt_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR658(target, null, loadComponent);
}


    
  
  
// referred to navigation

ElseStmt_c backPointer_ElseStmt_R606;

public void setElseStmtOrderInChildListR606(ElseStmt_c target, int index) {
	unrelateAcrossR606From(target);
	ElseStmt_c[] elements = ElseStmt_c.getManyACT_EsOnR606(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR606From((ElseStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR606To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR606To((ElseStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR606To(ElseStmt_c target)
{
  if (target != null) {
    target.relateAcrossR606To(this, true) ;
  }
}

public void relateAcrossR606To(ElseStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR606To(this, notifyChanges) ;
  }
}

public void setBackPointerR606To(ElseStmt_c target)
{
    backPointer_ElseStmt_R606 = target;
}

public void unrelateAcrossR606From(ElseStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR606From(this, true) ;
  }
}

public void unrelateAcrossR606From(ElseStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR606From(this, notifyChanges) ;
  }
}

public void clearBackPointerR606To(ElseStmt_c target)
{
	if (target == backPointer_ElseStmt_R606) {
		backPointer_ElseStmt_R606 = null;
	}
}

public static Block_c getOneACT_BLKOnR606(ElseStmt_c [] targets)
{
    return getOneACT_BLKOnR606(targets, null);
}

public static Block_c getOneACT_BLKOnR606(ElseStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR606(targets, test, true);
}

public static Block_c getOneACT_BLKOnR606(ElseStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR606(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR606(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR606(ElseStmt_c target)
{
	return getOneACT_BLKOnR606(target, true);
}
public static Block_c getOneACT_BLKOnR606(ElseStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ControlsBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR606(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].ControlsBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c [] targets)
{
  return getManyACT_BLKsOnR606(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElseStmt_c [] targetArray = new ElseStmt_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR606(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR606(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c target)
{
    return getManyACT_BLKsOnR606(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR606(ElseStmt_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR606(target, null, loadComponent);
}


    
  
  
// referred to navigation

Body_c backPointer_IsOuterCommittedLevelOfBodyIsOuterCommittedLevelOf_R666;

public void setBodyOrderInChildListR666(Body_c target, int index) {
	unrelateAcrossR666From(target);
	Body_c[] elements = Body_c.getManyACT_ACTsOnR666(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR666From((Body_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR666To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR666To((Body_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR666To(Body_c target)
{
  if (target != null) {
    target.relateAcrossR666To(this, true) ;
  }
}

public void relateAcrossR666To(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR666To(this, notifyChanges) ;
  }
}

public void setBackPointerR666To(Body_c target)
{
    backPointer_IsOuterCommittedLevelOfBodyIsOuterCommittedLevelOf_R666 = target;
}

public void unrelateAcrossR666From(Body_c target)
{
  if (target != null) {
    target.unrelateAcrossR666From(this, true) ;
  }
}

public void unrelateAcrossR666From(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR666From(this, notifyChanges) ;
  }
}

public void clearBackPointerR666To(Body_c target)
{
	if (target == backPointer_IsOuterCommittedLevelOfBodyIsOuterCommittedLevelOf_R666) {
		backPointer_IsOuterCommittedLevelOfBodyIsOuterCommittedLevelOf_R666 = null;
	}
}

public static Block_c getOneACT_BLKOnR666(Body_c [] targets)
{
    return getOneACT_BLKOnR666(targets, null);
}

public static Block_c getOneACT_BLKOnR666(Body_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR666(targets, test, true);
}

public static Block_c getOneACT_BLKOnR666(Body_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR666(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR666(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR666(Body_c target)
{
	return getOneACT_BLKOnR666(target, true);
}
public static Block_c getOneACT_BLKOnR666(Body_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasCommittedOuterBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR666(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].HasCommittedOuterBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c [] targets)
{
  return getManyACT_BLKsOnR666(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Body_c [] targetArray = new Body_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR666(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR666(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c target)
{
    return getManyACT_BLKsOnR666(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR666(Body_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR666(target, null, loadComponent);
}


    
  
  
// referred to navigation

Body_c backPointer_IsCurrentScopeForBodyIsCurrentScopeFor_R699;

public void setBodyOrderInChildListR699(Body_c target, int index) {
	unrelateAcrossR699From(target);
	Body_c[] elements = Body_c.getManyACT_ACTsOnR699(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR699From((Body_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR699To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR699To((Body_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR699To(Body_c target)
{
  if (target != null) {
    target.relateAcrossR699To(this, true) ;
  }
}

public void relateAcrossR699To(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR699To(this, notifyChanges) ;
  }
}

public void setBackPointerR699To(Body_c target)
{
    backPointer_IsCurrentScopeForBodyIsCurrentScopeFor_R699 = target;
}

public void unrelateAcrossR699From(Body_c target)
{
  if (target != null) {
    target.unrelateAcrossR699From(this, true) ;
  }
}

public void unrelateAcrossR699From(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR699From(this, notifyChanges) ;
  }
}

public void clearBackPointerR699To(Body_c target)
{
	if (target == backPointer_IsCurrentScopeForBodyIsCurrentScopeFor_R699) {
		backPointer_IsCurrentScopeForBodyIsCurrentScopeFor_R699 = null;
	}
}

public static Block_c getOneACT_BLKOnR699(Body_c [] targets)
{
    return getOneACT_BLKOnR699(targets, null);
}

public static Block_c getOneACT_BLKOnR699(Body_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR699(targets, test, true);
}

public static Block_c getOneACT_BLKOnR699(Body_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR699(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR699(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR699(Body_c target)
{
	return getOneACT_BLKOnR699(target, true);
}
public static Block_c getOneACT_BLKOnR699(Body_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasCurrentScopeBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR699(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].HasCurrentScopeBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c [] targets)
{
  return getManyACT_BLKsOnR699(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Body_c [] targetArray = new Body_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR699(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR699(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c target)
{
    return getManyACT_BLKsOnR699(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR699(Body_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR699(target, null, loadComponent);
}


    
  
  
// referred to navigation

Body_c backPointer_IsOuterParseLevelOfBodyIsOuterParseLevelOf_R650;

public void setBodyOrderInChildListR650(Body_c target, int index) {
	unrelateAcrossR650From(target);
	Body_c[] elements = Body_c.getManyACT_ACTsOnR650(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR650From((Body_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR650To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR650To((Body_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR650To(Body_c target)
{
  if (target != null) {
    target.relateAcrossR650To(this, true) ;
  }
}

public void relateAcrossR650To(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR650To(this, notifyChanges) ;
  }
}

public void setBackPointerR650To(Body_c target)
{
    backPointer_IsOuterParseLevelOfBodyIsOuterParseLevelOf_R650 = target;
}

public void unrelateAcrossR650From(Body_c target)
{
  if (target != null) {
    target.unrelateAcrossR650From(this, true) ;
  }
}

public void unrelateAcrossR650From(Body_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR650From(this, notifyChanges) ;
  }
}

public void clearBackPointerR650To(Body_c target)
{
	if (target == backPointer_IsOuterParseLevelOfBodyIsOuterParseLevelOf_R650) {
		backPointer_IsOuterParseLevelOfBodyIsOuterParseLevelOf_R650 = null;
	}
}

public static Block_c getOneACT_BLKOnR650(Body_c [] targets)
{
    return getOneACT_BLKOnR650(targets, null);
}

public static Block_c getOneACT_BLKOnR650(Body_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR650(targets, test, true);
}

public static Block_c getOneACT_BLKOnR650(Body_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR650(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR650(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR650(Body_c target)
{
	return getOneACT_BLKOnR650(target, true);
}
public static Block_c getOneACT_BLKOnR650(Body_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasParsedOuterBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR650(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].HasParsedOuterBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c [] targets)
{
  return getManyACT_BLKsOnR650(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Body_c [] targetArray = new Body_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR650(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR650(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c target)
{
    return getManyACT_BLKsOnR650(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR650(Body_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR650(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Variable_c> backPointer_IsScopeForVariableIsScopeFor_R823 = new ArrayList<Variable_c>();

public void setVariableOrderInChildListR823(Variable_c target, int index) {
	unrelateAcrossR823From(target);
	Variable_c[] elements = Variable_c.getManyV_VARsOnR823(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR823From((Variable_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR823To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR823To((Variable_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR823To(Variable_c target)
{
  if (target != null) {
    target.relateAcrossR823To(this, true) ;
  }
}

public void relateAcrossR823To(Variable_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR823To(this, notifyChanges) ;
  }
}

public void setBackPointerR823To(Variable_c target)
{
  	synchronized (backPointer_IsScopeForVariableIsScopeFor_R823) {
		backPointer_IsScopeForVariableIsScopeFor_R823.add(target);
	}
}

public void unrelateAcrossR823From(Variable_c target)
{
  if (target != null) {
    target.unrelateAcrossR823From(this, true) ;
  }
}

public void unrelateAcrossR823From(Variable_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR823From(this, notifyChanges) ;
  }
}

public void clearBackPointerR823To(Variable_c target)
{
  synchronized (backPointer_IsScopeForVariableIsScopeFor_R823) {
	    backPointer_IsScopeForVariableIsScopeFor_R823.remove(target);
	}
}

public static Block_c getOneACT_BLKOnR823(Variable_c [] targets)
{
    return getOneACT_BLKOnR823(targets, null);
}

public static Block_c getOneACT_BLKOnR823(Variable_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR823(targets, test, true);
}

public static Block_c getOneACT_BLKOnR823(Variable_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR823(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR823(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR823(Variable_c target)
{
	return getOneACT_BLKOnR823(target, true);
}
public static Block_c getOneACT_BLKOnR823(Variable_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Block ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR823(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].Block;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c [] targets)
{
  return getManyACT_BLKsOnR823(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Variable_c [] targetArray = new Variable_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR823(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR823(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c target)
{
    return getManyACT_BLKsOnR823(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR823(Variable_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR823(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Value_c> backPointer_DefinesScopeOfValueDefinesScopeOf_R826 = new ArrayList<Value_c>();

public void setValueOrderInChildListR826(Value_c target, int index) {
	unrelateAcrossR826From(target);
	Value_c[] elements = Value_c.getManyV_VALsOnR826(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR826From((Value_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR826To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR826To((Value_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR826To(Value_c target)
{
  if (target != null) {
    target.relateAcrossR826To(this, true) ;
  }
}

public void relateAcrossR826To(Value_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR826To(this, notifyChanges) ;
  }
}

public void setBackPointerR826To(Value_c target)
{
  	synchronized (backPointer_DefinesScopeOfValueDefinesScopeOf_R826) {
		backPointer_DefinesScopeOfValueDefinesScopeOf_R826.add(target);
	}
}

public void unrelateAcrossR826From(Value_c target)
{
  if (target != null) {
    target.unrelateAcrossR826From(this, true) ;
  }
}

public void unrelateAcrossR826From(Value_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR826From(this, notifyChanges) ;
  }
}

public void clearBackPointerR826To(Value_c target)
{
  synchronized (backPointer_DefinesScopeOfValueDefinesScopeOf_R826) {
	    backPointer_DefinesScopeOfValueDefinesScopeOf_R826.remove(target);
	}
}

public static Block_c getOneACT_BLKOnR826(Value_c [] targets)
{
    return getOneACT_BLKOnR826(targets, null);
}

public static Block_c getOneACT_BLKOnR826(Value_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_BLKOnR826(targets, test, true);
}

public static Block_c getOneACT_BLKOnR826(Value_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Block_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Block_c candidate_val = getOneACT_BLKOnR826(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_BLKOnR826(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Block_c getOneACT_BLKOnR826(Value_c target)
{
	return getOneACT_BLKOnR826(target, true);
}
public static Block_c getOneACT_BLKOnR826(Value_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasScopeBlock ;
  } else {
    return null;
  }
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_BLKsOnR826(targets, test, true);
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Block_c[0];
  
  
  LinkedHashSet<Block_c> elementsSet = new LinkedHashSet<Block_c>();
  for (int i = 0; i < targets.length; i++) {
    Block_c associate = targets[i].HasScopeBlock;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Block_c[] result = new Block_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c [] targets)
{
  return getManyACT_BLKsOnR826(targets, null);
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Value_c [] targetArray = new Value_c[1];
    targetArray[0] = target;
    return getManyACT_BLKsOnR826(targetArray, test, loadComponent);
  } else {
    Block_c [] result = new Block_c [0] ;
    return result ;
  }
  
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_BLKsOnR826(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c target)
{
    return getManyACT_BLKsOnR826(target, null, true);
}

public static Block_c [] getManyACT_BLKsOnR826(Value_c target, boolean loadComponent)
{
    return getManyACT_BLKsOnR826(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsCommittedFromBody == null) {          
      // R601
      Body_c relInst58070 = (Body_c) baseRoot.getInstanceList(Body_c.class).get(new Object[] {m_action_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58070 == null) {
      			relInst58070 = (Body_c) Ooaofooa.getDefaultInstance().getInstanceList(Body_c.class).get(new Object[] {m_action_id});
      		}
			if (relInst58070 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58070 = (Body_c) roots[i].getInstanceList(Body_c.class).get(new Object[] {m_action_id});
					if (relInst58070 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58070 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58070) && !isProxy())) {
	      relInst58070.relateAcrossR601To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsParsedFromBody == null) {          
      // R612
      Body_c relInst58071 = (Body_c) baseRoot.getInstanceList(Body_c.class).get(new Object[] {m_parsed_action_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst58071 == null) {
      			relInst58071 = (Body_c) Ooaofooa.getDefaultInstance().getInstanceList(Body_c.class).get(new Object[] {m_parsed_action_id});
      		}
			if (relInst58071 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst58071 = (Body_c) roots[i].getInstanceList(Body_c.class).get(new Object[] {m_parsed_action_id});
					if (relInst58071 != null)
						break;
				}
			}
			//synchronized
      if ( relInst58071 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst58071) && !isProxy())) {
	      relInst58071.relateAcrossR612To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R601
      // ACT_ACT
		  inst=IsCommittedFromBody;
			unrelateAcrossR601From(IsCommittedFromBody, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R612
      // ACT_ACT
		  inst=IsParsedFromBody;
			unrelateAcrossR612From(IsParsedFromBody, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Block_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Block_c inst = (Block_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Block_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Block_c BlockInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Block_c result=findBlockInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Block_c findBlockInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Block_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Block_c x = (Block_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Block_c BlockInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return BlockInstance(modelRoot,test,true);
  }
  
  public static Block_c BlockInstance(ModelRoot modelRoot)
  {
	 return BlockInstance(modelRoot,null,true);
  }

  public static Block_c [] BlockInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Block_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Block_c x = (Block_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Block_c[] ret_set = new Block_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Block_c[0];
			}		
		} 
  }
  public static Block_c [] BlockInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  BlockInstances(modelRoot,test,true);
  }
  public static Block_c [] BlockInstances(ModelRoot modelRoot)
  {
	return BlockInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Block.dispose call: ";
	WhileStmt_c testR608Inst = WhileStmt_c.getOneACT_WHLOnR608(this, false);

	if ( testR608Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "608 ";	
	}
	Statement_c testR602Inst = Statement_c.getOneACT_SMTOnR602(this, false);

	if ( testR602Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "602 ";	
	}
	IfStmt_c testR607Inst = IfStmt_c.getOneACT_IFOnR607(this, false);

	if ( testR607Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "607 ";	
	}
	ForStmt_c testR605Inst = ForStmt_c.getOneACT_FOROnR605(this, false);

	if ( testR605Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "605 ";	
	}
	ElseifStmt_c testR658Inst = ElseifStmt_c.getOneACT_ELOnR658(this, false);

	if ( testR658Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "658 ";	
	}
	ElseStmt_c testR606Inst = ElseStmt_c.getOneACT_EOnR606(this, false);

	if ( testR606Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "606 ";	
	}
	Body_c testR666Inst = Body_c.getOneACT_ACTOnR666(this, false);

	if ( testR666Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "666 ";	
	}
	Body_c testR699Inst = Body_c.getOneACT_ACTOnR699(this, false);

	if ( testR699Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "699 ";	
	}
	Body_c testR650Inst = Body_c.getOneACT_ACTOnR650(this, false);

	if ( testR650Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "650 ";	
	}
	Body_c testR601Inst = Body_c.getOneACT_ACTOnR601(this, false);

	if ( testR601Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "601 ";
	}
	Body_c testR612Inst = Body_c.getOneACT_ACTOnR612(this, false);

	if ( testR612Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "612 ";
	}
	Variable_c testR823Inst = Variable_c.getOneV_VAROnR823(this, false);

	if ( testR823Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "823 ";	
	}
	Value_c testR826Inst = Value_c.getOneV_VALOnR826(this, false);

	if ( testR826Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "826 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Block", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("block_id")){
         return true;
      }
      if(attributeName.equals("action_id")){
         return true;
      }
      if(attributeName.equals("parsed_action_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getBlock_idLongBased()
  {
    if(m_block_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_block_id)){
    	return 0xfffffff & m_block_id.getLeastSignificantBits();
    }
    return m_block_idLongBased ;
  }
  public java.util.UUID getBlock_id()
  {
    return m_block_id ;
  }


  public void setBlock_id(java.util.UUID newValue)
  {
   m_block_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getAction_idLongBased()
  {
    if ( IsCommittedFromBody != null )
    {
      return IsCommittedFromBody.getAction_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getAction_id()
  {
    if ( IsCommittedFromBody != null )
    {
      return IsCommittedFromBody.getAction_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getAction_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_action_id) )
      return m_action_id;
    else
      return getAction_id();
  }
  
  public void setAction_id(java.util.UUID newValue)
  {
   m_action_id = IdAssigner.preprocessUUID(newValue);
  }
  public boolean getWherespecok()
  {
    return m_wherespecok ;
  }


  public void setWherespecok(boolean newValue)
  {
   m_wherespecok = newValue ;
  }
  public boolean getInwherespec()
  {
    return m_inwherespec ;
  }


  public void setInwherespec(boolean newValue)
  {
   m_inwherespec = newValue ;
  }
  public boolean getSelectedfound()
  {
    return m_selectedfound ;
  }


  public void setSelectedfound(boolean newValue)
  {
   m_selectedfound = newValue ;
  }
  public String getTempbuffer()
  {
    return m_tempbuffer ;
  }


  public void setTempbuffer(String newValue)
  {
   m_tempbuffer = newValue ;
  }
  public String getSupdata1()
  {
    return m_supdata1 ;
  }


  public void setSupdata1(String newValue)
  {
   m_supdata1 = newValue ;
  }
  public String getSupdata2()
  {
    return m_supdata2 ;
  }


  public void setSupdata2(String newValue)
  {
   m_supdata2 = newValue ;
  }
  public int getCurrentline()
  {
    return m_currentline ;
  }


  public void setCurrentline(int newValue)
  {
   m_currentline = newValue ;
  }
  public int getCurrentcol()
  {
    return m_currentcol ;
  }


  public void setCurrentcol(int newValue)
  {
   m_currentcol = newValue ;
  }
  public int getCurrentkeyletterslinenumber()
  {
    return m_currentkeyletterslinenumber ;
  }


  public void setCurrentkeyletterslinenumber(int newValue)
  {
   m_currentkeyletterslinenumber = newValue ;
  }
  public int getCurrentkeyletterscolumn()
  {
    return m_currentkeyletterscolumn ;
  }


  public void setCurrentkeyletterscolumn(int newValue)
  {
   m_currentkeyletterscolumn = newValue ;
  }
  public int getCurrentparameterassignmentnamelinenumber()
  {
    return m_currentparameterassignmentnamelinenumber ;
  }


  public void setCurrentparameterassignmentnamelinenumber(int newValue)
  {
   m_currentparameterassignmentnamelinenumber = newValue ;
  }
  public int getCurrentparameterassignmentnamecolumn()
  {
    return m_currentparameterassignmentnamecolumn ;
  }


  public void setCurrentparameterassignmentnamecolumn(int newValue)
  {
   m_currentparameterassignmentnamecolumn = newValue ;
  }
  public int getCurrentassociationnumberlinenumber()
  {
    return m_currentassociationnumberlinenumber ;
  }


  public void setCurrentassociationnumberlinenumber(int newValue)
  {
   m_currentassociationnumberlinenumber = newValue ;
  }
  public int getCurrentassociationnumbercolumn()
  {
    return m_currentassociationnumbercolumn ;
  }


  public void setCurrentassociationnumbercolumn(int newValue)
  {
   m_currentassociationnumbercolumn = newValue ;
  }
  public int getCurrentassociationphraselinenumber()
  {
    return m_currentassociationphraselinenumber ;
  }


  public void setCurrentassociationphraselinenumber(int newValue)
  {
   m_currentassociationphraselinenumber = newValue ;
  }
  public int getCurrentassociationphrasecolumn()
  {
    return m_currentassociationphrasecolumn ;
  }


  public void setCurrentassociationphrasecolumn(int newValue)
  {
   m_currentassociationphrasecolumn = newValue ;
  }
  public int getCurrentdatatypenamelinenumber()
  {
    return m_currentdatatypenamelinenumber ;
  }


  public void setCurrentdatatypenamelinenumber(int newValue)
  {
   m_currentdatatypenamelinenumber = newValue ;
  }
  public int getCurrentdatatypenamecolumn()
  {
    return m_currentdatatypenamecolumn ;
  }


  public void setCurrentdatatypenamecolumn(int newValue)
  {
   m_currentdatatypenamecolumn = newValue ;
  }
  public boolean getBlockinstackframecreated()
  {
    return m_blockinstackframecreated ;
  }


  public void setBlockinstackframecreated(boolean newValue)
  {
   m_blockinstackframecreated = newValue ;
  }
  public long getParsed_action_idLongBased()
  {
    if ( IsParsedFromBody != null )
    {
      return IsParsedFromBody.getAction_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getParsed_action_id()
  {
    if ( IsParsedFromBody != null )
    {
      return IsParsedFromBody.getAction_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getParsed_action_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_parsed_action_id) )
      return m_parsed_action_id;
    else
      return getParsed_action_id();
  }
  
  public void setParsed_action_id(java.util.UUID newValue)
  {
   m_parsed_action_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Block", //$NON-NLS-1$
	  " Operation entered: Block::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Block_c [] objs = Block_c.BlockInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Block", //$NON-NLS-1$
	  " Operation entered: Block::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Block_c_test58073_c implements ClassQueryInterface_c
    {
	  Block_c_test58073_c( java.util.UUID            p58074 ) {
	  m_p58074 = p58074;
	  }
	  private java.util.UUID             m_p58074; 
	  public boolean evaluate (Object candidate)
	  {
	      Block_c selected = (Block_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58074));
	      return retval;
	  }
    }

    Block_c [] objs58072 = 
    Block_c.BlockInstances(modelRoot, new Block_c_test58073_c(getBlock_id())) ;

    if ( (  (objs58072.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58072.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58072.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs58072.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58072.length )  + " Block_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58072.length )  + " Block_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Block is a referring class in association: rel.Numb = 601
          // The participating class is: Body
    class Body_c_test58078_c implements ClassQueryInterface_c
    {
	  Body_c_test58078_c( java.util.UUID            p58079 ) {
	  m_p58079 = p58079;
	  }
	  private java.util.UUID             m_p58079; 
	  public boolean evaluate (Object candidate)
	  {
	      Body_c selected = (Body_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAction_id().equals(m_p58079));
	      return retval;
	  }
    }

    Body_c [] objs58077 = 
    Body_c.BodyInstances(modelRoot, new Body_c_test58078_c(getAction_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs58077.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 601: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58077.length )  + " Action_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 601: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58077.length )  + " Action_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Block is a referring class in association: rel.Numb = 612
          // The participating class is: Body
    class Body_c_test58081_c implements ClassQueryInterface_c
    {
	  Body_c_test58081_c( java.util.UUID            p58082 ) {
	  m_p58082 = p58082;
	  }
	  private java.util.UUID             m_p58082; 
	  public boolean evaluate (Object candidate)
	  {
	      Body_c selected = (Body_c) candidate;
	      boolean retval = false;
	      retval = (selected.getAction_id().equals(m_p58082));
	      return retval;
	  }
    }

    Body_c [] objs58080 = 
    Body_c.BodyInstances(modelRoot, new Body_c_test58081_c(getParsed_action_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs58080.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 612: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs58080.length )  + " Parsed_Action_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 612: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58080.length )  + " Parsed_Action_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 608
             // Object: While Stmt
    class WhileStmt_c_test58084_c implements ClassQueryInterface_c
    {
	  WhileStmt_c_test58084_c( java.util.UUID            p58085 ) {
	  m_p58085 = p58085;
	  }
	  private java.util.UUID             m_p58085; 
	  public boolean evaluate (Object candidate)
	  {
	      WhileStmt_c selected = (WhileStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58085));
	      return retval;
	  }
    }

    WhileStmt_c [] objs58083 = 
    WhileStmt_c.WhileStmtInstances(modelRoot, new WhileStmt_c_test58084_c(getBlock_id())) ;

    if ( (  (objs58083.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 608: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58083.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 608: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58083.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 602
             // Object: Statement
          // Block is a participating class in association: rel.Numb = 607
             // Object: If Stmt
    class IfStmt_c_test58087_c implements ClassQueryInterface_c
    {
	  IfStmt_c_test58087_c( java.util.UUID            p58088 ) {
	  m_p58088 = p58088;
	  }
	  private java.util.UUID             m_p58088; 
	  public boolean evaluate (Object candidate)
	  {
	      IfStmt_c selected = (IfStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58088));
	      return retval;
	  }
    }

    IfStmt_c [] objs58086 = 
    IfStmt_c.IfStmtInstances(modelRoot, new IfStmt_c_test58087_c(getBlock_id())) ;

    if ( (  (objs58086.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 607: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58086.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 607: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58086.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 605
             // Object: For Stmt
    class ForStmt_c_test58090_c implements ClassQueryInterface_c
    {
	  ForStmt_c_test58090_c( java.util.UUID            p58091 ) {
	  m_p58091 = p58091;
	  }
	  private java.util.UUID             m_p58091; 
	  public boolean evaluate (Object candidate)
	  {
	      ForStmt_c selected = (ForStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58091));
	      return retval;
	  }
    }

    ForStmt_c [] objs58089 = 
    ForStmt_c.ForStmtInstances(modelRoot, new ForStmt_c_test58090_c(getBlock_id())) ;

    if ( (  (objs58089.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 605: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58089.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 605: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58089.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 658
             // Object: ElseIf Stmt
    class ElseifStmt_c_test58093_c implements ClassQueryInterface_c
    {
	  ElseifStmt_c_test58093_c( java.util.UUID            p58094 ) {
	  m_p58094 = p58094;
	  }
	  private java.util.UUID             m_p58094; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseifStmt_c selected = (ElseifStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58094));
	      return retval;
	  }
    }

    ElseifStmt_c [] objs58092 = 
    ElseifStmt_c.ElseifStmtInstances(modelRoot, new ElseifStmt_c_test58093_c(getBlock_id())) ;

    if ( (  (objs58092.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 658: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58092.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 658: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58092.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 606
             // Object: Else Stmt
    class ElseStmt_c_test58096_c implements ClassQueryInterface_c
    {
	  ElseStmt_c_test58096_c( java.util.UUID            p58097 ) {
	  m_p58097 = p58097;
	  }
	  private java.util.UUID             m_p58097; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseStmt_c selected = (ElseStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58097));
	      return retval;
	  }
    }

    ElseStmt_c [] objs58095 = 
    ElseStmt_c.ElseStmtInstances(modelRoot, new ElseStmt_c_test58096_c(getBlock_id())) ;

    if ( (  (objs58095.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 606: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58095.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 606: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58095.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 666
             // Object: Body
    class Body_c_test58099_c implements ClassQueryInterface_c
    {
	  Body_c_test58099_c( java.util.UUID            p58100 ) {
	  m_p58100 = p58100;
	  }
	  private java.util.UUID             m_p58100; 
	  public boolean evaluate (Object candidate)
	  {
	      Body_c selected = (Body_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p58100));
	      return retval;
	  }
    }

    Body_c [] objs58098 = 
    Body_c.BodyInstances(modelRoot, new Body_c_test58099_c(getBlock_id())) ;

    if ( (  (objs58098.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 666: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58098.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 666: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58098.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 699
             // Object: Body
    class Body_c_test58102_c implements ClassQueryInterface_c
    {
	  Body_c_test58102_c( java.util.UUID            p58103 ) {
	  m_p58103 = p58103;
	  }
	  private java.util.UUID             m_p58103; 
	  public boolean evaluate (Object candidate)
	  {
	      Body_c selected = (Body_c) candidate;
	      boolean retval = false;
	      retval = (selected.getCurrentscope_id().equals(m_p58103));
	      return retval;
	  }
    }

    Body_c [] objs58101 = 
    Body_c.BodyInstances(modelRoot, new Body_c_test58102_c(getBlock_id())) ;

    if ( (  (objs58101.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 699: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58101.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 699: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58101.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 650
             // Object: Body
    class Body_c_test58105_c implements ClassQueryInterface_c
    {
	  Body_c_test58105_c( java.util.UUID            p58106 ) {
	  m_p58106 = p58106;
	  }
	  private java.util.UUID             m_p58106; 
	  public boolean evaluate (Object candidate)
	  {
	      Body_c selected = (Body_c) candidate;
	      boolean retval = false;
	      retval = (selected.getParsed_block_id().equals(m_p58106));
	      return retval;
	  }
    }

    Body_c [] objs58104 = 
    Body_c.BodyInstances(modelRoot, new Body_c_test58105_c(getBlock_id())) ;

    if ( (  (objs58104.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Block", //$NON-NLS-1$
           "Consistency: Object: Block: Association: 650: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs58104.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Block: Association: 650: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs58104.length )  , e); 
      }
      retval = false;

    }

          // Block is a participating class in association: rel.Numb = 823
             // Object: Variable
          // Block is a participating class in association: rel.Numb = 826
             // Object: Value
    return retval;
  }


  // declare transform functions
  public static void Clearcurrentscope(ModelRoot modelRoot,final java.util.UUID         p_Currentcontext)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Clearcurrentscope") ; 
Body_c v_act = (Body_c) modelRoot.getInstanceList(Body_c.class).getGlobal(null, p_Currentcontext);


if ( (  (v_act != null)) )
{

Block_c v_blk = Block_c.getOneACT_BLKOnR699(v_act);


if ( (  (v_blk != null)) )
{

if (v_blk != null) {
v_blk.unrelateAcrossR699From(v_act);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_act != null) {
v_act.Clear_blocks() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End clearCurrentScope
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End dispose
  public  java.util.UUID         Newlocalreference(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Newlocalreference") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_unique_id();



   } // End newLocalReference
  public  java.util.UUID         Newlocalvalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Newlocalvalue") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_unique_id();



   } // End newLocalValue
  public  java.util.UUID         Newlocalselectedreference(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Newlocalselectedreference") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_unique_id();



   } // End newLocalSelectedReference
  public  boolean      Isouter()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Isouter") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR666(this);


return   (v_body != null);



   } // End isOuter
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
Statement_c [] v_statements = Statement_c.getManyACT_SMTsOnR602(this);


Statement_c v_prevStmt = (Statement_c) modelRoot.getInstanceList(Statement_c.class).getGlobal(null, Gd_c.Null_unique_id());


Statement_c  v_statement = null;
for ( int i55419 = 0; i55419 < v_statements.length; i55419++)
{
  v_statement = v_statements[i55419] ;

ElseStmt_c v_elseStmt = ElseStmt_c.getOneACT_EOnR603(v_statement);


ElseifStmt_c v_elifStmt = ElseifStmt_c.getOneACT_ELOnR603(v_statement);


if ( (  (v_elseStmt == null) &&   (v_elifStmt == null)) )
{

if ( (  (v_prevStmt != null)) )
{

if (v_prevStmt != null) {
  v_prevStmt.relateAcrossR661ToSucceeds(v_statement);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

v_prevStmt = v_statement ;



}


}


   } // End initialize
  public  void Popupblock(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Popupblock") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End popUpBlock
  public  void Exitasynchronousactivity(final java.util.UUID         p_Body_id,final java.util.UUID         p_Stack_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Block", " Operation entered: Block::Exitasynchronousactivity") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End exitAsynchronousActivity

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Block
