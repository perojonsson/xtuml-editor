      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.PendingEvent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import java.util.concurrent.locks.ReentrantLock;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_PENDING_EVENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class PendingEvent_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public PendingEvent_c(ModelRoot modelRoot,
       java.util.UUID         p_m_event_id,
       boolean      p_m_isexecuting,
       boolean      p_m_iscreation,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_target_inst_id,
       java.util.UUID         p_m_nextevent_id,
       java.util.UUID         p_m_sent_by_inst_id,
       java.util.UUID         p_m_next_self_event_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_originating_execution_engine_id,
       String       p_m_label)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
       //extract 28 bit value only            
       m_event_idLongBased = 0xfffffff & p_m_event_id.getLeastSignificantBits();
       m_isexecuting = p_m_isexecuting;
       m_iscreation = p_m_iscreation;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_target_inst_id = IdAssigner.preprocessUUID(p_m_target_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_nextevent_id = IdAssigner.preprocessUUID(p_m_nextevent_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sent_by_inst_id = IdAssigner.preprocessUUID(p_m_sent_by_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_next_self_event_id = IdAssigner.preprocessUUID(p_m_next_self_event_id);
       m_label = p_m_label;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_originating_execution_engine_id = IdAssigner.preprocessUUID(p_m_originating_execution_engine_id);
        
    setUniqueId(m_event_id);
    Object [] key = {m_event_id};
    addInstanceToMap(key);
  }
  static public PendingEvent_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_event_id,
       boolean      p_m_isexecuting,
       boolean      p_m_iscreation,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_target_inst_id,
       java.util.UUID         p_m_nextevent_id,
       java.util.UUID         p_m_sent_by_inst_id,
       java.util.UUID         p_m_next_self_event_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_originating_execution_engine_id,
       String       p_m_label, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
      PendingEvent_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_event_id};
          new_inst = (PendingEvent_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
       //extract 28 bit value only            
       new_inst.m_event_idLongBased = 0xfffffff & p_m_event_id.getLeastSignificantBits();
       new_inst.m_isexecuting = p_m_isexecuting;
       new_inst.m_iscreation = p_m_iscreation;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_target_inst_id = IdAssigner.preprocessUUID(p_m_target_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_nextevent_id = IdAssigner.preprocessUUID(p_m_nextevent_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sent_by_inst_id = IdAssigner.preprocessUUID(p_m_sent_by_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_next_self_event_id = IdAssigner.preprocessUUID(p_m_next_self_event_id);
       new_inst.m_label = p_m_label;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_originating_execution_engine_id = IdAssigner.preprocessUUID(p_m_originating_execution_engine_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new PendingEvent_c(modelRoot,
p_m_event_id,
p_m_isexecuting,
p_m_iscreation,
p_m_smevt_id,
p_m_target_inst_id,
p_m_nextevent_id,
p_m_sent_by_inst_id,
p_m_next_self_event_id,
p_m_execution_engine_id,
p_m_originating_execution_engine_id,
p_m_label
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public PendingEvent_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_event_id,
       boolean      p_m_isexecuting,
       boolean      p_m_iscreation,
       java.util.UUID         p_m_smevt_id,
       java.util.UUID         p_m_target_inst_id,
       java.util.UUID         p_m_nextevent_id,
       java.util.UUID         p_m_sent_by_inst_id,
       java.util.UUID         p_m_next_self_event_id,
       java.util.UUID         p_m_execution_engine_id,
       java.util.UUID         p_m_originating_execution_engine_id,
       String       p_m_label){
    InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
    PendingEvent_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_event_id
            };
        source = (PendingEvent_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_event_id = IdAssigner.preprocessUUID(p_m_event_id);
       //extract 28 bit value only            
       source.m_event_idLongBased = 0xfffffff & p_m_event_id.getLeastSignificantBits();
       source.m_isexecuting = p_m_isexecuting;
       source.m_iscreation = p_m_iscreation;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_target_inst_id = IdAssigner.preprocessUUID(p_m_target_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_nextevent_id = IdAssigner.preprocessUUID(p_m_nextevent_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sent_by_inst_id = IdAssigner.preprocessUUID(p_m_sent_by_inst_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_next_self_event_id = IdAssigner.preprocessUUID(p_m_next_self_event_id);
       source.m_label = p_m_label;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_execution_engine_id = IdAssigner.preprocessUUID(p_m_execution_engine_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_originating_execution_engine_id = IdAssigner.preprocessUUID(p_m_originating_execution_engine_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    PendingEvent_c new_inst = new PendingEvent_c(modelRoot,
p_m_event_id,
p_m_isexecuting,
p_m_iscreation,
p_m_smevt_id,
p_m_target_inst_id,
p_m_nextevent_id,
p_m_sent_by_inst_id,
p_m_next_self_event_id,
p_m_execution_engine_id,
p_m_originating_execution_engine_id,
p_m_label
);
    return new_inst;
  }
  public PendingEvent_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_event_id = idAssigner.createUUID();
     m_smevt_id = IdAssigner.NULL_UUID;   
     m_target_inst_id = IdAssigner.NULL_UUID;   
     m_nextevent_id = IdAssigner.NULL_UUID;   
     m_sent_by_inst_id = IdAssigner.NULL_UUID;   
     m_next_self_event_id = IdAssigner.NULL_UUID;   
     m_label = "";   
     m_execution_engine_id = IdAssigner.NULL_UUID;   
     m_originating_execution_engine_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_event_id);
    Object [] key = {m_event_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_event_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_event_id !=  p_newKey ){
	
		m_event_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof PendingEvent_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof PendingEvent_c)) {
           return false;
       }
       
       PendingEvent_c me = (PendingEvent_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getEvent_id()) || IdAssigner.NULL_UUID.equals(((PendingEvent_c)elem).getEvent_id())) && this != elem)) {
      	return false;
      }
      if (!getEvent_id().equals(((PendingEvent_c)elem).getEvent_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof PendingEvent_c)) {
           return false;
       }
       
       PendingEvent_c me = (PendingEvent_c)elem;
      if (!getEvent_id().equals(((PendingEvent_c)elem).getEvent_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_event_id ;
  private long m_event_idLongBased ;
  private boolean      m_isexecuting ;
  private boolean      m_iscreation ;
  private java.util.UUID         m_smevt_id ;
  private java.util.UUID         m_target_inst_id ;
  private java.util.UUID         m_nextevent_id ;
  private java.util.UUID         m_sent_by_inst_id ;
  private java.util.UUID         m_next_self_event_id ;
  private String       m_label ;
  private java.util.UUID         m_execution_engine_id ;
  private java.util.UUID         m_originating_execution_engine_id ;
      
// declare association references from this class
  
  
    
// referring navigation

StateMachineEvent_c IsInstanceOfStateMachineEvent ;
public void relateAcrossR2906To(StateMachineEvent_c target)
{
	relateAcrossR2906To(target, true);
}
public void relateAcrossR2906To(StateMachineEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsInstanceOfStateMachineEvent) return;  // already related

    if ( IsInstanceOfStateMachineEvent != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsInstanceOfStateMachineEvent != null) {
    
        IsInstanceOfStateMachineEvent.clearBackPointerR2906To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2906To(StateMachineEvent_c target)", 
			"Relate performed across R2906 from Pending Event to State Machine Event without unrelate of prior instance.");  
		}
    }
                
    	IsInstanceOfStateMachineEvent = target ;
        m_smevt_id = target.getSmevt_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2906To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2906", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2906From(StateMachineEvent_c target)
{
	unrelateAcrossR2906From(target, true);
}
public void unrelateAcrossR2906From(StateMachineEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsInstanceOfStateMachineEvent == null) return;  // already unrelated
	
	if (target != IsInstanceOfStateMachineEvent) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2906", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2906To(this);
    }
    

      if(IsInstanceOfStateMachineEvent != null) {
      
        m_smevt_id = IsInstanceOfStateMachineEvent.getSmevt_id();
        IsInstanceOfStateMachineEvent = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2906", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2906(StateMachineEvent_c [] targets)
{
    return getOneI_EVIOnR2906(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2906(StateMachineEvent_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2906(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2906(StateMachineEvent_c target)
{
  return getOneI_EVIOnR2906(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2906(StateMachineEvent_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2906(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2906(StateMachineEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2906(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2906(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2906(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2906(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2906(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2906(ModelRoot modelRoot, StateMachineEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasInstancesPendingEventHasInstances_R2906) {
	    for ( int i = 0; i < target.backPointer_HasInstancesPendingEventHasInstances_R2906.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_HasInstancesPendingEventHasInstances_R2906.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c [] targets)
{
  return getManyI_EVIsOnR2906(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2906(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2906(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasInstancesPendingEventHasInstances_R2906) {
	    for (int j = 0; j < targets[i].backPointer_HasInstancesPendingEventHasInstances_R2906.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_HasInstancesPendingEventHasInstances_R2906.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c target)
{
  return getManyI_EVIsOnR2906(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2906(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2906(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2906(StateMachineEvent_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasInstancesPendingEventHasInstances_R2906) {
    for (int i = 0; i < target.backPointer_HasInstancesPendingEventHasInstances_R2906.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_HasInstancesPendingEventHasInstances_R2906.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }


  
    
// referring navigation

PendingEvent_c WillBeProcessedAfterPendingEvent ;
public void relateAcrossR2908ToWillBeProcessedAfter(PendingEvent_c target)
{
	relateAcrossR2908ToWillBeProcessedAfter(target, true);
}
public void relateAcrossR2908ToWillBeProcessedAfter(PendingEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == WillBeProcessedAfterPendingEvent) return;  // already related

    if ( WillBeProcessedAfterPendingEvent != target ) {
    
    Object oldKey = getInstanceKey();

    if (WillBeProcessedAfterPendingEvent != null) {
    
        WillBeProcessedAfterPendingEvent.clearBackPointerR2908ToWillBeProcessedBefore(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2908ToWillBeProcessedAfter(PendingEvent_c target)", 
			"Relate performed across R2908 from Pending Event to Pending Event without unrelate of prior instance.");  
		}
    }
                
    	WillBeProcessedAfterPendingEvent = target ;
        m_nextevent_id = target.getEvent_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2908ToWillBeProcessedBefore(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2908", "WillBeProcessedAfter");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2908FromWillBeProcessedAfter(PendingEvent_c target)
{
	unrelateAcrossR2908FromWillBeProcessedAfter(target, true);
}
public void unrelateAcrossR2908FromWillBeProcessedAfter(PendingEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (WillBeProcessedAfterPendingEvent == null) return;  // already unrelated
	
	if (target != WillBeProcessedAfterPendingEvent) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2908", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2908ToWillBeProcessedBefore(this);
    }
    

      if(WillBeProcessedAfterPendingEvent != null) {
      
        m_nextevent_id = WillBeProcessedAfterPendingEvent.getEvent_id();
        WillBeProcessedAfterPendingEvent = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2908", "WillBeProcessedAfter");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(PendingEvent_c [] targets)
{
    return getOneI_EVIOnR2908WillBeProcessedBefore(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2908WillBeProcessedBefore(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(PendingEvent_c target)
{
  return getOneI_EVIOnR2908WillBeProcessedBefore(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(PendingEvent_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2908WillBeProcessedBefore(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(PendingEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2908WillBeProcessedBefore(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2908WillBeProcessedBefore(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedBefore(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2908WillBeProcessedBefore(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2908WillBeProcessedBefore(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    PendingEvent_c source = (PendingEvent_c)target.backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c [] targets)
{
  return getManyI_EVIsOnR2908WillBeProcessedBefore(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2908WillBeProcessedBefore(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2908WillBeProcessedBefore(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c target)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2908WillBeProcessedBefore(targetArray);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
  return result ;
}
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedBefore(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2908WillBeProcessedBefore(targetArray, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
  return result ;
}
}



  
    
// referring navigation

Instance_c IsPendingForInstance ;
public void relateAcrossR2907To(Instance_c target)
{
	relateAcrossR2907To(target, true);
}
public void relateAcrossR2907To(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsPendingForInstance) return;  // already related

    if ( IsPendingForInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsPendingForInstance != null) {
    
        IsPendingForInstance.clearBackPointerR2907To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2907To(Instance_c target)", 
			"Relate performed across R2907 from Pending Event to Instance without unrelate of prior instance.");  
		}
    }
                
    	IsPendingForInstance = target ;
        m_target_inst_id = target.getInst_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2907To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2907", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2907From(Instance_c target)
{
	unrelateAcrossR2907From(target, true);
}
public void unrelateAcrossR2907From(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsPendingForInstance == null) return;  // already unrelated
	
	if (target != IsPendingForInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2907", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2907To(this);
    }
    

      if(IsPendingForInstance != null) {
      
        m_target_inst_id = IsPendingForInstance.getInst_id();
        IsPendingForInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2907", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2907(Instance_c [] targets)
{
    return getOneI_EVIOnR2907(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2907(Instance_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2907(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2907(Instance_c target)
{
  return getOneI_EVIOnR2907(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2907(Instance_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2907(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2907(Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2907(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2907(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2907(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2907(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2907(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2907(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasWaitingPendingEventHasWaiting_R2907) {
	    for ( int i = 0; i < target.backPointer_HasWaitingPendingEventHasWaiting_R2907.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_HasWaitingPendingEventHasWaiting_R2907.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c [] targets)
{
  return getManyI_EVIsOnR2907(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2907(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2907(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasWaitingPendingEventHasWaiting_R2907) {
	    for (int j = 0; j < targets[i].backPointer_HasWaitingPendingEventHasWaiting_R2907.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_HasWaitingPendingEventHasWaiting_R2907.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c target)
{
  return getManyI_EVIsOnR2907(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2907(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2907(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2907(Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasWaitingPendingEventHasWaiting_R2907) {
    for (int i = 0; i < target.backPointer_HasWaitingPendingEventHasWaiting_R2907.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_HasWaitingPendingEventHasWaiting_R2907.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }


  
    
// referring navigation

Instance_c TargetsInstance ;
public void relateAcrossR2935To(Instance_c target)
{
	relateAcrossR2935To(target, true);
}
public void relateAcrossR2935To(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == TargetsInstance) return;  // already related

    if ( TargetsInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (TargetsInstance != null) {
    
        TargetsInstance.clearBackPointerR2935To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2935To(Instance_c target)", 
			"Relate performed across R2935 from Pending Event to Instance without unrelate of prior instance.");  
		}
    }
                
    	TargetsInstance = target ;
        m_target_inst_id = target.getInst_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2935To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2935", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2935From(Instance_c target)
{
	unrelateAcrossR2935From(target, true);
}
public void unrelateAcrossR2935From(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (TargetsInstance == null) return;  // already unrelated
	
	if (target != TargetsInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2935", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2935To(this);
    }
    

      if(TargetsInstance != null) {
      
        m_target_inst_id = TargetsInstance.getInst_id();
        TargetsInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2935", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2935(Instance_c [] targets)
{
    return getOneI_EVIOnR2935(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2935(Instance_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2935(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2935(Instance_c target)
{
  return getOneI_EVIOnR2935(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2935(Instance_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2935(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2935(Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2935(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2935(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2935(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2935(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2935(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2935(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935) {
	    for ( int i = 0; i < target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c [] targets)
{
  return getManyI_EVIsOnR2935(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2935(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2935(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTargetOfPendingEventIsTargetOf_R2935) {
	    for (int j = 0; j < targets[i].backPointer_IsTargetOfPendingEventIsTargetOf_R2935.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_IsTargetOfPendingEventIsTargetOf_R2935.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c target)
{
  return getManyI_EVIsOnR2935(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2935(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2935(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2935(Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935) {
    for (int i = 0; i < target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_IsTargetOfPendingEventIsTargetOf_R2935.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }


  
    
// referring navigation

Instance_c WasSentFromInstance ;
public void relateAcrossR2937To(Instance_c target)
{
	relateAcrossR2937To(target, true);
}
public void relateAcrossR2937To(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == WasSentFromInstance) return;  // already related

    if ( WasSentFromInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (WasSentFromInstance != null) {
    
        WasSentFromInstance.clearBackPointerR2937To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2937To(Instance_c target)", 
			"Relate performed across R2937 from Pending Event to Instance without unrelate of prior instance.");  
		}
    }
                
    	WasSentFromInstance = target ;
        m_sent_by_inst_id = target.getInst_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2937To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2937", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2937From(Instance_c target)
{
	unrelateAcrossR2937From(target, true);
}
public void unrelateAcrossR2937From(Instance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (WasSentFromInstance == null) return;  // already unrelated
	
	if (target != WasSentFromInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2937", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2937To(this);
    }
    

      if(WasSentFromInstance != null) {
      
        m_sent_by_inst_id = WasSentFromInstance.getInst_id();
        WasSentFromInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2937", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2937(Instance_c [] targets)
{
    return getOneI_EVIOnR2937(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2937(Instance_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2937(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2937(Instance_c target)
{
  return getOneI_EVIOnR2937(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2937(Instance_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2937(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2937(Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2937(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2937(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2937(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2937(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2937(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2937(ModelRoot modelRoot, Instance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_SendsPendingEventSends_R2937) {
	    for ( int i = 0; i < target.backPointer_SendsPendingEventSends_R2937.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_SendsPendingEventSends_R2937.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c [] targets)
{
  return getManyI_EVIsOnR2937(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2937(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2937(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_SendsPendingEventSends_R2937) {
	    for (int j = 0; j < targets[i].backPointer_SendsPendingEventSends_R2937.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_SendsPendingEventSends_R2937.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c target)
{
  return getManyI_EVIsOnR2937(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2937(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2937(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2937(Instance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_SendsPendingEventSends_R2937) {
    for (int i = 0; i < target.backPointer_SendsPendingEventSends_R2937.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_SendsPendingEventSends_R2937.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }


  
    
// referring navigation

PendingEvent_c WillBeProcessedBeforePendingEvent ;
public void relateAcrossR2939ToWillBeProcessedBefore(PendingEvent_c target)
{
	relateAcrossR2939ToWillBeProcessedBefore(target, true);
}
public void relateAcrossR2939ToWillBeProcessedBefore(PendingEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == WillBeProcessedBeforePendingEvent) return;  // already related

    if ( WillBeProcessedBeforePendingEvent != target ) {
    
    Object oldKey = getInstanceKey();

    if (WillBeProcessedBeforePendingEvent != null) {
    
        WillBeProcessedBeforePendingEvent.clearBackPointerR2939ToWillBeProcessedAfter(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2939ToWillBeProcessedBefore(PendingEvent_c target)", 
			"Relate performed across R2939 from Pending Event to Pending Event without unrelate of prior instance.");  
		}
    }
                
    	WillBeProcessedBeforePendingEvent = target ;
        m_next_self_event_id = target.getEvent_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2939ToWillBeProcessedAfter(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2939", "WillBeProcessedBefore");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2939FromWillBeProcessedBefore(PendingEvent_c target)
{
	unrelateAcrossR2939FromWillBeProcessedBefore(target, true);
}
public void unrelateAcrossR2939FromWillBeProcessedBefore(PendingEvent_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (WillBeProcessedBeforePendingEvent == null) return;  // already unrelated
	
	if (target != WillBeProcessedBeforePendingEvent) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2939", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2939ToWillBeProcessedAfter(this);
    }
    

      if(WillBeProcessedBeforePendingEvent != null) {
      
        m_next_self_event_id = WillBeProcessedBeforePendingEvent.getEvent_id();
        WillBeProcessedBeforePendingEvent = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2939", "WillBeProcessedBefore");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(PendingEvent_c [] targets)
{
    return getOneI_EVIOnR2939WillBeProcessedAfter(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2939WillBeProcessedAfter(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(PendingEvent_c target)
{
  return getOneI_EVIOnR2939WillBeProcessedAfter(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(PendingEvent_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2939WillBeProcessedAfter(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(PendingEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2939WillBeProcessedAfter(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2939WillBeProcessedAfter(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedAfter(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2939WillBeProcessedAfter(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2939WillBeProcessedAfter(ModelRoot modelRoot, PendingEvent_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    PendingEvent_c source = (PendingEvent_c)target.backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c [] targets)
{
  return getManyI_EVIsOnR2939WillBeProcessedAfter(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2939WillBeProcessedAfter(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2939WillBeProcessedAfter(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c target)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2939WillBeProcessedAfter(targetArray);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
  return result ;
}
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedAfter(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2939WillBeProcessedAfter(targetArray, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
  return result ;
}
}



  
    
// referring navigation

ComponentInstance_c IsPendingInComponentInstance ;
public void relateAcrossR2964To(ComponentInstance_c target)
{
	relateAcrossR2964To(target, true);
}
public void relateAcrossR2964To(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsPendingInComponentInstance) return;  // already related

    if ( IsPendingInComponentInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsPendingInComponentInstance != null) {
    
        IsPendingInComponentInstance.clearBackPointerR2964To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2964To(ComponentInstance_c target)", 
			"Relate performed across R2964 from Pending Event to Component Instance without unrelate of prior instance.");  
		}
    }
                
    	IsPendingInComponentInstance = target ;
        m_execution_engine_id = target.getExecution_engine_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2964To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2964", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2964From(ComponentInstance_c target)
{
	unrelateAcrossR2964From(target, true);
}
public void unrelateAcrossR2964From(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsPendingInComponentInstance == null) return;  // already unrelated
	
	if (target != IsPendingInComponentInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2964", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2964To(this);
    }
    

      if(IsPendingInComponentInstance != null) {
      
        m_execution_engine_id = IsPendingInComponentInstance.getExecution_engine_id();
        IsPendingInComponentInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2964", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2964(ComponentInstance_c [] targets)
{
    return getOneI_EVIOnR2964(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2964(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2964(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2964(ComponentInstance_c target)
{
  return getOneI_EVIOnR2964(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2964(ComponentInstance_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2964(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2964(ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2964(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2964(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2964(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2964(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2964(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2964(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HousesPendingEventHouses_R2964) {
	    for ( int i = 0; i < target.backPointer_HousesPendingEventHouses_R2964.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_HousesPendingEventHouses_R2964.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c [] targets)
{
  return getManyI_EVIsOnR2964(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2964(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2964(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HousesPendingEventHouses_R2964) {
	    for (int j = 0; j < targets[i].backPointer_HousesPendingEventHouses_R2964.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_HousesPendingEventHouses_R2964.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c target)
{
  return getManyI_EVIsOnR2964(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2964(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2964(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2964(ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HousesPendingEventHouses_R2964) {
    for (int i = 0; i < target.backPointer_HousesPendingEventHouses_R2964.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_HousesPendingEventHouses_R2964.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }


  
    
// referring navigation

ComponentInstance_c OriginatesFromComponentInstance ;
public void relateAcrossR2976To(ComponentInstance_c target)
{
	relateAcrossR2976To(target, true);
}
public void relateAcrossR2976To(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == OriginatesFromComponentInstance) return;  // already related

    if ( OriginatesFromComponentInstance != target ) {
    
    Object oldKey = getInstanceKey();

    if (OriginatesFromComponentInstance != null) {
    
        OriginatesFromComponentInstance.clearBackPointerR2976To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"PendingEvent_c.relateAcrossR2976To(ComponentInstance_c target)", 
			"Relate performed across R2976 from Pending Event to Component Instance without unrelate of prior instance.");  
		}
    }
                
    	OriginatesFromComponentInstance = target ;
        m_originating_execution_engine_id = target.getExecution_engine_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR2976To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "2976", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR2976From(ComponentInstance_c target)
{
	unrelateAcrossR2976From(target, true);
}
public void unrelateAcrossR2976From(ComponentInstance_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (OriginatesFromComponentInstance == null) return;  // already unrelated
	
	if (target != OriginatesFromComponentInstance) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R2976", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR2976To(this);
    }
    

      if(OriginatesFromComponentInstance != null) {
      
        m_originating_execution_engine_id = OriginatesFromComponentInstance.getExecution_engine_id();
        OriginatesFromComponentInstance = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "2976", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static PendingEvent_c getOneI_EVIOnR2976(ComponentInstance_c [] targets)
{
    return getOneI_EVIOnR2976(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2976(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneI_EVIOnR2976(targets[i], test);
        }
    }

    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2976(ComponentInstance_c target)
{
  return getOneI_EVIOnR2976(target, null);
}

public static PendingEvent_c getOneI_EVIOnR2976(ComponentInstance_c target, boolean loadComponent)
{
    return getOneI_EVIOnR2976(target.getModelRoot(), target, null, loadComponent);
}

public static PendingEvent_c getOneI_EVIOnR2976(ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneI_EVIOnR2976(target.getModelRoot(), target, test);
  }
  return null;
}

public static PendingEvent_c getOneI_EVIOnR2976(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getOneI_EVIOnR2976(modelRoot, target, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2976(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneI_EVIOnR2976(modelRoot,target,test);
}
private static PendingEvent_c find_getOneI_EVIOnR2976(ModelRoot modelRoot, ComponentInstance_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_SendsPendingEventSends_R2976) {
	    for ( int i = 0; i < target.backPointer_SendsPendingEventSends_R2976.size(); ++i ) {
	      PendingEvent_c source = (PendingEvent_c)target.backPointer_SendsPendingEventSends_R2976.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c [] targets)
{
  return getManyI_EVIsOnR2976(targets, null);
}
public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c [] targets, boolean loadComponent)
{
  return getManyI_EVIsOnR2976(targets, null, loadComponent);
}
public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c [] targets, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2976(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new PendingEvent_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_SendsPendingEventSends_R2976) {
	    for (int j = 0; j < targets[i].backPointer_SendsPendingEventSends_R2976.size(); ++j) {
	      PendingEvent_c source = (PendingEvent_c)targets[i].backPointer_SendsPendingEventSends_R2976.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new PendingEvent_c[0];
  }
  }

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c target)
{
  return getManyI_EVIsOnR2976(target, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c target, boolean loadComponent)
{
  return getManyI_EVIsOnR2976(target, null, loadComponent);
}

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c target, ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2976(target, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2976(ComponentInstance_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new PendingEvent_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_SendsPendingEventSends_R2976) {
    for (int i = 0; i < target.backPointer_SendsPendingEventSends_R2976.size(); ++i) {
      PendingEvent_c source = (PendingEvent_c)target.backPointer_SendsPendingEventSends_R2976.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new PendingEvent_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

Timer_c backPointer_DeliveredByTimerDeliveredBy_R2940;

public void setTimerOrderInChildListR2940(Timer_c target, int index) {
	unrelateAcrossR2940From(target);
	Timer_c[] elements = Timer_c.getManyI_TIMsOnR2940(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2940From((Timer_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2940To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2940To((Timer_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2940To(Timer_c target)
{
  if (target != null) {
    target.relateAcrossR2940To(this, true) ;
  }
}

public void relateAcrossR2940To(Timer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2940To(this, notifyChanges) ;
  }
}

public void setBackPointerR2940To(Timer_c target)
{
    backPointer_DeliveredByTimerDeliveredBy_R2940 = target;
}

public void unrelateAcrossR2940From(Timer_c target)
{
  if (target != null) {
    target.unrelateAcrossR2940From(this, true) ;
  }
}

public void unrelateAcrossR2940From(Timer_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2940From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2940To(Timer_c target)
{
	if (target == backPointer_DeliveredByTimerDeliveredBy_R2940) {
		backPointer_DeliveredByTimerDeliveredBy_R2940 = null;
	}
}

public static PendingEvent_c getOneI_EVIOnR2940(Timer_c [] targets)
{
    return getOneI_EVIOnR2940(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2940(Timer_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_EVIOnR2940(targets, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2940(Timer_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             PendingEvent_c candidate_val = getOneI_EVIOnR2940(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_EVIOnR2940(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2940(Timer_c target)
{
	return getOneI_EVIOnR2940(target, true);
}
public static PendingEvent_c getOneI_EVIOnR2940(Timer_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ProvidesDelayedDeliveryOfPendingEvent ;
  } else {
    return null;
  }
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2940(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new PendingEvent_c[0];
  
  
  LinkedHashSet<PendingEvent_c> elementsSet = new LinkedHashSet<PendingEvent_c>();
  for (int i = 0; i < targets.length; i++) {
    PendingEvent_c associate = targets[i].ProvidesDelayedDeliveryOfPendingEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  PendingEvent_c[] result = new PendingEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c [] targets)
{
  return getManyI_EVIsOnR2940(targets, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Timer_c [] targetArray = new Timer_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2940(targetArray, test, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
    return result ;
  }
  
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c target,
    ClassQueryInterface_c test)
{
    return getManyI_EVIsOnR2940(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c target)
{
    return getManyI_EVIsOnR2940(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2940(Timer_c target, boolean loadComponent)
{
    return getManyI_EVIsOnR2940(target, null, loadComponent);
}


    
  
  
// referred to navigation

PendingEvent_c backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908;

public void setPendingEventOrderInChildListR2908(PendingEvent_c target, int index) {
	unrelateAcrossR2908FromWillBeProcessedBefore(target);
	PendingEvent_c[] elements = PendingEvent_c.getManyI_EVIsOnR2908WillBeProcessedBefore(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2908FromWillBeProcessedBefore((PendingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2908ToWillBeProcessedBefore(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2908ToWillBeProcessedBefore((PendingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2908ToWillBeProcessedBefore(PendingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR2908ToWillBeProcessedAfter(this, true) ;
  }
}

public void relateAcrossR2908ToWillBeProcessedBefore(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2908ToWillBeProcessedAfter(this, notifyChanges) ;
  }
}

public void setBackPointerR2908ToWillBeProcessedBefore(PendingEvent_c target)
{
    backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908 = target;
}

public void unrelateAcrossR2908FromWillBeProcessedBefore(PendingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR2908FromWillBeProcessedAfter(this, true) ;
  }
}

public void unrelateAcrossR2908FromWillBeProcessedBefore(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2908FromWillBeProcessedAfter(this, notifyChanges) ;
  }
}

public void clearBackPointerR2908ToWillBeProcessedBefore(PendingEvent_c target)
{
	if (target == backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908) {
		backPointer_WillBeProcessedBeforePendingEventWillBeProcessedBefore_R2908 = null;
	}
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedAfter(PendingEvent_c [] targets)
{
    return getOneI_EVIOnR2908WillBeProcessedAfter(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedAfter(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_EVIOnR2908WillBeProcessedAfter(targets, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedAfter(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             PendingEvent_c candidate_val = getOneI_EVIOnR2908WillBeProcessedAfter(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_EVIOnR2908WillBeProcessedAfter(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedAfter(PendingEvent_c target)
{
	return getOneI_EVIOnR2908WillBeProcessedAfter(target, true);
}
public static PendingEvent_c getOneI_EVIOnR2908WillBeProcessedAfter(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WillBeProcessedAfterPendingEvent ;
  } else {
    return null;
  }
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2908WillBeProcessedAfter(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new PendingEvent_c[0];
  
  
  LinkedHashSet<PendingEvent_c> elementsSet = new LinkedHashSet<PendingEvent_c>();
  for (int i = 0; i < targets.length; i++) {
    PendingEvent_c associate = targets[i].WillBeProcessedAfterPendingEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  PendingEvent_c[] result = new PendingEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c [] targets)
{
  return getManyI_EVIsOnR2908WillBeProcessedAfter(targets, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2908WillBeProcessedAfter(targetArray, test, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
    return result ;
  }
  
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyI_EVIsOnR2908WillBeProcessedAfter(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c target)
{
    return getManyI_EVIsOnR2908WillBeProcessedAfter(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2908WillBeProcessedAfter(PendingEvent_c target, boolean loadComponent)
{
    return getManyI_EVIsOnR2908WillBeProcessedAfter(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<DataItemValue_c> backPointer_DataItemValue_R2933 = new ArrayList<DataItemValue_c>();

public void setDataItemValueOrderInChildListR2933(DataItemValue_c target, int index) {
	unrelateAcrossR2933From(target);
	DataItemValue_c[] elements = DataItemValue_c.getManyI_DIVsOnR2933(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2933From((DataItemValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2933To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2933To((DataItemValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2933To(DataItemValue_c target)
{
  if (target != null) {
    target.relateAcrossR2933To(this, true) ;
  }
}

public void relateAcrossR2933To(DataItemValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2933To(this, notifyChanges) ;
  }
}

public void setBackPointerR2933To(DataItemValue_c target)
{
  	synchronized (backPointer_DataItemValue_R2933) {
		backPointer_DataItemValue_R2933.add(target);
	}
}

public void unrelateAcrossR2933From(DataItemValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR2933From(this, true) ;
  }
}

public void unrelateAcrossR2933From(DataItemValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2933From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2933To(DataItemValue_c target)
{
  synchronized (backPointer_DataItemValue_R2933) {
	    backPointer_DataItemValue_R2933.remove(target);
	}
}

public static PendingEvent_c getOneI_EVIOnR2933(DataItemValue_c [] targets)
{
    return getOneI_EVIOnR2933(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2933(DataItemValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_EVIOnR2933(targets, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2933(DataItemValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             PendingEvent_c candidate_val = getOneI_EVIOnR2933(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_EVIOnR2933(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2933(DataItemValue_c target)
{
	return getOneI_EVIOnR2933(target, true);
}
public static PendingEvent_c getOneI_EVIOnR2933(DataItemValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.PendingEvent ;
  } else {
    return null;
  }
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2933(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new PendingEvent_c[0];
  
  
  LinkedHashSet<PendingEvent_c> elementsSet = new LinkedHashSet<PendingEvent_c>();
  for (int i = 0; i < targets.length; i++) {
    PendingEvent_c associate = targets[i].PendingEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  PendingEvent_c[] result = new PendingEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c [] targets)
{
  return getManyI_EVIsOnR2933(targets, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    DataItemValue_c [] targetArray = new DataItemValue_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2933(targetArray, test, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
    return result ;
  }
  
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c target,
    ClassQueryInterface_c test)
{
    return getManyI_EVIsOnR2933(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c target)
{
    return getManyI_EVIsOnR2933(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2933(DataItemValue_c target, boolean loadComponent)
{
    return getManyI_EVIsOnR2933(target, null, loadComponent);
}


    
  
  
// referred to navigation

PendingEvent_c backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939;

public void setPendingEventOrderInChildListR2939(PendingEvent_c target, int index) {
	unrelateAcrossR2939FromWillBeProcessedAfter(target);
	PendingEvent_c[] elements = PendingEvent_c.getManyI_EVIsOnR2939WillBeProcessedAfter(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2939FromWillBeProcessedAfter((PendingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2939ToWillBeProcessedAfter(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2939ToWillBeProcessedAfter((PendingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2939ToWillBeProcessedAfter(PendingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR2939ToWillBeProcessedBefore(this, true) ;
  }
}

public void relateAcrossR2939ToWillBeProcessedAfter(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2939ToWillBeProcessedBefore(this, notifyChanges) ;
  }
}

public void setBackPointerR2939ToWillBeProcessedAfter(PendingEvent_c target)
{
    backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939 = target;
}

public void unrelateAcrossR2939FromWillBeProcessedAfter(PendingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR2939FromWillBeProcessedBefore(this, true) ;
  }
}

public void unrelateAcrossR2939FromWillBeProcessedAfter(PendingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2939FromWillBeProcessedBefore(this, notifyChanges) ;
  }
}

public void clearBackPointerR2939ToWillBeProcessedAfter(PendingEvent_c target)
{
	if (target == backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939) {
		backPointer_WillBeProcessedAfterPendingEventWillBeProcessedAfter_R2939 = null;
	}
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedBefore(PendingEvent_c [] targets)
{
    return getOneI_EVIOnR2939WillBeProcessedBefore(targets, null);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedBefore(PendingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneI_EVIOnR2939WillBeProcessedBefore(targets, test, true);
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedBefore(PendingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    PendingEvent_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             PendingEvent_c candidate_val = getOneI_EVIOnR2939WillBeProcessedBefore(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneI_EVIOnR2939WillBeProcessedBefore(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedBefore(PendingEvent_c target)
{
	return getOneI_EVIOnR2939WillBeProcessedBefore(target, true);
}
public static PendingEvent_c getOneI_EVIOnR2939WillBeProcessedBefore(PendingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WillBeProcessedBeforePendingEvent ;
  } else {
    return null;
  }
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyI_EVIsOnR2939WillBeProcessedBefore(targets, test, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new PendingEvent_c[0];
  
  
  LinkedHashSet<PendingEvent_c> elementsSet = new LinkedHashSet<PendingEvent_c>();
  for (int i = 0; i < targets.length; i++) {
    PendingEvent_c associate = targets[i].WillBeProcessedBeforePendingEvent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  PendingEvent_c[] result = new PendingEvent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c [] targets)
{
  return getManyI_EVIsOnR2939WillBeProcessedBefore(targets, null);
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    PendingEvent_c [] targetArray = new PendingEvent_c[1];
    targetArray[0] = target;
    return getManyI_EVIsOnR2939WillBeProcessedBefore(targetArray, test, loadComponent);
  } else {
    PendingEvent_c [] result = new PendingEvent_c [0] ;
    return result ;
  }
  
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyI_EVIsOnR2939WillBeProcessedBefore(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c target)
{
    return getManyI_EVIsOnR2939WillBeProcessedBefore(target, null, true);
}

public static PendingEvent_c [] getManyI_EVIsOnR2939WillBeProcessedBefore(PendingEvent_c target, boolean loadComponent)
{
    return getManyI_EVIsOnR2939WillBeProcessedBefore(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsInstanceOfStateMachineEvent == null) {          
      // R2906
      StateMachineEvent_c relInst40754 = (StateMachineEvent_c) baseRoot.getInstanceList(StateMachineEvent_c.class).get(new Object[] {m_smevt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40754 == null) {
      			relInst40754 = (StateMachineEvent_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachineEvent_c.class).get(new Object[] {m_smevt_id});
      		}
			if (relInst40754 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40754 = (StateMachineEvent_c) roots[i].getInstanceList(StateMachineEvent_c.class).get(new Object[] {m_smevt_id});
					if (relInst40754 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40754 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40754) && !isProxy())) {
	      relInst40754.relateAcrossR2906To(this, notifyChanges);
	  }
	  }
	}
	          

	if (WillBeProcessedAfterPendingEvent == null) {          
      // R2908
      PendingEvent_c relInst40755 = (PendingEvent_c) baseRoot.getInstanceList(PendingEvent_c.class).get(new Object[] {m_nextevent_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40755 == null) {
      			relInst40755 = (PendingEvent_c) Ooaofooa.getDefaultInstance().getInstanceList(PendingEvent_c.class).get(new Object[] {m_nextevent_id});
      		}
			if (relInst40755 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40755 = (PendingEvent_c) roots[i].getInstanceList(PendingEvent_c.class).get(new Object[] {m_nextevent_id});
					if (relInst40755 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40755 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40755) && !isProxy())) {
	      relInst40755.relateAcrossR2908ToWillBeProcessedBefore(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsPendingForInstance == null) {          
      // R2907
      Instance_c relInst40756 = (Instance_c) baseRoot.getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40756 == null) {
      			relInst40756 = (Instance_c) Ooaofooa.getDefaultInstance().getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
      		}
			if (relInst40756 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40756 = (Instance_c) roots[i].getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
					if (relInst40756 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40756 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40756) && !isProxy())) {
	      relInst40756.relateAcrossR2907To(this, notifyChanges);
	  }
	  }
	}
	          

	if (TargetsInstance == null) {          
      // R2935
      Instance_c relInst40757 = (Instance_c) baseRoot.getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40757 == null) {
      			relInst40757 = (Instance_c) Ooaofooa.getDefaultInstance().getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
      		}
			if (relInst40757 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40757 = (Instance_c) roots[i].getInstanceList(Instance_c.class).get(new Object[] {m_target_inst_id});
					if (relInst40757 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40757 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40757) && !isProxy())) {
	      relInst40757.relateAcrossR2935To(this, notifyChanges);
	  }
	  }
	}
	          

	if (WasSentFromInstance == null) {          
      // R2937
      Instance_c relInst40758 = (Instance_c) baseRoot.getInstanceList(Instance_c.class).get(new Object[] {m_sent_by_inst_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40758 == null) {
      			relInst40758 = (Instance_c) Ooaofooa.getDefaultInstance().getInstanceList(Instance_c.class).get(new Object[] {m_sent_by_inst_id});
      		}
			if (relInst40758 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40758 = (Instance_c) roots[i].getInstanceList(Instance_c.class).get(new Object[] {m_sent_by_inst_id});
					if (relInst40758 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40758 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40758) && !isProxy())) {
	      relInst40758.relateAcrossR2937To(this, notifyChanges);
	  }
	  }
	}
	          

	if (WillBeProcessedBeforePendingEvent == null) {          
      // R2939
      PendingEvent_c relInst40759 = (PendingEvent_c) baseRoot.getInstanceList(PendingEvent_c.class).get(new Object[] {m_next_self_event_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40759 == null) {
      			relInst40759 = (PendingEvent_c) Ooaofooa.getDefaultInstance().getInstanceList(PendingEvent_c.class).get(new Object[] {m_next_self_event_id});
      		}
			if (relInst40759 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40759 = (PendingEvent_c) roots[i].getInstanceList(PendingEvent_c.class).get(new Object[] {m_next_self_event_id});
					if (relInst40759 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40759 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40759) && !isProxy())) {
	      relInst40759.relateAcrossR2939ToWillBeProcessedAfter(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsPendingInComponentInstance == null) {          
      // R2964
      ComponentInstance_c relInst40760 = (ComponentInstance_c) baseRoot.getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40760 == null) {
      			relInst40760 = (ComponentInstance_c) Ooaofooa.getDefaultInstance().getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
      		}
			if (relInst40760 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40760 = (ComponentInstance_c) roots[i].getInstanceList(ComponentInstance_c.class).get(new Object[] {m_execution_engine_id});
					if (relInst40760 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40760 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40760) && !isProxy())) {
	      relInst40760.relateAcrossR2964To(this, notifyChanges);
	  }
	  }
	}
	          

	if (OriginatesFromComponentInstance == null) {          
      // R2976
      ComponentInstance_c relInst40761 = (ComponentInstance_c) baseRoot.getInstanceList(ComponentInstance_c.class).get(new Object[] {m_originating_execution_engine_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40761 == null) {
      			relInst40761 = (ComponentInstance_c) Ooaofooa.getDefaultInstance().getInstanceList(ComponentInstance_c.class).get(new Object[] {m_originating_execution_engine_id});
      		}
			if (relInst40761 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40761 = (ComponentInstance_c) roots[i].getInstanceList(ComponentInstance_c.class).get(new Object[] {m_originating_execution_engine_id});
					if (relInst40761 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40761 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40761) && !isProxy())) {
	      relInst40761.relateAcrossR2976To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R2906
      // SM_EVT
		  inst=IsInstanceOfStateMachineEvent;
			unrelateAcrossR2906From(IsInstanceOfStateMachineEvent, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2908
      // I_EVI
		  inst=WillBeProcessedAfterPendingEvent;
			unrelateAcrossR2908FromWillBeProcessedAfter(WillBeProcessedAfterPendingEvent, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2907
      // I_INS
		  inst=IsPendingForInstance;
			unrelateAcrossR2907From(IsPendingForInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2935
      // I_INS
		  inst=TargetsInstance;
			unrelateAcrossR2935From(TargetsInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2937
      // I_INS
		  inst=WasSentFromInstance;
			unrelateAcrossR2937From(WasSentFromInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2939
      // I_EVI
		  inst=WillBeProcessedBeforePendingEvent;
			unrelateAcrossR2939FromWillBeProcessedBefore(WillBeProcessedBeforePendingEvent, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2964
      // I_EXE
		  inst=IsPendingInComponentInstance;
			unrelateAcrossR2964From(IsPendingInComponentInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R2976
      // I_EXE
		  inst=OriginatesFromComponentInstance;
			unrelateAcrossR2976From(OriginatesFromComponentInstance, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final PendingEvent_c inst = (PendingEvent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static PendingEvent_c PendingEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		PendingEvent_c result=findPendingEventInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static PendingEvent_c findPendingEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				PendingEvent_c x = (PendingEvent_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static PendingEvent_c PendingEventInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return PendingEventInstance(modelRoot,test,true);
  }
  
  public static PendingEvent_c PendingEventInstance(ModelRoot modelRoot)
  {
	 return PendingEventInstance(modelRoot,null,true);
  }

  public static PendingEvent_c [] PendingEventInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(PendingEvent_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					PendingEvent_c x = (PendingEvent_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				PendingEvent_c[] ret_set = new PendingEvent_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new PendingEvent_c[0];
			}		
		} 
  }
  public static PendingEvent_c [] PendingEventInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  PendingEventInstances(modelRoot,test,true);
  }
  public static PendingEvent_c [] PendingEventInstances(ModelRoot modelRoot)
  {
	return PendingEventInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Pending Event.dispose call: ";
	StateMachineEvent_c testR2906Inst = StateMachineEvent_c.getOneSM_EVTOnR2906(this, false);

	if ( testR2906Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2906 ";
	}
	Timer_c testR2940Inst = Timer_c.getOneI_TIMOnR2940(this, false);

	if ( testR2940Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2940 ";	
	}
	PendingEvent_c testR2908Inst = PendingEvent_c.getOneI_EVIOnR2908WillBeProcessedBefore(this, false);

	if ( testR2908Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2908 ";	
	}
	 testR2908Inst = PendingEvent_c.getOneI_EVIOnR2908WillBeProcessedAfter(this, false);

	if ( testR2908Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2908 ";
	}
	Instance_c testR2907Inst = Instance_c.getOneI_INSOnR2907(this, false);

	if ( testR2907Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2907 ";
	}
	DataItemValue_c testR2933Inst = DataItemValue_c.getOneI_DIVOnR2933(this, false);

	if ( testR2933Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2933 ";	
	}
	Instance_c testR2935Inst = Instance_c.getOneI_INSOnR2935(this, false);

	if ( testR2935Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2935 ";
	}
	Instance_c testR2937Inst = Instance_c.getOneI_INSOnR2937(this, false);

	if ( testR2937Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2937 ";
	}
	PendingEvent_c testR2939Inst = PendingEvent_c.getOneI_EVIOnR2939WillBeProcessedAfter(this, false);

	if ( testR2939Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2939 ";	
	}
	 testR2939Inst = PendingEvent_c.getOneI_EVIOnR2939WillBeProcessedBefore(this, false);

	if ( testR2939Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2939 ";
	}
	ComponentInstance_c testR2964Inst = ComponentInstance_c.getOneI_EXEOnR2964(this, false);

	if ( testR2964Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2964 ";
	}
	ComponentInstance_c testR2976Inst = ComponentInstance_c.getOneI_EXEOnR2976(this, false);

	if ( testR2976Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "2976 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Pending Event", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("event_id")){
         return true;
      }
      if(attributeName.equals("smevt_id")){
         return true;
      }
      if(attributeName.equals("target_inst_id")){
         return true;
      }
      if(attributeName.equals("nextevent_id")){
         return true;
      }
      if(attributeName.equals("sent_by_inst_id")){
         return true;
      }
      if(attributeName.equals("next_self_event_id")){
         return true;
      }
      if(attributeName.equals("execution_engine_id")){
         return true;
      }
      if(attributeName.equals("originating_execution_engine_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getEvent_idLongBased()
  {
    if(m_event_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_event_id)){
    	return 0xfffffff & m_event_id.getLeastSignificantBits();
    }
    return m_event_idLongBased ;
  }
  public java.util.UUID getEvent_id()
  {
    return m_event_id ;
  }


  public void setEvent_id(java.util.UUID newValue)
  {
   m_event_id = IdAssigner.preprocessUUID(newValue);
  }
  public boolean getIsexecuting()
  {
    return m_isexecuting ;
  }


  public void setIsexecuting(boolean newValue)
  {
    if(m_isexecuting == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Isexecuting", new Boolean(m_isexecuting), new Boolean(newValue),false);

   m_isexecuting = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public boolean getIscreation()
  {
    return m_iscreation ;
  }


  public void setIscreation(boolean newValue)
  {
    if(m_iscreation == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Iscreation", new Boolean(m_iscreation), new Boolean(newValue),false);

   m_iscreation = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSmevt_idLongBased()
  {
    if ( IsInstanceOfStateMachineEvent != null )
    {
      return IsInstanceOfStateMachineEvent.getSmevt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmevt_id()
  {
    if ( IsInstanceOfStateMachineEvent != null )
    {
      return IsInstanceOfStateMachineEvent.getSmevt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSmevt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smevt_id) )
      return m_smevt_id;
    else
      return getSmevt_id();
  }
  
  public void setSmevt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smevt_id)){
	        return;
	    }
	}else if(m_smevt_id != null){
	    if(m_smevt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smevt_id", m_smevt_id, newValue,false); 
   m_smevt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getTarget_inst_idLongBased()
  {
    if ( IsPendingForInstance != null )
    {
      return IsPendingForInstance.getInst_idLongBased();
    }
    if ( TargetsInstance != null )
    {
      return TargetsInstance.getInst_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTarget_inst_id()
  {
    if ( IsPendingForInstance != null )
    {
      return IsPendingForInstance.getInst_id();
    }
    if ( TargetsInstance != null )
    {
      return TargetsInstance.getInst_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getTarget_inst_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_target_inst_id) )
      return m_target_inst_id;
    else
      return getTarget_inst_id();
  }
  
  public long getNextevent_idLongBased()
  {
    if ( WillBeProcessedAfterPendingEvent != null )
    {
      return WillBeProcessedAfterPendingEvent.getEvent_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getNextevent_id()
  {
    if ( WillBeProcessedAfterPendingEvent != null )
    {
      return WillBeProcessedAfterPendingEvent.getEvent_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getNextevent_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_nextevent_id) )
      return m_nextevent_id;
    else
      return getNextevent_id();
  }
  
  public void setNextevent_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_nextevent_id)){
	        return;
	    }
	}else if(m_nextevent_id != null){
	    if(m_nextevent_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Nextevent_id", m_nextevent_id, newValue,false); 
   m_nextevent_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSent_by_inst_idLongBased()
  {
    if ( WasSentFromInstance != null )
    {
      return WasSentFromInstance.getInst_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSent_by_inst_id()
  {
    if ( WasSentFromInstance != null )
    {
      return WasSentFromInstance.getInst_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSent_by_inst_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sent_by_inst_id) )
      return m_sent_by_inst_id;
    else
      return getSent_by_inst_id();
  }
  
  public void setSent_by_inst_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sent_by_inst_id)){
	        return;
	    }
	}else if(m_sent_by_inst_id != null){
	    if(m_sent_by_inst_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sent_by_inst_id", m_sent_by_inst_id, newValue,false); 
   m_sent_by_inst_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getNext_self_event_idLongBased()
  {
    if ( WillBeProcessedBeforePendingEvent != null )
    {
      return WillBeProcessedBeforePendingEvent.getEvent_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getNext_self_event_id()
  {
    if ( WillBeProcessedBeforePendingEvent != null )
    {
      return WillBeProcessedBeforePendingEvent.getEvent_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getNext_self_event_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_next_self_event_id) )
      return m_next_self_event_id;
    else
      return getNext_self_event_id();
  }
  
  public void setNext_self_event_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_next_self_event_id)){
	        return;
	    }
	}else if(m_next_self_event_id != null){
	    if(m_next_self_event_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Next_self_event_id", m_next_self_event_id, newValue,false); 
   m_next_self_event_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getLabel()
  {
ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR2906(this);


if ( (  (v_evt != null)) )
{

SignalEvent_c v_signalEvt = SignalEvent_c.getOneSM_SGEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_evt));


if ( (  (v_signalEvt != null)) )
{

v_result = v_signalEvt.Get_event_text() ;



}

else
{

v_result = v_evt.Get_event_text() ;



}

Timer_c v_timer = Timer_c.getOneI_TIMOnR2940(this);


if ( (  (v_timer != null)) )
{

v_result = v_result + " delayed by " + Gd_c.Int_to_string(			    
v_timer.getDelay()) + " uS" ;



}


}

return v_result;



  }


  public long getExecution_engine_idLongBased()
  {
    if ( IsPendingInComponentInstance != null )
    {
      return IsPendingInComponentInstance.getExecution_engine_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getExecution_engine_id()
  {
    if ( IsPendingInComponentInstance != null )
    {
      return IsPendingInComponentInstance.getExecution_engine_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getExecution_engine_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_execution_engine_id) )
      return m_execution_engine_id;
    else
      return getExecution_engine_id();
  }
  
  public void setExecution_engine_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_execution_engine_id)){
	        return;
	    }
	}else if(m_execution_engine_id != null){
	    if(m_execution_engine_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Execution_engine_id", m_execution_engine_id, newValue,false); 
   m_execution_engine_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getOriginating_execution_engine_idLongBased()
  {
    if ( OriginatesFromComponentInstance != null )
    {
      return OriginatesFromComponentInstance.getExecution_engine_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getOriginating_execution_engine_id()
  {
    if ( OriginatesFromComponentInstance != null )
    {
      return OriginatesFromComponentInstance.getExecution_engine_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getOriginating_execution_engine_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_originating_execution_engine_id) )
      return m_originating_execution_engine_id;
    else
      return getOriginating_execution_engine_id();
  }
  
  public void setOriginating_execution_engine_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_originating_execution_engine_id)){
	        return;
	    }
	}else if(m_originating_execution_engine_id != null){
	    if(m_originating_execution_engine_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Originating_execution_engine_id", m_originating_execution_engine_id, newValue,false); 
   m_originating_execution_engine_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Pending Event", //$NON-NLS-1$
	  " Operation entered: Pending Event::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     PendingEvent_c [] objs = PendingEvent_c.PendingEventInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Pending Event", //$NON-NLS-1$
	  " Operation entered: Pending Event::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class PendingEvent_c_test40763_c implements ClassQueryInterface_c
    {
	  PendingEvent_c_test40763_c( java.util.UUID            p40764 ) {
	  m_p40764 = p40764;
	  }
	  private java.util.UUID             m_p40764; 
	  public boolean evaluate (Object candidate)
	  {
	      PendingEvent_c selected = (PendingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEvent_id().equals(m_p40764));
	      return retval;
	  }
    }

    PendingEvent_c [] objs40762 = 
    PendingEvent_c.PendingEventInstances(modelRoot, new PendingEvent_c_test40763_c(getEvent_id())) ;

    if ( (  (objs40762.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40762.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40762.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs40762.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40762.length )  + " Event_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40762.length )  + " Event_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Pending Event is a referring class in association: rel.Numb = 2906
          // The participating class is: State Machine Event
    class StateMachineEvent_c_test40768_c implements ClassQueryInterface_c
    {
	  StateMachineEvent_c_test40768_c( java.util.UUID            p40769 ) {
	  m_p40769 = p40769;
	  }
	  private java.util.UUID             m_p40769; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachineEvent_c selected = (StateMachineEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSmevt_id().equals(m_p40769));
	      return retval;
	  }
    }

    StateMachineEvent_c [] objs40767 = 
    StateMachineEvent_c.StateMachineEventInstances(modelRoot, new StateMachineEvent_c_test40768_c(getSmevt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs40767.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2906: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40767.length )  + " SMevt_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2906: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40767.length )  + " SMevt_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Pending Event is a referring class in association: rel.Numb = 2907
          // The participating class is: Instance
    class Instance_c_test40771_c implements ClassQueryInterface_c
    {
	  Instance_c_test40771_c( java.util.UUID            p40772 ) {
	  m_p40772 = p40772;
	  }
	  private java.util.UUID             m_p40772; 
	  public boolean evaluate (Object candidate)
	  {
	      Instance_c selected = (Instance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getInst_id().equals(m_p40772));
	      return retval;
	  }
    }

    Instance_c [] objs40770 = 
    Instance_c.InstanceInstances(modelRoot, new Instance_c_test40771_c(getTarget_inst_id())) ;

    if ( (  (objs40770.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2907: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40770.length )  + " Target_Inst_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2907: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40770.length )  + " Target_Inst_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a referring class in association: rel.Numb = 2935
          // The participating class is: Instance
    class Instance_c_test40774_c implements ClassQueryInterface_c
    {
	  Instance_c_test40774_c( java.util.UUID            p40775 ) {
	  m_p40775 = p40775;
	  }
	  private java.util.UUID             m_p40775; 
	  public boolean evaluate (Object candidate)
	  {
	      Instance_c selected = (Instance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getInst_id().equals(m_p40775));
	      return retval;
	  }
    }

    Instance_c [] objs40773 = 
    Instance_c.InstanceInstances(modelRoot, new Instance_c_test40774_c(getTarget_inst_id())) ;

    if ( (  (objs40773.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2935: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40773.length )  + " Target_Inst_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2935: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40773.length )  + " Target_Inst_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a referring class in association: rel.Numb = 2908
          // The participating class is: Pending Event
    class PendingEvent_c_test40777_c implements ClassQueryInterface_c
    {
	  PendingEvent_c_test40777_c( java.util.UUID            p40778 ) {
	  m_p40778 = p40778;
	  }
	  private java.util.UUID             m_p40778; 
	  public boolean evaluate (Object candidate)
	  {
	      PendingEvent_c selected = (PendingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEvent_id().equals(m_p40778));
	      return retval;
	  }
    }

    PendingEvent_c [] objs40776 = 
    PendingEvent_c.PendingEventInstances(modelRoot, new PendingEvent_c_test40777_c(getNextevent_id())) ;

    if ( (  (objs40776.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2908: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40776.length )  + " nextEvent_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2908: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40776.length )  + " nextEvent_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a referring class in association: rel.Numb = 2937
          // The participating class is: Instance
    class Instance_c_test40780_c implements ClassQueryInterface_c
    {
	  Instance_c_test40780_c( java.util.UUID            p40781 ) {
	  m_p40781 = p40781;
	  }
	  private java.util.UUID             m_p40781; 
	  public boolean evaluate (Object candidate)
	  {
	      Instance_c selected = (Instance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getInst_id().equals(m_p40781));
	      return retval;
	  }
    }

    Instance_c [] objs40779 = 
    Instance_c.InstanceInstances(modelRoot, new Instance_c_test40780_c(getSent_by_inst_id())) ;

    if ( (  (objs40779.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2937: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40779.length )  + " Sent_By_Inst_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2937: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40779.length )  + " Sent_By_Inst_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a referring class in association: rel.Numb = 2939
          // The participating class is: Pending Event
    class PendingEvent_c_test40783_c implements ClassQueryInterface_c
    {
	  PendingEvent_c_test40783_c( java.util.UUID            p40784 ) {
	  m_p40784 = p40784;
	  }
	  private java.util.UUID             m_p40784; 
	  public boolean evaluate (Object candidate)
	  {
	      PendingEvent_c selected = (PendingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEvent_id().equals(m_p40784));
	      return retval;
	  }
    }

    PendingEvent_c [] objs40782 = 
    PendingEvent_c.PendingEventInstances(modelRoot, new PendingEvent_c_test40783_c(getNext_self_event_id())) ;

    if ( (  (objs40782.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2939: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40782.length )  + " next_self_Event_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2939: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40782.length )  + " next_self_Event_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a referring class in association: rel.Numb = 2964
          // The participating class is: Component Instance
    class ComponentInstance_c_test40786_c implements ClassQueryInterface_c
    {
	  ComponentInstance_c_test40786_c( java.util.UUID            p40787 ) {
	  m_p40787 = p40787;
	  }
	  private java.util.UUID             m_p40787; 
	  public boolean evaluate (Object candidate)
	  {
	      ComponentInstance_c selected = (ComponentInstance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getExecution_engine_id().equals(m_p40787));
	      return retval;
	  }
    }

    ComponentInstance_c [] objs40785 = 
    ComponentInstance_c.ComponentInstanceInstances(modelRoot, new ComponentInstance_c_test40786_c(getExecution_engine_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs40785.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2964: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40785.length )  + " Execution_Engine_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2964: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40785.length )  + " Execution_Engine_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Pending Event is a referring class in association: rel.Numb = 2976
          // The participating class is: Component Instance
    class ComponentInstance_c_test40789_c implements ClassQueryInterface_c
    {
	  ComponentInstance_c_test40789_c( java.util.UUID            p40790 ) {
	  m_p40790 = p40790;
	  }
	  private java.util.UUID             m_p40790; 
	  public boolean evaluate (Object candidate)
	  {
	      ComponentInstance_c selected = (ComponentInstance_c) candidate;
	      boolean retval = false;
	      retval = (selected.getExecution_engine_id().equals(m_p40790));
	      return retval;
	  }
    }

    ComponentInstance_c [] objs40788 = 
    ComponentInstance_c.ComponentInstanceInstances(modelRoot, new ComponentInstance_c_test40789_c(getOriginating_execution_engine_id())) ;

    if ( (  (objs40788.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2976: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40788.length )  + " Originating_Execution_Engine_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2976: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40788.length )  + " Originating_Execution_Engine_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Pending Event is a participating class in association: rel.Numb = 2940
             // Object: Timer
    class Timer_c_test40792_c implements ClassQueryInterface_c
    {
	  Timer_c_test40792_c( java.util.UUID            p40793 ) {
	  m_p40793 = p40793;
	  }
	  private java.util.UUID             m_p40793; 
	  public boolean evaluate (Object candidate)
	  {
	      Timer_c selected = (Timer_c) candidate;
	      boolean retval = false;
	      retval = (selected.getEvent_id().equals(m_p40793));
	      return retval;
	  }
    }

    Timer_c [] objs40791 = 
    Timer_c.TimerInstances(modelRoot, new Timer_c_test40792_c(getEvent_id())) ;

    if ( (  (objs40791.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2940: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40791.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2940: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40791.length )  , e); 
      }
      retval = false;

    }

          // Pending Event is a participating class in association: rel.Numb = 2908
             // Object: Pending Event
    class PendingEvent_c_test40795_c implements ClassQueryInterface_c
    {
	  PendingEvent_c_test40795_c( java.util.UUID            p40796 ) {
	  m_p40796 = p40796;
	  }
	  private java.util.UUID             m_p40796; 
	  public boolean evaluate (Object candidate)
	  {
	      PendingEvent_c selected = (PendingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getNextevent_id().equals(m_p40796));
	      return retval;
	  }
    }

    PendingEvent_c [] objs40794 = 
    PendingEvent_c.PendingEventInstances(modelRoot, new PendingEvent_c_test40795_c(getEvent_id())) ;

    if ( (  (objs40794.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2908: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40794.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2908: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40794.length )  , e); 
      }
      retval = false;

    }

          // Pending Event is a participating class in association: rel.Numb = 2939
             // Object: Pending Event
    class PendingEvent_c_test40798_c implements ClassQueryInterface_c
    {
	  PendingEvent_c_test40798_c( java.util.UUID            p40799 ) {
	  m_p40799 = p40799;
	  }
	  private java.util.UUID             m_p40799; 
	  public boolean evaluate (Object candidate)
	  {
	      PendingEvent_c selected = (PendingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getNext_self_event_id().equals(m_p40799));
	      return retval;
	  }
    }

    PendingEvent_c [] objs40797 = 
    PendingEvent_c.PendingEventInstances(modelRoot, new PendingEvent_c_test40798_c(getEvent_id())) ;

    if ( (  (objs40797.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Pending Event", //$NON-NLS-1$
           "Consistency: Object: Pending Event: Association: 2939: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40797.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Pending Event: Association: 2939: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40797.length )  , e); 
      }
      retval = false;

    }

          // Pending Event is a participating class in association: rel.Numb = 2933
             // Object: Data Item Value
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End dispose
  public  void Fire()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Fire") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End fire
  public  void Firetoinstsm()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Firetoinstsm") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End fireToInstSM
  public  void Firetoclasssm()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Firetoclasssm") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End fireToClassSM
  public  void Createinstance(final java.util.UUID         p_Stack_id,final boolean      p_Step_in)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Createinstance") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End createInstance
  public  Object Getvalue()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Getvalue") ; 
return this;
   } // End getValue
  public  void Deliveras(final java.util.UUID         p_Evt_id,final java.util.UUID         p_Stack_id,final boolean      p_Step_in,final java.util.UUID         p_To_inst_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Deliveras") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End deliverAs
  public  java.util.UUID         Clone()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Pending Event", " Operation entered: PendingEvent::Clone") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_unique_id();



   } // End clone

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Pending Event
