package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ReturnMessage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_RETURN_MESSAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ReturnMessage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ReturnMessage_c(ModelRoot modelRoot, java.util.UUID p_m_msg_id,
			String p_m_name, String p_m_descrip, String p_m_guardcondition,
			String p_m_resulttarget, String p_m_returnvalue,
			String p_m_sequencenumb) {
		super(modelRoot);
		m_returnvalue = p_m_returnvalue;
		m_resulttarget = p_m_resulttarget;
		m_guardcondition = p_m_guardcondition;
		m_descrip = p_m_descrip;
		m_name = p_m_name;
		m_sequencenumb = p_m_sequencenumb;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}
	static public ReturnMessage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, String p_m_name, String p_m_descrip,
			String p_m_guardcondition, String p_m_resulttarget,
			String p_m_returnvalue, String p_m_sequencenumb,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);
		ReturnMessage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			new_inst = (ReturnMessage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_returnvalue = p_m_returnvalue;
				new_inst.m_resulttarget = p_m_resulttarget;
				new_inst.m_guardcondition = p_m_guardcondition;
				new_inst.m_descrip = p_m_descrip;
				new_inst.m_name = p_m_name;
				new_inst.m_sequencenumb = p_m_sequencenumb;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ReturnMessage_c(modelRoot, p_m_msg_id, p_m_name,
					p_m_descrip, p_m_guardcondition, p_m_resulttarget,
					p_m_returnvalue, p_m_sequencenumb);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ReturnMessage_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_msg_id, String p_m_name, String p_m_descrip,
			String p_m_guardcondition, String p_m_resulttarget,
			String p_m_returnvalue, String p_m_sequencenumb) {
		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);
		ReturnMessage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_msg_id};
			source = (ReturnMessage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_returnvalue = p_m_returnvalue;
				source.m_resulttarget = p_m_resulttarget;
				source.m_guardcondition = p_m_guardcondition;
				source.m_descrip = p_m_descrip;
				source.m_name = p_m_name;
				source.m_sequencenumb = p_m_sequencenumb;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_msg_id = IdAssigner.preprocessUUID(p_m_msg_id);

				return source;
			}
		}
		// there is no instance matching the id
		ReturnMessage_c new_inst = new ReturnMessage_c(modelRoot, p_m_msg_id,
				p_m_name, p_m_descrip, p_m_guardcondition, p_m_resulttarget,
				p_m_returnvalue, p_m_sequencenumb);
		return new_inst;
	}
	public ReturnMessage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_returnvalue = "";
		m_resulttarget = "";
		m_guardcondition = "";
		m_descrip = "";
		m_name = "";
		m_sequencenumb = "";
		m_msg_id = IdAssigner.NULL_UUID;
		Object[] key = {m_msg_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_msg_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_msg_id != p_newKey) {

			m_msg_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ReturnMessage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ReturnMessage_c)) {
			return false;
		}

		ReturnMessage_c me = (ReturnMessage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getMsg_id()) || IdAssigner.NULL_UUID
						.equals(((ReturnMessage_c) elem).getMsg_id())) && this != elem)) {
			return false;
		}
		if (!getMsg_id().equals(((ReturnMessage_c) elem).getMsg_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ReturnMessage_c)) {
			return false;
		}

		ReturnMessage_c me = (ReturnMessage_c) elem;
		if (!getMsg_idCachedValue().equals(
				((ReturnMessage_c) elem).getMsg_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_returnvalue;
	private String m_resulttarget;
	private String m_guardcondition;
	private String m_descrip;
	private String m_name;
	private String m_sequencenumb;
	private java.util.UUID m_msg_id;

	// declare association references from this class

	// referring navigation

	Message_c IsSupertypeMessage;
	public void relateAcrossR1018To(Message_c target) {
		relateAcrossR1018To(target, true);
	}
	public void relateAcrossR1018To(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeMessage)
			return; // already related

		if (IsSupertypeMessage != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeMessage != null) {

				IsSupertypeMessage.clearBackPointerR1018To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ReturnMessage_c.relateAcrossR1018To(Message_c target)",
									"Relate performed across R1018 from Return Message to Message without unrelate of prior instance.");
				}
			}

			IsSupertypeMessage = target;
			if (IdAssigner.NULL_UUID.equals(target.getMsg_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_msg_id = target.getMsg_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1018To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1018From(Message_c target) {
		unrelateAcrossR1018From(target, true);
	}
	public void unrelateAcrossR1018From(Message_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeMessage == null)
			return; // already unrelated

		if (target != IsSupertypeMessage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1018",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1018To(this);
		}

		if (IsSupertypeMessage != null) {

			m_msg_id = IsSupertypeMessage.getMsg_id();
			if (IdAssigner.NULL_UUID.equals(m_msg_id)) {
				m_msg_id = IsSupertypeMessage.getMsg_idCachedValue();
			}
			IsSupertypeMessage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1018", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(Message_c[] targets) {
		return getOneMSG_ROnR1018(targets, null);
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(Message_c[] targets,
			ClassQueryInterface_c test) {
		ReturnMessage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneMSG_ROnR1018(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(Message_c target) {
		return getOneMSG_ROnR1018(target, null);
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(Message_c target,
			boolean loadComponent) {
		return getOneMSG_ROnR1018(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(Message_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneMSG_ROnR1018(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test) {
		return getOneMSG_ROnR1018(modelRoot, target, test, true);
	}

	public static ReturnMessage_c getOneMSG_ROnR1018(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneMSG_ROnR1018(modelRoot, target, test);
	}
	private static ReturnMessage_c find_getOneMSG_ROnR1018(ModelRoot modelRoot,
			Message_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ReturnMessage_c source = (ReturnMessage_c) target.backPointer_IsSubtypeReturnMessageIsSubtype_R1018;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c[] targets) {
		return getManyMSG_RsOnR1018(targets, null);
	}
	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c[] targets,
			boolean loadComponent) {
		return getManyMSG_RsOnR1018(targets, null, loadComponent);
	}
	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c[] targets,
			ClassQueryInterface_c test) {
		return getManyMSG_RsOnR1018(targets, test, true);
	}

	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ReturnMessage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ReturnMessage_c source = (ReturnMessage_c) targets[i].backPointer_IsSubtypeReturnMessageIsSubtype_R1018;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ReturnMessage_c[] ret_set = new ReturnMessage_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ReturnMessage_c[0];
		}
	}

	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c target) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManyMSG_RsOnR1018(targetArray);
		} else {
			ReturnMessage_c[] result = new ReturnMessage_c[0];
			return result;
		}
	}

	public static ReturnMessage_c[] getManyMSG_RsOnR1018(Message_c target,
			boolean loadComponent) {
		if (target != null) {
			Message_c[] targetArray = new Message_c[1];
			targetArray[0] = target;
			return getManyMSG_RsOnR1018(targetArray, loadComponent);
		} else {
			ReturnMessage_c[] result = new ReturnMessage_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1018
		Message_c relInst40039 = (Message_c) baseRoot.getInstanceList(
				Message_c.class).get(new Object[]{m_msg_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40039 == null) {
			relInst40039 = (Message_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Message_c.class)
					.get(new Object[]{m_msg_id});
		}
		if (relInst40039 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40039 = (Message_c) roots[i].getInstanceList(
						Message_c.class).get(new Object[]{m_msg_id});
				if (relInst40039 != null)
					break;
			}
		}
		//synchronized
		if (relInst40039 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40039) && !isProxy())) {
				relInst40039.relateAcrossR1018To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1018
		// MSG_M
		inst = IsSupertypeMessage;
		unrelateAcrossR1018From(IsSupertypeMessage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ReturnMessage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ReturnMessage_c inst = (ReturnMessage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ReturnMessage_c ReturnMessageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ReturnMessage_c result = findReturnMessageInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ReturnMessage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findReturnMessageInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ReturnMessage_c findReturnMessageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ReturnMessage_c x = (ReturnMessage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ReturnMessage_c ReturnMessageInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ReturnMessageInstance(modelRoot, test, true);
	}

	public static ReturnMessage_c ReturnMessageInstance(ModelRoot modelRoot) {
		return ReturnMessageInstance(modelRoot, null, true);
	}

	public static ReturnMessage_c[] ReturnMessageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ReturnMessage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ReturnMessage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ReturnMessage_c x = (ReturnMessage_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ReturnMessage_c[] ret_set = new ReturnMessage_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ReturnMessage_c[0];
			}
		}
	}
	public static ReturnMessage_c[] ReturnMessageInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ReturnMessageInstances(modelRoot, test, true);
	}
	public static ReturnMessage_c[] ReturnMessageInstances(ModelRoot modelRoot) {
		return ReturnMessageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Return Message.dispose call: ";
		Message_c testR1018Inst3 = Message_c.getOneMSG_MOnR1018(this, false);

		if (testR1018Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1018 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.DELETE, "Return Message", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("msg_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getMsg_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getMsg_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getReturnvalue() {
		return m_returnvalue;
	}

	public void setReturnvalue(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_returnvalue)) {
				return;
			}
		} else if (m_returnvalue != null) {
			if (m_returnvalue.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Returnvalue", m_returnvalue, newValue, true);
		m_returnvalue = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getResulttarget() {
		return m_resulttarget;
	}

	public void setResulttarget(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_resulttarget)) {
				return;
			}
		} else if (m_resulttarget != null) {
			if (m_resulttarget.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Resulttarget", m_resulttarget, newValue, true);
		m_resulttarget = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getGuardcondition() {
		return m_guardcondition;
	}

	public void setGuardcondition(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_guardcondition)) {
				return;
			}
		} else if (m_guardcondition != null) {
			if (m_guardcondition.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Guardcondition", m_guardcondition, newValue, true);
		m_guardcondition = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, true);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getSequencenumb() {
		return m_sequencenumb;
	}

	public void setSequencenumb(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sequencenumb)) {
				return;
			}
		} else if (m_sequencenumb != null) {
			if (m_sequencenumb.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sequencenumb", m_sequencenumb, newValue, true);
		m_sequencenumb = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getMsg_idLongBased() {
		if (IsSupertypeMessage != null) {
			return IsSupertypeMessage.getMsg_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getMsg_id() {
		if (IsSupertypeMessage != null) {
			return IsSupertypeMessage.getMsg_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeMessage != null);

	}

	public java.util.UUID getMsg_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_msg_id))
			return m_msg_id;
		else
			return getMsg_id();
	}

	public void setMsg_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_msg_id)) {
				return;
			}
		} else if (m_msg_id != null) {
			if (m_msg_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Msg_id", m_msg_id, newValue, true);
		m_msg_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message", //$NON-NLS-1$
				" Operation entered: Return Message::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ReturnMessage_c[] objs = ReturnMessage_c.ReturnMessageInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message", //$NON-NLS-1$
				" Operation entered: Return Message::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ReturnMessage_c_test40041_c implements ClassQueryInterface_c {
			ReturnMessage_c_test40041_c(java.util.UUID p40042) {
				m_p40042 = p40042;
			}
			private java.util.UUID m_p40042;
			public boolean evaluate(Object candidate) {
				ReturnMessage_c selected = (ReturnMessage_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40042));
				return retval;
			}
		}

		ReturnMessage_c[] objs40040 = ReturnMessage_c.ReturnMessageInstances(
				modelRoot, new ReturnMessage_c_test40041_c(getMsg_id()));

		if (((objs40040.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Return Message", //$NON-NLS-1$
								"Consistency: Object: Return Message: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40040.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Return Message: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs40040.length), e);
			}
			retval = false;

		}

		if (((objs40040.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Return Message", //$NON-NLS-1$
								"Consistency: Object: Return Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40040.length)
										+ " Msg_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Return Message: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40040.length)
										+ " Msg_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Return Message is a subtype in association: rel.Numb = 1018
		// The supertype class is: Message
		class Message_c_test40046_c implements ClassQueryInterface_c {
			Message_c_test40046_c(java.util.UUID p40047) {
				m_p40047 = p40047;
			}
			private java.util.UUID m_p40047;
			public boolean evaluate(Object candidate) {
				Message_c selected = (Message_c) candidate;
				boolean retval = false;
				retval = (selected.getMsg_id().equals(m_p40047));
				return retval;
			}
		}

		Message_c[] objs40045 = Message_c.MessageInstances(modelRoot,
				new Message_c_test40046_c(getMsg_id()));

		if (((objs40045.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Return Message", //$NON-NLS-1$
								"Consistency: Object: Return Message: Association: 1018: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40045.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Return Message: Association: 1018: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40045.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_msg = Message_c.getOneMSG_MOnR1018(this);

		if (((v_msg != null))) {

			this.unrelateAcrossR1018From(v_msg);

			if (v_msg != null) {
				v_msg.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		setName("Unnamed Return");

	} // End initialize
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getMsg_id();

	} // End get_ooa_id
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.End)) {

			return Style_c.OpenArrow;

		}

		else {

			return Style_c.Broken;

		}

	} // End get_style
	public String Get_connector_text(final java.util.UUID p_Obj_id,
			final boolean p_Obj_typeisimported, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.Middle)) {

			String v_result = getName();

			if ((!getResulttarget().equals(""))) {

				if ((v_result.equals(""))) {

					v_result = getResulttarget();

				}

				else {

					v_result = getResulttarget() + " = " + v_result;

				}

			}

			if ((!getSequencenumb().equals(""))) {

				if ((v_result.equals(""))) {

					v_result = getSequencenumb();

				}

				else {

					v_result = getSequencenumb() + ": " + v_result;

				}

			}

			MessageArgument_c[] v_args = MessageArgument_c
					.getManyMSG_AsOnR1001(Message_c.getManyMSG_MsOnR1018(this));

			if (((v_args.length == 0))) {

				v_args = MessageArgument_c.getManyMSG_AsOnR1000(Message_c
						.getManyMSG_MsOnR1018(this));

			}

			if (((v_args.length != 0))) {

				v_result = v_result + " (";

				int v_count = 0;

				MessageArgument_c v_arg = null;
				for (int i37253 = 0; i37253 < v_args.length; i37253++) {
					v_arg = v_args[i37253];

					v_count = v_count + 1;

					v_result = v_result + v_arg.getLabel();

					if ((v_count != (v_args.length))) {

						v_result = v_result + ", ";

					}

				}

				v_result = v_result + ")";

			}

			if ((!getReturnvalue().equals(""))) {

				if ((v_result.equals(""))) {

					v_result = getReturnvalue();

				}

				else {

					v_result = v_result + ":" + getReturnvalue();

				}

			}

			return v_result;

		}

		else if ((p_At == End_c.Start)) {

			if ((!getGuardcondition().equals(""))) {

				return "[" + getGuardcondition() + "]";

			}

			return "";

		}

		else {

			return "";

		}

	} // End get_connector_text
	public void Newargument() {
		Ooaofooa.log.println(ILogger.OPERATION, "Return Message",
				" Operation entered: ReturnMessage::Newargument");
		final ModelRoot modelRoot = getModelRoot();
		Message_c v_msg = Message_c.getOneMSG_MOnR1018(this);

		if (((v_msg != null))) {

			if (v_msg != null) {
				v_msg.Newargument();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End newArgument

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Return Message
