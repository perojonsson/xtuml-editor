package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Match_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_MATCH extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Match_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Match_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_result_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_result_id = IdAssigner.preprocessUUID(p_m_result_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public Match_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_result_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(Match_c.class);
		Match_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (Match_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_result_id = IdAssigner.preprocessUUID(p_m_result_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Match_c(modelRoot, p_m_id, p_m_result_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Match_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_result_id) {
		InstanceList instances = modelRoot.getInstanceList(Match_c.class);
		Match_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (Match_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_result_id = IdAssigner.preprocessUUID(p_m_result_id);

				return source;
			}
		}
		// there is no instance matching the id
		Match_c new_inst = new Match_c(modelRoot, p_m_id, p_m_result_id);
		return new_inst;
	}
	public Match_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = idAssigner.createUUID();
		m_result_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Match_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Match_c)) {
			return false;
		}

		Match_c me = (Match_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((Match_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((Match_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Match_c)) {
			return false;
		}

		Match_c me = (Match_c) elem;
		if (!getId().equals(((Match_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private long m_idLongBased;
	private java.util.UUID m_result_id;

	// declare association references from this class

	// referring navigation

	SearchResult_c ProvidesForSearchResult;
	public void relateAcrossR9800To(SearchResult_c target) {
		relateAcrossR9800To(target, true);
	}
	public void relateAcrossR9800To(SearchResult_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ProvidesForSearchResult)
			return; // already related

		if (ProvidesForSearchResult != target) {

			Object oldKey = getInstanceKey();

			if (ProvidesForSearchResult != null) {

				ProvidesForSearchResult.clearBackPointerR9800To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"Match_c.relateAcrossR9800To(SearchResult_c target)",
									"Relate performed across R9800 from Match to Search Result without unrelate of prior instance.");
				}
			}

			ProvidesForSearchResult = target;
			m_result_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR9800To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "9800", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR9800From(SearchResult_c target) {
		unrelateAcrossR9800From(target, true);
	}
	public void unrelateAcrossR9800From(SearchResult_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ProvidesForSearchResult == null)
			return; // already unrelated

		if (target != ProvidesForSearchResult) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R9800",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR9800To(this);
		}

		if (ProvidesForSearchResult != null) {

			m_result_id = ProvidesForSearchResult.getId();
			ProvidesForSearchResult = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "9800", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static Match_c getOneSR_MOnR9800(SearchResult_c[] targets) {
		return getOneSR_MOnR9800(targets, null);
	}

	public static Match_c getOneSR_MOnR9800(SearchResult_c[] targets,
			ClassQueryInterface_c test) {
		Match_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSR_MOnR9800(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Match_c getOneSR_MOnR9800(SearchResult_c target) {
		return getOneSR_MOnR9800(target, null);
	}

	public static Match_c getOneSR_MOnR9800(SearchResult_c target,
			boolean loadComponent) {
		return getOneSR_MOnR9800(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Match_c getOneSR_MOnR9800(SearchResult_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSR_MOnR9800(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Match_c getOneSR_MOnR9800(ModelRoot modelRoot,
			SearchResult_c target, ClassQueryInterface_c test) {
		return getOneSR_MOnR9800(modelRoot, target, test, true);
	}

	public static Match_c getOneSR_MOnR9800(ModelRoot modelRoot,
			SearchResult_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSR_MOnR9800(modelRoot, target, test);
	}
	private static Match_c find_getOneSR_MOnR9800(ModelRoot modelRoot,
			SearchResult_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ConsistsOfMatchConsistsOf_R9800) {
				for (int i = 0; i < target.backPointer_ConsistsOfMatchConsistsOf_R9800
						.size(); ++i) {
					Match_c source = (Match_c) target.backPointer_ConsistsOfMatchConsistsOf_R9800
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c[] targets) {
		return getManySR_MsOnR9800(targets, null);
	}
	public static Match_c[] getManySR_MsOnR9800(SearchResult_c[] targets,
			boolean loadComponent) {
		return getManySR_MsOnR9800(targets, null, loadComponent);
	}
	public static Match_c[] getManySR_MsOnR9800(SearchResult_c[] targets,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9800(targets, test, true);
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Match_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(Match_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ConsistsOfMatchConsistsOf_R9800) {
				for (int j = 0; j < targets[i].backPointer_ConsistsOfMatchConsistsOf_R9800
						.size(); ++j) {
					Match_c source = (Match_c) targets[i].backPointer_ConsistsOfMatchConsistsOf_R9800
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			Match_c[] ret_set = new Match_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Match_c[0];
		}
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c target) {
		return getManySR_MsOnR9800(target, null);
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c target,
			boolean loadComponent) {
		return getManySR_MsOnR9800(target, null, loadComponent);
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c target,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9800(target, test, true);
	}

	public static Match_c[] getManySR_MsOnR9800(SearchResult_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new Match_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ConsistsOfMatchConsistsOf_R9800) {
			for (int i = 0; i < target.backPointer_ConsistsOfMatchConsistsOf_R9800
					.size(); ++i) {
				Match_c source = (Match_c) target.backPointer_ConsistsOfMatchConsistsOf_R9800
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			Match_c[] ret_set = new Match_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Match_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	NameMatch_c backPointer_IsSubtypeNameMatchIsSubtype_R9801;

	public void setNameMatchOrderInChildListR9801(NameMatch_c target, int index) {
		unrelateAcrossR9801From(target);
		NameMatch_c[] elements = NameMatch_c.getManySR_NMsOnR9801(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9801From((NameMatch_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9801To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9801To((NameMatch_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9801To(NameMatch_c target) {
		if (target != null) {
			target.relateAcrossR9801To(this, true);
		}
	}

	public void relateAcrossR9801To(NameMatch_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9801To(this, notifyChanges);
		}
	}

	public void setBackPointerR9801To(NameMatch_c target) {
		backPointer_IsSubtypeNameMatchIsSubtype_R9801 = target;
	}

	public void unrelateAcrossR9801From(NameMatch_c target) {
		if (target != null) {
			target.unrelateAcrossR9801From(this, true);
		}
	}

	public void unrelateAcrossR9801From(NameMatch_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9801From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9801To(NameMatch_c target) {
		if (target == backPointer_IsSubtypeNameMatchIsSubtype_R9801) {
			backPointer_IsSubtypeNameMatchIsSubtype_R9801 = null;
		}
	}

	public static Match_c getOneSR_MOnR9801(NameMatch_c[] targets) {
		return getOneSR_MOnR9801(targets, null);
	}

	public static Match_c getOneSR_MOnR9801(NameMatch_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSR_MOnR9801(targets, test, true);
	}

	public static Match_c getOneSR_MOnR9801(NameMatch_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Match_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Match_c candidate_val = getOneSR_MOnR9801(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSR_MOnR9801(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Match_c getOneSR_MOnR9801(NameMatch_c target) {
		return getOneSR_MOnR9801(target, true);
	}
	public static Match_c getOneSR_MOnR9801(NameMatch_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMatch;
		} else {
			return null;
		}
	}

	public static Match_c[] getManySR_MsOnR9801(NameMatch_c[] targets,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9801(targets, test, true);
	}

	public static Match_c [] getManySR_MsOnR9801(NameMatch_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Match_c[0];
  
  
  LinkedHashSet<Match_c> elementsSet = new LinkedHashSet<Match_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMatch == null)
	  targets[i].loadProxy();
    Match_c associate = targets[i].IsSupertypeMatch;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Match_c[] result = new Match_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Match_c[] getManySR_MsOnR9801(NameMatch_c[] targets) {
		return getManySR_MsOnR9801(targets, null);
	}

	public static Match_c[] getManySR_MsOnR9801(NameMatch_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			NameMatch_c[] targetArray = new NameMatch_c[1];
			targetArray[0] = target;
			return getManySR_MsOnR9801(targetArray, test, loadComponent);
		} else {
			Match_c[] result = new Match_c[0];
			return result;
		}

	}

	public static Match_c[] getManySR_MsOnR9801(NameMatch_c target,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9801(target, null, true);
	}

	public static Match_c[] getManySR_MsOnR9801(NameMatch_c target) {
		return getManySR_MsOnR9801(target, null, true);
	}

	public static Match_c[] getManySR_MsOnR9801(NameMatch_c target,
			boolean loadComponent) {
		return getManySR_MsOnR9801(target, null, loadComponent);
	}

	// referred to navigation

	ContentMatch_c backPointer_IsSubtypeContentMatchIsSubtype_R9801;

	public void setContentMatchOrderInChildListR9801(ContentMatch_c target,
			int index) {
		unrelateAcrossR9801From(target);
		ContentMatch_c[] elements = ContentMatch_c.getManySR_CMsOnR9801(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9801From((ContentMatch_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9801To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9801To((ContentMatch_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9801To(ContentMatch_c target) {
		if (target != null) {
			target.relateAcrossR9801To(this, true);
		}
	}

	public void relateAcrossR9801To(ContentMatch_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9801To(this, notifyChanges);
		}
	}

	public void setBackPointerR9801To(ContentMatch_c target) {
		backPointer_IsSubtypeContentMatchIsSubtype_R9801 = target;
	}

	public void unrelateAcrossR9801From(ContentMatch_c target) {
		if (target != null) {
			target.unrelateAcrossR9801From(this, true);
		}
	}

	public void unrelateAcrossR9801From(ContentMatch_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9801From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9801To(ContentMatch_c target) {
		if (target == backPointer_IsSubtypeContentMatchIsSubtype_R9801) {
			backPointer_IsSubtypeContentMatchIsSubtype_R9801 = null;
		}
	}

	public static Match_c getOneSR_MOnR9801(ContentMatch_c[] targets) {
		return getOneSR_MOnR9801(targets, null);
	}

	public static Match_c getOneSR_MOnR9801(ContentMatch_c[] targets,
			ClassQueryInterface_c test) {
		return getOneSR_MOnR9801(targets, test, true);
	}

	public static Match_c getOneSR_MOnR9801(ContentMatch_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		Match_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					Match_c candidate_val = getOneSR_MOnR9801(targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSR_MOnR9801(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static Match_c getOneSR_MOnR9801(ContentMatch_c target) {
		return getOneSR_MOnR9801(target, true);
	}
	public static Match_c getOneSR_MOnR9801(ContentMatch_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeMatch;
		} else {
			return null;
		}
	}

	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c[] targets,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9801(targets, test, true);
	}

	public static Match_c [] getManySR_MsOnR9801(ContentMatch_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Match_c[0];
  
  
  LinkedHashSet<Match_c> elementsSet = new LinkedHashSet<Match_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeMatch == null)
	  targets[i].loadProxy();
    Match_c associate = targets[i].IsSupertypeMatch;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Match_c[] result = new Match_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c[] targets) {
		return getManySR_MsOnR9801(targets, null);
	}

	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ContentMatch_c[] targetArray = new ContentMatch_c[1];
			targetArray[0] = target;
			return getManySR_MsOnR9801(targetArray, test, loadComponent);
		} else {
			Match_c[] result = new Match_c[0];
			return result;
		}

	}

	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c target,
			ClassQueryInterface_c test) {
		return getManySR_MsOnR9801(target, null, true);
	}

	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c target) {
		return getManySR_MsOnR9801(target, null, true);
	}

	public static Match_c[] getManySR_MsOnR9801(ContentMatch_c target,
			boolean loadComponent) {
		return getManySR_MsOnR9801(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ProvidesForSearchResult == null) {
			// R9800
			SearchResult_c relInst39529 = (SearchResult_c) baseRoot
					.getInstanceList(SearchResult_c.class).get(
							new Object[]{m_result_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39529 == null) {
				relInst39529 = (SearchResult_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(SearchResult_c.class)
						.get(new Object[]{m_result_id});
			}
			if (relInst39529 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39529 = (SearchResult_c) roots[i].getInstanceList(
							SearchResult_c.class)
							.get(new Object[]{m_result_id});
					if (relInst39529 != null)
						break;
				}
			}
			//synchronized
			if (relInst39529 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39529) && !isProxy())) {
					relInst39529.relateAcrossR9800To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R9800
		// SR_SR
		inst = ProvidesForSearchResult;
		unrelateAcrossR9800From(ProvidesForSearchResult, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Match_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Match_c inst = (Match_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(Match_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Match_c MatchInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Match_c result = findMatchInstance(modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					Match_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findMatchInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static Match_c findMatchInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(Match_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Match_c x = (Match_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static Match_c MatchInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return MatchInstance(modelRoot, test, true);
	}

	public static Match_c MatchInstance(ModelRoot modelRoot) {
		return MatchInstance(modelRoot, null, true);
	}

	public static Match_c[] MatchInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					Match_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(Match_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Match_c x = (Match_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Match_c[] ret_set = new Match_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Match_c[0];
			}
		}
	}
	public static Match_c[] MatchInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return MatchInstances(modelRoot, test, true);
	}
	public static Match_c[] MatchInstances(ModelRoot modelRoot) {
		return MatchInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Match.dispose call: ";
		SearchResult_c testR9800Inst = SearchResult_c.getOneSR_SROnR9800(this,
				false);

		if (testR9800Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "9800 ";
		}
		NameMatch_c testR9801Inst1 = NameMatch_c
				.getOneSR_NMOnR9801(this, false);

		if (testR9801Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9801 ";
		}
		ContentMatch_c testR9801Inst2 = ContentMatch_c.getOneSR_CMOnR9801(this,
				false);

		if (testR9801Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9801 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Match", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("result_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getResult_idLongBased() {
		if (ProvidesForSearchResult != null) {
			return ProvidesForSearchResult.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getResult_id() {
		if (ProvidesForSearchResult != null) {
			return ProvidesForSearchResult.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getResult_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_result_id))
			return m_result_id;
		else
			return getResult_id();
	}

	public void setResult_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_result_id)) {
				return;
			}
		} else if (m_result_id != null) {
			if (m_result_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Result_id", m_result_id, newValue, true);
		m_result_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Match", //$NON-NLS-1$
				" Operation entered: Match::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Match_c[] objs = Match_c.MatchInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Match", //$NON-NLS-1$
				" Operation entered: Match::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Match_c_test39531_c implements ClassQueryInterface_c {
			Match_c_test39531_c(java.util.UUID p39532) {
				m_p39532 = p39532;
			}
			private java.util.UUID m_p39532;
			public boolean evaluate(Object candidate) {
				Match_c selected = (Match_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39532));
				return retval;
			}
		}

		Match_c[] objs39530 = Match_c.MatchInstances(modelRoot,
				new Match_c_test39531_c(getId()));

		if (((objs39530.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Match", //$NON-NLS-1$
								"Consistency: Object: Match: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39530.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Match: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39530.length), e);
			}
			retval = false;

		}

		if (((objs39530.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.CONSISTENCY, "Match", //$NON-NLS-1$
						"Consistency: Object: Match: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
								+ "Actual Value: " //$NON-NLS-1$ 
								+ Integer.toString(objs39530.length)
								+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Match: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39530.length)
								+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Match is a referring class in association: rel.Numb = 9800
		// The participating class is: Search Result
		class SearchResult_c_test39536_c implements ClassQueryInterface_c {
			SearchResult_c_test39536_c(java.util.UUID p39537) {
				m_p39537 = p39537;
			}
			private java.util.UUID m_p39537;
			public boolean evaluate(Object candidate) {
				SearchResult_c selected = (SearchResult_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39537));
				return retval;
			}
		}

		SearchResult_c[] objs39535 = SearchResult_c.SearchResultInstances(
				modelRoot, new SearchResult_c_test39536_c(getResult_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39535.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Match", //$NON-NLS-1$
								"Consistency: Object: Match: Association: 9800: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39535.length)
										+ " Result_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Match: Association: 9800: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39535.length)
										+ " Result_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 9801
		int objs39538 = 0;
		// Subtype Object: Name Match
		class NameMatch_c_test39539_c implements ClassQueryInterface_c {
			NameMatch_c_test39539_c(java.util.UUID p39540) {
				m_p39540 = p39540;
			}
			private java.util.UUID m_p39540;
			public boolean evaluate(Object candidate) {
				NameMatch_c selected = (NameMatch_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39540));
				return retval;
			}
		}

		NameMatch_c[] objs39541 = NameMatch_c.NameMatchInstances(modelRoot,
				new NameMatch_c_test39539_c(getId()));

		objs39538 = objs39538 + objs39541.length;
		// Subtype Object: Content Match
		class ContentMatch_c_test39542_c implements ClassQueryInterface_c {
			ContentMatch_c_test39542_c(java.util.UUID p39543) {
				m_p39543 = p39543;
			}
			private java.util.UUID m_p39543;
			public boolean evaluate(Object candidate) {
				ContentMatch_c selected = (ContentMatch_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39543));
				return retval;
			}
		}

		ContentMatch_c[] objs39544 = ContentMatch_c.ContentMatchInstances(
				modelRoot, new ContentMatch_c_test39542_c(getId()));

		objs39538 = objs39538 + objs39544.length;
		if (objs39538 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Match", //$NON-NLS-1$
								"Consistency: Object: Match: Association: 9801: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39538)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Match: Association: 9801: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39538), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Match",
				" Operation entered: Match::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ContentMatch_c v_contentMatch = ContentMatch_c.getOneSR_CMOnR9801(this);

		if (((v_contentMatch != null))) {

			this.unrelateAcrossR9801From(v_contentMatch);

			if (v_contentMatch != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_contentMatch.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_contentMatch));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		NameMatch_c v_nameMatch = NameMatch_c.getOneSR_NMOnR9801(this);

		if (((v_nameMatch != null))) {

			this.unrelateAcrossR9801From(v_nameMatch);

			if (v_nameMatch != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_nameMatch.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_nameMatch));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		SearchResult_c v_result = SearchResult_c.getOneSR_SROnR9800(this);

		if (((v_result != null))) {

			this.unrelateAcrossR9800From(v_result);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Match",
				" Operation entered: Match::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Match
