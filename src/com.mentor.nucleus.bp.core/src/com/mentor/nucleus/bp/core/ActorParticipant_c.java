package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ActorParticipant_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_ACTOR_PARTICIPANT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ActorParticipant_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ActorParticipant_c(ModelRoot modelRoot, java.util.UUID p_m_part_id,
			String p_m_name, String p_m_descrip, java.util.UUID p_m_ls_part_id) {
		super(modelRoot);
		m_name = p_m_name;
		m_descrip = p_m_descrip;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_part_id = IdAssigner.preprocessUUID(p_m_part_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ls_part_id = IdAssigner.preprocessUUID(p_m_ls_part_id);

		Object[] key = {m_part_id};
		addInstanceToMap(key);
	}
	static public ActorParticipant_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_part_id, String p_m_name, String p_m_descrip,
			java.util.UUID p_m_ls_part_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);
		ActorParticipant_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_part_id};
			new_inst = (ActorParticipant_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_name = p_m_name;
				new_inst.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_part_id = IdAssigner.preprocessUUID(p_m_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ls_part_id = IdAssigner
						.preprocessUUID(p_m_ls_part_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ActorParticipant_c(modelRoot, p_m_part_id, p_m_name,
					p_m_descrip, p_m_ls_part_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ActorParticipant_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_part_id, String p_m_name, String p_m_descrip,
			java.util.UUID p_m_ls_part_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);
		ActorParticipant_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_part_id};
			source = (ActorParticipant_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_name = p_m_name;
				source.m_descrip = p_m_descrip;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_part_id = IdAssigner.preprocessUUID(p_m_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ls_part_id = IdAssigner.preprocessUUID(p_m_ls_part_id);

				return source;
			}
		}
		// there is no instance matching the id
		ActorParticipant_c new_inst = new ActorParticipant_c(modelRoot,
				p_m_part_id, p_m_name, p_m_descrip, p_m_ls_part_id);
		return new_inst;
	}
	public ActorParticipant_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_name = "";
		m_descrip = "";
		m_part_id = IdAssigner.NULL_UUID;
		m_ls_part_id = IdAssigner.NULL_UUID;
		Object[] key = {m_part_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_part_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_part_id != p_newKey) {

			m_part_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ActorParticipant_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ActorParticipant_c)) {
			return false;
		}

		ActorParticipant_c me = (ActorParticipant_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPart_id()) || IdAssigner.NULL_UUID
						.equals(((ActorParticipant_c) elem).getPart_id())) && this != elem)) {
			return false;
		}
		if (!getPart_id().equals(((ActorParticipant_c) elem).getPart_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ActorParticipant_c)) {
			return false;
		}

		ActorParticipant_c me = (ActorParticipant_c) elem;
		if (!getPart_idCachedValue().equals(
				((ActorParticipant_c) elem).getPart_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private String m_name;
	private String m_descrip;
	private java.util.UUID m_part_id;
	private java.util.UUID m_ls_part_id;

	// declare association references from this class

	// referring navigation

	InteractionParticipant_c IsSupertypeInteractionParticipant;
	public void relateAcrossR930To(InteractionParticipant_c target) {
		relateAcrossR930To(target, true);
	}
	public void relateAcrossR930To(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeInteractionParticipant)
			return; // already related

		if (IsSupertypeInteractionParticipant != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeInteractionParticipant != null) {

				IsSupertypeInteractionParticipant.clearBackPointerR930To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActorParticipant_c.relateAcrossR930To(InteractionParticipant_c target)",
									"Relate performed across R930 from Actor Participant to Interaction Participant without unrelate of prior instance.");
				}
			}

			IsSupertypeInteractionParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR930To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "930", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR930From(InteractionParticipant_c target) {
		unrelateAcrossR930From(target, true);
	}
	public void unrelateAcrossR930From(InteractionParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeInteractionParticipant == null)
			return; // already unrelated

		if (target != IsSupertypeInteractionParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R930",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR930To(this);
		}

		if (IsSupertypeInteractionParticipant != null) {

			m_part_id = IsSupertypeInteractionParticipant.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_part_id)) {
				m_part_id = IsSupertypeInteractionParticipant
						.getPart_idCachedValue();
			}
			IsSupertypeInteractionParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "930", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActorParticipant_c getOneSQ_APOnR930(
			InteractionParticipant_c[] targets) {
		return getOneSQ_APOnR930(targets, null);
	}

	public static ActorParticipant_c getOneSQ_APOnR930(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		ActorParticipant_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_APOnR930(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActorParticipant_c getOneSQ_APOnR930(
			InteractionParticipant_c target) {
		return getOneSQ_APOnR930(target, null);
	}

	public static ActorParticipant_c getOneSQ_APOnR930(
			InteractionParticipant_c target, boolean loadComponent) {
		return getOneSQ_APOnR930(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActorParticipant_c getOneSQ_APOnR930(
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_APOnR930(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActorParticipant_c getOneSQ_APOnR930(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test) {
		return getOneSQ_APOnR930(modelRoot, target, test, true);
	}

	public static ActorParticipant_c getOneSQ_APOnR930(ModelRoot modelRoot,
			InteractionParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSQ_APOnR930(modelRoot, target, test);
	}
	private static ActorParticipant_c find_getOneSQ_APOnR930(
			ModelRoot modelRoot, InteractionParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ActorParticipant_c source = (ActorParticipant_c) target.backPointer_IsSubtypeActorParticipantIsSubtype_R930;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c[] targets) {
		return getManySQ_APsOnR930(targets, null);
	}
	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c[] targets, boolean loadComponent) {
		return getManySQ_APsOnR930(targets, null, loadComponent);
	}
	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_APsOnR930(targets, test, true);
	}

	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActorParticipant_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActorParticipant_c source = (ActorParticipant_c) targets[i].backPointer_IsSubtypeActorParticipantIsSubtype_R930;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActorParticipant_c[] ret_set = new ActorParticipant_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActorParticipant_c[0];
		}
	}

	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c target) {
		if (target != null) {
			InteractionParticipant_c[] targetArray = new InteractionParticipant_c[1];
			targetArray[0] = target;
			return getManySQ_APsOnR930(targetArray);
		} else {
			ActorParticipant_c[] result = new ActorParticipant_c[0];
			return result;
		}
	}

	public static ActorParticipant_c[] getManySQ_APsOnR930(
			InteractionParticipant_c target, boolean loadComponent) {
		if (target != null) {
			InteractionParticipant_c[] targetArray = new InteractionParticipant_c[1];
			targetArray[0] = target;
			return getManySQ_APsOnR930(targetArray, loadComponent);
		} else {
			ActorParticipant_c[] result = new ActorParticipant_c[0];
			return result;
		}
	}

	// referring navigation

	Lifespan_c LifeIsBoundedByLifespan;
	public void relateAcrossR949To(Lifespan_c target) {
		relateAcrossR949To(target, true);
	}
	public void relateAcrossR949To(Lifespan_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == LifeIsBoundedByLifespan)
			return; // already related

		if (LifeIsBoundedByLifespan != target) {

			Object oldKey = getInstanceKey();

			if (LifeIsBoundedByLifespan != null) {

				LifeIsBoundedByLifespan.clearBackPointerR949To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ActorParticipant_c.relateAcrossR949To(Lifespan_c target)",
									"Relate performed across R949 from Actor Participant to Lifespan without unrelate of prior instance.");
				}
			}

			LifeIsBoundedByLifespan = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_ls_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR949To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "949", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR949From(Lifespan_c target) {
		unrelateAcrossR949From(target, true);
	}
	public void unrelateAcrossR949From(Lifespan_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (LifeIsBoundedByLifespan == null)
			return; // already unrelated

		if (target != LifeIsBoundedByLifespan) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R949",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR949To(this);
		}

		if (LifeIsBoundedByLifespan != null) {

			m_ls_part_id = LifeIsBoundedByLifespan.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_ls_part_id)) {
				m_ls_part_id = LifeIsBoundedByLifespan.getPart_idCachedValue();
			}
			LifeIsBoundedByLifespan = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "949", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ActorParticipant_c getOneSQ_APOnR949(Lifespan_c[] targets) {
		return getOneSQ_APOnR949(targets, null);
	}

	public static ActorParticipant_c getOneSQ_APOnR949(Lifespan_c[] targets,
			ClassQueryInterface_c test) {
		ActorParticipant_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_APOnR949(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ActorParticipant_c getOneSQ_APOnR949(Lifespan_c target) {
		return getOneSQ_APOnR949(target, null);
	}

	public static ActorParticipant_c getOneSQ_APOnR949(Lifespan_c target,
			boolean loadComponent) {
		return getOneSQ_APOnR949(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ActorParticipant_c getOneSQ_APOnR949(Lifespan_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_APOnR949(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ActorParticipant_c getOneSQ_APOnR949(ModelRoot modelRoot,
			Lifespan_c target, ClassQueryInterface_c test) {
		return getOneSQ_APOnR949(modelRoot, target, test, true);
	}

	public static ActorParticipant_c getOneSQ_APOnR949(ModelRoot modelRoot,
			Lifespan_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_APOnR949(modelRoot, target, test);
	}
	private static ActorParticipant_c find_getOneSQ_APOnR949(
			ModelRoot modelRoot, Lifespan_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ActorParticipant_c source = (ActorParticipant_c) target.backPointer_DefinesBoundsOfExistenceActorParticipantDefinesBoundsOfExistence_R949;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ActorParticipant_c[] getManySQ_APsOnR949(Lifespan_c[] targets) {
		return getManySQ_APsOnR949(targets, null);
	}
	public static ActorParticipant_c[] getManySQ_APsOnR949(
			Lifespan_c[] targets, boolean loadComponent) {
		return getManySQ_APsOnR949(targets, null, loadComponent);
	}
	public static ActorParticipant_c[] getManySQ_APsOnR949(
			Lifespan_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_APsOnR949(targets, test, true);
	}

	public static ActorParticipant_c[] getManySQ_APsOnR949(
			Lifespan_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ActorParticipant_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ActorParticipant_c source = (ActorParticipant_c) targets[i].backPointer_DefinesBoundsOfExistenceActorParticipantDefinesBoundsOfExistence_R949;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ActorParticipant_c[] ret_set = new ActorParticipant_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ActorParticipant_c[0];
		}
	}

	public static ActorParticipant_c[] getManySQ_APsOnR949(Lifespan_c target) {
		if (target != null) {
			Lifespan_c[] targetArray = new Lifespan_c[1];
			targetArray[0] = target;
			return getManySQ_APsOnR949(targetArray);
		} else {
			ActorParticipant_c[] result = new ActorParticipant_c[0];
			return result;
		}
	}

	public static ActorParticipant_c[] getManySQ_APsOnR949(Lifespan_c target,
			boolean loadComponent) {
		if (target != null) {
			Lifespan_c[] targetArray = new Lifespan_c[1];
			targetArray[0] = target;
			return getManySQ_APsOnR949(targetArray, loadComponent);
		} else {
			ActorParticipant_c[] result = new ActorParticipant_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R930
		InteractionParticipant_c relInst40672 = (InteractionParticipant_c) baseRoot
				.getInstanceList(InteractionParticipant_c.class).get(
						new Object[]{m_part_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40672 == null) {
			relInst40672 = (InteractionParticipant_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(InteractionParticipant_c.class)
					.get(new Object[]{m_part_id});
		}
		if (relInst40672 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40672 = (InteractionParticipant_c) roots[i]
						.getInstanceList(InteractionParticipant_c.class).get(
								new Object[]{m_part_id});
				if (relInst40672 != null)
					break;
			}
		}
		//synchronized
		if (relInst40672 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40672) && !isProxy())) {
				relInst40672.relateAcrossR930To(this, notifyChanges);
			}
		}

		if (LifeIsBoundedByLifespan == null) {
			// R949
			Lifespan_c relInst40673 = (Lifespan_c) baseRoot.getInstanceList(
					Lifespan_c.class).get(new Object[]{m_ls_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40673 == null) {
				relInst40673 = (Lifespan_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Lifespan_c.class)
						.get(new Object[]{m_ls_part_id});
			}
			if (relInst40673 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40673 = (Lifespan_c) roots[i].getInstanceList(
							Lifespan_c.class).get(new Object[]{m_ls_part_id});
					if (relInst40673 != null)
						break;
				}
			}
			//synchronized
			if (relInst40673 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40673) && !isProxy())) {
					relInst40673.relateAcrossR949To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R930
		// SQ_P
		inst = IsSupertypeInteractionParticipant;
		unrelateAcrossR930From(IsSupertypeInteractionParticipant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R949
		// SQ_LS
		inst = LifeIsBoundedByLifespan;
		unrelateAcrossR949From(LifeIsBoundedByLifespan, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ActorParticipant_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ActorParticipant_c inst = (ActorParticipant_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ActorParticipant_c ActorParticipantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ActorParticipant_c result = findActorParticipantInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ActorParticipant_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findActorParticipantInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ActorParticipant_c findActorParticipantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActorParticipant_c x = (ActorParticipant_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ActorParticipant_c ActorParticipantInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActorParticipantInstance(modelRoot, test, true);
	}

	public static ActorParticipant_c ActorParticipantInstance(
			ModelRoot modelRoot) {
		return ActorParticipantInstance(modelRoot, null, true);
	}

	public static ActorParticipant_c[] ActorParticipantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ActorParticipant_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ActorParticipant_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ActorParticipant_c x = (ActorParticipant_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ActorParticipant_c[] ret_set = new ActorParticipant_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ActorParticipant_c[0];
			}
		}
	}
	public static ActorParticipant_c[] ActorParticipantInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ActorParticipantInstances(modelRoot, test, true);
	}
	public static ActorParticipant_c[] ActorParticipantInstances(
			ModelRoot modelRoot) {
		return ActorParticipantInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Actor Participant.dispose call: ";
		InteractionParticipant_c testR930Inst6 = InteractionParticipant_c
				.getOneSQ_POnR930(this, false);

		if (testR930Inst6 != null) {
			delete_error = true;
			errorMsg = errorMsg + "930 ";
		}
		Lifespan_c testR949Inst = Lifespan_c.getOneSQ_LSOnR949(this, false);

		if (testR949Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "949 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Actor Participant",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("part_id")) {
			return true;
		}
		if (attributeName.equals("ls_part_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getPart_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getPart_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public String getName() {
		return m_name;
	}

	public void setName(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_name)) {
				return;
			}
		} else if (m_name != null) {
			if (m_name.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name",
				m_name, newValue, true);
		m_name = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPart_idLongBased() {
		if (IsSupertypeInteractionParticipant != null) {
			return IsSupertypeInteractionParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPart_id() {
		if (IsSupertypeInteractionParticipant != null) {
			return IsSupertypeInteractionParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeInteractionParticipant != null);

	}

	public java.util.UUID getPart_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_part_id))
			return m_part_id;
		else
			return getPart_id();
	}

	public void setPart_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_part_id)) {
				return;
			}
		} else if (m_part_id != null) {
			if (m_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Part_id", m_part_id, newValue, true);
		m_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getLs_part_idLongBased() {
		if (LifeIsBoundedByLifespan != null) {
			return LifeIsBoundedByLifespan.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getLs_part_id() {
		if (LifeIsBoundedByLifespan != null) {
			return LifeIsBoundedByLifespan.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getLs_part_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ls_part_id))
			return m_ls_part_id;
		else
			return getLs_part_id();
	}

	public void setLs_part_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ls_part_id)) {
				return;
			}
		} else if (m_ls_part_id != null) {
			if (m_ls_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Ls_part_id", m_ls_part_id, newValue, true);
		m_ls_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant", //$NON-NLS-1$
				" Operation entered: Actor Participant::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ActorParticipant_c[] objs = ActorParticipant_c
				.ActorParticipantInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant", //$NON-NLS-1$
				" Operation entered: Actor Participant::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ActorParticipant_c_test40675_c implements ClassQueryInterface_c {
			ActorParticipant_c_test40675_c(java.util.UUID p40676) {
				m_p40676 = p40676;
			}
			private java.util.UUID m_p40676;
			public boolean evaluate(Object candidate) {
				ActorParticipant_c selected = (ActorParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40676));
				return retval;
			}
		}

		ActorParticipant_c[] objs40674 = ActorParticipant_c
				.ActorParticipantInstances(modelRoot,
						new ActorParticipant_c_test40675_c(getPart_id()));

		if (((objs40674.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actor Participant", //$NON-NLS-1$
								"Consistency: Object: Actor Participant: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40674.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actor Participant: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40674.length), e);
			}
			retval = false;

		}

		if (((objs40674.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actor Participant", //$NON-NLS-1$
								"Consistency: Object: Actor Participant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40674.length)
										+ " Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actor Participant: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40674.length)
										+ " Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Actor Participant is a subtype in association: rel.Numb = 930
		// The supertype class is: Interaction Participant
		class InteractionParticipant_c_test40680_c
				implements
					ClassQueryInterface_c {
			InteractionParticipant_c_test40680_c(java.util.UUID p40681) {
				m_p40681 = p40681;
			}
			private java.util.UUID m_p40681;
			public boolean evaluate(Object candidate) {
				InteractionParticipant_c selected = (InteractionParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40681));
				return retval;
			}
		}

		InteractionParticipant_c[] objs40679 = InteractionParticipant_c
				.InteractionParticipantInstances(modelRoot,
						new InteractionParticipant_c_test40680_c(getPart_id()));

		if (((objs40679.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actor Participant", //$NON-NLS-1$
								"Consistency: Object: Actor Participant: Association: 930: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40679.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actor Participant: Association: 930: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40679.length), e);
			}
			retval = false;

		}

		// Actor Participant is a referring class in association: rel.Numb = 949
		// The participating class is: Lifespan
		class Lifespan_c_test40683_c implements ClassQueryInterface_c {
			Lifespan_c_test40683_c(java.util.UUID p40684) {
				m_p40684 = p40684;
			}
			private java.util.UUID m_p40684;
			public boolean evaluate(Object candidate) {
				Lifespan_c selected = (Lifespan_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40684));
				return retval;
			}
		}

		Lifespan_c[] objs40682 = Lifespan_c.LifespanInstances(modelRoot,
				new Lifespan_c_test40683_c(getLs_part_id()));

		if (((objs40682.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Actor Participant", //$NON-NLS-1$
								"Consistency: Object: Actor Participant: Association: 949: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40682.length)
										+ " LS_Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Actor Participant: Association: 949: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40682.length)
										+ " LS_Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public int Get_style() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		return Style_c.StickFigure;

	} // End get_style
	public int Get_text_style(final int p_At, final int p_Comp_num,
			final int p_Ent_num) {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_text_style");
		final ModelRoot modelRoot = getModelRoot();
		return Style_c.None;

	} // End get_text_style
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getPart_id();

	} // End get_ooa_id
	public int Get_entries(final int p_Comp_num) {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_entries");
		final ModelRoot modelRoot = getModelRoot();
		return 1;

	} // End get_entries
	public String Get_compartment_text(final int p_At, final int p_Comp_num,
			final int p_Ent_num) {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_compartment_text");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == Justification_c.Center_in_X) && (p_Comp_num == 2)) {

			return getName();

		}

		else {

			return "";

		}

	} // End get_compartment_text
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		String v_name = "Unnamed Actor";

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, false);

		if ((!v_success.equals(""))) {

			setName(v_success);

		}

		else {

			Dispose();

		}

	} // End initialize
	public int Get_compartments() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Get_compartments");
		final ModelRoot modelRoot = getModelRoot();
		return 2;

	} // End get_compartments
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Lifespan_c v_ls = Lifespan_c.getOneSQ_LSOnR949(this);

		if (((v_ls != null))) {

			if (v_ls != null) {
				v_ls.unrelateAcrossR949From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

		}

		InteractionParticipant_c v_participant = InteractionParticipant_c
				.getOneSQ_POnR930(this);

		if (((v_participant != null))) {

			if (v_participant != null) {
				v_participant.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		else {

			if (delete()) {
				Ooaofooa.getDefaultInstance().fireModelElementDeleted(
						new BaseModelDelta(
								Modeleventnotification_c.DELTA_DELETE, this));
			}

		}

	} // End dispose
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Actor Participant",
				" Operation entered: ActorParticipant::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Actor Participant
