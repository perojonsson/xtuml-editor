package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SatisfactionInComponentPackage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SATISFACTION_IN_COMPONENT_PACKAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SatisfactionInComponentPackage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SatisfactionInComponentPackage_c(ModelRoot modelRoot,
			java.util.UUID p_m_componentpackage_id,
			java.util.UUID p_m_satisfaction_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_componentpackage_id = IdAssigner
				.preprocessUUID(p_m_componentpackage_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_satisfaction_id = IdAssigner.preprocessUUID(p_m_satisfaction_id);

		Object[] key = {m_componentpackage_id, m_satisfaction_id};
		addInstanceToMap(key);
	}
	static public SatisfactionInComponentPackage_c createProxy(
			ModelRoot modelRoot, java.util.UUID p_m_componentpackage_id,
			java.util.UUID p_m_satisfaction_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);
		SatisfactionInComponentPackage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_componentpackage_id, p_m_satisfaction_id};
			new_inst = (SatisfactionInComponentPackage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_componentpackage_id = IdAssigner
						.preprocessUUID(p_m_componentpackage_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_satisfaction_id = IdAssigner
						.preprocessUUID(p_m_satisfaction_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SatisfactionInComponentPackage_c(modelRoot,
					p_m_componentpackage_id, p_m_satisfaction_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SatisfactionInComponentPackage_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_componentpackage_id,
			java.util.UUID p_m_satisfaction_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);
		SatisfactionInComponentPackage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_componentpackage_id, p_m_satisfaction_id};
			source = (SatisfactionInComponentPackage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_componentpackage_id = IdAssigner
						.preprocessUUID(p_m_componentpackage_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_satisfaction_id = IdAssigner
						.preprocessUUID(p_m_satisfaction_id);

				return source;
			}
		}
		// there is no instance matching the id
		SatisfactionInComponentPackage_c new_inst = new SatisfactionInComponentPackage_c(
				modelRoot, p_m_componentpackage_id, p_m_satisfaction_id);
		return new_inst;
	}
	public SatisfactionInComponentPackage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_componentpackage_id = IdAssigner.NULL_UUID;
		m_satisfaction_id = IdAssigner.NULL_UUID;
		Object[] key = {m_componentpackage_id, m_satisfaction_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_componentpackage_id, m_satisfaction_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_componentpackage_id != p_newKey) {

			m_componentpackage_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SatisfactionInComponentPackage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SatisfactionInComponentPackage_c)) {
			return false;
		}

		SatisfactionInComponentPackage_c me = (SatisfactionInComponentPackage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getComponentpackage_id()) || IdAssigner.NULL_UUID
						.equals(((SatisfactionInComponentPackage_c) elem)
								.getComponentpackage_id())) && this != elem)) {
			return false;
		}
		if (!getComponentpackage_id().equals(
				((SatisfactionInComponentPackage_c) elem)
						.getComponentpackage_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSatisfaction_id()) || IdAssigner.NULL_UUID
						.equals(((SatisfactionInComponentPackage_c) elem)
								.getSatisfaction_id())) && this != elem)) {
			return false;
		}
		if (!getSatisfaction_id().equals(
				((SatisfactionInComponentPackage_c) elem).getSatisfaction_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SatisfactionInComponentPackage_c)) {
			return false;
		}

		SatisfactionInComponentPackage_c me = (SatisfactionInComponentPackage_c) elem;
		if (!getComponentpackage_idCachedValue().equals(
				((SatisfactionInComponentPackage_c) elem)
						.getComponentpackage_idCachedValue()))
			return false;
		if (!getSatisfaction_idCachedValue().equals(
				((SatisfactionInComponentPackage_c) elem)
						.getSatisfaction_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_componentpackage_id;
	private java.util.UUID m_satisfaction_id;

	// declare association references from this class

	// referring navigation

	ComponentPackage_c ComponentPackage;
	public void relateAcrossR9001To(ComponentPackage_c target) {
		relateAcrossR9001To(target, true);
	}
	public void relateAcrossR9001To(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ComponentPackage)
			return; // already related

		if (ComponentPackage != target) {

			Object oldKey = getInstanceKey();

			if (ComponentPackage != null) {

				ComponentPackage.clearBackPointerR9001To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SatisfactionInComponentPackage_c.relateAcrossR9001To(ComponentPackage_c target)",
									"Relate performed across R9001 from Satisfaction In Component Package to Component Package without unrelate of prior instance.");
				}
			}

			ComponentPackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_componentpackage_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR9001To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "9001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR9001From(ComponentPackage_c target) {
		unrelateAcrossR9001From(target, true);
	}
	public void unrelateAcrossR9001From(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ComponentPackage == null)
			return; // already unrelated

		if (target != ComponentPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R9001",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR9001To(this);
		}

		if (ComponentPackage != null) {

			m_componentpackage_id = ComponentPackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_componentpackage_id)) {
				m_componentpackage_id = ComponentPackage
						.getPackage_idCachedValue();
			}
			ComponentPackage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "9001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	Satisfaction_c Satisfaction;
	public void relateAcrossR9001To(Satisfaction_c target) {
		relateAcrossR9001To(target, true);
	}
	public void relateAcrossR9001To(Satisfaction_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Satisfaction)
			return; // already related

		if (Satisfaction != target) {

			Object oldKey = getInstanceKey();

			if (Satisfaction != null) {

				Satisfaction.clearBackPointerR9001To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SatisfactionInComponentPackage_c.relateAcrossR9001To(Satisfaction_c target)",
									"Relate performed across R9001 from Satisfaction In Component Package to Satisfaction without unrelate of prior instance.");
				}
			}

			Satisfaction = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_satisfaction_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR9001To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "9001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR9001From(Satisfaction_c target) {
		unrelateAcrossR9001From(target, true);
	}
	public void unrelateAcrossR9001From(Satisfaction_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (Satisfaction == null)
			return; // already unrelated

		if (target != Satisfaction) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R9001",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR9001To(this);
		}

		if (Satisfaction != null) {

			m_satisfaction_id = Satisfaction.getId();
			if (IdAssigner.NULL_UUID.equals(m_satisfaction_id)) {
				m_satisfaction_id = Satisfaction.getIdCachedValue();
			}
			Satisfaction = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "9001", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ComponentPackage_c[] targets) {
		return getOnePA_SICPOnR9001(targets, null);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		SatisfactionInComponentPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePA_SICPOnR9001(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ComponentPackage_c target) {
		return getOnePA_SICPOnR9001(target, null);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ComponentPackage_c target, boolean loadComponent) {
		return getOnePA_SICPOnR9001(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ComponentPackage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePA_SICPOnR9001(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test) {
		return getOnePA_SICPOnR9001(modelRoot, target, test, true);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePA_SICPOnR9001(modelRoot, target, test);
	}
	private static SatisfactionInComponentPackage_c find_getOnePA_SICPOnR9001(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_SatisfactionInComponentPackage_R9001) {
				for (int i = 0; i < target.backPointer_SatisfactionInComponentPackage_R9001
						.size(); ++i) {
					SatisfactionInComponentPackage_c source = (SatisfactionInComponentPackage_c) target.backPointer_SatisfactionInComponentPackage_R9001
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c[] targets) {
		return getManyPA_SICPsOnR9001(targets, null);
	}
	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c[] targets, boolean loadComponent) {
		return getManyPA_SICPsOnR9001(targets, null, loadComponent);
	}
	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		return getManyPA_SICPsOnR9001(targets, test, true);
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SatisfactionInComponentPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_SatisfactionInComponentPackage_R9001) {
				for (int j = 0; j < targets[i].backPointer_SatisfactionInComponentPackage_R9001
						.size(); ++j) {
					SatisfactionInComponentPackage_c source = (SatisfactionInComponentPackage_c) targets[i].backPointer_SatisfactionInComponentPackage_R9001
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SatisfactionInComponentPackage_c[] ret_set = new SatisfactionInComponentPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SatisfactionInComponentPackage_c[0];
		}
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c target) {
		return getManyPA_SICPsOnR9001(target, null);
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c target, boolean loadComponent) {
		return getManyPA_SICPsOnR9001(target, null, loadComponent);
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c target, ClassQueryInterface_c test) {
		return getManyPA_SICPsOnR9001(target, test, true);
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			ComponentPackage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SatisfactionInComponentPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_SatisfactionInComponentPackage_R9001) {
			for (int i = 0; i < target.backPointer_SatisfactionInComponentPackage_R9001
					.size(); ++i) {
				SatisfactionInComponentPackage_c source = (SatisfactionInComponentPackage_c) target.backPointer_SatisfactionInComponentPackage_R9001
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SatisfactionInComponentPackage_c[] ret_set = new SatisfactionInComponentPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SatisfactionInComponentPackage_c[0];
		}
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			Satisfaction_c[] targets) {
		return getOnePA_SICPOnR9001(targets, null);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			Satisfaction_c[] targets, ClassQueryInterface_c test) {
		SatisfactionInComponentPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePA_SICPOnR9001(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			Satisfaction_c target) {
		return getOnePA_SICPOnR9001(target, null);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			Satisfaction_c target, boolean loadComponent) {
		return getOnePA_SICPOnR9001(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			Satisfaction_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePA_SICPOnR9001(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ModelRoot modelRoot, Satisfaction_c target,
			ClassQueryInterface_c test) {
		return getOnePA_SICPOnR9001(modelRoot, target, test, true);
	}

	public static SatisfactionInComponentPackage_c getOnePA_SICPOnR9001(
			ModelRoot modelRoot, Satisfaction_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOnePA_SICPOnR9001(modelRoot, target, test);
	}
	private static SatisfactionInComponentPackage_c find_getOnePA_SICPOnR9001(
			ModelRoot modelRoot, Satisfaction_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_SatisfactionInComponentPackage_R9001) {
				for (int i = 0; i < target.backPointer_SatisfactionInComponentPackage_R9001
						.size(); ++i) {
					SatisfactionInComponentPackage_c source = (SatisfactionInComponentPackage_c) target.backPointer_SatisfactionInComponentPackage_R9001
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c[] targets) {
		return getManyPA_SICPsOnR9001(targets, null);
	}
	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c[] targets, boolean loadComponent) {
		return getManyPA_SICPsOnR9001(targets, null, loadComponent);
	}
	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c[] targets, ClassQueryInterface_c test) {
		return getManyPA_SICPsOnR9001(targets, test, true);
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SatisfactionInComponentPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_SatisfactionInComponentPackage_R9001) {
				for (int j = 0; j < targets[i].backPointer_SatisfactionInComponentPackage_R9001
						.size(); ++j) {
					SatisfactionInComponentPackage_c source = (SatisfactionInComponentPackage_c) targets[i].backPointer_SatisfactionInComponentPackage_R9001
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SatisfactionInComponentPackage_c[] ret_set = new SatisfactionInComponentPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SatisfactionInComponentPackage_c[0];
		}
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c target) {
		if (target != null) {
			Satisfaction_c[] targetArray = new Satisfaction_c[1];
			targetArray[0] = target;
			return getManyPA_SICPsOnR9001(targetArray);
		} else {
			SatisfactionInComponentPackage_c[] result = new SatisfactionInComponentPackage_c[0];
			return result;
		}
	}

	public static SatisfactionInComponentPackage_c[] getManyPA_SICPsOnR9001(
			Satisfaction_c target, boolean loadComponent) {
		if (target != null) {
			Satisfaction_c[] targetArray = new Satisfaction_c[1];
			targetArray[0] = target;
			return getManyPA_SICPsOnR9001(targetArray, loadComponent);
		} else {
			SatisfactionInComponentPackage_c[] result = new SatisfactionInComponentPackage_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R9001
		ComponentPackage_c relInst39827 = (ComponentPackage_c) baseRoot
				.getInstanceList(ComponentPackage_c.class).get(
						new Object[]{m_componentpackage_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39827 == null) {
			relInst39827 = (ComponentPackage_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ComponentPackage_c.class)
					.get(new Object[]{m_componentpackage_id});
		}
		if (relInst39827 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39827 = (ComponentPackage_c) roots[i].getInstanceList(
						ComponentPackage_c.class).get(
						new Object[]{m_componentpackage_id});
				if (relInst39827 != null)
					break;
			}
		}
		//synchronized
		if (relInst39827 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39827) && !isProxy())) {
				relInst39827.relateAcrossR9001To(this, notifyChanges);
			}
		}

		Satisfaction_c relInst39828 = (Satisfaction_c) baseRoot
				.getInstanceList(Satisfaction_c.class).get(
						new Object[]{m_satisfaction_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39828 == null) {
			relInst39828 = (Satisfaction_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Satisfaction_c.class)
					.get(new Object[]{m_satisfaction_id});
		}
		if (relInst39828 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39828 = (Satisfaction_c) roots[i].getInstanceList(
						Satisfaction_c.class).get(
						new Object[]{m_satisfaction_id});
				if (relInst39828 != null)
					break;
			}
		}
		//synchronized
		if (relInst39828 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39828) && !isProxy())) {
				relInst39828.relateAcrossR9001To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R9001
		// CP_CP
		inst = ComponentPackage;
		unrelateAcrossR9001From(ComponentPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// C_SF
		inst = Satisfaction;
		unrelateAcrossR9001From(Satisfaction, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SatisfactionInComponentPackage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SatisfactionInComponentPackage_c inst = (SatisfactionInComponentPackage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SatisfactionInComponentPackage_c SatisfactionInComponentPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SatisfactionInComponentPackage_c result = findSatisfactionInComponentPackageInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static SatisfactionInComponentPackage_c findSatisfactionInComponentPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SatisfactionInComponentPackage_c x = (SatisfactionInComponentPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static SatisfactionInComponentPackage_c SatisfactionInComponentPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SatisfactionInComponentPackageInstance(modelRoot, test, true);
	}

	public static SatisfactionInComponentPackage_c SatisfactionInComponentPackageInstance(
			ModelRoot modelRoot) {
		return SatisfactionInComponentPackageInstance(modelRoot, null, true);
	}

	public static SatisfactionInComponentPackage_c[] SatisfactionInComponentPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SatisfactionInComponentPackage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SatisfactionInComponentPackage_c x = (SatisfactionInComponentPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SatisfactionInComponentPackage_c[] ret_set = new SatisfactionInComponentPackage_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SatisfactionInComponentPackage_c[0];
			}
		}
	}
	public static SatisfactionInComponentPackage_c[] SatisfactionInComponentPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SatisfactionInComponentPackageInstances(modelRoot, test, true);
	}
	public static SatisfactionInComponentPackage_c[] SatisfactionInComponentPackageInstances(
			ModelRoot modelRoot) {
		return SatisfactionInComponentPackageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Satisfaction In Component Package.dispose call: ";
		Satisfaction_c testR9001Inst = Satisfaction_c.getOneC_SFOnR9001(this,
				false);

		if (testR9001Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "9001 ";
		}

		ComponentPackage_c testR9001InstOth = ComponentPackage_c
				.getOneCP_CPOnR9001(this, false);

		if (testR9001InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "9001 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Satisfaction In Component Package", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("componentpackage_id")) {
			return true;
		}
		if (attributeName.equals("satisfaction_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getComponentpackage_idLongBased() {
		if (ComponentPackage != null) {
			return ComponentPackage.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getComponentpackage_id() {
		if (ComponentPackage != null) {
			return ComponentPackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getComponentpackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_componentpackage_id))
			return m_componentpackage_id;
		else
			return getComponentpackage_id();
	}

	public void setComponentpackage_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_componentpackage_id)) {
				return;
			}
		} else if (m_componentpackage_id != null) {
			if (m_componentpackage_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Componentpackage_id", m_componentpackage_id, newValue, false);
		m_componentpackage_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSatisfaction_idLongBased() {
		if (Satisfaction != null) {
			return Satisfaction.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getSatisfaction_id() {
		if (Satisfaction != null) {
			return Satisfaction.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSatisfaction_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_satisfaction_id))
			return m_satisfaction_id;
		else
			return getSatisfaction_id();
	}

	public void setSatisfaction_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_satisfaction_id)) {
				return;
			}
		} else if (m_satisfaction_id != null) {
			if (m_satisfaction_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Satisfaction_id", m_satisfaction_id, newValue, false);
		m_satisfaction_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION,
						"Satisfaction In Component Package", //$NON-NLS-1$
						" Operation entered: Satisfaction In Component Package::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SatisfactionInComponentPackage_c[] objs = SatisfactionInComponentPackage_c
				.SatisfactionInComponentPackageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION,
						"Satisfaction In Component Package", //$NON-NLS-1$
						" Operation entered: Satisfaction In Component Package::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SatisfactionInComponentPackage_c_test39832_c
				implements
					ClassQueryInterface_c {
			SatisfactionInComponentPackage_c_test39832_c(java.util.UUID p39833,
					java.util.UUID p39834) {
				m_p39833 = p39833;
				m_p39834 = p39834;
			}
			private java.util.UUID m_p39833;
			private java.util.UUID m_p39834;
			public boolean evaluate(Object candidate) {
				SatisfactionInComponentPackage_c selected = (SatisfactionInComponentPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getComponentpackage_id().equals(m_p39833))
						& (selected.getSatisfaction_id().equals(m_p39834));
				return retval;
			}
		}

		SatisfactionInComponentPackage_c[] objs39831 = SatisfactionInComponentPackage_c
				.SatisfactionInComponentPackageInstances(modelRoot,
						new SatisfactionInComponentPackage_c_test39832_c(
								getComponentpackage_id(), getSatisfaction_id()));

		if (((objs39831.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Satisfaction In Component Package", //$NON-NLS-1$
								"Consistency: Object: Satisfaction In Component Package: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39831.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Satisfaction In Component Package: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39831.length), e);
			}
			retval = false;

		}

		if (((objs39831.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Satisfaction In Component Package", //$NON-NLS-1$
								"Consistency: Object: Satisfaction In Component Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39831.length)
										+ " ComponentPackage_ID: " + "Not Printable" + " Satisfaction_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Satisfaction In Component Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39831.length)
										+ " ComponentPackage_ID: " + "Not Printable" + " Satisfaction_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Satisfaction In Component Package is a link class in association: rel.Numb = 9001
		// Other side
		// The other side class in the association is: Component Package
		class ComponentPackage_c_test39836_c implements ClassQueryInterface_c {
			ComponentPackage_c_test39836_c(java.util.UUID p39837) {
				m_p39837 = p39837;
			}
			private java.util.UUID m_p39837;
			public boolean evaluate(Object candidate) {
				ComponentPackage_c selected = (ComponentPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p39837));
				return retval;
			}
		}

		ComponentPackage_c[] objs39835 = ComponentPackage_c
				.ComponentPackageInstances(modelRoot,
						new ComponentPackage_c_test39836_c(
								getComponentpackage_id()));

		if (((objs39835.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Satisfaction In Component Package", //$NON-NLS-1$
								"Consistency: Object: Satisfaction In Component Package: Association: 9001: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39835.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Satisfaction In Component Package: Association: 9001: Cardinality of other side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39835.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Satisfaction In Component Package
