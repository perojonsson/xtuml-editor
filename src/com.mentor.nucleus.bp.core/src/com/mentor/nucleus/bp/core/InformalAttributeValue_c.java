package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InformalAttributeValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_INFORMAL_ATTRIBUTE_VALUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class InformalAttributeValue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public InformalAttributeValue_c(ModelRoot modelRoot,
			java.util.UUID p_m_av_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_av_id = IdAssigner.preprocessUUID(p_m_av_id);

		Object[] key = {m_av_id};
		addInstanceToMap(key);
	}
	static public InformalAttributeValue_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_av_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);
		InformalAttributeValue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_av_id};
			new_inst = (InformalAttributeValue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_av_id = IdAssigner.preprocessUUID(p_m_av_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new InformalAttributeValue_c(modelRoot, p_m_av_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public InformalAttributeValue_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_av_id) {
		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);
		InformalAttributeValue_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_av_id};
			source = (InformalAttributeValue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_av_id = IdAssigner.preprocessUUID(p_m_av_id);

				return source;
			}
		}
		// there is no instance matching the id
		InformalAttributeValue_c new_inst = new InformalAttributeValue_c(
				modelRoot, p_m_av_id);
		return new_inst;
	}
	public InformalAttributeValue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_av_id = IdAssigner.NULL_UUID;
		Object[] key = {m_av_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_av_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_av_id != p_newKey) {

			m_av_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof InformalAttributeValue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof InformalAttributeValue_c)) {
			return false;
		}

		InformalAttributeValue_c me = (InformalAttributeValue_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAv_id()) || IdAssigner.NULL_UUID
						.equals(((InformalAttributeValue_c) elem).getAv_id())) && this != elem)) {
			return false;
		}
		if (!getAv_id().equals(((InformalAttributeValue_c) elem).getAv_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof InformalAttributeValue_c)) {
			return false;
		}

		InformalAttributeValue_c me = (InformalAttributeValue_c) elem;
		if (!getAv_idCachedValue().equals(
				((InformalAttributeValue_c) elem).getAv_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_av_id;

	// declare association references from this class

	// referring navigation

	InstanceAttributeValue_c IsSupertypeInstanceAttributeValue;
	public void relateAcrossR948To(InstanceAttributeValue_c target) {
		relateAcrossR948To(target, true);
	}
	public void relateAcrossR948To(InstanceAttributeValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeInstanceAttributeValue)
			return; // already related

		if (IsSupertypeInstanceAttributeValue != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeInstanceAttributeValue != null) {

				IsSupertypeInstanceAttributeValue.clearBackPointerR948To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InformalAttributeValue_c.relateAcrossR948To(InstanceAttributeValue_c target)",
									"Relate performed across R948 from Informal Attribute Value to Instance Attribute Value without unrelate of prior instance.");
				}
			}

			IsSupertypeInstanceAttributeValue = target;
			m_av_id = target.getAv_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR948To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "948", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR948From(InstanceAttributeValue_c target) {
		unrelateAcrossR948From(target, true);
	}
	public void unrelateAcrossR948From(InstanceAttributeValue_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeInstanceAttributeValue == null)
			return; // already unrelated

		if (target != IsSupertypeInstanceAttributeValue) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R948",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR948To(this);
		}

		if (IsSupertypeInstanceAttributeValue != null) {

			m_av_id = IsSupertypeInstanceAttributeValue.getAv_id();
			IsSupertypeInstanceAttributeValue = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "948", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			InstanceAttributeValue_c[] targets) {
		return getOneSQ_IAVOnR948(targets, null);
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			InstanceAttributeValue_c[] targets, ClassQueryInterface_c test) {
		InformalAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_IAVOnR948(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			InstanceAttributeValue_c target) {
		return getOneSQ_IAVOnR948(target, null);
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			InstanceAttributeValue_c target, boolean loadComponent) {
		return getOneSQ_IAVOnR948(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			InstanceAttributeValue_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_IAVOnR948(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			ModelRoot modelRoot, InstanceAttributeValue_c target,
			ClassQueryInterface_c test) {
		return getOneSQ_IAVOnR948(modelRoot, target, test, true);
	}

	public static InformalAttributeValue_c getOneSQ_IAVOnR948(
			ModelRoot modelRoot, InstanceAttributeValue_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_IAVOnR948(modelRoot, target, test);
	}
	private static InformalAttributeValue_c find_getOneSQ_IAVOnR948(
			ModelRoot modelRoot, InstanceAttributeValue_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			InformalAttributeValue_c source = (InformalAttributeValue_c) target.backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c[] targets) {
		return getManySQ_IAVsOnR948(targets, null);
	}
	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c[] targets, boolean loadComponent) {
		return getManySQ_IAVsOnR948(targets, null, loadComponent);
	}
	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_IAVsOnR948(targets, test, true);
	}

	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InformalAttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			InformalAttributeValue_c source = (InformalAttributeValue_c) targets[i].backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			InformalAttributeValue_c[] ret_set = new InformalAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InformalAttributeValue_c[0];
		}
	}

	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c target) {
		if (target != null) {
			InstanceAttributeValue_c[] targetArray = new InstanceAttributeValue_c[1];
			targetArray[0] = target;
			return getManySQ_IAVsOnR948(targetArray);
		} else {
			InformalAttributeValue_c[] result = new InformalAttributeValue_c[0];
			return result;
		}
	}

	public static InformalAttributeValue_c[] getManySQ_IAVsOnR948(
			InstanceAttributeValue_c target, boolean loadComponent) {
		if (target != null) {
			InstanceAttributeValue_c[] targetArray = new InstanceAttributeValue_c[1];
			targetArray[0] = target;
			return getManySQ_IAVsOnR948(targetArray, loadComponent);
		} else {
			InformalAttributeValue_c[] result = new InformalAttributeValue_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R948
		InstanceAttributeValue_c relInst40555 = (InstanceAttributeValue_c) baseRoot
				.getInstanceList(InstanceAttributeValue_c.class).get(
						new Object[]{m_av_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst40555 == null) {
			relInst40555 = (InstanceAttributeValue_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(InstanceAttributeValue_c.class)
					.get(new Object[]{m_av_id});
		}
		if (relInst40555 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst40555 = (InstanceAttributeValue_c) roots[i]
						.getInstanceList(InstanceAttributeValue_c.class).get(
								new Object[]{m_av_id});
				if (relInst40555 != null)
					break;
			}
		}
		//synchronized
		if (relInst40555 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst40555) && !isProxy())) {
				relInst40555.relateAcrossR948To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R948
		// SQ_AV
		inst = IsSupertypeInstanceAttributeValue;
		unrelateAcrossR948From(IsSupertypeInstanceAttributeValue, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InformalAttributeValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InformalAttributeValue_c inst = (InformalAttributeValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static InformalAttributeValue_c InformalAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InformalAttributeValue_c result = findInformalAttributeValueInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					InformalAttributeValue_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findInformalAttributeValueInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static InformalAttributeValue_c findInformalAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InformalAttributeValue_c x = (InformalAttributeValue_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static InformalAttributeValue_c InformalAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InformalAttributeValueInstance(modelRoot, test, true);
	}

	public static InformalAttributeValue_c InformalAttributeValueInstance(
			ModelRoot modelRoot) {
		return InformalAttributeValueInstance(modelRoot, null, true);
	}

	public static InformalAttributeValue_c[] InformalAttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InformalAttributeValue_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(InformalAttributeValue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InformalAttributeValue_c x = (InformalAttributeValue_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				InformalAttributeValue_c[] ret_set = new InformalAttributeValue_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InformalAttributeValue_c[0];
			}
		}
	}
	public static InformalAttributeValue_c[] InformalAttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InformalAttributeValueInstances(modelRoot, test, true);
	}
	public static InformalAttributeValue_c[] InformalAttributeValueInstances(
			ModelRoot modelRoot) {
		return InformalAttributeValueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Informal Attribute Value.dispose call: ";
		InstanceAttributeValue_c testR948Inst1 = InstanceAttributeValue_c
				.getOneSQ_AVOnR948(this, false);

		if (testR948Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "948 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Informal Attribute Value", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("av_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAv_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getAv_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAv_idLongBased() {
		if (IsSupertypeInstanceAttributeValue != null) {
			return IsSupertypeInstanceAttributeValue.getAv_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAv_id() {
		if (IsSupertypeInstanceAttributeValue != null) {
			return IsSupertypeInstanceAttributeValue.getAv_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeInstanceAttributeValue != null);

	}

	public java.util.UUID getAv_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_av_id))
			return m_av_id;
		else
			return getAv_id();
	}

	public void setAv_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_av_id)) {
				return;
			}
		} else if (m_av_id != null) {
			if (m_av_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Av_id",
				m_av_id, newValue, true);
		m_av_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Informal Attribute Value", //$NON-NLS-1$
						" Operation entered: Informal Attribute Value::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		InformalAttributeValue_c[] objs = InformalAttributeValue_c
				.InformalAttributeValueInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Informal Attribute Value", //$NON-NLS-1$
						" Operation entered: Informal Attribute Value::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class InformalAttributeValue_c_test40557_c
				implements
					ClassQueryInterface_c {
			InformalAttributeValue_c_test40557_c(java.util.UUID p40558) {
				m_p40558 = p40558;
			}
			private java.util.UUID m_p40558;
			public boolean evaluate(Object candidate) {
				InformalAttributeValue_c selected = (InformalAttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getAv_id().equals(m_p40558));
				return retval;
			}
		}

		InformalAttributeValue_c[] objs40556 = InformalAttributeValue_c
				.InformalAttributeValueInstances(modelRoot,
						new InformalAttributeValue_c_test40557_c(getAv_id()));

		if (((objs40556.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Informal Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Informal Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40556.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Informal Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40556.length), e);
			}
			retval = false;

		}

		if (((objs40556.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Informal Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Informal Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40556.length)
										+ " Av_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Informal Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40556.length)
										+ " Av_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Informal Attribute Value is a subtype in association: rel.Numb = 948
		// The supertype class is: Instance Attribute Value
		class InstanceAttributeValue_c_test40562_c
				implements
					ClassQueryInterface_c {
			InstanceAttributeValue_c_test40562_c(java.util.UUID p40563) {
				m_p40563 = p40563;
			}
			private java.util.UUID m_p40563;
			public boolean evaluate(Object candidate) {
				InstanceAttributeValue_c selected = (InstanceAttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getAv_id().equals(m_p40563));
				return retval;
			}
		}

		InstanceAttributeValue_c[] objs40561 = InstanceAttributeValue_c
				.InstanceAttributeValueInstances(modelRoot,
						new InstanceAttributeValue_c_test40562_c(getAv_id()));

		if (((objs40561.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Informal Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Informal Attribute Value: Association: 948: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40561.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Informal Attribute Value: Association: 948: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40561.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Informal Attribute Value
