      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.StructuredDataType_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_STRUCTURED_DATA_TYPE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class StructuredDataType_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public StructuredDataType_c(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    Object [] key = {m_dt_id};
    addInstanceToMap(key);
  }
  static public StructuredDataType_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
      StructuredDataType_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_dt_id};
          new_inst = (StructuredDataType_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new StructuredDataType_c(modelRoot,
p_m_dt_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public StructuredDataType_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_dt_id){
    InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
    StructuredDataType_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_dt_id
            };
        source = (StructuredDataType_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    StructuredDataType_c new_inst = new StructuredDataType_c(modelRoot,
p_m_dt_id
);
    return new_inst;
  }
  public StructuredDataType_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_dt_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_dt_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_dt_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_dt_id !=  p_newKey ){
	
		m_dt_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof StructuredDataType_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof StructuredDataType_c)) {
           return false;
       }
       
       StructuredDataType_c me = (StructuredDataType_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getDt_id()) || IdAssigner.NULL_UUID.equals(((StructuredDataType_c)elem).getDt_id())) && this != elem)) {
      	return false;
      }
      if (!getDt_id().equals(((StructuredDataType_c)elem).getDt_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof StructuredDataType_c)) {
           return false;
       }
       
       StructuredDataType_c me = (StructuredDataType_c)elem;
      if (!getDt_idCachedValue().equals(((StructuredDataType_c)elem).getDt_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataType_c IsSupertypeDataType ;
public void relateAcrossR17To(DataType_c target)
{
	relateAcrossR17To(target, true);
}
public void relateAcrossR17To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeDataType) return;  // already related

    if ( IsSupertypeDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeDataType != null) {
    
        IsSupertypeDataType.clearBackPointerR17To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"StructuredDataType_c.relateAcrossR17To(DataType_c target)", 
			"Relate performed across R17 from Structured Data Type to Data Type without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR17To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "17", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR17From(DataType_c target)
{
	unrelateAcrossR17From(target, true);
}
public void unrelateAcrossR17From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeDataType == null) return;  // already unrelated
	
	if (target != IsSupertypeDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R17", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR17To(this);
    }
    

      if(IsSupertypeDataType != null) {
      
        m_dt_id = IsSupertypeDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = IsSupertypeDataType.getDt_idCachedValue();
        }       
        IsSupertypeDataType = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "17", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static StructuredDataType_c getOneS_SDTOnR17(DataType_c [] targets)
{
    return getOneS_SDTOnR17(targets, null);
}

public static StructuredDataType_c getOneS_SDTOnR17(DataType_c [] targets, ClassQueryInterface_c test)
{
    StructuredDataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneS_SDTOnR17(targets[i], test);
        }
    }

    return ret_val;
}

public static StructuredDataType_c getOneS_SDTOnR17(DataType_c target)
{
  return getOneS_SDTOnR17(target, null);
}

public static StructuredDataType_c getOneS_SDTOnR17(DataType_c target, boolean loadComponent)
{
    return getOneS_SDTOnR17(target.getModelRoot(), target, null, loadComponent);
}

public static StructuredDataType_c getOneS_SDTOnR17(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneS_SDTOnR17(target.getModelRoot(), target, test);
  }
  return null;
}

public static StructuredDataType_c getOneS_SDTOnR17(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneS_SDTOnR17(modelRoot, target, test, true);
}

public static StructuredDataType_c getOneS_SDTOnR17(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneS_SDTOnR17(modelRoot,target,test);
}
private static StructuredDataType_c find_getOneS_SDTOnR17(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    StructuredDataType_c source = (StructuredDataType_c)target.backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c [] targets)
{
  return getManyS_SDTsOnR17(targets, null);
}
public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c [] targets, boolean loadComponent)
{
  return getManyS_SDTsOnR17(targets, null, loadComponent);
}
public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyS_SDTsOnR17(targets, test, true);
}

public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new StructuredDataType_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      StructuredDataType_c source = (StructuredDataType_c)targets[i].backPointer_IsSubtypeStructuredDataTypeIsSubtype_R17;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	StructuredDataType_c[] ret_set = new StructuredDataType_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new StructuredDataType_c[0];
  }
  }

public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c target)
{
  if (target != null) {
    DataType_c [] targetArray = new DataType_c[1];
    targetArray[0] = target;
    return getManyS_SDTsOnR17(targetArray);
  } else {
    StructuredDataType_c [] result = new StructuredDataType_c [0] ;
  return result ;
}
}

public static StructuredDataType_c [] getManyS_SDTsOnR17(DataType_c target, boolean loadComponent)
{
  if (target != null) {
    DataType_c [] targetArray = new DataType_c[1];
    targetArray[0] = target;
    return getManyS_SDTsOnR17(targetArray, loadComponent);
  } else {
    StructuredDataType_c [] result = new StructuredDataType_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<StructureMember_c> backPointer_HasMemberStructureMemberHasMember_R44 = new ArrayList<StructureMember_c>();

public void setStructureMemberOrderInChildListR44(StructureMember_c target, int index) {
	unrelateAcrossR44From(target);
	StructureMember_c[] elements = StructureMember_c.getManyS_MBRsOnR44(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR44From((StructureMember_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR44To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR44To((StructureMember_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR44To(StructureMember_c target)
{
  if (target != null) {
    target.relateAcrossR44To(this, true) ;
  }
}

public void relateAcrossR44To(StructureMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR44To(this, notifyChanges) ;
  }
}

public void setBackPointerR44To(StructureMember_c target)
{
  	synchronized (backPointer_HasMemberStructureMemberHasMember_R44) {
		backPointer_HasMemberStructureMemberHasMember_R44.add(target);
	}
}

public void unrelateAcrossR44From(StructureMember_c target)
{
  if (target != null) {
    target.unrelateAcrossR44From(this, true) ;
  }
}

public void unrelateAcrossR44From(StructureMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR44From(this, notifyChanges) ;
  }
}

public void clearBackPointerR44To(StructureMember_c target)
{
  synchronized (backPointer_HasMemberStructureMemberHasMember_R44) {
	    backPointer_HasMemberStructureMemberHasMember_R44.remove(target);
	}
}

public static StructuredDataType_c getOneS_SDTOnR44(StructureMember_c [] targets)
{
    return getOneS_SDTOnR44(targets, null);
}

public static StructuredDataType_c getOneS_SDTOnR44(StructureMember_c [] targets, ClassQueryInterface_c test)
{
    return getOneS_SDTOnR44(targets, test, true);
}

public static StructuredDataType_c getOneS_SDTOnR44(StructureMember_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StructuredDataType_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StructuredDataType_c candidate_val = getOneS_SDTOnR44(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneS_SDTOnR44(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StructuredDataType_c getOneS_SDTOnR44(StructureMember_c target)
{
	return getOneS_SDTOnR44(target, true);
}
public static StructuredDataType_c getOneS_SDTOnR44(StructureMember_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.HasParentStructuredDataType ;
  } else {
    return null;
  }
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyS_SDTsOnR44(targets, test, true);
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StructuredDataType_c[0];
  
  
  LinkedHashSet<StructuredDataType_c> elementsSet = new LinkedHashSet<StructuredDataType_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].HasParentStructuredDataType == null)
	  targets[i].loadProxy();
    StructuredDataType_c associate = targets[i].HasParentStructuredDataType;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StructuredDataType_c[] result = new StructuredDataType_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c [] targets)
{
  return getManyS_SDTsOnR44(targets, null);
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StructureMember_c [] targetArray = new StructureMember_c[1];
    targetArray[0] = target;
    return getManyS_SDTsOnR44(targetArray, test, loadComponent);
  } else {
    StructuredDataType_c [] result = new StructuredDataType_c [0] ;
    return result ;
  }
  
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c target,
    ClassQueryInterface_c test)
{
    return getManyS_SDTsOnR44(target, null, true);
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c target)
{
    return getManyS_SDTsOnR44(target, null, true);
}

public static StructuredDataType_c [] getManyS_SDTsOnR44(StructureMember_c target, boolean loadComponent)
{
    return getManyS_SDTsOnR44(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R17
      DataType_c relInst56327 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56327 == null) {
      			relInst56327 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst56327 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56327 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst56327 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56327 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56327) && !isProxy())) {
	      relInst56327.relateAcrossR17To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R17
      // S_DT
		  inst=IsSupertypeDataType;
			unrelateAcrossR17From(IsSupertypeDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final StructuredDataType_c inst = (StructuredDataType_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static StructuredDataType_c StructuredDataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		StructuredDataType_c result=findStructuredDataTypeInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,StructuredDataType_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findStructuredDataTypeInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static StructuredDataType_c findStructuredDataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				StructuredDataType_c x = (StructuredDataType_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static StructuredDataType_c StructuredDataTypeInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return StructuredDataTypeInstance(modelRoot,test,true);
  }
  
  public static StructuredDataType_c StructuredDataTypeInstance(ModelRoot modelRoot)
  {
	 return StructuredDataTypeInstance(modelRoot,null,true);
  }

  public static StructuredDataType_c [] StructuredDataTypeInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, StructuredDataType_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(StructuredDataType_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					StructuredDataType_c x = (StructuredDataType_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				StructuredDataType_c[] ret_set = new StructuredDataType_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new StructuredDataType_c[0];
			}		
		} 
  }
  public static StructuredDataType_c [] StructuredDataTypeInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  StructuredDataTypeInstances(modelRoot,test,true);
  }
  public static StructuredDataType_c [] StructuredDataTypeInstances(ModelRoot modelRoot)
  {
	return StructuredDataTypeInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Structured Data Type.dispose call: ";
	DataType_c testR17Inst4 = DataType_c.getOneS_DTOnR17(this, false);

	if ( testR17Inst4 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "17 ";
	}
	StructureMember_c testR44Inst = StructureMember_c.getOneS_MBROnR44(this, false);

	if ( testR44Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "44 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Structured Data Type", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getDt_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getDt_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getDt_idLongBased()
  {
    if ( IsSupertypeDataType != null )
    {
      return IsSupertypeDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( IsSupertypeDataType != null )
    {
      return IsSupertypeDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeDataType != null );
 
 }                  

  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dt_id)){
	        return;
	    }
	}else if(m_dt_id != null){
	    if(m_dt_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dt_id", m_dt_id, newValue,true); 
   m_dt_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Structured Data Type", //$NON-NLS-1$
	  " Operation entered: Structured Data Type::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     StructuredDataType_c [] objs = StructuredDataType_c.StructuredDataTypeInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Structured Data Type", //$NON-NLS-1$
	  " Operation entered: Structured Data Type::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class StructuredDataType_c_test56329_c implements ClassQueryInterface_c
    {
	  StructuredDataType_c_test56329_c( java.util.UUID            p56330 ) {
	  m_p56330 = p56330;
	  }
	  private java.util.UUID             m_p56330; 
	  public boolean evaluate (Object candidate)
	  {
	      StructuredDataType_c selected = (StructuredDataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56330));
	      return retval;
	  }
    }

    StructuredDataType_c [] objs56328 = 
    StructuredDataType_c.StructuredDataTypeInstances(modelRoot, new StructuredDataType_c_test56329_c(getDt_id())) ;

    if ( (  (objs56328.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Structured Data Type", //$NON-NLS-1$
           "Consistency: Object: Structured Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56328.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Structured Data Type: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56328.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56328.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Structured Data Type", //$NON-NLS-1$
           "Consistency: Object: Structured Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56328.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Structured Data Type: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56328.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Structured Data Type is a subtype in association: rel.Numb = 17
          // The supertype class is: Data Type
    class DataType_c_test56334_c implements ClassQueryInterface_c
    {
	  DataType_c_test56334_c( java.util.UUID            p56335 ) {
	  m_p56335 = p56335;
	  }
	  private java.util.UUID             m_p56335; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p56335));
	      return retval;
	  }
    }

    DataType_c [] objs56333 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test56334_c(getDt_id())) ;

    if ( (  (objs56333.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Structured Data Type", //$NON-NLS-1$
           "Consistency: Object: Structured Data Type: Association: 17: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56333.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Structured Data Type: Association: 17: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56333.length )  , e); 
      }
      retval = false;

    }

          // Structured Data Type is a participating class in association: rel.Numb = 44
             // Object: Structure Member
    return retval;
  }


  // declare transform functions
  public  void Newmember()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Newmember") ; 
               final ModelRoot modelRoot = getModelRoot();
StructureMember_c v_mbr = new StructureMember_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_mbr));


  this.relateAcrossR44To(v_mbr);


Domain_c v_dom = Domain_c.DomainInstance(modelRoot) ;


  class DataType_test55641_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return selected.getName().equals("integer") ;
	}
  }
DataType_c v_int_dt = DataType_c.getOneS_DTOnR14(v_dom, new DataType_test55641_c());


if ( (  (v_dom != null) &&   (v_int_dt == null)) )
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4606(ComponentPackage_c.getOneCP_CPOnR4608(Component_c.getOneC_COnR4204(DomainAsComponent_c.getOneCN_DCOnR4204(v_dom))));


java.util.UUID         v_intdt_id = Gd_c.Null_unique_id() ;


if (   (v_system != null) )
{

v_intdt_id = v_system.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_int_dt = DataType_c.getOneS_DTOnR8001(v_pe);



}

if ( (  (v_int_dt == null)) )
{

DataTypePackage_c v_dpkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(DataType_c.getOneS_DTOnR17(this)));


if ( (  (v_dpkg != null)) )
{

SystemModel_c v_sys = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(v_dpkg.Getsystemid());


java.util.UUID         v_intdt_id = Gd_c.Null_unique_id() ;


if (   (v_sys != null) )
{

v_intdt_id = v_sys.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_int_dt = DataType_c.getOneS_DTOnR8001(v_pe);



}

else
{

SystemModel_c v_sys = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(DataType_c.getOneS_DTOnR17(this))));


java.util.UUID         v_intdt_id = Gd_c.Null_unique_id() ;


if (   (v_sys != null) )
{

v_intdt_id = v_sys.Getcoretypeid(			    
"integer") ;



}

PackageableElement_c v_pe = (PackageableElement_c) modelRoot.getInstanceList(PackageableElement_c.class).getGlobal(null, v_intdt_id);


v_int_dt = DataType_c.getOneS_DTOnR8001(v_pe);


if ( (  (v_int_dt == null)) )
{

  class DataType_test55642_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		DataType_c selected = (DataType_c)candidate;
		return (selected.getName().equals("integer")) ;
	}
  }
v_int_dt = DataType_c.getOneS_DTOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR1405(v_sys)), new DataType_test55642_c());



}


}


}

if (v_mbr != null) {
  v_mbr.relateAcrossR45To(v_int_dt);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_mbr != null) {
v_mbr.Initialize(			    
"Unnamed Structured Member" ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newMember
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
StructureMember_c [] v_members = StructureMember_c.getManyS_MBRsOnR44(this);


StructureMember_c  v_member = null;
for ( int i54971 = 0; i54971 < v_members.length; i54971++)
{
  v_member = v_members[i54971] ;

this.unrelateAcrossR44From(v_member);


if (v_member != null) {
v_member.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);


this.unrelateAcrossR17From(v_dt);


if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


if ( (p_Comp_num == 1) )
{

if ( (p_At == Justification_c.Center_in_X) )
{

v_result = "«dataType»" ;


v_result = v_result + Gd_c.Newline() ;


DataType_c v_selfDt = DataType_c.getOneS_DTOnR17(this);


if ( (  (v_selfDt != null)) )
{

v_result = v_result + v_selfDt.getName() ;


PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(v_selfDt);


if (   (v_pe != null) )
{

v_result = v_pe.Getvisibilityadornment() + v_result ;



}


}

else
{

v_result = v_result + Ooaofooa.Getorphanedelementname(modelRoot) ;



}


}


}

else
{

  class StructureMember_test55643_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StructureMember_c selected = (StructureMember_c)candidate;
		return (selected.getPrevious_member_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
StructureMember_c v_member = StructureMember_c.getOneS_MBROnR44(this, new StructureMember_test55643_c());


if ( (p_At == Justification_c.Left) )
{

int          v_cursor = p_Ent_num ;


while ( (  (v_member != null) && v_cursor > 1) )
{

v_member = StructureMember_c.getOneS_MBROnR46Precedes(v_member);


v_cursor = v_cursor - 1 ;



}

if ( (  (v_member == null)) )
{

return "";



}

v_result = v_member.getName() ;


v_result = v_result + v_member.getDimensions() ;


DataType_c v_dt = DataType_c.getOneS_DTOnR45(v_member);


if ( (  (v_dt != null)) )
{

v_result = v_result + ":" + v_dt.getName() ;



}


}


}

return v_result;



   } // End get_compartment_text
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
return 2;



   } // End get_compartments
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.Box;



   } // End get_style
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Comp_num == 1) )
{

return 1;



}

else
{

StructureMember_c [] v_members = StructureMember_c.getManyS_MBRsOnR44(this);


return   (v_members.length);



}


   } // End get_entries
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);


if ( (  (v_dt == null)) )
{

return "";



}

else
{

return v_dt.getName();



}


   } // End get_name
  public  void Rename(final String       p_New_name)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Rename") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);


if (v_dt != null) {
  v_dt.setName( p_New_name) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



   } // End rename
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getDt_id();



   } // End get_ooa_id
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( p_Value.equals("make public") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(DataType_c.getOneS_DTOnR17(this));


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Public;



}


}


}

if ( p_Value.equals("make protected") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(DataType_c.getOneS_DTOnR17(this));


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Protected;



}


}


}

if ( p_Value.equals("make private") )
{

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(DataType_c.getOneS_DTOnR17(this));


Package_c v_pkg = Package_c.getOneEP_PKGOnR8000(v_pe);


if (   (v_pkg != null) )
{

if (   (v_pe != null) )
{

return v_pe.getVisibility() != Visibility_c.Private;



}


}


}


}

return false;



   } // End actionFilter
  public  void Pastestructuremember(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Pastestructuremember") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StructureMember_test55479_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StructureMember_c selected = (StructureMember_c)candidate;
		return (selected.getMember_id().equals(p_Id)) ;
	}
  }
StructureMember_c v_member = StructureMember_c.StructureMemberInstance(modelRoot, new StructureMember_test55479_c()) ;


if ( (  (v_member != null)) )
{

StructuredDataType_c v_existingSDT = StructuredDataType_c.getOneS_SDTOnR44(v_member);


if ( (  (v_existingSDT != null)) )
{

if (v_member != null) {
v_member.unrelateAcrossR44From(v_existingSDT);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_member != null) {
  v_member.relateAcrossR44To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


Addmembertoorder(			    
v_member.getMember_id() ) ;



}


   } // End pasteStructureMember
  public  void Addmembertoorder(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Addmembertoorder") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StructureMember_test55480_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StructureMember_c selected = (StructureMember_c)candidate;
		return (selected.getMember_id().equals(p_Id)) ;
	}
  }
StructureMember_c v_member = StructureMember_c.StructureMemberInstance(modelRoot, new StructureMember_test55480_c()) ;


if ( (  (v_member != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


StructureMember_c [] v_peers = StructureMember_c.getManyS_MBRsOnR44(this);


StructureMember_c  v_peer = null;
for ( int i54972 = 0; i54972 < v_peers.length; i54972++)
{
  v_peer = v_peers[i54972] ;

if ( (v_peer != v_member) )
{

StructureMember_c v_predecessor = StructureMember_c.getOneS_MBROnR46Precedes(v_peer);


if ( (  (v_predecessor == null)) )
{

if (v_member != null) {
  v_member.relateAcrossR46ToSucceeds(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}


   } // End addMemberToOrder
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_dt));


Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(v_dt));


if ( (  !  (v_component == null)) )
{

java.util.UUID         v_pkgId = v_component.Getpackageid() ;


v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, v_pkgId);



}

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

DataType_c [] v_dts = DataType_c.getManyS_DTsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(Package_c.getManyEP_PKGsOnR8000(PackageableElement_c.getManyPE_PEsOnR8001(v_dt))));


if ( (  (v_dts.length == 0)) )
{

v_dts = DataType_c.getManyS_DTsOnR8001(PackageableElement_c.getManyPE_PEsOnR8003(Component_c.getManyC_CsOnR8003(PackageableElement_c.getManyPE_PEsOnR8001(v_dt))));



}

DataType_c  v_otherDt = null;
for ( int i54973 = 0; i54973 < v_dts.length; i54973++)
{
  v_otherDt = v_dts[i54973] ;

if ( (v_otherDt != v_dt && v_otherDt.getName().equals(v_dt.getName())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another data type under the same package with a " + "matching name."			    
,Converttoinstance()			    
,v_dt.getDt_id()			    
,v_dt.getName()			    
,v_dt.Getpath(			    
true			    
,"")			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  String       Getdescription()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Structured Data Type", " Operation entered: StructuredDataType::Getdescription") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR17(this);


return v_dt.getDescrip();



   } // End getDescription

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return StructuredDataTypeActionFilter.getSingleton();
    }
	  return null;
  }
} // end Structured Data Type
