      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.OperationInvocation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_OPERATION_INVOCATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class OperationInvocation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public OperationInvocation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_tfr_id,
       java.util.UUID         p_m_var_id,
       int          p_m_operationnamelinenumber,
       int          p_m_operationnamecolumn,
       int          p_m_modelclasskeyletterslinenumber,
       int          p_m_modelclasskeyletterscolumn)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       m_operationnamelinenumber = p_m_operationnamelinenumber;
       m_operationnamecolumn = p_m_operationnamecolumn;
       m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
       m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
        
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }
  static public OperationInvocation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_tfr_id,
       java.util.UUID         p_m_var_id,
       int          p_m_operationnamelinenumber,
       int          p_m_operationnamecolumn,
       int          p_m_modelclasskeyletterslinenumber,
       int          p_m_modelclasskeyletterscolumn, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
      OperationInvocation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_statement_id};
          new_inst = (OperationInvocation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       new_inst.m_operationnamelinenumber = p_m_operationnamelinenumber;
       new_inst.m_operationnamecolumn = p_m_operationnamecolumn;
       new_inst.m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
       new_inst.m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new OperationInvocation_c(modelRoot,
p_m_statement_id,
p_m_tfr_id,
p_m_var_id,
p_m_operationnamelinenumber,
p_m_operationnamecolumn,
p_m_modelclasskeyletterslinenumber,
p_m_modelclasskeyletterscolumn
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public OperationInvocation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_statement_id,
       java.util.UUID         p_m_tfr_id,
       java.util.UUID         p_m_var_id,
       int          p_m_operationnamelinenumber,
       int          p_m_operationnamecolumn,
       int          p_m_modelclasskeyletterslinenumber,
       int          p_m_modelclasskeyletterscolumn){
    InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
    OperationInvocation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_statement_id
            };
        source = (OperationInvocation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_statement_id = IdAssigner.preprocessUUID(p_m_statement_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_tfr_id = IdAssigner.preprocessUUID(p_m_tfr_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       source.m_operationnamelinenumber = p_m_operationnamelinenumber;
       source.m_operationnamecolumn = p_m_operationnamecolumn;
       source.m_modelclasskeyletterslinenumber = p_m_modelclasskeyletterslinenumber;
       source.m_modelclasskeyletterscolumn = p_m_modelclasskeyletterscolumn;
        
           return source ;
        }
      }
      // there is no instance matching the id
    OperationInvocation_c new_inst = new OperationInvocation_c(modelRoot,
p_m_statement_id,
p_m_tfr_id,
p_m_var_id,
p_m_operationnamelinenumber,
p_m_operationnamecolumn,
p_m_modelclasskeyletterslinenumber,
p_m_modelclasskeyletterscolumn
);
    return new_inst;
  }
  public OperationInvocation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_statement_id = IdAssigner.NULL_UUID;   
     m_tfr_id = IdAssigner.NULL_UUID;   
     m_var_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_statement_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_statement_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_statement_id !=  p_newKey ){
	
		m_statement_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof OperationInvocation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof OperationInvocation_c)) {
           return false;
       }
       
       OperationInvocation_c me = (OperationInvocation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getStatement_id()) || IdAssigner.NULL_UUID.equals(((OperationInvocation_c)elem).getStatement_id())) && this != elem)) {
      	return false;
      }
      if (!getStatement_id().equals(((OperationInvocation_c)elem).getStatement_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof OperationInvocation_c)) {
           return false;
       }
       
       OperationInvocation_c me = (OperationInvocation_c)elem;
      if (!getStatement_idCachedValue().equals(((OperationInvocation_c)elem).getStatement_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_statement_id ;
  private java.util.UUID         m_tfr_id ;
  private java.util.UUID         m_var_id ;
  private int          m_operationnamelinenumber ;
  private int          m_operationnamecolumn ;
  private int          m_modelclasskeyletterslinenumber ;
  private int          m_modelclasskeyletterscolumn ;
      
// declare association references from this class
  
  
    
// referring navigation

Variable_c HasTargetVariable ;
public void relateAcrossR667To(Variable_c target)
{
	relateAcrossR667To(target, true);
}
public void relateAcrossR667To(Variable_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasTargetVariable) return;  // already related

    if ( HasTargetVariable != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasTargetVariable != null) {
    
        HasTargetVariable.clearBackPointerR667To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"OperationInvocation_c.relateAcrossR667To(Variable_c target)", 
			"Relate performed across R667 from Operation Invocation to Variable without unrelate of prior instance.");  
		}
    }
                
    	HasTargetVariable = target ;
        m_var_id = target.getVar_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR667To(this);
        target.addRef();
    }
}
public void unrelateAcrossR667From(Variable_c target)
{
	unrelateAcrossR667From(target, true);
}
public void unrelateAcrossR667From(Variable_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasTargetVariable == null) return;  // already unrelated
	
	if (target != HasTargetVariable) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R667", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR667To(this);
    }
    

      if(HasTargetVariable != null) {
      
        m_var_id = HasTargetVariable.getVar_id();
        HasTargetVariable = null ;
        target.removeRef();
    }
}

  
    
      
public static OperationInvocation_c getOneACT_TFMOnR667(Variable_c [] targets)
{
    return getOneACT_TFMOnR667(targets, null);
}

public static OperationInvocation_c getOneACT_TFMOnR667(Variable_c [] targets, ClassQueryInterface_c test)
{
    OperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_TFMOnR667(targets[i], test);
        }
    }

    return ret_val;
}

public static OperationInvocation_c getOneACT_TFMOnR667(Variable_c target)
{
  return getOneACT_TFMOnR667(target, null);
}

public static OperationInvocation_c getOneACT_TFMOnR667(Variable_c target, boolean loadComponent)
{
    return getOneACT_TFMOnR667(target.getModelRoot(), target, null, loadComponent);
}

public static OperationInvocation_c getOneACT_TFMOnR667(Variable_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_TFMOnR667(target.getModelRoot(), target, test);
  }
  return null;
}

public static OperationInvocation_c getOneACT_TFMOnR667(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test)
{
	return getOneACT_TFMOnR667(modelRoot, target, test, true);
}

public static OperationInvocation_c getOneACT_TFMOnR667(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_TFMOnR667(modelRoot,target,test);
}
private static OperationInvocation_c find_getOneACT_TFMOnR667(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667) {
	    for ( int i = 0; i < target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.size(); ++i ) {
	      OperationInvocation_c source = (OperationInvocation_c)target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c [] targets)
{
  return getManyACT_TFMsOnR667(targets, null);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c [] targets, boolean loadComponent)
{
  return getManyACT_TFMsOnR667(targets, null, loadComponent);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR667(targets, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new OperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTargetOfOperationInvocationIsTargetOf_R667) {
	    for (int j = 0; j < targets[i].backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.size(); ++j) {
	      OperationInvocation_c source = (OperationInvocation_c)targets[i].backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new OperationInvocation_c[0];
  }
  }

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c target)
{
  return getManyACT_TFMsOnR667(target, null);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c target, boolean loadComponent)
{
  return getManyACT_TFMsOnR667(target, null, loadComponent);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c target, ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR667(target, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR667(Variable_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new OperationInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667) {
    for (int i = 0; i < target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.size(); ++i) {
      OperationInvocation_c source = (OperationInvocation_c)target.backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new OperationInvocation_c[0];
	}
  }


  
    
// referring navigation

Operation_c IsAnInvocationOfOperation ;
public void relateAcrossR673To(Operation_c target)
{
	relateAcrossR673To(target, true);
}
public void relateAcrossR673To(Operation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsAnInvocationOfOperation) return;  // already related

    if ( IsAnInvocationOfOperation != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsAnInvocationOfOperation != null) {
    
        IsAnInvocationOfOperation.clearBackPointerR673To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"OperationInvocation_c.relateAcrossR673To(Operation_c target)", 
			"Relate performed across R673 from Operation Invocation to Operation without unrelate of prior instance.");  
		}
    }
                
    	IsAnInvocationOfOperation = target ;
        m_tfr_id = target.getTfr_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR673To(this);
        target.addRef();
    }
}
public void unrelateAcrossR673From(Operation_c target)
{
	unrelateAcrossR673From(target, true);
}
public void unrelateAcrossR673From(Operation_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsAnInvocationOfOperation == null) return;  // already unrelated
	
	if (target != IsAnInvocationOfOperation) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R673", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR673To(this);
    }
    

      if(IsAnInvocationOfOperation != null) {
      
        m_tfr_id = IsAnInvocationOfOperation.getTfr_id();
        IsAnInvocationOfOperation = null ;
        target.removeRef();
    }
}

  
    
      
public static OperationInvocation_c getOneACT_TFMOnR673(Operation_c [] targets)
{
    return getOneACT_TFMOnR673(targets, null);
}

public static OperationInvocation_c getOneACT_TFMOnR673(Operation_c [] targets, ClassQueryInterface_c test)
{
    OperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_TFMOnR673(targets[i], test);
        }
    }

    return ret_val;
}

public static OperationInvocation_c getOneACT_TFMOnR673(Operation_c target)
{
  return getOneACT_TFMOnR673(target, null);
}

public static OperationInvocation_c getOneACT_TFMOnR673(Operation_c target, boolean loadComponent)
{
    return getOneACT_TFMOnR673(target.getModelRoot(), target, null, loadComponent);
}

public static OperationInvocation_c getOneACT_TFMOnR673(Operation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_TFMOnR673(target.getModelRoot(), target, test);
  }
  return null;
}

public static OperationInvocation_c getOneACT_TFMOnR673(ModelRoot modelRoot, Operation_c target, ClassQueryInterface_c test)
{
	return getOneACT_TFMOnR673(modelRoot, target, test, true);
}

public static OperationInvocation_c getOneACT_TFMOnR673(ModelRoot modelRoot, Operation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_TFMOnR673(modelRoot,target,test);
}
private static OperationInvocation_c find_getOneACT_TFMOnR673(ModelRoot modelRoot, Operation_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_OperationInvocation_R673) {
	    for ( int i = 0; i < target.backPointer_OperationInvocation_R673.size(); ++i ) {
	      OperationInvocation_c source = (OperationInvocation_c)target.backPointer_OperationInvocation_R673.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c [] targets)
{
  return getManyACT_TFMsOnR673(targets, null);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c [] targets, boolean loadComponent)
{
  return getManyACT_TFMsOnR673(targets, null, loadComponent);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR673(targets, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new OperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_OperationInvocation_R673) {
	    for (int j = 0; j < targets[i].backPointer_OperationInvocation_R673.size(); ++j) {
	      OperationInvocation_c source = (OperationInvocation_c)targets[i].backPointer_OperationInvocation_R673.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new OperationInvocation_c[0];
  }
  }

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c target)
{
  return getManyACT_TFMsOnR673(target, null);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c target, boolean loadComponent)
{
  return getManyACT_TFMsOnR673(target, null, loadComponent);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c target, ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR673(target, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR673(Operation_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new OperationInvocation_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_OperationInvocation_R673) {
    for (int i = 0; i < target.backPointer_OperationInvocation_R673.size(); ++i) {
      OperationInvocation_c source = (OperationInvocation_c)target.backPointer_OperationInvocation_R673.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new OperationInvocation_c[0];
	}
  }


  
    
// referring navigation

Statement_c IsSupertypeStatement ;
public void relateAcrossR603To(Statement_c target)
{
	relateAcrossR603To(target, true);
}
public void relateAcrossR603To(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeStatement) return;  // already related

    if ( IsSupertypeStatement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeStatement != null) {
    
        IsSupertypeStatement.clearBackPointerR603To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"OperationInvocation_c.relateAcrossR603To(Statement_c target)", 
			"Relate performed across R603 from Operation Invocation to Statement without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeStatement = target ;
        m_statement_id = target.getStatement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR603To(this);
        target.addRef();
    }
}
public void unrelateAcrossR603From(Statement_c target)
{
	unrelateAcrossR603From(target, true);
}
public void unrelateAcrossR603From(Statement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeStatement == null) return;  // already unrelated
	
	if (target != IsSupertypeStatement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R603", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR603To(this);
    }
    

      if(IsSupertypeStatement != null) {
      
        m_statement_id = IsSupertypeStatement.getStatement_id();
        IsSupertypeStatement = null ;
        target.removeRef();
    }
}

  
    
      
public static OperationInvocation_c getOneACT_TFMOnR603(Statement_c [] targets)
{
    return getOneACT_TFMOnR603(targets, null);
}

public static OperationInvocation_c getOneACT_TFMOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
    OperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneACT_TFMOnR603(targets[i], test);
        }
    }

    return ret_val;
}

public static OperationInvocation_c getOneACT_TFMOnR603(Statement_c target)
{
  return getOneACT_TFMOnR603(target, null);
}

public static OperationInvocation_c getOneACT_TFMOnR603(Statement_c target, boolean loadComponent)
{
    return getOneACT_TFMOnR603(target.getModelRoot(), target, null, loadComponent);
}

public static OperationInvocation_c getOneACT_TFMOnR603(Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneACT_TFMOnR603(target.getModelRoot(), target, test);
  }
  return null;
}

public static OperationInvocation_c getOneACT_TFMOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
	return getOneACT_TFMOnR603(modelRoot, target, test, true);
}

public static OperationInvocation_c getOneACT_TFMOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneACT_TFMOnR603(modelRoot,target,test);
}
private static OperationInvocation_c find_getOneACT_TFMOnR603(ModelRoot modelRoot, Statement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    OperationInvocation_c source = (OperationInvocation_c)target.backPointer_IsSubtypeOperationInvocationIsSubtype_R603;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c [] targets)
{
  return getManyACT_TFMsOnR603(targets, null);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c [] targets, boolean loadComponent)
{
  return getManyACT_TFMsOnR603(targets, null, loadComponent);
}
public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c [] targets, ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR603(targets, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new OperationInvocation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      OperationInvocation_c source = (OperationInvocation_c)targets[i].backPointer_IsSubtypeOperationInvocationIsSubtype_R603;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new OperationInvocation_c[0];
  }
  }

public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c target)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_TFMsOnR603(targetArray);
  } else {
    OperationInvocation_c [] result = new OperationInvocation_c [0] ;
  return result ;
}
}

public static OperationInvocation_c [] getManyACT_TFMsOnR603(Statement_c target, boolean loadComponent)
{
  if (target != null) {
    Statement_c [] targetArray = new Statement_c[1];
    targetArray[0] = target;
    return getManyACT_TFMsOnR603(targetArray, loadComponent);
  } else {
    OperationInvocation_c [] result = new OperationInvocation_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<ActualParameter_c> backPointer_TakesActualParameterTakes_R627 = new ArrayList<ActualParameter_c>();

public void setActualParameterOrderInChildListR627(ActualParameter_c target, int index) {
	unrelateAcrossR627From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR627(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR627From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR627To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR627To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR627To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR627To(this, true) ;
  }
}

public void relateAcrossR627To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR627To(this, notifyChanges) ;
  }
}

public void setBackPointerR627To(ActualParameter_c target)
{
  	synchronized (backPointer_TakesActualParameterTakes_R627) {
		backPointer_TakesActualParameterTakes_R627.add(target);
	}
}

public void unrelateAcrossR627From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR627From(this, true) ;
  }
}

public void unrelateAcrossR627From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR627From(this, notifyChanges) ;
  }
}

public void clearBackPointerR627To(ActualParameter_c target)
{
  synchronized (backPointer_TakesActualParameterTakes_R627) {
	    backPointer_TakesActualParameterTakes_R627.remove(target);
	}
}

public static OperationInvocation_c getOneACT_TFMOnR627(ActualParameter_c [] targets)
{
    return getOneACT_TFMOnR627(targets, null);
}

public static OperationInvocation_c getOneACT_TFMOnR627(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneACT_TFMOnR627(targets, test, true);
}

public static OperationInvocation_c getOneACT_TFMOnR627(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    OperationInvocation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             OperationInvocation_c candidate_val = getOneACT_TFMOnR627(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneACT_TFMOnR627(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static OperationInvocation_c getOneACT_TFMOnR627(ActualParameter_c target)
{
	return getOneACT_TFMOnR627(target, true);
}
public static OperationInvocation_c getOneACT_TFMOnR627(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OperationInvocation ;
  } else {
    return null;
  }
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyACT_TFMsOnR627(targets, test, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new OperationInvocation_c[0];
  
  
  LinkedHashSet<OperationInvocation_c> elementsSet = new LinkedHashSet<OperationInvocation_c>();
  for (int i = 0; i < targets.length; i++) {
    OperationInvocation_c associate = targets[i].OperationInvocation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  OperationInvocation_c[] result = new OperationInvocation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c [] targets)
{
  return getManyACT_TFMsOnR627(targets, null);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyACT_TFMsOnR627(targetArray, test, loadComponent);
  } else {
    OperationInvocation_c [] result = new OperationInvocation_c [0] ;
    return result ;
  }
  
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyACT_TFMsOnR627(target, null, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c target)
{
    return getManyACT_TFMsOnR627(target, null, true);
}

public static OperationInvocation_c [] getManyACT_TFMsOnR627(ActualParameter_c target, boolean loadComponent)
{
    return getManyACT_TFMsOnR627(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HasTargetVariable == null) {          
      // R667
      Variable_c relInst40321 = (Variable_c) baseRoot.getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40321 == null) {
      			relInst40321 = (Variable_c) Ooaofooa.getDefaultInstance().getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
      		}
			if (relInst40321 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40321 = (Variable_c) roots[i].getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
					if (relInst40321 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40321 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40321) && !isProxy())) {
	      relInst40321.relateAcrossR667To(this, notifyChanges);
	  }
	  }
	}
	          

	if (IsAnInvocationOfOperation == null) {          
      // R673
      Operation_c relInst40322 = (Operation_c) baseRoot.getInstanceList(Operation_c.class).get(new Object[] {m_tfr_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40322 == null) {
      			relInst40322 = (Operation_c) Ooaofooa.getDefaultInstance().getInstanceList(Operation_c.class).get(new Object[] {m_tfr_id});
      		}
			if (relInst40322 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40322 = (Operation_c) roots[i].getInstanceList(Operation_c.class).get(new Object[] {m_tfr_id});
					if (relInst40322 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40322 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40322) && !isProxy())) {
	      relInst40322.relateAcrossR673To(this, notifyChanges);
	  }
	  }
	}
	          

      // R603
      Statement_c relInst40323 = (Statement_c) baseRoot.getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst40323 == null) {
      			relInst40323 = (Statement_c) Ooaofooa.getDefaultInstance().getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
      		}
			if (relInst40323 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst40323 = (Statement_c) roots[i].getInstanceList(Statement_c.class).get(new Object[] {m_statement_id});
					if (relInst40323 != null)
						break;
				}
			}
			//synchronized
      if ( relInst40323 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst40323) && !isProxy())) {
	      relInst40323.relateAcrossR603To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R667
      // V_VAR
		  inst=HasTargetVariable;
			unrelateAcrossR667From(HasTargetVariable, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R673
      // O_TFR
		  inst=IsAnInvocationOfOperation;
			unrelateAcrossR673From(IsAnInvocationOfOperation, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R603
      // ACT_SMT
		  inst=IsSupertypeStatement;
			unrelateAcrossR603From(IsSupertypeStatement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final OperationInvocation_c inst = (OperationInvocation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static OperationInvocation_c OperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		OperationInvocation_c result=findOperationInvocationInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static OperationInvocation_c findOperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				OperationInvocation_c x = (OperationInvocation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static OperationInvocation_c OperationInvocationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return OperationInvocationInstance(modelRoot,test,true);
  }
  
  public static OperationInvocation_c OperationInvocationInstance(ModelRoot modelRoot)
  {
	 return OperationInvocationInstance(modelRoot,null,true);
  }

  public static OperationInvocation_c [] OperationInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(OperationInvocation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					OperationInvocation_c x = (OperationInvocation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				OperationInvocation_c[] ret_set = new OperationInvocation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new OperationInvocation_c[0];
			}		
		} 
  }
  public static OperationInvocation_c [] OperationInvocationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  OperationInvocationInstances(modelRoot,test,true);
  }
  public static OperationInvocation_c [] OperationInvocationInstances(ModelRoot modelRoot)
  {
	return OperationInvocationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Operation Invocation.dispose call: ";
	Variable_c testR667Inst = Variable_c.getOneV_VAROnR667(this, false);

	if ( testR667Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "667 ";
	}
	ActualParameter_c testR627Inst = ActualParameter_c.getOneV_PAROnR627(this, false);

	if ( testR627Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "627 ";	
	}
	Operation_c testR673Inst = Operation_c.getOneO_TFROnR673(this, false);

	if ( testR673Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "673 ";
	}
	Statement_c testR603Inst10 = Statement_c.getOneACT_SMTOnR603(this, false);

	if ( testR603Inst10 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "603 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Operation Invocation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("statement_id")){
         return true;
      }
      if(attributeName.equals("tfr_id")){
         return true;
      }
      if(attributeName.equals("var_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getStatement_idLongBased()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getStatement_id()
  {
    if ( IsSupertypeStatement != null )
    {
      return IsSupertypeStatement.getStatement_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeStatement != null );
 
 }                  

  public java.util.UUID getStatement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_statement_id) )
      return m_statement_id;
    else
      return getStatement_id();
  }
  
  public void setStatement_id(java.util.UUID newValue)
  {
   m_statement_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getTfr_idLongBased()
  {
    if ( IsAnInvocationOfOperation != null )
    {
      return IsAnInvocationOfOperation.getTfr_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getTfr_id()
  {
    if ( IsAnInvocationOfOperation != null )
    {
      return IsAnInvocationOfOperation.getTfr_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getTfr_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_tfr_id) )
      return m_tfr_id;
    else
      return getTfr_id();
  }
  
  public void setTfr_id(java.util.UUID newValue)
  {
   m_tfr_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getVar_idLongBased()
  {
    if ( HasTargetVariable != null )
    {
      return HasTargetVariable.getVar_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getVar_id()
  {
    if ( HasTargetVariable != null )
    {
      return HasTargetVariable.getVar_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getVar_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_var_id) )
      return m_var_id;
    else
      return getVar_id();
  }
  
  public void setVar_id(java.util.UUID newValue)
  {
   m_var_id = IdAssigner.preprocessUUID(newValue);
  }
  public int getOperationnamelinenumber()
  {
    return m_operationnamelinenumber ;
  }


  public void setOperationnamelinenumber(int newValue)
  {
   m_operationnamelinenumber = newValue ;
  }
  public int getOperationnamecolumn()
  {
    return m_operationnamecolumn ;
  }


  public void setOperationnamecolumn(int newValue)
  {
   m_operationnamecolumn = newValue ;
  }
  public int getModelclasskeyletterslinenumber()
  {
    return m_modelclasskeyletterslinenumber ;
  }


  public void setModelclasskeyletterslinenumber(int newValue)
  {
   m_modelclasskeyletterslinenumber = newValue ;
  }
  public int getModelclasskeyletterscolumn()
  {
    return m_modelclasskeyletterscolumn ;
  }


  public void setModelclasskeyletterscolumn(int newValue)
  {
   m_modelclasskeyletterscolumn = newValue ;
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Operation Invocation", //$NON-NLS-1$
	  " Operation entered: Operation Invocation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     OperationInvocation_c [] objs = OperationInvocation_c.OperationInvocationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Operation Invocation", //$NON-NLS-1$
	  " Operation entered: Operation Invocation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class OperationInvocation_c_test40325_c implements ClassQueryInterface_c
    {
	  OperationInvocation_c_test40325_c( java.util.UUID            p40326 ) {
	  m_p40326 = p40326;
	  }
	  private java.util.UUID             m_p40326; 
	  public boolean evaluate (Object candidate)
	  {
	      OperationInvocation_c selected = (OperationInvocation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40326));
	      return retval;
	  }
    }

    OperationInvocation_c [] objs40324 = 
    OperationInvocation_c.OperationInvocationInstances(modelRoot, new OperationInvocation_c_test40325_c(getStatement_id())) ;

    if ( (  (objs40324.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Operation Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40324.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Operation Invocation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40324.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs40324.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Operation Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40324.length )  + " Statement_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Operation Invocation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40324.length )  + " Statement_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Operation Invocation is a subtype in association: rel.Numb = 603
          // The supertype class is: Statement
    class Statement_c_test40330_c implements ClassQueryInterface_c
    {
	  Statement_c_test40330_c( java.util.UUID            p40331 ) {
	  m_p40331 = p40331;
	  }
	  private java.util.UUID             m_p40331; 
	  public boolean evaluate (Object candidate)
	  {
	      Statement_c selected = (Statement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getStatement_id().equals(m_p40331));
	      return retval;
	  }
    }

    Statement_c [] objs40329 = 
    Statement_c.StatementInstances(modelRoot, new Statement_c_test40330_c(getStatement_id())) ;

    if ( (  (objs40329.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Operation Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs40329.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Operation Invocation: Association: 603: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40329.length )  , e); 
      }
      retval = false;

    }

          // Operation Invocation is a referring class in association: rel.Numb = 673
          // The participating class is: Operation
    class Operation_c_test40333_c implements ClassQueryInterface_c
    {
	  Operation_c_test40333_c( java.util.UUID            p40334 ) {
	  m_p40334 = p40334;
	  }
	  private java.util.UUID             m_p40334; 
	  public boolean evaluate (Object candidate)
	  {
	      Operation_c selected = (Operation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getTfr_id().equals(m_p40334));
	      return retval;
	  }
    }

    Operation_c [] objs40332 = 
    Operation_c.OperationInstances(modelRoot, new Operation_c_test40333_c(getTfr_id())) ;

    if ( (  (objs40332.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Operation Invocation: Association: 673: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40332.length )  + " Tfr_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Operation Invocation: Association: 673: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40332.length )  + " Tfr_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Operation Invocation is a referring class in association: rel.Numb = 667
          // The participating class is: Variable
    class Variable_c_test40336_c implements ClassQueryInterface_c
    {
	  Variable_c_test40336_c( java.util.UUID            p40337 ) {
	  m_p40337 = p40337;
	  }
	  private java.util.UUID             m_p40337; 
	  public boolean evaluate (Object candidate)
	  {
	      Variable_c selected = (Variable_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p40337));
	      return retval;
	  }
    }

    Variable_c [] objs40335 = 
    Variable_c.VariableInstances(modelRoot, new Variable_c_test40336_c(getVar_id())) ;

    if ( (  (objs40335.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Operation Invocation", //$NON-NLS-1$
           "Consistency: Object: Operation Invocation: Association: 667: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs40335.length )  + " Var_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Operation Invocation: Association: 667: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs40335.length )  + " Var_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Operation Invocation is a participating class in association: rel.Numb = 627
             // Object: Actual Parameter
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Operation Invocation", " Operation entered: OperationInvocation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Operation_c v_tfr = Operation_c.getOneO_TFROnR673(this);


if ( (  !  (v_tfr == null)) )
{

this.unrelateAcrossR673From(v_tfr);



}

Variable_c v_var = Variable_c.getOneV_VAROnR667(this);


if ( (  (v_var != null)) )
{

this.unrelateAcrossR667From(v_var);



}

ActualParameter_c [] v_parm_set = ActualParameter_c.getManyV_PARsOnR627(this);


ActualParameter_c  v_parm = null;
for ( int i37265 = 0; i37265 < v_parm_set.length; i37265++)
{
  v_parm = v_parm_set[i37265] ;

this.unrelateAcrossR627From(v_parm);


if (v_parm != null) {
v_parm.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

delete() ;



   } // End dispose
  public  void Execute(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Operation Invocation", " Operation entered: OperationInvocation::Execute") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR698(OperationBody_c.getOneACT_OPBOnR696(Operation_c.getOneO_TFROnR673(this)));


Statement_c v_statement = Statement_c.getOneACT_SMTOnR602(Block_c.getManyACT_BLKsOnR601(v_body));


if ( (  (v_statement != null)) )
{

boolean      v_discard = Setupparametervalues(			    
p_Stack_frame_id) ;



}


   } // End execute
  public  boolean      Setupparametervalues(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Operation Invocation", " Operation entered: OperationInvocation::Setupparametervalues") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End setupParameterValues

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Operation Invocation
