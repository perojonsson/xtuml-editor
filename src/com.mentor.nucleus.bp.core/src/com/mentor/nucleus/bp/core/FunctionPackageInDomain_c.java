package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.FunctionPackageInDomain_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_FUNCTION_PACKAGE_IN_DOMAIN extends genericEvent_c {
	public abstract int getEvtcode();
}

public class FunctionPackageInDomain_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public FunctionPackageInDomain_c(ModelRoot modelRoot,
			java.util.UUID p_m_funpack_id, java.util.UUID p_m_dom_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_funpack_id = IdAssigner.preprocessUUID(p_m_funpack_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);

		Object[] key = {m_funpack_id, m_dom_id};
		addInstanceToMap(key);
	}
	static public FunctionPackageInDomain_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_funpack_id, java.util.UUID p_m_dom_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);
		FunctionPackageInDomain_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_funpack_id, p_m_dom_id};
			new_inst = (FunctionPackageInDomain_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_funpack_id = IdAssigner
						.preprocessUUID(p_m_funpack_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new FunctionPackageInDomain_c(modelRoot, p_m_funpack_id,
					p_m_dom_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public FunctionPackageInDomain_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_funpack_id,
			java.util.UUID p_m_dom_id) {
		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);
		FunctionPackageInDomain_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_funpack_id, p_m_dom_id};
			source = (FunctionPackageInDomain_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_funpack_id = IdAssigner.preprocessUUID(p_m_funpack_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);

				return source;
			}
		}
		// there is no instance matching the id
		FunctionPackageInDomain_c new_inst = new FunctionPackageInDomain_c(
				modelRoot, p_m_funpack_id, p_m_dom_id);
		return new_inst;
	}
	public FunctionPackageInDomain_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_funpack_id = IdAssigner.NULL_UUID;
		m_dom_id = IdAssigner.NULL_UUID;
		Object[] key = {m_funpack_id, m_dom_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_funpack_id, m_dom_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_funpack_id != p_newKey) {

			m_funpack_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof FunctionPackageInDomain_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof FunctionPackageInDomain_c)) {
			return false;
		}

		FunctionPackageInDomain_c me = (FunctionPackageInDomain_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getFunpack_id()) || IdAssigner.NULL_UUID
						.equals(((FunctionPackageInDomain_c) elem)
								.getFunpack_id())) && this != elem)) {
			return false;
		}
		if (!getFunpack_id().equals(
				((FunctionPackageInDomain_c) elem).getFunpack_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDom_id()) || IdAssigner.NULL_UUID
						.equals(((FunctionPackageInDomain_c) elem).getDom_id())) && this != elem)) {
			return false;
		}
		if (!getDom_id().equals(((FunctionPackageInDomain_c) elem).getDom_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof FunctionPackageInDomain_c)) {
			return false;
		}

		FunctionPackageInDomain_c me = (FunctionPackageInDomain_c) elem;
		if (!getFunpack_idCachedValue().equals(
				((FunctionPackageInDomain_c) elem).getFunpack_idCachedValue()))
			return false;
		if (!getDom_idCachedValue().equals(
				((FunctionPackageInDomain_c) elem).getDom_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_funpack_id;
	private java.util.UUID m_dom_id;

	// declare association references from this class

	// referring navigation

	Domain_c IsContainerDomain;
	public void relateAcrossR301To(Domain_c target) {
		relateAcrossR301To(target, true);
	}
	public void relateAcrossR301To(Domain_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsContainerDomain)
			return; // already related

		if (IsContainerDomain != target) {

			Object oldKey = getInstanceKey();

			if (IsContainerDomain != null) {
				UmlProblem.removeXtUMLProblem(this, IsContainerDomain);

				IsContainerDomain.clearBackPointerR301To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"FunctionPackageInDomain_c.relateAcrossR301To(Domain_c target)",
									"Relate performed across R301 from Function Package in Domain to Domain without unrelate of prior instance.");
				}
			}

			IsContainerDomain = target;
			m_dom_id = target.getDom_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR301To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "301", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR301From(Domain_c target) {
		unrelateAcrossR301From(target, true);
	}
	public void unrelateAcrossR301From(Domain_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsContainerDomain == null)
			return; // already unrelated

		if (target != IsContainerDomain) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R301",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR301To(this);
		}

		if (IsContainerDomain != null) {

			m_dom_id = IsContainerDomain.getDom_id();
			IsContainerDomain = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "301", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	FunctionPackage_c ContainsFunctionPackage;
	public void relateAcrossR301To(FunctionPackage_c target) {
		relateAcrossR301To(target, true);
	}
	public void relateAcrossR301To(FunctionPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ContainsFunctionPackage)
			return; // already related

		if (ContainsFunctionPackage != target) {

			Object oldKey = getInstanceKey();

			if (ContainsFunctionPackage != null) {
				UmlProblem.removeXtUMLProblem(this, ContainsFunctionPackage);

				ContainsFunctionPackage.clearBackPointerR301To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"FunctionPackageInDomain_c.relateAcrossR301To(FunctionPackage_c target)",
									"Relate performed across R301 from Function Package in Domain to Function Package without unrelate of prior instance.");
				}
			}

			ContainsFunctionPackage = target;
			m_funpack_id = target.getFunpack_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR301To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "301", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR301From(FunctionPackage_c target) {
		unrelateAcrossR301From(target, true);
	}
	public void unrelateAcrossR301From(FunctionPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ContainsFunctionPackage == null)
			return; // already unrelated

		if (target != ContainsFunctionPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R301",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR301To(this);
		}

		if (ContainsFunctionPackage != null) {

			m_funpack_id = ContainsFunctionPackage.getFunpack_id();
			ContainsFunctionPackage = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "301", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			Domain_c[] targets) {
		return getOnePL_FPIDOnR301(targets, null);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			Domain_c[] targets, ClassQueryInterface_c test) {
		FunctionPackageInDomain_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePL_FPIDOnR301(targets[i], test);
			}
		}

		return ret_val;
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(Domain_c target) {
		return getOnePL_FPIDOnR301(target, null);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			Domain_c target, boolean loadComponent) {
		return getOnePL_FPIDOnR301(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			Domain_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePL_FPIDOnR301(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test) {
		return getOnePL_FPIDOnR301(modelRoot, target, test, true);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		FunctionPackageInDomain_c result = null;

		result = find_getOnePL_FPIDOnR301(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					FunctionPackageInDomain_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOnePL_FPIDOnR301(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static FunctionPackageInDomain_c find_getOnePL_FPIDOnR301(
			ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsFunctionPackageInDomainContains_R301) {
				for (int i = 0; i < target.backPointer_ContainsFunctionPackageInDomainContains_R301
						.size(); ++i) {
					FunctionPackageInDomain_c source = (FunctionPackageInDomain_c) target.backPointer_ContainsFunctionPackageInDomainContains_R301
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c[] targets) {
		return getManyPL_FPIDsOnR301(targets, null);
	}
	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c[] targets, boolean loadComponent) {
		return getManyPL_FPIDsOnR301(targets, null, loadComponent);
	}
	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c[] targets, ClassQueryInterface_c test) {
		return getManyPL_FPIDsOnR301(targets, test, true);
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new FunctionPackageInDomain_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					FunctionPackageInDomain_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsFunctionPackageInDomainContains_R301) {
				for (int j = 0; j < targets[i].backPointer_ContainsFunctionPackageInDomainContains_R301
						.size(); ++j) {
					FunctionPackageInDomain_c source = (FunctionPackageInDomain_c) targets[i].backPointer_ContainsFunctionPackageInDomainContains_R301
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			FunctionPackageInDomain_c[] ret_set = new FunctionPackageInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new FunctionPackageInDomain_c[0];
		}
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c target) {
		return getManyPL_FPIDsOnR301(target, null);
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c target, boolean loadComponent) {
		return getManyPL_FPIDsOnR301(target, null, loadComponent);
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c target, ClassQueryInterface_c test) {
		return getManyPL_FPIDsOnR301(target, test, true);
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			Domain_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new FunctionPackageInDomain_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					FunctionPackageInDomain_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsFunctionPackageInDomainContains_R301) {
			for (int i = 0; i < target.backPointer_ContainsFunctionPackageInDomainContains_R301
					.size(); ++i) {
				FunctionPackageInDomain_c source = (FunctionPackageInDomain_c) target.backPointer_ContainsFunctionPackageInDomainContains_R301
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			FunctionPackageInDomain_c[] ret_set = new FunctionPackageInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new FunctionPackageInDomain_c[0];
		}
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			FunctionPackage_c[] targets) {
		return getOnePL_FPIDOnR301(targets, null);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			FunctionPackage_c[] targets, ClassQueryInterface_c test) {
		FunctionPackageInDomain_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOnePL_FPIDOnR301(targets[i], test);
			}
		}

		return ret_val;
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			FunctionPackage_c target) {
		return getOnePL_FPIDOnR301(target, null);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			FunctionPackage_c target, boolean loadComponent) {
		return getOnePL_FPIDOnR301(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			FunctionPackage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOnePL_FPIDOnR301(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			ModelRoot modelRoot, FunctionPackage_c target,
			ClassQueryInterface_c test) {
		return getOnePL_FPIDOnR301(modelRoot, target, test, true);
	}

	public static FunctionPackageInDomain_c getOnePL_FPIDOnR301(
			ModelRoot modelRoot, FunctionPackage_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		FunctionPackageInDomain_c result = null;

		result = find_getOnePL_FPIDOnR301(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					FunctionPackageInDomain_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOnePL_FPIDOnR301(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static FunctionPackageInDomain_c find_getOnePL_FPIDOnR301(
			ModelRoot modelRoot, FunctionPackage_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsContainerFunctionPackageInDomainIsContainer_R301) {
				for (int i = 0; i < target.backPointer_IsContainerFunctionPackageInDomainIsContainer_R301
						.size(); ++i) {
					FunctionPackageInDomain_c source = (FunctionPackageInDomain_c) target.backPointer_IsContainerFunctionPackageInDomainIsContainer_R301
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c[] targets) {
		return getManyPL_FPIDsOnR301(targets, null);
	}
	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c[] targets, boolean loadComponent) {
		return getManyPL_FPIDsOnR301(targets, null, loadComponent);
	}
	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c[] targets, ClassQueryInterface_c test) {
		return getManyPL_FPIDsOnR301(targets, test, true);
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new FunctionPackageInDomain_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					FunctionPackageInDomain_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsContainerFunctionPackageInDomainIsContainer_R301) {
				for (int j = 0; j < targets[i].backPointer_IsContainerFunctionPackageInDomainIsContainer_R301
						.size(); ++j) {
					FunctionPackageInDomain_c source = (FunctionPackageInDomain_c) targets[i].backPointer_IsContainerFunctionPackageInDomainIsContainer_R301
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			FunctionPackageInDomain_c[] ret_set = new FunctionPackageInDomain_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new FunctionPackageInDomain_c[0];
		}
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c target) {
		if (target != null) {
			FunctionPackage_c[] targetArray = new FunctionPackage_c[1];
			targetArray[0] = target;
			return getManyPL_FPIDsOnR301(targetArray);
		} else {
			FunctionPackageInDomain_c[] result = new FunctionPackageInDomain_c[0];
			return result;
		}
	}

	public static FunctionPackageInDomain_c[] getManyPL_FPIDsOnR301(
			FunctionPackage_c target, boolean loadComponent) {
		if (target != null) {
			FunctionPackage_c[] targetArray = new FunctionPackage_c[1];
			targetArray[0] = target;
			return getManyPL_FPIDsOnR301(targetArray, loadComponent);
		} else {
			FunctionPackageInDomain_c[] result = new FunctionPackageInDomain_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R301
		FunctionPackage_c relInst56796 = (FunctionPackage_c) baseRoot
				.getInstanceList(FunctionPackage_c.class).get(
						new Object[]{m_funpack_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56796 == null) {
			relInst56796 = (FunctionPackage_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(FunctionPackage_c.class)
					.get(new Object[]{m_funpack_id});
		}
		if (relInst56796 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56796 = (FunctionPackage_c) roots[i].getInstanceList(
						FunctionPackage_c.class)
						.get(new Object[]{m_funpack_id});
				if (relInst56796 != null)
					break;
			}
		}
		//synchronized
		if (relInst56796 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56796) && !isProxy())) {
				relInst56796.relateAcrossR301To(this, notifyChanges);
			}
		}

		Domain_c relInst56797 = (Domain_c) baseRoot.getInstanceList(
				Domain_c.class).get(new Object[]{m_dom_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56797 == null) {
			relInst56797 = (Domain_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Domain_c.class)
					.get(new Object[]{m_dom_id});
		}
		if (relInst56797 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56797 = (Domain_c) roots[i].getInstanceList(
						Domain_c.class).get(new Object[]{m_dom_id});
				if (relInst56797 != null)
					break;
			}
		}
		//synchronized
		if (relInst56797 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56797) && !isProxy())) {
				relInst56797.relateAcrossR301To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R301
		// S_FPK
		inst = ContainsFunctionPackage;
		unrelateAcrossR301From(ContainsFunctionPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// S_DOM
		inst = IsContainerDomain;
		unrelateAcrossR301From(IsContainerDomain, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(FunctionPackageInDomain_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final FunctionPackageInDomain_c inst = (FunctionPackageInDomain_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static FunctionPackageInDomain_c FunctionPackageInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		FunctionPackageInDomain_c result = findFunctionPackageInDomainInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					FunctionPackageInDomain_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findFunctionPackageInDomainInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static FunctionPackageInDomain_c findFunctionPackageInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				FunctionPackageInDomain_c x = (FunctionPackageInDomain_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static FunctionPackageInDomain_c FunctionPackageInDomainInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return FunctionPackageInDomainInstance(modelRoot, test, true);
	}

	public static FunctionPackageInDomain_c FunctionPackageInDomainInstance(
			ModelRoot modelRoot) {
		return FunctionPackageInDomainInstance(modelRoot, null, true);
	}

	public static FunctionPackageInDomain_c[] FunctionPackageInDomainInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					FunctionPackageInDomain_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(FunctionPackageInDomain_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				FunctionPackageInDomain_c x = (FunctionPackageInDomain_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				FunctionPackageInDomain_c[] ret_set = new FunctionPackageInDomain_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new FunctionPackageInDomain_c[0];
			}
		}
	}
	public static FunctionPackageInDomain_c[] FunctionPackageInDomainInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return FunctionPackageInDomainInstances(modelRoot, test, true);
	}
	public static FunctionPackageInDomain_c[] FunctionPackageInDomainInstances(
			ModelRoot modelRoot) {
		return FunctionPackageInDomainInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Function Package in Domain.dispose call: ";
		FunctionPackage_c testR301Inst = FunctionPackage_c.getOneS_FPKOnR301(
				this, false);

		if (testR301Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "301 ";
		}

		Domain_c testR301InstOth = Domain_c.getOneS_DOMOnR301(this, false);

		if (testR301InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "301 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Function Package in Domain", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("funpack_id")) {
			return true;
		}
		if (attributeName.equals("dom_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getFunpack_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getFunpack_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getDom_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDom_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getFunpack_idLongBased() {
		if (ContainsFunctionPackage != null) {
			return ContainsFunctionPackage.getFunpack_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getFunpack_id() {
		if (ContainsFunctionPackage != null) {
			return ContainsFunctionPackage.getFunpack_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getFunpack_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_funpack_id))
			return m_funpack_id;
		else
			return getFunpack_id();
	}

	public void setFunpack_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_funpack_id)) {
				return;
			}
		} else if (m_funpack_id != null) {
			if (m_funpack_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Funpack_id", m_funpack_id, newValue, true);
		m_funpack_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDom_idLongBased() {
		if (IsContainerDomain != null) {
			return IsContainerDomain.getDom_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getDom_id() {
		if (IsContainerDomain != null) {
			return IsContainerDomain.getDom_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDom_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_dom_id))
			return m_dom_id;
		else
			return getDom_id();
	}

	public void setDom_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_dom_id)) {
				return;
			}
		} else if (m_dom_id != null) {
			if (m_dom_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Dom_id", m_dom_id, newValue, true);
		m_dom_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Function Package in Domain", //$NON-NLS-1$
						" Operation entered: Function Package in Domain::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		FunctionPackageInDomain_c[] objs = FunctionPackageInDomain_c
				.FunctionPackageInDomainInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Function Package in Domain", //$NON-NLS-1$
						" Operation entered: Function Package in Domain::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class FunctionPackageInDomain_c_test56799_c
				implements
					ClassQueryInterface_c {
			FunctionPackageInDomain_c_test56799_c(java.util.UUID p56800,
					java.util.UUID p56801) {
				m_p56800 = p56800;
				m_p56801 = p56801;
			}
			private java.util.UUID m_p56800;
			private java.util.UUID m_p56801;
			public boolean evaluate(Object candidate) {
				FunctionPackageInDomain_c selected = (FunctionPackageInDomain_c) candidate;
				boolean retval = false;
				retval = (selected.getFunpack_id().equals(m_p56800))
						& (selected.getDom_id().equals(m_p56801));
				return retval;
			}
		}

		FunctionPackageInDomain_c[] objs56798 = FunctionPackageInDomain_c
				.FunctionPackageInDomainInstances(modelRoot,
						new FunctionPackageInDomain_c_test56799_c(
								getFunpack_id(), getDom_id()));

		if (((objs56798.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Function Package in Domain", //$NON-NLS-1$
								"Consistency: Object: Function Package in Domain: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56798.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Function Package in Domain: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56798.length), e);
			}
			retval = false;

		}

		if (((objs56798.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Function Package in Domain", //$NON-NLS-1$
								"Consistency: Object: Function Package in Domain: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56798.length)
										+ " FunPack_ID: " + "Not Printable" + " Dom_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Function Package in Domain: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56798.length)
										+ " FunPack_ID: " + "Not Printable" + " Dom_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Function Package in Domain is a link class in association: rel.Numb = 301
		// Other side
		// The other side class in the association is: Domain
		class Domain_c_test56805_c implements ClassQueryInterface_c {
			Domain_c_test56805_c(java.util.UUID p56806) {
				m_p56806 = p56806;
			}
			private java.util.UUID m_p56806;
			public boolean evaluate(Object candidate) {
				Domain_c selected = (Domain_c) candidate;
				boolean retval = false;
				retval = (selected.getDom_id().equals(m_p56806));
				return retval;
			}
		}

		Domain_c[] objs56804 = Domain_c.DomainInstances(modelRoot,
				new Domain_c_test56805_c(getDom_id()));

		// The other side class is unconditional
		// The multiplicity of the other side class is one
		if (((objs56804.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Function Package in Domain", //$NON-NLS-1$
								"Consistency: Object: Function Package in Domain: Association: 301: Cardinality of other side of link is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56804.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Function Package in Domain: Association: 301: Cardinality of other side of link is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56804.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Function Package in Domain
