      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Port_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_PORT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Port_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Port_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_component_id,
       String       p_m_name,
       int          p_m_mult,
       boolean      p_m_donotshowportoncanvas)
  {
    super(modelRoot);
       m_name = p_m_name;
       m_donotshowportoncanvas = p_m_donotshowportoncanvas;
       m_mult = p_m_mult;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public Port_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_component_id,
       String       p_m_name,
       int          p_m_mult,
       boolean      p_m_donotshowportoncanvas, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Port_c.class);
      Port_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (Port_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_name = p_m_name;
       new_inst.m_donotshowportoncanvas = p_m_donotshowportoncanvas;
       new_inst.m_mult = p_m_mult;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       new_inst.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Port_c(modelRoot,
p_m_id,
p_m_component_id,
p_m_name,
p_m_mult,
p_m_donotshowportoncanvas
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Port_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_component_id,
       String       p_m_name,
       int          p_m_mult,
       boolean      p_m_donotshowportoncanvas){
    InstanceList instances = modelRoot.getInstanceList(Port_c.class);
    Port_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (Port_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_name = p_m_name;
       source.m_donotshowportoncanvas = p_m_donotshowportoncanvas;
       source.m_mult = p_m_mult;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       //extract 28 bit value only            
       source.m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Port_c new_inst = new Port_c(modelRoot,
p_m_id,
p_m_component_id,
p_m_name,
p_m_mult,
p_m_donotshowportoncanvas
);
    return new_inst;
  }
  public Port_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_name = "";   
     m_id = idAssigner.createUUID();
     m_component_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Port_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Port_c)) {
           return false;
       }
       
       Port_c me = (Port_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((Port_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((Port_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Port_c)) {
           return false;
       }
       
       Port_c me = (Port_c)elem;
      if (!getId().equals(((Port_c)elem).getId())) return false;
      return true;
    }


  // Attributes
  private String       m_name ;
  private boolean      m_donotshowportoncanvas ;
  private int          m_mult ;
  private java.util.UUID         m_id ;
  private long m_idLongBased ;
  private java.util.UUID         m_component_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Component_c AppearsInComponent ;
public void relateAcrossR4010To(Component_c target)
{
	relateAcrossR4010To(target, true);
}
public void relateAcrossR4010To(Component_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == AppearsInComponent) return;  // already related

    if ( AppearsInComponent != target ) {
    
    Object oldKey = getInstanceKey();

    if (AppearsInComponent != null) {
    
        AppearsInComponent.clearBackPointerR4010To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Port_c.relateAcrossR4010To(Component_c target)", 
			"Relate performed across R4010 from Port to Component without unrelate of prior instance.");  
		}
    }
                
    	AppearsInComponent = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_component_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4010To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4010", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4010From(Component_c target)
{
	unrelateAcrossR4010From(target, true);
}
public void unrelateAcrossR4010From(Component_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (AppearsInComponent == null) return;  // already unrelated
	
	if (target != AppearsInComponent) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4010", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4010To(this);
    }
    

      if(AppearsInComponent != null) {
      
        m_component_id = AppearsInComponent.getId();
        if(IdAssigner.NULL_UUID.equals(m_component_id))
        {
          m_component_id = AppearsInComponent.getIdCachedValue();
        }       
        AppearsInComponent = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4010", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Port_c getOneC_POOnR4010(Component_c [] targets)
{
    return getOneC_POOnR4010(targets, null);
}

public static Port_c getOneC_POOnR4010(Component_c [] targets, ClassQueryInterface_c test)
{
    Port_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_POOnR4010(targets[i], test);
        }
    }

    return ret_val;
}

public static Port_c getOneC_POOnR4010(Component_c target)
{
  return getOneC_POOnR4010(target, null);
}

public static Port_c getOneC_POOnR4010(Component_c target, boolean loadComponent)
{
    return getOneC_POOnR4010(target.getModelRoot(), target, null, loadComponent);
}

public static Port_c getOneC_POOnR4010(Component_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_POOnR4010(target.getModelRoot(), target, test);
  }
  return null;
}

public static Port_c getOneC_POOnR4010(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test)
{
	return getOneC_POOnR4010(modelRoot, target, test, true);
}

public static Port_c getOneC_POOnR4010(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_POOnR4010(modelRoot,target,test);
}
private static Port_c find_getOneC_POOnR4010(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010) {
	    for ( int i = 0; i < target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.size(); ++i ) {
	      Port_c source = (Port_c)target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Port_c [] getManyC_POsOnR4010(Component_c [] targets)
{
  return getManyC_POsOnR4010(targets, null);
}
public static Port_c [] getManyC_POsOnR4010(Component_c [] targets, boolean loadComponent)
{
  return getManyC_POsOnR4010(targets, null, loadComponent);
}
public static Port_c [] getManyC_POsOnR4010(Component_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_POsOnR4010(targets, test, true);
}

public static Port_c [] getManyC_POsOnR4010(Component_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Port_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Port_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CommunicatesThroughPortCommunicatesThrough_R4010) {
	    for (int j = 0; j < targets[i].backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.size(); ++j) {
	      Port_c source = (Port_c)targets[i].backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Port_c[] ret_set = new Port_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Port_c[0];
  }
  }

public static Port_c [] getManyC_POsOnR4010(Component_c target)
{
  return getManyC_POsOnR4010(target, null);
}

public static Port_c [] getManyC_POsOnR4010(Component_c target, boolean loadComponent)
{
  return getManyC_POsOnR4010(target, null, loadComponent);
}

public static Port_c [] getManyC_POsOnR4010(Component_c target, ClassQueryInterface_c test)
{
	return getManyC_POsOnR4010(target, test, true);
}

public static Port_c [] getManyC_POsOnR4010(Component_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Port_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010) {
    for (int i = 0; i < target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.size(); ++i) {
      Port_c source = (Port_c)target.backPointer_CommunicatesThroughPortCommunicatesThrough_R4010.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Port_c[] ret_set = new Port_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Port_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<InterfaceReference_c> backPointer_ExposesInterfaceReferenceExposes_R4016 = new ArrayList<InterfaceReference_c>();

public void setInterfaceReferenceOrderInChildListR4016(InterfaceReference_c target, int index) {
	unrelateAcrossR4016From(target);
	InterfaceReference_c[] elements = InterfaceReference_c.getManyC_IRsOnR4016(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4016From((InterfaceReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4016To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4016To((InterfaceReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4016To(InterfaceReference_c target)
{
  if (target != null) {
    target.relateAcrossR4016To(this, true) ;
  }
}

public void relateAcrossR4016To(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4016To(this, notifyChanges) ;
  }
}

public void setBackPointerR4016To(InterfaceReference_c target)
{
  	synchronized (backPointer_ExposesInterfaceReferenceExposes_R4016) {
		backPointer_ExposesInterfaceReferenceExposes_R4016.add(target);
	}
}

public void unrelateAcrossR4016From(InterfaceReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR4016From(this, true) ;
  }
}

public void unrelateAcrossR4016From(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4016From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4016To(InterfaceReference_c target)
{
  synchronized (backPointer_ExposesInterfaceReferenceExposes_R4016) {
	    backPointer_ExposesInterfaceReferenceExposes_R4016.remove(target);
	}
}

public static Port_c getOneC_POOnR4016(InterfaceReference_c [] targets)
{
    return getOneC_POOnR4016(targets, null);
}

public static Port_c getOneC_POOnR4016(InterfaceReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_POOnR4016(targets, test, true);
}

public static Port_c getOneC_POOnR4016(InterfaceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Port_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Port_c candidate_val = getOneC_POOnR4016(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_POOnR4016(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Port_c getOneC_POOnR4016(InterfaceReference_c target)
{
	return getOneC_POOnR4016(target, true);
}
public static Port_c getOneC_POOnR4016(InterfaceReference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginatesFromPort ;
  } else {
    return null;
  }
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_POsOnR4016(targets, test, true);
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Port_c[0];
  
  
  LinkedHashSet<Port_c> elementsSet = new LinkedHashSet<Port_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginatesFromPort == null)
	  targets[i].loadProxy();
    Port_c associate = targets[i].OriginatesFromPort;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Port_c[] result = new Port_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c [] targets)
{
  return getManyC_POsOnR4016(targets, null);
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceReference_c [] targetArray = new InterfaceReference_c[1];
    targetArray[0] = target;
    return getManyC_POsOnR4016(targetArray, test, loadComponent);
  } else {
    Port_c [] result = new Port_c [0] ;
    return result ;
  }
  
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c target,
    ClassQueryInterface_c test)
{
    return getManyC_POsOnR4016(target, null, true);
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c target)
{
    return getManyC_POsOnR4016(target, null, true);
}

public static Port_c [] getManyC_POsOnR4016(InterfaceReference_c target, boolean loadComponent)
{
    return getManyC_POsOnR4016(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (AppearsInComponent == null) {          
      // R4010
      Component_c relInst56953 = (Component_c) baseRoot.getInstanceList(Component_c.class).get(new Object[] {m_component_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56953 == null) {
      			relInst56953 = (Component_c) Ooaofooa.getDefaultInstance().getInstanceList(Component_c.class).get(new Object[] {m_component_id});
      		}
			if (relInst56953 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56953 = (Component_c) roots[i].getInstanceList(Component_c.class).get(new Object[] {m_component_id});
					if (relInst56953 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56953 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56953) && !isProxy())) {
	      relInst56953.relateAcrossR4010To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4010
      // C_C
		  inst=AppearsInComponent;
			unrelateAcrossR4010From(AppearsInComponent, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Port_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Port_c inst = (Port_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Port_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Port_c PortInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Port_c result=findPortInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Port_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findPortInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Port_c findPortInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Port_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Port_c x = (Port_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Port_c PortInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return PortInstance(modelRoot,test,true);
  }
  
  public static Port_c PortInstance(ModelRoot modelRoot)
  {
	 return PortInstance(modelRoot,null,true);
  }

  public static Port_c [] PortInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Port_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Port_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Port_c x = (Port_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Port_c[] ret_set = new Port_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Port_c[0];
			}		
		} 
  }
  public static Port_c [] PortInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  PortInstances(modelRoot,test,true);
  }
  public static Port_c [] PortInstances(ModelRoot modelRoot)
  {
	return PortInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Port.dispose call: ";
	Component_c testR4010Inst = Component_c.getOneC_COnR4010(this, false);

	if ( testR4010Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4010 ";
	}
	InterfaceReference_c testR4016Inst = InterfaceReference_c.getOneC_IROnR4016(this, false);

	if ( testR4016Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4016 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Port", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      if(attributeName.equals("component_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public boolean getDonotshowportoncanvas()
  {
    return m_donotshowportoncanvas ;
  }


  public void setDonotshowportoncanvas(boolean newValue)
  {
    if(m_donotshowportoncanvas == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Donotshowportoncanvas", new Boolean(m_donotshowportoncanvas), new Boolean(newValue),true);

   m_donotshowportoncanvas = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getMult()
  {
    return m_mult ;
  }


  public void setMult(int newValue)
  {
    if(m_mult == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Mult", new Integer(m_mult), new Integer(newValue),true);

   m_mult = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if(m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)){
    	return 0xfffffff & m_id.getLeastSignificantBits();
    }
    return m_idLongBased ;
  }
  public java.util.UUID getId()
  {
    return m_id ;
  }


  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getComponent_idLongBased()
  {
    if ( AppearsInComponent != null )
    {
      return AppearsInComponent.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getComponent_id()
  {
    if ( AppearsInComponent != null )
    {
      return AppearsInComponent.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getComponent_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_component_id) )
      return m_component_id;
    else
      return getComponent_id();
  }
  
  public void setComponent_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_component_id)){
	        return;
	    }
	}else if(m_component_id != null){
	    if(m_component_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Component_id", m_component_id, newValue,true); 
   m_component_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Port", //$NON-NLS-1$
	  " Operation entered: Port::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Port_c [] objs = Port_c.PortInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Port", //$NON-NLS-1$
	  " Operation entered: Port::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Port_c_test56955_c implements ClassQueryInterface_c
    {
	  Port_c_test56955_c( java.util.UUID            p56956 ) {
	  m_p56956 = p56956;
	  }
	  private java.util.UUID             m_p56956; 
	  public boolean evaluate (Object candidate)
	  {
	      Port_c selected = (Port_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56956));
	      return retval;
	  }
    }

    Port_c [] objs56954 = 
    Port_c.PortInstances(modelRoot, new Port_c_test56955_c(getId())) ;

    if ( (  (objs56954.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Port", //$NON-NLS-1$
           "Consistency: Object: Port: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56954.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Port: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56954.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56954.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Port", //$NON-NLS-1$
           "Consistency: Object: Port: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56954.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Port: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56954.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Port is a referring class in association: rel.Numb = 4010
          // The participating class is: Component
    class Component_c_test56960_c implements ClassQueryInterface_c
    {
	  Component_c_test56960_c( java.util.UUID            p56961 ) {
	  m_p56961 = p56961;
	  }
	  private java.util.UUID             m_p56961; 
	  public boolean evaluate (Object candidate)
	  {
	      Component_c selected = (Component_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56961));
	      return retval;
	  }
    }

    Component_c [] objs56959 = 
    Component_c.ComponentInstances(modelRoot, new Component_c_test56960_c(getComponent_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs56959.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Port", //$NON-NLS-1$
           "Consistency: Object: Port: Association: 4010: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56959.length )  + " Component_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Port: Association: 4010: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56959.length )  + " Component_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Port is a participating class in association: rel.Numb = 4016
             // Object: Interface Reference
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c [] v_irs = InterfaceReference_c.getManyC_IRsOnR4016(this);


InterfaceReference_c  v_ir = null;
for ( int i55184 = 0; i55184 < v_irs.length; i55184++)
{
  v_ir = v_irs[i55184] ;

this.unrelateAcrossR4016From(v_ir);


if (v_ir != null) {
v_ir.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Component_c v_component = Component_c.getOneC_COnR4010(this);


if ( (  (v_component != null)) )
{

this.unrelateAcrossR4010From(v_component);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setDonotshowportoncanvas( false) ;


Port_c [] v_ports = Port_c.getManyC_POsOnR4010(Component_c.getManyC_CsOnR4010(this));


int          v_count = 1 ;


Port_c  v_port = null;
for ( int i55185 = 0; i55185 < v_ports.length; i55185++)
{
  v_port = v_ports[i55185] ;

String       v_potentialName = "Port" + Gd_c.Int_to_string(			    
v_count) ;


  class Port_test55836_c implements ClassQueryInterface_c
  {
	Port_test55836_c( String       p55837 ) {
		m_p55837 = p55837;
	}
	private String       m_p55837;
	public boolean evaluate (Object candidate)
	{
		Port_c selected = (Port_c)candidate;
		return (selected.getName().equals(m_p55837)) ;
	}
  }
Port_c v_otherPort = Port_c.getOneC_POOnR4010(Component_c.getManyC_CsOnR4010(this), new Port_test55836_c(v_potentialName));


if ( (  (v_otherPort == null)) )
{

break;



}

v_count = v_count + 1 ;



}

setName( "Port" + Gd_c.Int_to_string(			    
v_count)) ;



   } // End initialize
  public  String       Getporttext()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Getporttext") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_portName = "" ;


return v_portName;



   } // End getPortText
  public  boolean      Manymultallowed()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Manymultallowed") ; 
               final ModelRoot modelRoot = getModelRoot();
return true;



   } // End manyMultAllowed
  public  java.util.UUID         Getcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Getcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
Component_c v_component = Component_c.getOneC_COnR4010(this);


return v_component.getId();



   } // End getComponentId
  public  void Collectreferencesforsynchronization(final Object p_Referencelist,final int  p_Synctype)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Collectreferencesforsynchronization") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Synctype == Synchronizationtype_c.Pull) )
{

InterfaceReference_c [] v_interfaceReferences = InterfaceReference_c.getManyC_IRsOnR4016(this);


InterfaceReference_c  v_interfaceReference = null;
for ( int i55186 = 0; i55186 < v_interfaceReferences.length; i55186++)
{
  v_interfaceReference = v_interfaceReferences[i55186] ;

if (v_interfaceReference != null) {
v_interfaceReference.Collectreferencesforsynchronization(			    
p_Referencelist			    
,p_Synctype ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End collectReferencesForSynchronization
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
Component_c v_component = Component_c.getOneC_COnR4010(this);


java.util.UUID         v_pkgId = v_component.Getpackageid() ;


Package_c v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, v_pkgId);


SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

Port_c [] v_ports = Port_c.getManyC_POsOnR4010(v_component);


Port_c  v_port = null;
for ( int i55187 = 0; i55187 < v_ports.length; i55187++)
{
  v_port = v_ports[i55187] ;

if ( (v_port != this && v_port.getName().equals(getName())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another port under the same component with a " + "matching name."			    
,Converttoinstance()			    
,getId()			    
,getName()			    
,v_component.Getpath(			    
true			    
,getName())			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Port", " Operation entered: Port::Converttoinstance") ; 
// just return this instance as an Object
return this;

   } // End convertToInstance

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Port
