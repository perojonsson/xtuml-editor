      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Interface_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_INTERFACE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Interface_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Interface_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       String       p_m_descrip)
  {
    super(modelRoot);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public Interface_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       String       p_m_descrip, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
      Interface_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (Interface_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Interface_c(modelRoot,
p_m_id,
p_m_package_id,
p_m_name,
p_m_descrip
);
		new_inst.m_contentPath = contentPath;
    new_inst.setComponent(null);
	}
    return new_inst;
  }

  static public Interface_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       java.util.UUID         p_m_package_id,
       String       p_m_name,
       String       p_m_descrip){
    InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
    Interface_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (Interface_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Interface_c new_inst = new Interface_c(modelRoot,
p_m_id,
p_m_package_id,
p_m_name,
p_m_descrip
);
    return new_inst;
  }
  public Interface_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_name = "";   
     m_descrip = "";   
     m_package_id = IdAssigner.NULL_UUID;   
     m_id = idAssigner.createUUID();
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  

	public void ResolveinterfacereferenceforR4012(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			InterfaceReference_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (InterfaceReference_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceReference_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultinterface", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				Interface_c existingRTO = Interface_c.getOneC_IOnR4012(element);
				element.unrelateAcrossR4012From(existingRTO);
				element.relateAcrossR4012To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertointerface", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4012From(this);
					element.relateAcrossR4012To(existingRTO);
				}
			}
		}
	}
	public void ResolveexecutablepropertyforR4003(NonRootModelElement proxy) {
		if(proxy != null && proxy.isProxy() && !this.isProxy()) {
			ExecutableProperty_c element = null;
      Object oldKey = CorePlugin.getImportedElementKeyMap().get(proxy);
	  		// remove proxy instance from list, so that it is not resolved
			// in the call below
			proxy.delete_unchecked();
			// find matching instance
			element = (ExecutableProperty_c) Ooaofooa.getDefaultInstance().getInstanceList(ExecutableProperty_c.class).getGlobal(oldKey);
			if(element != null) {
				boolean result = true;
				try {
					Method method = element.getClass().getMethod(
							"Isreferringtodefaultinterface", new Class[]{});
					Object objectResult = method.invoke(element, new Object[]{});
					if (objectResult != null) {
						result = ((Boolean) objectResult).booleanValue();
					}
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if (!result) {
					// if the element is not referring to the default
					// then do not hook up with pasted element
					return;
				}
				// relate the possible type
				Interface_c existingRTO = Interface_c.getOneC_IOnR4003(element);
				element.unrelateAcrossR4003From(existingRTO);
				element.relateAcrossR4003To(this);
				// check that resolution is allowed
				try {
					Method method = element.getClass().getMethod("Canrefertointerface", new Class[] {});
					Object objectResult = method.invoke(element, new Object[] {});
			        if ( objectResult != null ) {
			        	result = ((Boolean) objectResult).booleanValue();
			        }
				} catch (NoSuchMethodException e) {
					// do nothing
				} catch (IllegalArgumentException e) {
					// do nothing
				} catch (IllegalAccessException e) {
					// do nothing
				} catch (InvocationTargetException e) {
					// do nothing
				}
				if(!result) {
					element.unrelateAcrossR4003From(this);
					element.relateAcrossR4003To(existingRTO);
				}
			}
		}
	}


  public boolean equals (Object elem) {
     if (!(elem instanceof Interface_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Interface_c)) {
           return false;
       }
       
       Interface_c me = (Interface_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((Interface_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((Interface_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Interface_c)) {
           return false;
       }
       
       Interface_c me = (Interface_c)elem;
      if (!getIdCachedValue().equals(((Interface_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_package_id ;
  private java.util.UUID         m_id ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
        UmlProblem.removeXtUMLProblem(this, IsSupertypePackageableElement);
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Interface_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Interface to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Interface_c getOneC_IOnR8001(PackageableElement_c [] targets)
{
    return getOneC_IOnR8001(targets, null);
}

public static Interface_c getOneC_IOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    Interface_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_IOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static Interface_c getOneC_IOnR8001(PackageableElement_c target)
{
  return getOneC_IOnR8001(target, null);
}

public static Interface_c getOneC_IOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneC_IOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static Interface_c getOneC_IOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_IOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static Interface_c getOneC_IOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneC_IOnR8001(modelRoot, target, test, true);
}

public static Interface_c getOneC_IOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  Interface_c result = null;
  
  result=find_getOneC_IOnR8001(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // not a Containment Relation
     List comps =  PersistenceManager.findAllComponents(modelRoot,Interface_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneC_IOnR8001(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static Interface_c find_getOneC_IOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Interface_c source = (Interface_c)target.backPointer_IsSubtypeInterfaceIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c [] targets)
{
  return getManyC_IsOnR8001(targets, null);
}
public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyC_IsOnR8001(targets, null, loadComponent);
}
public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_IsOnR8001(targets, test, true);
}

public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Interface_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //not a Containment Relation
	 PersistenceManager.ensureAllInstancesLoaded(modelRoot, Interface_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(Interface_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Interface_c source = (Interface_c)targets[i].backPointer_IsSubtypeInterfaceIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Interface_c[] ret_set = new Interface_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Interface_c[0];
  }
  }

public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_IsOnR8001(targetArray);
  } else {
    Interface_c [] result = new Interface_c [0] ;
  return result ;
}
}

public static Interface_c [] getManyC_IsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_IsOnR8001(targetArray, loadComponent);
  } else {
    Interface_c [] result = new Interface_c [0] ;
  return result ;
}
}



  
    
// referring navigation

InterfacePackage_c InterfacePackage ;
public void relateAcrossR4303To(InterfacePackage_c target)
{
	relateAcrossR4303To(target, true);
}
public void relateAcrossR4303To(InterfacePackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == InterfacePackage) return;  // already related

    if ( InterfacePackage != target ) {
    
    Object oldKey = getInstanceKey();

    if (InterfacePackage != null) {
        UmlProblem.removeXtUMLProblem(this, InterfacePackage);
    
        InterfacePackage.clearBackPointerR4303To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Interface_c.relateAcrossR4303To(InterfacePackage_c target)", 
			"Relate performed across R4303 from Interface to Interface Package without unrelate of prior instance.");  
		}
    }
                
    	InterfacePackage = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4303To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4303", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4303From(InterfacePackage_c target)
{
	unrelateAcrossR4303From(target, true);
}
public void unrelateAcrossR4303From(InterfacePackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (InterfacePackage == null) return;  // already unrelated
	
	if (target != InterfacePackage) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4303", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4303To(this);
    }
    

      if(InterfacePackage != null) {
      
        m_package_id = InterfacePackage.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_package_id))
        {
          m_package_id = InterfacePackage.getPackage_idCachedValue();
        }       
        InterfacePackage = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4303", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Interface_c getOneC_IOnR4303(InterfacePackage_c [] targets)
{
    return getOneC_IOnR4303(targets, null);
}

public static Interface_c getOneC_IOnR4303(InterfacePackage_c [] targets, ClassQueryInterface_c test)
{
    Interface_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_IOnR4303(targets[i], test);
        }
    }

    return ret_val;
}

public static Interface_c getOneC_IOnR4303(InterfacePackage_c target)
{
  return getOneC_IOnR4303(target, null);
}

public static Interface_c getOneC_IOnR4303(InterfacePackage_c target, boolean loadComponent)
{
    return getOneC_IOnR4303(target.getModelRoot(), target, null, loadComponent);
}

public static Interface_c getOneC_IOnR4303(InterfacePackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_IOnR4303(target.getModelRoot(), target, test);
  }
  return null;
}

public static Interface_c getOneC_IOnR4303(ModelRoot modelRoot, InterfacePackage_c target, ClassQueryInterface_c test)
{
	return getOneC_IOnR4303(modelRoot, target, test, true);
}

public static Interface_c getOneC_IOnR4303(ModelRoot modelRoot, InterfacePackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  Interface_c result = null;
  
  result=find_getOneC_IOnR4303(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,Interface_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneC_IOnR4303(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static Interface_c find_getOneC_IOnR4303(ModelRoot modelRoot, InterfacePackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_ContainsInterfaceContains_R4303) {
	    for ( int i = 0; i < target.backPointer_ContainsInterfaceContains_R4303.size(); ++i ) {
	      Interface_c source = (Interface_c)target.backPointer_ContainsInterfaceContains_R4303.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c [] targets)
{
  return getManyC_IsOnR4303(targets, null);
}
public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c [] targets, boolean loadComponent)
{
  return getManyC_IsOnR4303(targets, null, loadComponent);
}
public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_IsOnR4303(targets, test, true);
}

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Interface_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, Interface_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(Interface_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_ContainsInterfaceContains_R4303) {
	    for (int j = 0; j < targets[i].backPointer_ContainsInterfaceContains_R4303.size(); ++j) {
	      Interface_c source = (Interface_c)targets[i].backPointer_ContainsInterfaceContains_R4303.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Interface_c[] ret_set = new Interface_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Interface_c[0];
  }
  }

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c target)
{
  return getManyC_IsOnR4303(target, null);
}

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c target, boolean loadComponent)
{
  return getManyC_IsOnR4303(target, null, loadComponent);
}

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c target, ClassQueryInterface_c test)
{
	return getManyC_IsOnR4303(target, test, true);
}

public static Interface_c [] getManyC_IsOnR4303(InterfacePackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Interface_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, Interface_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_ContainsInterfaceContains_R4303) {
    for (int i = 0; i < target.backPointer_ContainsInterfaceContains_R4303.size(); ++i) {
      Interface_c source = (Interface_c)target.backPointer_ContainsInterfaceContains_R4303.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Interface_c[] ret_set = new Interface_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Interface_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<InterfaceReference_c> backPointer_IsFormalDefinitionInterfaceReferenceIsFormalDefinition_R4012 = new ArrayList<InterfaceReference_c>();

public void setInterfaceReferenceOrderInChildListR4012(InterfaceReference_c target, int index) {
	unrelateAcrossR4012From(target);
	InterfaceReference_c[] elements = InterfaceReference_c.getManyC_IRsOnR4012(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4012From((InterfaceReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4012To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4012To((InterfaceReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4012To(InterfaceReference_c target)
{
  if (target != null) {
    target.relateAcrossR4012To(this, true) ;
  }
}

public void relateAcrossR4012To(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4012To(this, notifyChanges) ;
  }
}

public void setBackPointerR4012To(InterfaceReference_c target)
{
  	synchronized (backPointer_IsFormalDefinitionInterfaceReferenceIsFormalDefinition_R4012) {
		backPointer_IsFormalDefinitionInterfaceReferenceIsFormalDefinition_R4012.add(target);
	}
}

public void unrelateAcrossR4012From(InterfaceReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR4012From(this, true) ;
  }
}

public void unrelateAcrossR4012From(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4012From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4012To(InterfaceReference_c target)
{
  synchronized (backPointer_IsFormalDefinitionInterfaceReferenceIsFormalDefinition_R4012) {
	    backPointer_IsFormalDefinitionInterfaceReferenceIsFormalDefinition_R4012.remove(target);
	}
}

public static Interface_c getOneC_IOnR4012(InterfaceReference_c [] targets)
{
    return getOneC_IOnR4012(targets, null);
}

public static Interface_c getOneC_IOnR4012(InterfaceReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_IOnR4012(targets, test, true);
}

public static Interface_c getOneC_IOnR4012(InterfaceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Interface_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Interface_c candidate_val = getOneC_IOnR4012(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_IOnR4012(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Interface_c getOneC_IOnR4012(InterfaceReference_c target)
{
	return getOneC_IOnR4012(target, true);
}
public static Interface_c getOneC_IOnR4012(InterfaceReference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.MayBeDefinedByInterface != null){
		target.MayBeDefinedByInterface.loadProxy();
	}
	}
    return target.MayBeDefinedByInterface ;
  } else {
    return null;
  }
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_IsOnR4012(targets, test, true);
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Interface_c[0];
  
  
  LinkedHashSet<Interface_c> elementsSet = new LinkedHashSet<Interface_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].MayBeDefinedByInterface == null)
	  targets[i].loadProxy();
    Interface_c associate = targets[i].MayBeDefinedByInterface;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Interface_c[] result = new Interface_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c [] targets)
{
  return getManyC_IsOnR4012(targets, null);
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceReference_c [] targetArray = new InterfaceReference_c[1];
    targetArray[0] = target;
    return getManyC_IsOnR4012(targetArray, test, loadComponent);
  } else {
    Interface_c [] result = new Interface_c [0] ;
    return result ;
  }
  
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c target,
    ClassQueryInterface_c test)
{
    return getManyC_IsOnR4012(target, null, true);
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c target)
{
    return getManyC_IsOnR4012(target, null, true);
}

public static Interface_c [] getManyC_IsOnR4012(InterfaceReference_c target, boolean loadComponent)
{
    return getManyC_IsOnR4012(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ExecutableProperty_c> backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003 = new ArrayList<ExecutableProperty_c>();

public void setExecutablePropertyOrderInChildListR4003(ExecutableProperty_c target, int index) {
	unrelateAcrossR4003From(target);
	ExecutableProperty_c[] elements = ExecutableProperty_c.getManyC_EPsOnR4003(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4003From((ExecutableProperty_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4003To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4003To((ExecutableProperty_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4003To(ExecutableProperty_c target)
{
  if (target != null) {
    target.relateAcrossR4003To(this, true) ;
  }
}

public void relateAcrossR4003To(ExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4003To(this, notifyChanges) ;
  }
}

public void setBackPointerR4003To(ExecutableProperty_c target)
{
  	synchronized (backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003) {
		backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.add(target);
	}
}

public void unrelateAcrossR4003From(ExecutableProperty_c target)
{
  if (target != null) {
    target.unrelateAcrossR4003From(this, true) ;
  }
}

public void unrelateAcrossR4003From(ExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4003From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4003To(ExecutableProperty_c target)
{
  synchronized (backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003) {
	    backPointer_IsDefinedByExecutablePropertyIsDefinedBy_R4003.remove(target);
	}
}

public static Interface_c getOneC_IOnR4003(ExecutableProperty_c [] targets)
{
    return getOneC_IOnR4003(targets, null);
}

public static Interface_c getOneC_IOnR4003(ExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_IOnR4003(targets, test, true);
}

public static Interface_c getOneC_IOnR4003(ExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Interface_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Interface_c candidate_val = getOneC_IOnR4003(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_IOnR4003(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Interface_c getOneC_IOnR4003(ExecutableProperty_c target)
{
	return getOneC_IOnR4003(target, true);
}
public static Interface_c getOneC_IOnR4003(ExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ProvidesSignatureOfInterface ;
  } else {
    return null;
  }
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_IsOnR4003(targets, test, true);
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Interface_c[0];
  
  
  LinkedHashSet<Interface_c> elementsSet = new LinkedHashSet<Interface_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ProvidesSignatureOfInterface == null)
	  targets[i].loadProxy();
    Interface_c associate = targets[i].ProvidesSignatureOfInterface;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Interface_c[] result = new Interface_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c [] targets)
{
  return getManyC_IsOnR4003(targets, null);
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ExecutableProperty_c [] targetArray = new ExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_IsOnR4003(targetArray, test, loadComponent);
  } else {
    Interface_c [] result = new Interface_c [0] ;
    return result ;
  }
  
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c target,
    ClassQueryInterface_c test)
{
    return getManyC_IsOnR4003(target, null, true);
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c target)
{
    return getManyC_IsOnR4003(target, null, true);
}

public static Interface_c [] getManyC_IsOnR4003(ExecutableProperty_c target, boolean loadComponent)
{
    return getManyC_IsOnR4003(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst57030 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57030 == null) {
      			relInst57030 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
      		}
			if (relInst57030 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57030 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
					if (relInst57030 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57030 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57030) && !isProxy())) {
	      relInst57030.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          

	if (InterfacePackage == null) {          
      // R4303
      InterfacePackage_c relInst57031 = (InterfacePackage_c) baseRoot.getInstanceList(InterfacePackage_c.class).get(new Object[] {m_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57031 == null) {
      			relInst57031 = (InterfacePackage_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfacePackage_c.class).get(new Object[] {m_package_id});
      		}
			if (relInst57031 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57031 = (InterfacePackage_c) roots[i].getInstanceList(InterfacePackage_c.class).get(new Object[] {m_package_id});
					if (relInst57031 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57031 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57031) && !isProxy())) {
	      relInst57031.relateAcrossR4303To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R4303
      // IP_IP
		  inst=InterfacePackage;
			unrelateAcrossR4303From(InterfacePackage, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Interface_c inst = (Interface_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Interface_c InterfaceInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Interface_c result=findInterfaceInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Interface_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findInterfaceInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Interface_c findInterfaceInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Interface_c x = (Interface_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Interface_c InterfaceInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return InterfaceInstance(modelRoot,test,true);
  }
  
  public static Interface_c InterfaceInstance(ModelRoot modelRoot)
  {
	 return InterfaceInstance(modelRoot,null,true);
  }

  public static Interface_c [] InterfaceInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Interface_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Interface_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Interface_c x = (Interface_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Interface_c[] ret_set = new Interface_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Interface_c[0];
			}		
		} 
  }
  public static Interface_c [] InterfaceInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  InterfaceInstances(modelRoot,test,true);
  }
  public static Interface_c [] InterfaceInstances(ModelRoot modelRoot)
  {
	return InterfaceInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Interface.dispose call: ";
	PackageableElement_c testR8001Inst9 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst9 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
	InterfaceReference_c testR4012Inst = InterfaceReference_c.getOneC_IROnR4012(this, false);

	if ( testR4012Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4012 ";	
	}
	InterfacePackage_c testR4303Inst = InterfacePackage_c.getOneIP_IPOnR4303(this, false);

	if ( testR4303Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4303 ";
	}
	ExecutableProperty_c testR4003Inst = ExecutableProperty_c.getOneC_EPOnR4003(this, false);

	if ( testR4003Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4003 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Interface", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("package_id")){
         return true;
      }
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPackage_idLongBased()
  {
    if ( InterfacePackage != null )
    {
      return InterfacePackage.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPackage_id()
  {
    if ( InterfacePackage != null )
    {
      return InterfacePackage.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getPackage_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_package_id) )
      return m_package_id;
    else
      return getPackage_id();
  }
  
  public void setPackage_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_package_id)){
	        return;
	    }
	}else if(m_package_id != null){
	    if(m_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Package_id", m_package_id, newValue,true); 
   m_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getIdLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface", //$NON-NLS-1$
	  " Operation entered: Interface::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Interface_c [] objs = Interface_c.InterfaceInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Interface", //$NON-NLS-1$
	  " Operation entered: Interface::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Interface_c_test57033_c implements ClassQueryInterface_c
    {
	  Interface_c_test57033_c( java.util.UUID            p57034 ) {
	  m_p57034 = p57034;
	  }
	  private java.util.UUID             m_p57034; 
	  public boolean evaluate (Object candidate)
	  {
	      Interface_c selected = (Interface_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57034));
	      return retval;
	  }
    }

    Interface_c [] objs57032 = 
    Interface_c.InterfaceInstances(modelRoot, new Interface_c_test57033_c(getId())) ;

    if ( (  (objs57032.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface", //$NON-NLS-1$
           "Consistency: Object: Interface: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57032.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57032.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57032.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface", //$NON-NLS-1$
           "Consistency: Object: Interface: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57032.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57032.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Interface is a referring class in association: rel.Numb = 4303
          // The participating class is: Interface Package
    class InterfacePackage_c_test57038_c implements ClassQueryInterface_c
    {
	  InterfacePackage_c_test57038_c( java.util.UUID            p57039 ) {
	  m_p57039 = p57039;
	  }
	  private java.util.UUID             m_p57039; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfacePackage_c selected = (InterfacePackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p57039));
	      return retval;
	  }
    }

    InterfacePackage_c [] objs57037 = 
    InterfacePackage_c.InterfacePackageInstances(modelRoot, new InterfacePackage_c_test57038_c(getPackage_id())) ;

    if ( (  (objs57037.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Interface", //$NON-NLS-1$
           "Consistency: Object: Interface: Association: 4303: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57037.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Interface: Association: 4303: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57037.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Interface is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Interface is a participating class in association: rel.Numb = 4012
             // Object: Interface Reference
          // Interface is a participating class in association: rel.Numb = 4003
             // Object: Executable Property
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c [] v_signals = ExecutableProperty_c.getManyC_EPsOnR4003(this);


ExecutableProperty_c  v_signal = null;
for ( int i55240 = 0; i55240 < v_signals.length; i55240++)
{
  v_signal = v_signals[i55240] ;

this.unrelateAcrossR4003From(v_signal);


if (v_signal != null) {
v_signal.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

InterfacePackage_c v_id = InterfacePackage_c.getOneIP_IPOnR4303(this);


if ( (  (v_id != null)) )
{

this.unrelateAcrossR4303From(v_id);



}

PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


if ( (  (v_pe != null)) )
{

this.unrelateAcrossR8001From(v_pe);


if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c [] v_signaExProps = ExecutableProperty_c.getManyC_EPsOnR4004(InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this)));


ExecutableProperty_c [] v_opExProps = ExecutableProperty_c.getManyC_EPsOnR4004(InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this)));


String       v_result = "" ;


if ( (p_Comp_num == 1) )
{

if ( (p_At == Justification_c.Center_in_X) )
{

v_result = "«interface»" ;


v_result = v_result + Gd_c.Newline() ;


v_result = v_result + getName() ;



}


}

else if ( (p_Comp_num == 2) )
{

if ( (((  (v_opExProps.length == 0)) && (  (v_signaExProps.length != 0))) && (p_At == Justification_c.Center_in_X)) && (p_Ent_num == 1) )
{

if ( (  (v_signaExProps.length != 0)) )
{

v_result = "signals" + Gd_c.Newline() ;



}


}

if ( (p_At == Justification_c.Left) )
{

if ( (  (v_opExProps.length != 0)) )
{

v_result = Get_operation_compartment_text(			    
p_Ent_num) ;



}

else
{

if ( (  (v_signaExProps.length != 0)) && (p_Ent_num > 1) )
{

v_result = Get_signal_compartment_text(			    
p_Ent_num) ;



}


}


}


}

else if ( (p_Comp_num == 3) )
{

if ( (p_At == Justification_c.Center_in_X) && (p_Ent_num == 1) )
{

if ( (  (v_signaExProps.length != 0)) )
{

v_result = "signals" + Gd_c.Newline() ;



}


}

if ( (p_At == Justification_c.Left) && (p_Ent_num > 1) )
{

return Get_signal_compartment_text(			    
p_Ent_num);



}


}

return v_result;



   } // End get_compartment_text
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c [] v_asyncSignals = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


InterfaceOperation_c [] v_syncSignals = InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


if ( (  (v_asyncSignals.length != 0)) && (  (v_syncSignals.length != 0)) )
{

return 3;



}

else
{

return 2;



}


   } // End get_compartments
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Comp_num == 3) )
{

InterfaceSignal_c [] v_sigs = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


return   (v_sigs.length) + 1;



}

else if ( (p_Comp_num == 2) )
{

InterfaceOperation_c [] v_ops = InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


if ( (  (v_ops.length == 0)) )
{

InterfaceSignal_c [] v_sigs = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


if ( (  (v_sigs.length != 0)) )
{

return   (v_sigs.length) + 1;



}


}

return   (v_ops.length);



}

return 1;



   } // End get_entries
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Interface"			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}


   } // End initialize
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.Box;



   } // End get_style
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  java.util.UUID         Newexecutableproperty(final boolean      p_Asynchronous)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Newexecutableproperty") ; 
               final ModelRoot modelRoot = getModelRoot();
ExecutableProperty_c v_signal = new ExecutableProperty_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_signal));


  this.relateAcrossR4003To(v_signal);


InterfaceReference_c [] v_references = InterfaceReference_c.getManyC_IRsOnR4012(this);


if ( (p_Asynchronous) )
{

InterfaceSignal_c v_asignal = new InterfaceSignal_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_asignal));


if (v_signal != null) {
  v_signal.relateAcrossR4004To(v_asignal);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_asignal != null) {
v_asignal.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

else
{

InterfaceOperation_c v_ssignal = new InterfaceOperation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ssignal));


if (v_signal != null) {
  v_signal.relateAcrossR4004To(v_ssignal);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_ssignal != null) {
v_ssignal.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

return v_signal.getId();



   } // End newExecutableProperty
  public  String       Get_operation_compartment_text(final int          p_Entry_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_operation_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


int          v_index = 1 ;


  class InterfaceOperation_test55877_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceOperation_c selected = (InterfaceOperation_c)candidate;
		return (selected.getPrevious_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
InterfaceOperation_c v_operation = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceOperation_test55877_c());


while ( (  (v_operation != null)) )
{

if ( (v_index == p_Entry_num) )
{

v_result = v_result + v_operation.getName() ;


v_result = v_result + "(" ;


String       v_parm_separator = "" ;


  class PropertyParameter_test55878_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		PropertyParameter_c selected = (PropertyParameter_c)candidate;
		return (selected.getPrevious_pp_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
PropertyParameter_c v_parameter = PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4004(v_operation), new PropertyParameter_test55878_c());


while ( (  (v_parameter != null)) )
{

v_result = v_result + v_parm_separator ;


v_result = v_result + v_parameter.getName() ;


v_result = v_result + v_parameter.getDimensions() ;


v_result = v_result + ":" ;


DataType_c v_dt = DataType_c.getOneS_DTOnR4007(v_parameter);


if ( (  (v_dt != null)) )
{

v_result = v_result + v_dt.getName() ;



}

else
{

v_result = v_result + Ooaofooa.Getorphanedelementname(modelRoot) ;



}

v_parm_separator = ", " ;


v_parameter = PropertyParameter_c.getOneC_PPOnR4021Precedes(v_parameter);



}

v_result = v_result + ")" ;


DataType_c v_dt = DataType_c.getOneS_DTOnR4008(v_operation);


v_result = v_result + ":" + v_dt.getName() ;


if ( ! v_dt.getName().equals("void") )
{

v_result = v_result + v_operation.getReturn_dimensions() ;



}

v_result = v_result + Gd_c.Newline() ;


return v_result;



}

v_index = v_index + 1 ;


v_operation = InterfaceOperation_c.getOneC_IOOnR4019Precedes(v_operation);



}

return "";



   } // End get_operation_compartment_text
  public  String       Get_signal_compartment_text(final int          p_Entry_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_signal_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


int          v_index = 2 ;


  class InterfaceSignal_test55879_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceSignal_c selected = (InterfaceSignal_c)candidate;
		return (selected.getPrevious_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
InterfaceSignal_c v_signal = InterfaceSignal_c.getOneC_ASOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceSignal_test55879_c());


while ( (  (v_signal != null)) )
{

if ( (v_index == p_Entry_num) )
{

v_result = v_result + v_signal.getName() ;


v_result = v_result + "(" ;


String       v_parm_separator = "" ;


  class PropertyParameter_test55880_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		PropertyParameter_c selected = (PropertyParameter_c)candidate;
		return (selected.getPrevious_pp_id().equals(Gd_c.Null_unique_id())) ;
	}
  }
PropertyParameter_c v_parameter = PropertyParameter_c.getOneC_PPOnR4006(ExecutableProperty_c.getManyC_EPsOnR4004(v_signal), new PropertyParameter_test55880_c());


while ( (  (v_parameter != null)) )
{

v_result = v_result + v_parm_separator ;


v_result = v_result + v_parameter.getName() ;


v_result = v_result + v_parameter.getDimensions() ;


v_result = v_result + ":" ;


DataType_c v_dt = DataType_c.getOneS_DTOnR4007(v_parameter);


if ( (  (v_dt != null)) )
{

v_result = v_result + v_dt.getName() ;



}

else
{

v_result = v_result + Ooaofooa.Getorphanedelementname(modelRoot) ;



}

v_parm_separator = ", " ;


v_parameter = PropertyParameter_c.getOneC_PPOnR4021Precedes(v_parameter);



}

v_result = v_result + ")" + Gd_c.Newline() ;


return v_result;



}

v_index = v_index + 1 ;


v_signal = InterfaceSignal_c.getOneC_ASOnR4020Precedes(v_signal);



}

return "";



   } // End get_signal_compartment_text
  public  boolean      Hasepwithdirection(final int  p_Direction)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Hasepwithdirection") ; 
               final ModelRoot modelRoot = getModelRoot();
  class InterfaceOperation_test55881_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceOperation_c selected = (InterfaceOperation_c)candidate;
		return (selected.getDirection() == p_Direction) ;
	}
  }
InterfaceOperation_c v_op = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceOperation_test55881_c());


  class InterfaceSignal_test55882_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceSignal_c selected = (InterfaceSignal_c)candidate;
		return (selected.getDirection() == p_Direction) ;
	}
  }
InterfaceSignal_c v_sig = InterfaceSignal_c.getOneC_ASOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceSignal_test55882_c());


return   (v_op != null) ||   (v_sig != null);



   } // End hasEPWithDirection
  public  void Initializeorder()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Initializeorder") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c [] v_peers = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


if ( (  (v_peers.length) > 1) )
{

boolean      v_initialOrderingCheckPerformed = false ;


  class InterfaceSignal_test55883_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceSignal_c selected = (InterfaceSignal_c)candidate;
		return (selected.getId().equals(Gd_c.Null_unique_id())) ;
	}
  }
InterfaceSignal_c v_head = InterfaceSignal_c.getOneC_ASOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceSignal_test55883_c());


InterfaceSignal_c v_endOfList = v_head ;


int          v_loopCnt = 0 ;


InterfaceSignal_c  v_peer = null;
for ( int i55241 = 0; i55241 < v_peers.length; i55241++)
{
  v_peer = v_peers[i55241] ;

if ( (  !v_initialOrderingCheckPerformed) )
{

InterfaceSignal_c v_predecessor = InterfaceSignal_c.getOneC_ASOnR4020Precedes(v_peer);


InterfaceSignal_c v_successor = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(v_peer);


v_initialOrderingCheckPerformed = true ;


if ( (  (v_predecessor != null) ||   (v_successor != null)) )
{

break;



}

v_head = v_peer ;


v_endOfList = v_peer ;



}

if ( (v_loopCnt == 1) )
{

if ( (v_peer.getName().compareTo(v_head.getName()) < 0) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4020ToPrecedes(v_head);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if (v_head != null) {
  v_head.relateAcrossR4020ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}


}

else if ( (v_loopCnt > 1) )
{

InterfaceSignal_c v_insertPoint = v_head ;


InterfaceSignal_c v_next = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(v_head);


while ( (  (v_next != null)) )
{

if ( (v_next.getName().compareTo(v_peer.getName()) < 0) )
{

break;



}

else
{

v_insertPoint = v_next ;


v_next = InterfaceSignal_c.getOneC_ASOnR4020Succeeds(v_next);



}


}

if ( (  (v_next == null)) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4020ToPrecedes(v_endOfList);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if ( ((v_insertPoint == v_head) && (v_peer.getName().compareTo(v_head.getName()) > 0)) )
{

if (v_head != null) {
  v_head.relateAcrossR4020ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}

else
{

if (v_next != null) {
v_next.unrelateAcrossR4020FromPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_peer != null) {
  v_peer.relateAcrossR4020ToPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_next != null) {
  v_next.relateAcrossR4020ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

v_loopCnt = v_loopCnt + 1 ;



}


}

InterfaceOperation_c [] v_ioPeers = InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


if ( (  (v_ioPeers.length) > 1) )
{

boolean      v_initialOrderingCheckPerformed = false ;


  class InterfaceOperation_test55884_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InterfaceOperation_c selected = (InterfaceOperation_c)candidate;
		return (selected.getId().equals(Gd_c.Null_unique_id())) ;
	}
  }
InterfaceOperation_c v_head = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this), new InterfaceOperation_test55884_c());


InterfaceOperation_c v_endOfList = v_head ;


int          v_loopCnt = 0 ;


InterfaceOperation_c  v_peer = null;
for ( int i55242 = 0; i55242 < v_ioPeers.length; i55242++)
{
  v_peer = v_ioPeers[i55242] ;

if ( (  !v_initialOrderingCheckPerformed) )
{

InterfaceOperation_c v_predecessor = InterfaceOperation_c.getOneC_IOOnR4019Precedes(v_peer);


InterfaceOperation_c v_successor = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(v_peer);


v_initialOrderingCheckPerformed = true ;


if ( (  (v_predecessor != null) ||   (v_successor != null)) )
{

break;



}

v_head = v_peer ;


v_endOfList = v_peer ;



}

if ( (v_loopCnt == 1) )
{

if ( (v_peer.getName().compareTo(v_head.getName()) < 0) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4019ToPrecedes(v_head);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if (v_head != null) {
  v_head.relateAcrossR4019ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}


}

else if ( (v_loopCnt > 1) )
{

InterfaceOperation_c v_insertPoint = v_head ;


InterfaceOperation_c v_next = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(v_head);


while ( (  (v_next != null)) )
{

if ( (v_next.getName().compareTo(v_peer.getName()) < 0) )
{

break;



}

else
{

v_insertPoint = v_next ;


v_next = InterfaceOperation_c.getOneC_IOOnR4019Succeeds(v_next);



}


}

if ( (  (v_next == null)) )
{

if (v_peer != null) {
  v_peer.relateAcrossR4019ToPrecedes(v_endOfList);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_endOfList = v_peer ;



}

else
{

if ( ((v_insertPoint == v_head) && (v_peer.getName().compareTo(v_head.getName()) > 0)) )
{

if (v_head != null) {
  v_head.relateAcrossR4019ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_head = v_peer ;



}

else
{

if (v_next != null) {
v_next.unrelateAcrossR4019FromPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_peer != null) {
  v_peer.relateAcrossR4019ToPrecedes(v_insertPoint);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_next != null) {
  v_next.relateAcrossR4019ToPrecedes(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

v_loopCnt = v_loopCnt + 1 ;



}


}


   } // End initializeOrder
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getId();



   } // End get_ooa_id
  public  void Pasteinterfaceoperation(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Pasteinterfaceoperation") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceOperation_c v_iop = (InterfaceOperation_c) modelRoot.getInstanceList(InterfaceOperation_c.class).getGlobal(null, p_Id);


if ( (  (v_iop != null)) )
{

ExecutableProperty_c v_existingEP = ExecutableProperty_c.getOneC_EPOnR4004(v_iop);


if ( (  (v_existingEP != null)) )
{

Interface_c v_existing = Interface_c.getOneC_IOnR4003(v_existingEP);


if ( (  (v_existing != null)) )
{

if (v_existing != null) {
v_existing.unrelateAcrossR4003From(v_existingEP);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_existingEP != null) {
  v_existingEP.relateAcrossR4003To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_iop != null) {
  v_iop.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_iop.Converttoinstance()			    
,v_iop.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Addinterfaceoperationtoorder(			    
v_iop.getId() ) ;



}


}


   } // End pasteInterfaceOperation
  public  void Addinterfaceoperationtoorder(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Addinterfaceoperationtoorder") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceOperation_c v_interfaceOperation = (InterfaceOperation_c) modelRoot.getInstanceList(InterfaceOperation_c.class).getGlobal(null, p_Id);


if ( (  (v_interfaceOperation != null)) )
{

Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceOperation_c [] v_peers = InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


InterfaceOperation_c  v_peer = null;
for ( int i55243 = 0; i55243 < v_peers.length; i55243++)
{
  v_peer = v_peers[i55243] ;

if ( (v_peer != v_interfaceOperation) )
{

InterfaceOperation_c v_predecessor = InterfaceOperation_c.getOneC_IOOnR4019Precedes(v_peer);


if ( (  (v_predecessor == null)) )
{

if (v_interfaceOperation != null) {
  v_interfaceOperation.relateAcrossR4019ToSucceeds(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



}


   } // End addInterfaceOperationToOrder
  public  void Pasteinterfacesignal(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Pasteinterfacesignal") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c v_sig = (InterfaceSignal_c) modelRoot.getInstanceList(InterfaceSignal_c.class).getGlobal(null, p_Id);


if ( (  (v_sig != null)) )
{

ExecutableProperty_c v_existingEP = ExecutableProperty_c.getOneC_EPOnR4004(v_sig);


if ( (  (v_existingEP != null)) )
{

Interface_c v_existing = Interface_c.getOneC_IOnR4003(v_existingEP);


if ( (  (v_existing != null)) )
{

if (v_existing != null) {
v_existing.unrelateAcrossR4003From(v_existingEP);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_existingEP != null) {
  v_existingEP.relateAcrossR4003To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_sig != null) {
  v_sig.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_sig.Converttoinstance()			    
,v_sig.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


Addinterfacesignaltoorder(			    
v_sig.getId() ) ;



}


}


   } // End pasteInterfaceSignal
  public  void Addinterfacesignaltoorder(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Addinterfacesignaltoorder") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceSignal_c v_signal = (InterfaceSignal_c) modelRoot.getInstanceList(InterfaceSignal_c.class).getGlobal(null, p_Id);


Ooaofooa.Changenotificationenablement(modelRoot 			    
,false ) ;


InterfaceSignal_c [] v_peers = InterfaceSignal_c.getManyC_ASsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4003(this));


InterfaceSignal_c  v_peer = null;
for ( int i55244 = 0; i55244 < v_peers.length; i55244++)
{
  v_peer = v_peers[i55244] ;

if ( (v_peer != v_signal) )
{

InterfaceSignal_c v_predecessor = InterfaceSignal_c.getOneC_ASOnR4020Precedes(v_peer);


if ( (  (v_predecessor == null)) )
{

if (v_signal != null) {
  v_signal.relateAcrossR4020ToSucceeds(v_peer);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}


}

Ooaofooa.Changenotificationenablement(modelRoot 			    
,true ) ;



   } // End addInterfaceSignalToOrder
  public  String       Getpath(final boolean      p_Includeself,final String       p_Path)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Getpath") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_path = "" ;


if ( (p_Includeself) )
{

v_path = getName() ;



}

if ( (! p_Path.equals("")) )
{

v_path = v_path + "::" + p_Path ;



}

Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(this));


Component_c v_component = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(this));


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( v_isInGenericPackage )
{

if (   (v_package != null) )
{

v_path = v_package.Getqualifiedname() ;



}

else
{

v_path = v_component.Getqualifiedname() ;



}


}

else
{

return "";



}

return v_path;



   } // End getPath
  public  void Collectreferencesforsynchronization(final Object p_Referencelist,final int  p_Synctype)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Interface", " Operation entered: Interface::Collectreferencesforsynchronization") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Synctype == Synchronizationtype_c.Push) )
{

InterfaceReference_c [] v_interfaceReferences = InterfaceReference_c.getManyC_IRsOnR4012(this);


InterfaceReference_c  v_interfaceReference = null;
for ( int i55245 = 0; i55245 < v_interfaceReferences.length; i55245++)
{
  v_interfaceReference = v_interfaceReferences[i55245] ;

if (v_interfaceReference != null) {
v_interfaceReference.Collectreferencesforsynchronization(			    
p_Referencelist			    
,p_Synctype ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


   } // End collectReferencesForSynchronization

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	if (adapter == org.eclipse.core.resources.IResource.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
        	return comp.getFile().getParent();
        }
	}else if(adapter == org.eclipse.core.resources.IFile.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
            return comp.getFile();
        }
	}
	  return null;
  }
} // end Interface
