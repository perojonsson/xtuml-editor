      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Delegation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_DELEGATION extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Delegation_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Delegation_c(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_id = IdAssigner.preprocessUUID(p_m_id);
       m_name = p_m_name;
        
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }
  static public Delegation_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
      Delegation_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_id};
          new_inst = (Delegation_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
       new_inst.m_name = p_m_name;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Delegation_c(modelRoot,
p_m_id,
p_m_name
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Delegation_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_id,
       String       p_m_name){
    InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
    Delegation_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_id
            };
        source = (Delegation_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_id = IdAssigner.preprocessUUID(p_m_id);
       source.m_name = p_m_name;
        
           return source ;
        }
      }
      // there is no instance matching the id
    Delegation_c new_inst = new Delegation_c(modelRoot,
p_m_id,
p_m_name
);
    return new_inst;
  }
  public Delegation_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_id = idAssigner.createUUID();
     m_name = "";   
    setUniqueId(m_id);
    Object [] key = {m_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_id !=  p_newKey ){
	
		m_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Delegation_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Delegation_c)) {
           return false;
       }
       
       Delegation_c me = (Delegation_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID.equals(((Delegation_c)elem).getId())) && this != elem)) {
      	return false;
      }
      if (!getId().equals(((Delegation_c)elem).getId())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Delegation_c)) {
           return false;
       }
       
       Delegation_c me = (Delegation_c)elem;
      if (!getIdCachedValue().equals(((Delegation_c)elem).getIdCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_id ;
  private String       m_name ;
      
// declare association references from this class
  
  
    
// referring navigation

PackageableElement_c IsSupertypePackageableElement ;
public void relateAcrossR8001To(PackageableElement_c target)
{
	relateAcrossR8001To(target, true);
}
public void relateAcrossR8001To(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypePackageableElement) return;  // already related

    if ( IsSupertypePackageableElement != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypePackageableElement != null) {
    
        IsSupertypePackageableElement.clearBackPointerR8001To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Delegation_c.relateAcrossR8001To(PackageableElement_c target)", 
			"Relate performed across R8001 from Delegation to Packageable Element without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypePackageableElement = target ;
        m_id = target.getElement_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR8001To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR8001From(PackageableElement_c target)
{
	unrelateAcrossR8001From(target, true);
}
public void unrelateAcrossR8001From(PackageableElement_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypePackageableElement == null) return;  // already unrelated
	
	if (target != IsSupertypePackageableElement) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R8001", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR8001To(this);
    }
    

      if(IsSupertypePackageableElement != null) {
      
        m_id = IsSupertypePackageableElement.getElement_id();
        IsSupertypePackageableElement = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "8001", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Delegation_c getOneC_DGOnR8001(PackageableElement_c [] targets)
{
    return getOneC_DGOnR8001(targets, null);
}

public static Delegation_c getOneC_DGOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
    Delegation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_DGOnR8001(targets[i], test);
        }
    }

    return ret_val;
}

public static Delegation_c getOneC_DGOnR8001(PackageableElement_c target)
{
  return getOneC_DGOnR8001(target, null);
}

public static Delegation_c getOneC_DGOnR8001(PackageableElement_c target, boolean loadComponent)
{
    return getOneC_DGOnR8001(target.getModelRoot(), target, null, loadComponent);
}

public static Delegation_c getOneC_DGOnR8001(PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_DGOnR8001(target.getModelRoot(), target, test);
  }
  return null;
}

public static Delegation_c getOneC_DGOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
	return getOneC_DGOnR8001(modelRoot, target, test, true);
}

public static Delegation_c getOneC_DGOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_DGOnR8001(modelRoot,target,test);
}
private static Delegation_c find_getOneC_DGOnR8001(ModelRoot modelRoot, PackageableElement_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Delegation_c source = (Delegation_c)target.backPointer_IsSubtypeDelegationIsSubtype_R8001;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c [] targets)
{
  return getManyC_DGsOnR8001(targets, null);
}
public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c [] targets, boolean loadComponent)
{
  return getManyC_DGsOnR8001(targets, null, loadComponent);
}
public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_DGsOnR8001(targets, test, true);
}

public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Delegation_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Delegation_c source = (Delegation_c)targets[i].backPointer_IsSubtypeDelegationIsSubtype_R8001;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Delegation_c[] ret_set = new Delegation_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Delegation_c[0];
  }
  }

public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c target)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR8001(targetArray);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
  return result ;
}
}

public static Delegation_c [] getManyC_DGsOnR8001(PackageableElement_c target, boolean loadComponent)
{
  if (target != null) {
    PackageableElement_c [] targetArray = new PackageableElement_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR8001(targetArray, loadComponent);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<InterfaceReferenceInDelegation_c> backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013 = new ArrayList<InterfaceReferenceInDelegation_c>();

public void setInterfaceReferenceInDelegationOrderInChildListR4013(InterfaceReferenceInDelegation_c target, int index) {
	unrelateAcrossR4013From(target);
	InterfaceReferenceInDelegation_c[] elements = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4013From((InterfaceReferenceInDelegation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4013To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4013To((InterfaceReferenceInDelegation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4013To(InterfaceReferenceInDelegation_c target)
{
  if (target != null) {
    target.relateAcrossR4013To(this, true) ;
  }
}

public void relateAcrossR4013To(InterfaceReferenceInDelegation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4013To(this, notifyChanges) ;
  }
}

public void setBackPointerR4013To(InterfaceReferenceInDelegation_c target)
{
  	synchronized (backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013) {
		backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013.add(target);
	}
}

public void unrelateAcrossR4013From(InterfaceReferenceInDelegation_c target)
{
  if (target != null) {
    target.unrelateAcrossR4013From(this, true) ;
  }
}

public void unrelateAcrossR4013From(InterfaceReferenceInDelegation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4013From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4013To(InterfaceReferenceInDelegation_c target)
{
  synchronized (backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013) {
	    backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013.remove(target);
	}
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReferenceInDelegation_c [] targets)
{
    return getOneC_DGOnR4013(targets, null);
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReferenceInDelegation_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_DGOnR4013(targets, test, true);
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReferenceInDelegation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Delegation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Delegation_c candidate_val = getOneC_DGOnR4013(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_DGOnR4013(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReferenceInDelegation_c target)
{
	return getOneC_DGOnR4013(target, true);
}
public static Delegation_c getOneC_DGOnR4013(InterfaceReferenceInDelegation_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.MayDelegateThroughDelegation ;
  } else {
    return null;
  }
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR4013(targets, test, true);
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Delegation_c[0];
  
  
  LinkedHashSet<Delegation_c> elementsSet = new LinkedHashSet<Delegation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].MayDelegateThroughDelegation == null)
	  targets[i].loadProxy();
    Delegation_c associate = targets[i].MayDelegateThroughDelegation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Delegation_c[] result = new Delegation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c [] targets)
{
  return getManyC_DGsOnR4013(targets, null);
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceReferenceInDelegation_c [] targetArray = new InterfaceReferenceInDelegation_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR4013(targetArray, test, loadComponent);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
    return result ;
  }
  
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c target,
    ClassQueryInterface_c test)
{
    return getManyC_DGsOnR4013(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c target)
{
    return getManyC_DGsOnR4013(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReferenceInDelegation_c target, boolean loadComponent)
{
    return getManyC_DGsOnR4013(target, null, loadComponent);
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReference_c target)
{
  return Delegation_c.getOneC_DGOnR4013(InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013(target)) ;
}

public static Delegation_c getOneC_DGOnR4013(InterfaceReference_c target,
    ClassQueryInterface_c test)
{
  return Delegation_c.getOneC_DGOnR4013(InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(target), test) ;
}

public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReference_c target,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR4013(target, test, true);
}
public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  InterfaceReferenceInDelegation_c [] associators = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(target, loadComponent) ;
    return Delegation_c.getManyC_DGsOnR4013(associators, test, loadComponent) ;
}
public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReference_c target)
{
    return getManyC_DGsOnR4013(target, null, true);
}
public static Delegation_c [] getManyC_DGsOnR4013(InterfaceReference_c target, boolean loadComponent)
{
    return getManyC_DGsOnR4013(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InterfaceReference_c> backPointer_ProvidesDelegationToInterfaceReferenceProvidesDelegationTo_R4014 = new ArrayList<InterfaceReference_c>();

public void setInterfaceReferenceOrderInChildListR4014(InterfaceReference_c target, int index) {
	unrelateAcrossR4014From(target);
	InterfaceReference_c[] elements = InterfaceReference_c.getManyC_IRsOnR4014(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4014From((InterfaceReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4014To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4014To((InterfaceReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4014To(InterfaceReference_c target)
{
  if (target != null) {
    target.relateAcrossR4014To(this, true) ;
  }
}

public void relateAcrossR4014To(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4014To(this, notifyChanges) ;
  }
}

public void setBackPointerR4014To(InterfaceReference_c target)
{
  	synchronized (backPointer_ProvidesDelegationToInterfaceReferenceProvidesDelegationTo_R4014) {
		backPointer_ProvidesDelegationToInterfaceReferenceProvidesDelegationTo_R4014.add(target);
	}
}

public void unrelateAcrossR4014From(InterfaceReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR4014From(this, true) ;
  }
}

public void unrelateAcrossR4014From(InterfaceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4014From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4014To(InterfaceReference_c target)
{
  synchronized (backPointer_ProvidesDelegationToInterfaceReferenceProvidesDelegationTo_R4014) {
	    backPointer_ProvidesDelegationToInterfaceReferenceProvidesDelegationTo_R4014.remove(target);
	}
}

public static Delegation_c getOneC_DGOnR4014(InterfaceReference_c [] targets)
{
    return getOneC_DGOnR4014(targets, null);
}

public static Delegation_c getOneC_DGOnR4014(InterfaceReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_DGOnR4014(targets, test, true);
}

public static Delegation_c getOneC_DGOnR4014(InterfaceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Delegation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Delegation_c candidate_val = getOneC_DGOnR4014(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_DGOnR4014(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Delegation_c getOneC_DGOnR4014(InterfaceReference_c target)
{
	return getOneC_DGOnR4014(target, true);
}
public static Delegation_c getOneC_DGOnR4014(InterfaceReference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.ReceivesDelegationViaDelegation != null){
		target.ReceivesDelegationViaDelegation.loadProxy();
	}
	}
    return target.ReceivesDelegationViaDelegation ;
  } else {
    return null;
  }
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR4014(targets, test, true);
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Delegation_c[0];
  
  
  LinkedHashSet<Delegation_c> elementsSet = new LinkedHashSet<Delegation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ReceivesDelegationViaDelegation == null)
	  targets[i].loadProxy();
    Delegation_c associate = targets[i].ReceivesDelegationViaDelegation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Delegation_c[] result = new Delegation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c [] targets)
{
  return getManyC_DGsOnR4014(targets, null);
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceReference_c [] targetArray = new InterfaceReference_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR4014(targetArray, test, loadComponent);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
    return result ;
  }
  
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c target,
    ClassQueryInterface_c test)
{
    return getManyC_DGsOnR4014(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c target)
{
    return getManyC_DGsOnR4014(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4014(InterfaceReference_c target, boolean loadComponent)
{
    return getManyC_DGsOnR4014(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<DelegationInComponent_c> backPointer_DelegationInComponent_R9002 = new ArrayList<DelegationInComponent_c>();

public void setDelegationInComponentOrderInChildListR9002(DelegationInComponent_c target, int index) {
	unrelateAcrossR9002From(target);
	DelegationInComponent_c[] elements = DelegationInComponent_c.getManyPA_DICsOnR9002(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR9002From((DelegationInComponent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR9002To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR9002To((DelegationInComponent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR9002To(DelegationInComponent_c target)
{
  if (target != null) {
    target.relateAcrossR9002To(this, true) ;
  }
}

public void relateAcrossR9002To(DelegationInComponent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR9002To(this, notifyChanges) ;
  }
}

public void setBackPointerR9002To(DelegationInComponent_c target)
{
  	synchronized (backPointer_DelegationInComponent_R9002) {
		backPointer_DelegationInComponent_R9002.add(target);
	}
}

public void unrelateAcrossR9002From(DelegationInComponent_c target)
{
  if (target != null) {
    target.unrelateAcrossR9002From(this, true) ;
  }
}

public void unrelateAcrossR9002From(DelegationInComponent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR9002From(this, notifyChanges) ;
  }
}

public void clearBackPointerR9002To(DelegationInComponent_c target)
{
  synchronized (backPointer_DelegationInComponent_R9002) {
	    backPointer_DelegationInComponent_R9002.remove(target);
	}
}

public static Delegation_c getOneC_DGOnR9002(DelegationInComponent_c [] targets)
{
    return getOneC_DGOnR9002(targets, null);
}

public static Delegation_c getOneC_DGOnR9002(DelegationInComponent_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_DGOnR9002(targets, test, true);
}

public static Delegation_c getOneC_DGOnR9002(DelegationInComponent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Delegation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Delegation_c candidate_val = getOneC_DGOnR9002(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_DGOnR9002(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Delegation_c getOneC_DGOnR9002(DelegationInComponent_c target)
{
	return getOneC_DGOnR9002(target, true);
}
public static Delegation_c getOneC_DGOnR9002(DelegationInComponent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Delegation ;
  } else {
    return null;
  }
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR9002(targets, test, true);
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Delegation_c[0];
  
  
  LinkedHashSet<Delegation_c> elementsSet = new LinkedHashSet<Delegation_c>();
  for (int i = 0; i < targets.length; i++) {
    Delegation_c associate = targets[i].Delegation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Delegation_c[] result = new Delegation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c [] targets)
{
  return getManyC_DGsOnR9002(targets, null);
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    DelegationInComponent_c [] targetArray = new DelegationInComponent_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR9002(targetArray, test, loadComponent);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
    return result ;
  }
  
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c target,
    ClassQueryInterface_c test)
{
    return getManyC_DGsOnR9002(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c target)
{
    return getManyC_DGsOnR9002(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR9002(DelegationInComponent_c target, boolean loadComponent)
{
    return getManyC_DGsOnR9002(target, null, loadComponent);
}

public static Delegation_c getOneC_DGOnR9002(Component_c target)
{
  return Delegation_c.getOneC_DGOnR9002(DelegationInComponent_c.getOnePA_DICOnR9002(target)) ;
}

public static Delegation_c getOneC_DGOnR9002(Component_c target,
    ClassQueryInterface_c test)
{
  return Delegation_c.getOneC_DGOnR9002(DelegationInComponent_c.getManyPA_DICsOnR9002(target), test) ;
}

public static Delegation_c [] getManyC_DGsOnR9002(Component_c target,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR9002(target, test, true);
}
public static Delegation_c [] getManyC_DGsOnR9002(Component_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  DelegationInComponent_c [] associators = DelegationInComponent_c.getManyPA_DICsOnR9002(target, loadComponent) ;
    return Delegation_c.getManyC_DGsOnR9002(associators, test, loadComponent) ;
}
public static Delegation_c [] getManyC_DGsOnR9002(Component_c target)
{
    return getManyC_DGsOnR9002(target, null, true);
}
public static Delegation_c [] getManyC_DGsOnR9002(Component_c target, boolean loadComponent)
{
    return getManyC_DGsOnR9002(target, null, loadComponent);
}


    
  
  
// referred to navigation

ImportedReference_c backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704;

public void setImportedReferenceOrderInChildListR4704(ImportedReference_c target, int index) {
	unrelateAcrossR4704From(target);
	ImportedReference_c[] elements = ImportedReference_c.getManyCL_IIRsOnR4704(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4704From((ImportedReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4704To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4704To((ImportedReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4704To(ImportedReference_c target)
{
  if (target != null) {
    target.relateAcrossR4704To(this, true) ;
  }
}

public void relateAcrossR4704To(ImportedReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4704To(this, notifyChanges) ;
  }
}

public void setBackPointerR4704To(ImportedReference_c target)
{
    backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704 = target;
}

public void unrelateAcrossR4704From(ImportedReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR4704From(this, true) ;
  }
}

public void unrelateAcrossR4704From(ImportedReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4704From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4704To(ImportedReference_c target)
{
	if (target == backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704) {
		backPointer_DeliversCommunicationThroughImportedReferenceDeliversCommunicationThrough_R4704 = null;
	}
}

public static Delegation_c getOneC_DGOnR4704(ImportedReference_c [] targets)
{
    return getOneC_DGOnR4704(targets, null);
}

public static Delegation_c getOneC_DGOnR4704(ImportedReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_DGOnR4704(targets, test, true);
}

public static Delegation_c getOneC_DGOnR4704(ImportedReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Delegation_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Delegation_c candidate_val = getOneC_DGOnR4704(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_DGOnR4704(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Delegation_c getOneC_DGOnR4704(ImportedReference_c target)
{
	return getOneC_DGOnR4704(target, true);
}
public static Delegation_c getOneC_DGOnR4704(ImportedReference_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.AcceptsCommunicationThroughDelegation != null){
		target.AcceptsCommunicationThroughDelegation.loadProxy();
	}
	}
    return target.AcceptsCommunicationThroughDelegation ;
  } else {
    return null;
  }
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_DGsOnR4704(targets, test, true);
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Delegation_c[0];
  
  
  LinkedHashSet<Delegation_c> elementsSet = new LinkedHashSet<Delegation_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].AcceptsCommunicationThroughDelegation == null)
	  targets[i].loadProxy();
    Delegation_c associate = targets[i].AcceptsCommunicationThroughDelegation;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Delegation_c[] result = new Delegation_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c [] targets)
{
  return getManyC_DGsOnR4704(targets, null);
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ImportedReference_c [] targetArray = new ImportedReference_c[1];
    targetArray[0] = target;
    return getManyC_DGsOnR4704(targetArray, test, loadComponent);
  } else {
    Delegation_c [] result = new Delegation_c [0] ;
    return result ;
  }
  
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c target,
    ClassQueryInterface_c test)
{
    return getManyC_DGsOnR4704(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c target)
{
    return getManyC_DGsOnR4704(target, null, true);
}

public static Delegation_c [] getManyC_DGsOnR4704(ImportedReference_c target, boolean loadComponent)
{
    return getManyC_DGsOnR4704(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R8001
      PackageableElement_c relInst57059 = (PackageableElement_c) baseRoot.getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst57059 == null) {
      			relInst57059 = (PackageableElement_c) Ooaofooa.getDefaultInstance().getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
      		}
			if (relInst57059 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst57059 = (PackageableElement_c) roots[i].getInstanceList(PackageableElement_c.class).get(new Object[] {m_id});
					if (relInst57059 != null)
						break;
				}
			}
			//synchronized
      if ( relInst57059 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst57059) && !isProxy())) {
	      relInst57059.relateAcrossR8001To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R8001
      // PE_PE
		  inst=IsSupertypePackageableElement;
			unrelateAcrossR8001From(IsSupertypePackageableElement, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Delegation_c inst = (Delegation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Delegation_c DelegationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Delegation_c result=findDelegationInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Delegation_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findDelegationInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Delegation_c findDelegationInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Delegation_c x = (Delegation_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Delegation_c DelegationInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return DelegationInstance(modelRoot,test,true);
  }
  
  public static Delegation_c DelegationInstance(ModelRoot modelRoot)
  {
	 return DelegationInstance(modelRoot,null,true);
  }

  public static Delegation_c [] DelegationInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Delegation_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Delegation_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Delegation_c x = (Delegation_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Delegation_c[] ret_set = new Delegation_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Delegation_c[0];
			}		
		} 
  }
  public static Delegation_c [] DelegationInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  DelegationInstances(modelRoot,test,true);
  }
  public static Delegation_c [] DelegationInstances(ModelRoot modelRoot)
  {
	return DelegationInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Delegation.dispose call: ";
	PackageableElement_c testR8001Inst19 = PackageableElement_c.getOnePE_PEOnR8001(this, false);

	if ( testR8001Inst19 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "8001 ";
	}
 	InterfaceReferenceInDelegation_c testR4013Inst = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013(this, false);

 	if ( testR4013Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "4013 ";
 	}
	InterfaceReference_c testR4014Inst = InterfaceReference_c.getOneC_IROnR4014(this, false);

	if ( testR4014Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4014 ";	
	}
 	DelegationInComponent_c testR9002Inst = DelegationInComponent_c.getOnePA_DICOnR9002(this, false);

 	if ( testR9002Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "9002 ";
 	}
	ImportedReference_c testR4704Inst = ImportedReference_c.getOneCL_IIROnR4704(this, false);

	if ( testR4704Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "4704 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Delegation", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getId();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getIdCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getIdLongBased()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getId()
  {
    if ( IsSupertypePackageableElement != null )
    {
      return IsSupertypePackageableElement.getElement_id();
    }
    return m_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypePackageableElement != null );
 
 }                  

  public java.util.UUID getIdCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_id) )
      return m_id;
    else
      return getId();
  }
  
  public void setId(java.util.UUID newValue)
  {
   m_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_delegatee = InterfaceReference_c.getOneC_IROnR4014(this);


if ( (  (v_delegatee == null)) )
{

return Getcachedname();



}

else
{

Port_c v_delegateePort = Port_c.getOneC_POOnR4016(v_delegatee);


Component_c v_delegateeComp = Component_c.getOneC_COnR4010(v_delegateePort);


String       v_result = "-> " + v_delegateeComp.getName() + "::" + v_delegateePort.getName() + "::" + v_delegatee.Interfacename() ;


Setcachedname(			    
v_result ) ;


return v_result;



}


  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Delegation", //$NON-NLS-1$
	  " Operation entered: Delegation::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Delegation_c [] objs = Delegation_c.DelegationInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Delegation", //$NON-NLS-1$
	  " Operation entered: Delegation::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Delegation_c_test57061_c implements ClassQueryInterface_c
    {
	  Delegation_c_test57061_c( java.util.UUID            p57062 ) {
	  m_p57062 = p57062;
	  }
	  private java.util.UUID             m_p57062; 
	  public boolean evaluate (Object candidate)
	  {
	      Delegation_c selected = (Delegation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p57062));
	      return retval;
	  }
    }

    Delegation_c [] objs57060 = 
    Delegation_c.DelegationInstances(modelRoot, new Delegation_c_test57061_c(getId())) ;

    if ( (  (objs57060.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Delegation", //$NON-NLS-1$
           "Consistency: Object: Delegation: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57060.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Delegation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57060.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57060.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Delegation", //$NON-NLS-1$
           "Consistency: Object: Delegation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs57060.length )  + " Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Delegation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57060.length )  + " Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Delegation is a subtype in association: rel.Numb = 8001
          // The supertype class is: Packageable Element
         //    Note: The consistency test for this supertype has been removed 
         //          until generic package _migration_ is complete.
          // Associated Other Side: rel.Numb = 4013
            // Link Object: Interface Reference In Delegation
          // Delegation is a participating class in association: rel.Numb = 4014
             // Object: Interface Reference
          // Associated Other Side: rel.Numb = 9002
            // Link Object: Delegation In Component
    class DelegationInComponent_c_test57068_c implements ClassQueryInterface_c
    {
	  DelegationInComponent_c_test57068_c( java.util.UUID            p57069 ) {
	  m_p57069 = p57069;
	  }
	  private java.util.UUID             m_p57069; 
	  public boolean evaluate (Object candidate)
	  {
	      DelegationInComponent_c selected = (DelegationInComponent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDelegation_id().equals(m_p57069));
	      return retval;
	  }
    }

    DelegationInComponent_c [] objs57070 = 
    DelegationInComponent_c.DelegationInComponentInstances(modelRoot, new DelegationInComponent_c_test57068_c(getId())) ;

    if ( (  (objs57070.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Delegation", //$NON-NLS-1$
           "Consistency: Object: Delegation: Association: 9002: Cardinality of a link is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57070.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Delegation: Association: 9002: Cardinality of a link is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57070.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs57070.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Delegation", //$NON-NLS-1$
           "Consistency: Object: Delegation: Association: 9002: Cardinality of a link is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57070.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Delegation: Association: 9002: Cardinality of a link is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57070.length )  , e); 
      }
      retval = false;

    }

          // Delegation is a participating class in association: rel.Numb = 4704
             // Object: Imported Reference
    class ImportedReference_c_test57072_c implements ClassQueryInterface_c
    {
	  ImportedReference_c_test57072_c( java.util.UUID            p57073 ) {
	  m_p57073 = p57073;
	  }
	  private java.util.UUID             m_p57073; 
	  public boolean evaluate (Object candidate)
	  {
	      ImportedReference_c selected = (ImportedReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDelegation_id().equals(m_p57073));
	      return retval;
	  }
    }

    ImportedReference_c [] objs57071 = 
    ImportedReference_c.ImportedReferenceInstances(modelRoot, new ImportedReference_c_test57072_c(getId())) ;

    if ( (  (objs57071.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Delegation", //$NON-NLS-1$
           "Consistency: Object: Delegation: Association: 4704: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs57071.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Delegation: Association: 4704: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs57071.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(this);


boolean      v_isInGenericPackage =   (v_pe != null) ;


if ( v_isInGenericPackage )
{

if (v_pe != null) {
v_pe.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


return ;



}

else
{

InterfaceReferenceInDelegation_c [] v_mediums = InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(this);


InterfaceReferenceInDelegation_c  v_medium = null;
for ( int i55250 = 0; i55250 < v_mediums.length; i55250++)
{
  v_medium = v_mediums[i55250] ;

InterfaceReference_c v_reference = InterfaceReference_c.getOneC_IROnR4013(v_medium);


if (v_medium != null) {
v_medium.unrelateAcrossR4013From( this ) ; v_medium.unrelateAcrossR4013From( v_reference ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_medium != null) {
// get the location of this element in the instance list
// before deleting
if ( v_medium.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_medium));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

InterfaceReference_c [] v_references = InterfaceReference_c.getManyC_IRsOnR4014(this);


InterfaceReference_c  v_ref = null;
for ( int i55251 = 0; i55251 < v_references.length; i55251++)
{
  v_ref = v_references[i55251] ;

this.unrelateAcrossR4014From(v_ref);



}

ImportedReference_c v_importedRef = ImportedReference_c.getOneCL_IIROnR4704(this);


if ( (  (v_importedRef != null)) )
{

this.unrelateAcrossR4704From(v_importedRef);



}

DelegationInComponent_c v_dic = DelegationInComponent_c.getOnePA_DICOnR9002(this);


if ( (  (v_dic != null)) )
{

Component_c v_comp = Component_c.getOneC_COnR9002(v_dic);


if (v_dic != null) {
v_dic.unrelateAcrossR9002From( this ) ; v_dic.unrelateAcrossR9002From( v_comp ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_dic != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dic.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dic));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}


}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4013(InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(this));


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(v_ir)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( (p_Name.equals("can")) )
{

if ( (p_Value.equals("formalize spec pkg")) )
{

if ( (v_isInGenericPackage) )
{

return false;



}


}

if ( (p_Value.equals("formalize generic pkg")) )
{

if ( (  !v_isInGenericPackage) )
{

return false;



}


}


}

Provision_c v_provision = Provision_c.getOneC_POnR4009(v_ir);


if ( (  (v_provision != null)) )
{

return v_provision.Actionfilter(			    
p_Name			    
,p_Value);



}

Requirement_c v_requirement = Requirement_c.getOneC_ROnR4009(v_ir);


if ( (  (v_requirement != null)) )
{

return v_requirement.Actionfilter(			    
p_Name			    
,p_Value);



}

return false;



   } // End actionFilter
  public  String       Get_connector_text(final java.util.UUID         p_Obj_id,final boolean      p_Obj_typeisimported,final int  p_At,final java.util.UUID         p_Parent_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Get_connector_text") ; 
               final ModelRoot modelRoot = getModelRoot();
return "";



   } // End get_connector_text
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getId();



   } // End get_ooa_id
  public  int  Get_style(final int  p_At)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4013(InterfaceReferenceInDelegation_c.getManyC_RIDsOnR4013(this));


Interface_c v_interface = Interface_c.getOneC_IOnR4012(v_ir);


if ( (p_At == End_c.End) )
{

Provision_c v_pro = Provision_c.getOneC_POnR4009(v_ir);


if ( (  (v_interface == null)) )
{

if ( (  (v_pro == null)) )
{

return Style_c.OpenArrow;



}

else
{

return Style_c.None;



}


}

else
{

if ( (  (v_pro != null)) )
{

if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ServerClient)) )
{

return Style_c.OpenArrow;



}

else if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ClientServer)) )
{

return Style_c.None;



}


}

else
{

if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ClientServer)) )
{

return Style_c.OpenArrow;



}

else if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ServerClient)) )
{

return Style_c.None;



}


}

if ( (  (v_pro == null)) )
{

return Style_c.OpenArrow;



}

else
{

return Style_c.None;



}


}


}

else if ( (p_At == End_c.Start) )
{

Provision_c v_pro = Provision_c.getOneC_POnR4009(v_ir);


if ( (  (v_interface == null)) )
{

if ( (  (v_pro != null)) )
{

return Style_c.OpenArrow;



}

else
{

return Style_c.None;



}


}

else
{

if ( (  (v_pro != null)) )
{

if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ClientServer)) )
{

return Style_c.OpenArrow;



}

else if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ServerClient)) )
{

return Style_c.None;



}


}

else
{

if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ServerClient)) )
{

return Style_c.OpenArrow;



}

else if ( (v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ClientServer)) )
{

return Style_c.None;



}


}

if ( (  (v_pro != null)) )
{

return Style_c.OpenArrow;



}

else
{

return Style_c.None;



}


}


}

return Style_c.None;



   } // End get_style
  public  String       Get_connector_tooltip(final int  p_End)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Get_connector_tooltip") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_End == End_c.Start) )
{

Port_c v_port = Port_c.getOneC_POOnR4016(InterfaceReference_c.getManyC_IRsOnR4014(this));


if ( (  (v_port != null)) )
{

return v_port.getName();



}


}

return "";



   } // End get_connector_tooltip
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  Object Getconfigurationinheritanceelementid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Getconfigurationinheritanceelementid") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_interfaceRef = InterfaceReference_c.getOneC_IROnR4013(this);


if ( (  (v_interfaceRef != null)) )
{

Provision_c v_provision = Provision_c.getOneC_POnR4009(v_interfaceRef);


if ( (  (v_provision != null)) )
{

return v_provision.Converttoinstance();



}

Requirement_c v_requirement = Requirement_c.getOneC_ROnR4009(v_interfaceRef);


if ( (  (v_requirement != null)) )
{

return v_requirement.Converttoinstance();



}


}

return Converttoinstance();



   } // End getConfigurationInheritanceElementId
  public  String       Get_name()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Get_name") ; 
               final ModelRoot modelRoot = getModelRoot();
return getName();



   } // End get_name
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Delegation", " Operation entered: Delegation::Setcachedname") ; 
	m_name = p_Value;
   } // End setCachedName

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return DelegationActionFilter.getSingleton();
    }
	  return null;
  }
} // end Delegation
