package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SystemConstantInPackage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SYSTEM_CONSTANT_IN_PACKAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SystemConstantInPackage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SystemConstantInPackage_c(ModelRoot modelRoot,
			java.util.UUID p_m_sys_id, java.util.UUID p_m_package_id,
			java.util.UUID p_m_constant_spec_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_constant_spec_id = IdAssigner.preprocessUUID(p_m_constant_spec_id);

		Object[] key = {m_package_id, m_constant_spec_id};
		addInstanceToMap(key);
	}
	static public SystemConstantInPackage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_sys_id, java.util.UUID p_m_package_id,
			java.util.UUID p_m_constant_spec_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);
		SystemConstantInPackage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_package_id, p_m_constant_spec_id};
			new_inst = (SystemConstantInPackage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_package_id = IdAssigner
						.preprocessUUID(p_m_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_constant_spec_id = IdAssigner
						.preprocessUUID(p_m_constant_spec_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SystemConstantInPackage_c(modelRoot, p_m_sys_id,
					p_m_package_id, p_m_constant_spec_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SystemConstantInPackage_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_sys_id,
			java.util.UUID p_m_package_id, java.util.UUID p_m_constant_spec_id) {
		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);
		SystemConstantInPackage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_package_id, p_m_constant_spec_id};
			source = (SystemConstantInPackage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_constant_spec_id = IdAssigner
						.preprocessUUID(p_m_constant_spec_id);

				return source;
			}
		}
		// there is no instance matching the id
		SystemConstantInPackage_c new_inst = new SystemConstantInPackage_c(
				modelRoot, p_m_sys_id, p_m_package_id, p_m_constant_spec_id);
		return new_inst;
	}
	public SystemConstantInPackage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_sys_id = IdAssigner.NULL_UUID;
		m_package_id = IdAssigner.NULL_UUID;
		m_constant_spec_id = IdAssigner.NULL_UUID;
		Object[] key = {m_package_id, m_constant_spec_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_package_id, m_constant_spec_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_package_id != p_newKey) {

			m_package_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SystemConstantInPackage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SystemConstantInPackage_c)) {
			return false;
		}

		SystemConstantInPackage_c me = (SystemConstantInPackage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID
						.equals(((SystemConstantInPackage_c) elem)
								.getPackage_id())) && this != elem)) {
			return false;
		}
		if (!getPackage_id().equals(
				((SystemConstantInPackage_c) elem).getPackage_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getConstant_spec_id()) || IdAssigner.NULL_UUID
						.equals(((SystemConstantInPackage_c) elem)
								.getConstant_spec_id())) && this != elem)) {
			return false;
		}
		if (!getConstant_spec_id().equals(
				((SystemConstantInPackage_c) elem).getConstant_spec_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SystemConstantInPackage_c)) {
			return false;
		}

		SystemConstantInPackage_c me = (SystemConstantInPackage_c) elem;
		if (!getPackage_idCachedValue().equals(
				((SystemConstantInPackage_c) elem).getPackage_idCachedValue()))
			return false;
		if (!getConstant_spec_idCachedValue().equals(
				((SystemConstantInPackage_c) elem)
						.getConstant_spec_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_sys_id;
	private java.util.UUID m_package_id;
	private java.util.UUID m_constant_spec_id;

	// declare association references from this class

	// referring navigation

	SystemModel_c IsConstantInSystemModel;
	public void relateAcrossR4404To(SystemModel_c target) {
		relateAcrossR4404To(target, true);
	}
	public void relateAcrossR4404To(SystemModel_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsConstantInSystemModel)
			return; // already related

		if (IsConstantInSystemModel != target) {

			Object oldKey = getInstanceKey();

			if (IsConstantInSystemModel != null) {
				UmlProblem.removeXtUMLProblem(this, IsConstantInSystemModel);

				IsConstantInSystemModel.clearBackPointerR4404To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SystemConstantInPackage_c.relateAcrossR4404To(SystemModel_c target)",
									"Relate performed across R4404 from System Constant in Package to System Model without unrelate of prior instance.");
				}
			}

			IsConstantInSystemModel = target;
			m_sys_id = target.getSys_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4404To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4404", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4404From(SystemModel_c target) {
		unrelateAcrossR4404From(target, true);
	}
	public void unrelateAcrossR4404From(SystemModel_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsConstantInSystemModel == null)
			return; // already unrelated

		if (target != IsConstantInSystemModel) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4404",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4404To(this);
		}

		if (IsConstantInSystemModel != null) {

			m_sys_id = IsConstantInSystemModel.getSys_id();
			IsConstantInSystemModel = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4404", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			SystemModel_c[] targets) {
		return getOneSLD_SCINPOnR4404(targets, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			SystemModel_c[] targets, ClassQueryInterface_c test) {
		SystemConstantInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSLD_SCINPOnR4404(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			SystemModel_c target) {
		return getOneSLD_SCINPOnR4404(target, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			SystemModel_c target, boolean loadComponent) {
		return getOneSLD_SCINPOnR4404(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			SystemModel_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSLD_SCINPOnR4404(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			ModelRoot modelRoot, SystemModel_c target,
			ClassQueryInterface_c test) {
		return getOneSLD_SCINPOnR4404(modelRoot, target, test, true);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4404(
			ModelRoot modelRoot, SystemModel_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		SystemConstantInPackage_c result = null;

		result = find_getOneSLD_SCINPOnR4404(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					SystemConstantInPackage_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSLD_SCINPOnR4404(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static SystemConstantInPackage_c find_getOneSLD_SCINPOnR4404(
			ModelRoot modelRoot, SystemModel_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404) {
				for (int i = 0; i < target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
						.size(); ++i) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c[] targets) {
		return getManySLD_SCINPsOnR4404(targets, null);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c[] targets, boolean loadComponent) {
		return getManySLD_SCINPsOnR4404(targets, null, loadComponent);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c[] targets, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4404(targets, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SystemConstantInPackage_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404) {
				for (int j = 0; j < targets[i].backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
						.size(); ++j) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) targets[i].backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c target) {
		return getManySLD_SCINPsOnR4404(target, null);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c target, boolean loadComponent) {
		return getManySLD_SCINPsOnR4404(target, null, loadComponent);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c target, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4404(target, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4404(
			SystemModel_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SystemConstantInPackage_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404) {
			for (int i = 0; i < target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
					.size(); ++i) {
				SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_IsSystemOfSystemConstantInPackageIsSystemOf_R4404
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	// referring navigation

	ConstantSpecification_c MayShowConstantSpecification;
	public void relateAcrossR4403To(ConstantSpecification_c target) {
		relateAcrossR4403To(target, true);
	}
	public void relateAcrossR4403To(ConstantSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MayShowConstantSpecification)
			return; // already related

		if (MayShowConstantSpecification != target) {

			Object oldKey = getInstanceKey();

			if (MayShowConstantSpecification != null) {

				MayShowConstantSpecification.clearBackPointerR4403To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SystemConstantInPackage_c.relateAcrossR4403To(ConstantSpecification_c target)",
									"Relate performed across R4403 from System Constant in Package to Constant Specification without unrelate of prior instance.");
				}
			}

			MayShowConstantSpecification = target;
			if (IdAssigner.NULL_UUID.equals(target.getConstant_spec_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_constant_spec_id = target.getConstant_spec_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4403To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4403From(ConstantSpecification_c target) {
		unrelateAcrossR4403From(target, true);
	}
	public void unrelateAcrossR4403From(ConstantSpecification_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MayShowConstantSpecification == null)
			return; // already unrelated

		if (target != MayShowConstantSpecification) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4403",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4403To(this);
		}

		if (MayShowConstantSpecification != null) {

			m_constant_spec_id = MayShowConstantSpecification
					.getConstant_spec_id();
			if (IdAssigner.NULL_UUID.equals(m_constant_spec_id)) {
				m_constant_spec_id = MayShowConstantSpecification
						.getConstant_spec_idCachedValue();
			}
			MayShowConstantSpecification = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	DataTypePackage_c CanShowInLowerPackageDataTypePackage;
	public void relateAcrossR4403To(DataTypePackage_c target) {
		relateAcrossR4403To(target, true);
	}
	public void relateAcrossR4403To(DataTypePackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == CanShowInLowerPackageDataTypePackage)
			return; // already related

		if (CanShowInLowerPackageDataTypePackage != target) {

			Object oldKey = getInstanceKey();

			if (CanShowInLowerPackageDataTypePackage != null) {

				CanShowInLowerPackageDataTypePackage
						.clearBackPointerR4403To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SystemConstantInPackage_c.relateAcrossR4403To(DataTypePackage_c target)",
									"Relate performed across R4403 from System Constant in Package to Data Type Package without unrelate of prior instance.");
				}
			}

			CanShowInLowerPackageDataTypePackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4403To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4403From(DataTypePackage_c target) {
		unrelateAcrossR4403From(target, true);
	}
	public void unrelateAcrossR4403From(DataTypePackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (CanShowInLowerPackageDataTypePackage == null)
			return; // already unrelated

		if (target != CanShowInLowerPackageDataTypePackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4403",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4403To(this);
		}

		if (CanShowInLowerPackageDataTypePackage != null) {

			m_package_id = CanShowInLowerPackageDataTypePackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_package_id)) {
				m_package_id = CanShowInLowerPackageDataTypePackage
						.getPackage_idCachedValue();
			}
			CanShowInLowerPackageDataTypePackage = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4403", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ConstantSpecification_c[] targets) {
		return getOneSLD_SCINPOnR4403(targets, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ConstantSpecification_c[] targets, ClassQueryInterface_c test) {
		SystemConstantInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSLD_SCINPOnR4403(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ConstantSpecification_c target) {
		return getOneSLD_SCINPOnR4403(target, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ConstantSpecification_c target, boolean loadComponent) {
		return getOneSLD_SCINPOnR4403(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ConstantSpecification_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSLD_SCINPOnR4403(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, ConstantSpecification_c target,
			ClassQueryInterface_c test) {
		return getOneSLD_SCINPOnR4403(modelRoot, target, test, true);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, ConstantSpecification_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSLD_SCINPOnR4403(modelRoot, target, test);
	}
	private static SystemConstantInPackage_c find_getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, ConstantSpecification_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403) {
				for (int i = 0; i < target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
						.size(); ++i) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c[] targets) {
		return getManySLD_SCINPsOnR4403(targets, null);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c[] targets, boolean loadComponent) {
		return getManySLD_SCINPsOnR4403(targets, null, loadComponent);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c[] targets, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4403(targets, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403) {
				for (int j = 0; j < targets[i].backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
						.size(); ++j) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) targets[i].backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c target) {
		return getManySLD_SCINPsOnR4403(target, null);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c target, boolean loadComponent) {
		return getManySLD_SCINPsOnR4403(target, null, loadComponent);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c target, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4403(target, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			ConstantSpecification_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403) {
			for (int i = 0; i < target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
					.size(); ++i) {
				SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_CanShowInLowerPackageSystemConstantInPackageCanShowInLowerPackage_R4403
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			DataTypePackage_c[] targets) {
		return getOneSLD_SCINPOnR4403(targets, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			DataTypePackage_c[] targets, ClassQueryInterface_c test) {
		SystemConstantInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSLD_SCINPOnR4403(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			DataTypePackage_c target) {
		return getOneSLD_SCINPOnR4403(target, null);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			DataTypePackage_c target, boolean loadComponent) {
		return getOneSLD_SCINPOnR4403(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			DataTypePackage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSLD_SCINPOnR4403(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, DataTypePackage_c target,
			ClassQueryInterface_c test) {
		return getOneSLD_SCINPOnR4403(modelRoot, target, test, true);
	}

	public static SystemConstantInPackage_c getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, DataTypePackage_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSLD_SCINPOnR4403(modelRoot, target, test);
	}
	private static SystemConstantInPackage_c find_getOneSLD_SCINPOnR4403(
			ModelRoot modelRoot, DataTypePackage_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayShowSystemConstantInPackageMayShow_R4403) {
				for (int i = 0; i < target.backPointer_MayShowSystemConstantInPackageMayShow_R4403
						.size(); ++i) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_MayShowSystemConstantInPackageMayShow_R4403
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c[] targets) {
		return getManySLD_SCINPsOnR4403(targets, null);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c[] targets, boolean loadComponent) {
		return getManySLD_SCINPsOnR4403(targets, null, loadComponent);
	}
	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c[] targets, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4403(targets, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayShowSystemConstantInPackageMayShow_R4403) {
				for (int j = 0; j < targets[i].backPointer_MayShowSystemConstantInPackageMayShow_R4403
						.size(); ++j) {
					SystemConstantInPackage_c source = (SystemConstantInPackage_c) targets[i].backPointer_MayShowSystemConstantInPackageMayShow_R4403
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c target) {
		return getManySLD_SCINPsOnR4403(target, null);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c target, boolean loadComponent) {
		return getManySLD_SCINPsOnR4403(target, null, loadComponent);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c target, ClassQueryInterface_c test) {
		return getManySLD_SCINPsOnR4403(target, test, true);
	}

	public static SystemConstantInPackage_c[] getManySLD_SCINPsOnR4403(
			DataTypePackage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new SystemConstantInPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayShowSystemConstantInPackageMayShow_R4403) {
			for (int i = 0; i < target.backPointer_MayShowSystemConstantInPackageMayShow_R4403
					.size(); ++i) {
				SystemConstantInPackage_c source = (SystemConstantInPackage_c) target.backPointer_MayShowSystemConstantInPackageMayShow_R4403
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SystemConstantInPackage_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsConstantInSystemModel == null) {
			// R4404
			baseRoot = Ooaofooa.getDefaultInstance();
			if (baseRoot != modelRoot && modelRoot.isCompareRoot()) {
				baseRoot = modelRoot;
			}
			SystemModel_c relInst38564 = (SystemModel_c) baseRoot
					.getInstanceList(SystemModel_c.class).get(
							new Object[]{m_sys_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst38564 == null) {
				relInst38564 = (SystemModel_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(SystemModel_c.class)
						.get(new Object[]{m_sys_id});
			}
			if (relInst38564 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst38564 = (SystemModel_c) roots[i].getInstanceList(
							SystemModel_c.class).get(new Object[]{m_sys_id});
					if (relInst38564 != null)
						break;
				}
			}
			//synchronized
			if (relInst38564 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst38564) && !isProxy())) {
					relInst38564.relateAcrossR4404To(this, notifyChanges);
				}
				// set the root in the Domain's model root, not the System Model's
				// modelRoot is the SystemModel's root when we are loading a Domain proxy
				((Ooaofooa) getModelRoot()).setRoot(relInst38564);
			}
			baseRoot = modelRoot;
		}

		// R4403
		DataTypePackage_c relInst38565 = (DataTypePackage_c) baseRoot
				.getInstanceList(DataTypePackage_c.class).get(
						new Object[]{m_package_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38565 == null) {
			relInst38565 = (DataTypePackage_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(DataTypePackage_c.class)
					.get(new Object[]{m_package_id});
		}
		if (relInst38565 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38565 = (DataTypePackage_c) roots[i].getInstanceList(
						DataTypePackage_c.class)
						.get(new Object[]{m_package_id});
				if (relInst38565 != null)
					break;
			}
		}
		//synchronized
		if (relInst38565 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38565) && !isProxy())) {
				relInst38565.relateAcrossR4403To(this, notifyChanges);
			}
		}

		ConstantSpecification_c relInst38566 = (ConstantSpecification_c) baseRoot
				.getInstanceList(ConstantSpecification_c.class).get(
						new Object[]{m_constant_spec_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38566 == null) {
			relInst38566 = (ConstantSpecification_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ConstantSpecification_c.class)
					.get(new Object[]{m_constant_spec_id});
		}
		if (relInst38566 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38566 = (ConstantSpecification_c) roots[i]
						.getInstanceList(ConstantSpecification_c.class).get(
								new Object[]{m_constant_spec_id});
				if (relInst38566 != null)
					break;
			}
		}
		//synchronized
		if (relInst38566 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38566) && !isProxy())) {
				relInst38566.relateAcrossR4403To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4404
		// S_SYS
		inst = IsConstantInSystemModel;
		unrelateAcrossR4404From(IsConstantInSystemModel, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R4403
		// S_DPK
		inst = CanShowInLowerPackageDataTypePackage;
		unrelateAcrossR4403From(CanShowInLowerPackageDataTypePackage,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// CNST_CSP
		inst = MayShowConstantSpecification;
		unrelateAcrossR4403From(MayShowConstantSpecification, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SystemConstantInPackage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SystemConstantInPackage_c inst = (SystemConstantInPackage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SystemConstantInPackage_c SystemConstantInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SystemConstantInPackage_c result = findSystemConstantInPackageInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SystemConstantInPackage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSystemConstantInPackageInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SystemConstantInPackage_c findSystemConstantInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SystemConstantInPackage_c x = (SystemConstantInPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SystemConstantInPackage_c SystemConstantInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SystemConstantInPackageInstance(modelRoot, test, true);
	}

	public static SystemConstantInPackage_c SystemConstantInPackageInstance(
			ModelRoot modelRoot) {
		return SystemConstantInPackageInstance(modelRoot, null, true);
	}

	public static SystemConstantInPackage_c[] SystemConstantInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SystemConstantInPackage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SystemConstantInPackage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SystemConstantInPackage_c x = (SystemConstantInPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SystemConstantInPackage_c[] ret_set = new SystemConstantInPackage_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SystemConstantInPackage_c[0];
			}
		}
	}
	public static SystemConstantInPackage_c[] SystemConstantInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SystemConstantInPackageInstances(modelRoot, test, true);
	}
	public static SystemConstantInPackage_c[] SystemConstantInPackageInstances(
			ModelRoot modelRoot) {
		return SystemConstantInPackageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the System Constant in Package.dispose call: ";
		SystemModel_c testR4404Inst = SystemModel_c.getOneS_SYSOnR4404(this,
				false);

		if (testR4404Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4404 ";
		}
		DataTypePackage_c testR4403Inst = DataTypePackage_c.getOneS_DPKOnR4403(
				this, false);

		if (testR4403Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4403 ";
		}

		ConstantSpecification_c testR4403InstOth = ConstantSpecification_c
				.getOneCNST_CSPOnR4403(this, false);

		if (testR4403InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "4403 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"System Constant in Package", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("sys_id")) {
			return true;
		}
		if (attributeName.equals("package_id")) {
			return true;
		}
		if (attributeName.equals("constant_spec_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getPackage_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getPackage_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getConstant_spec_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getConstant_spec_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSys_idLongBased() {
		if (IsConstantInSystemModel != null) {
			return IsConstantInSystemModel.getSys_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSys_id() {
		if (IsConstantInSystemModel != null) {
			return IsConstantInSystemModel.getSys_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSys_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sys_id))
			return m_sys_id;
		else
			return getSys_id();
	}

	public void setSys_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sys_id)) {
				return;
			}
		} else if (m_sys_id != null) {
			if (m_sys_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Sys_id", m_sys_id, newValue, true);
		m_sys_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPackage_idLongBased() {
		if (CanShowInLowerPackageDataTypePackage != null) {
			return CanShowInLowerPackageDataTypePackage
					.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPackage_id() {
		if (CanShowInLowerPackageDataTypePackage != null) {
			return CanShowInLowerPackageDataTypePackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPackage_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_package_id))
			return m_package_id;
		else
			return getPackage_id();
	}

	public void setPackage_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_package_id)) {
				return;
			}
		} else if (m_package_id != null) {
			if (m_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Package_id", m_package_id, newValue, true);
		m_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getConstant_spec_idLongBased() {
		if (MayShowConstantSpecification != null) {
			return MayShowConstantSpecification.getConstant_spec_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getConstant_spec_id() {
		if (MayShowConstantSpecification != null) {
			return MayShowConstantSpecification.getConstant_spec_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getConstant_spec_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_constant_spec_id))
			return m_constant_spec_id;
		else
			return getConstant_spec_id();
	}

	public void setConstant_spec_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_constant_spec_id)) {
				return;
			}
		} else if (m_constant_spec_id != null) {
			if (m_constant_spec_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Constant_spec_id", m_constant_spec_id, newValue, true);
		m_constant_spec_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "System Constant in Package", //$NON-NLS-1$
						" Operation entered: System Constant in Package::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SystemConstantInPackage_c[] objs = SystemConstantInPackage_c
				.SystemConstantInPackageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "System Constant in Package", //$NON-NLS-1$
						" Operation entered: System Constant in Package::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SystemConstantInPackage_c_test38568_c
				implements
					ClassQueryInterface_c {
			SystemConstantInPackage_c_test38568_c(java.util.UUID p38569,
					java.util.UUID p38570) {
				m_p38569 = p38569;
				m_p38570 = p38570;
			}
			private java.util.UUID m_p38569;
			private java.util.UUID m_p38570;
			public boolean evaluate(Object candidate) {
				SystemConstantInPackage_c selected = (SystemConstantInPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p38569))
						& (selected.getConstant_spec_id().equals(m_p38570));
				return retval;
			}
		}

		SystemConstantInPackage_c[] objs38567 = SystemConstantInPackage_c
				.SystemConstantInPackageInstances(modelRoot,
						new SystemConstantInPackage_c_test38568_c(
								getPackage_id(), getConstant_spec_id()));

		if (((objs38567.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"System Constant in Package", //$NON-NLS-1$
								"Consistency: Object: System Constant in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38567.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: System Constant in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38567.length), e);
			}
			retval = false;

		}

		if (((objs38567.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"System Constant in Package", //$NON-NLS-1$
								"Consistency: Object: System Constant in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38567.length)
										+ " Package_ID: " + "Not Printable" + " Constant_Spec_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: System Constant in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38567.length)
										+ " Package_ID: " + "Not Printable" + " Constant_Spec_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// System Constant in Package is a referring class in association: rel.Numb = 4404
		// The participating class is: System Model
		class SystemModel_c_test38574_c implements ClassQueryInterface_c {
			SystemModel_c_test38574_c(java.util.UUID p38575) {
				m_p38575 = p38575;
			}
			private java.util.UUID m_p38575;
			public boolean evaluate(Object candidate) {
				SystemModel_c selected = (SystemModel_c) candidate;
				boolean retval = false;
				retval = (selected.getSys_id().equals(m_p38575));
				return retval;
			}
		}

		SystemModel_c[] objs38573 = SystemModel_c.SystemModelInstances(Ooaofooa
				.getDefaultInstance(), new SystemModel_c_test38574_c(
				getSys_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs38573.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"System Constant in Package", //$NON-NLS-1$
								"Consistency: Object: System Constant in Package: Association: 4404: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38573.length)
										+ " Sys_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: System Constant in Package: Association: 4404: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38573.length)
										+ " Sys_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// System Constant in Package is a link class in association: rel.Numb = 4403
		// Other side
		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end System Constant in Package
