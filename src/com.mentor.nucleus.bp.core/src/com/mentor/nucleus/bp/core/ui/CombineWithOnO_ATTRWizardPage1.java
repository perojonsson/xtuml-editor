package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    CombineWithOnO_ATTRWizardPage1.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class CombineWithOnO_ATTRWizardPage1 extends PtWizardPage
		implements
			Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo Combine_withCombo;
	public Label Combine_withLabel;

	// cache for user choices
	ReferentialAttribute_c Combine_with = null;
	ReferentialAttribute_c[] Combine_withInstances;

	/**
	 * Constructors for CombineWithOnO_ATTRWizardPage1.
	 */
	public CombineWithOnO_ATTRWizardPage1() {
		super("");
		init();
	}

	public CombineWithOnO_ATTRWizardPage1(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Combine With");
		setDescription("Select attribute to combine with this one");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((CombineWithOnO_ATTRWizard) getWizard())
						.getSelection());

		// cache for context
		Attribute_c v_o_attr = ((CombineWithOnO_ATTRWizard) getWizard()).v_o_attr;

		ReferentialAttribute_c v_rattr = ReferentialAttribute_c
				.getOneO_RATTROnR106(v_o_attr);

		BaseAttribute_c v_base_attr = BaseAttribute_c
				.getOneO_BATTROnR113(v_rattr);

		// select related by where USER::selectOne
		ReferentialAttribute_c[] v_Combine_withInstances = ReferentialAttribute_c
				.getManyO_RATTRsOnR106(Attribute_c
						.getManyO_ATTRsOnR102(ModelClass_c
								.getManyO_OBJsOnR102(v_o_attr)));
		ReferentialAttribute_c v_Combine_with = null;
		int Combine_withInstCount;
		int Combine_withResultCount = 0;
		for (Combine_withInstCount = 0; Combine_withInstCount < v_Combine_withInstances.length; Combine_withInstCount++) {
			ReferentialAttribute_c selected = v_Combine_withInstances[Combine_withInstCount];
			if (User_c.Selectone(selected.getAttr_id())
					&& selected.getBattr_id().equals(v_base_attr.getAttr_id())
					&& selected.getBobj_id().equals(v_base_attr.getObj_id())
					&& !v_rattr.Alreadycombinedwith(selected.getAttr_id())) {
				Combine_withResultCount++;
			}
		}
		this.Combine_withInstances = new ReferentialAttribute_c[Combine_withResultCount];
		Combine_withResultCount = 0;
		for (Combine_withInstCount = 0; Combine_withInstCount < v_Combine_withInstances.length; Combine_withInstCount++) {
			ReferentialAttribute_c selected = v_Combine_withInstances[Combine_withInstCount];
			if (User_c.Selectone(selected.getAttr_id())
					&& selected.getBattr_id().equals(v_base_attr.getAttr_id())
					&& selected.getBobj_id().equals(v_base_attr.getObj_id())
					&& !v_rattr.Alreadycombinedwith(selected.getAttr_id())) {
				this.Combine_withInstances[Combine_withResultCount] = selected;
				Combine_withResultCount++;
			}
		}
		Combine_withCombo.removeAll();
		for (Combine_withInstCount = 0; Combine_withInstCount < Combine_withResultCount; Combine_withInstCount++)
			Combine_withCombo
					.add(((ReferentialAttribute_c) this.Combine_withInstances[Combine_withInstCount])
							.Get_name());
		if (Combine_withResultCount > 0) {
			Combine_withCombo.select(0);
			updateSelectedCombine_with();
		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		Combine_withLabel = new Label(composite, SWT.NONE);
		Combine_withLabel.setText("Combine_with");
		Combine_withCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		Combine_withCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		Combine_withCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedCombine_with() {
		this.Combine_with = Combine_withInstances[Combine_withCombo
				.getSelectionIndex()];
		((CombineWithOnO_ATTRWizard) getWizard()).v_Combine_with = this.Combine_with;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == Combine_withCombo) {
			updateSelectedCombine_with();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Combine_with == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((CombineWithOnO_ATTRWizard) getWizard()).v_Combine_with = Combine_with;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Combine_with == null)
			return false;
		return true;
	}

}
