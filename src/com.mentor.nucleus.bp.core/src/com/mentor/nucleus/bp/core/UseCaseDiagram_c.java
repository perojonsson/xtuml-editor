      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.UseCaseDiagram_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_USE_CASE_DIAGRAM extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class UseCaseDiagram_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public UseCaseDiagram_c(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_ss_id,
       java.util.UUID         p_m_parent_package_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_sys_id,
       java.util.UUID         p_m_component_package_id,
       java.util.UUID         p_m_component_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_component_package_id = IdAssigner.preprocessUUID(p_m_component_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_parent_package_id = IdAssigner.preprocessUUID(p_m_parent_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
    setUniqueId(m_package_id);
    Object [] key = {m_package_id};
    addInstanceToMap(key);
  }
  static public UseCaseDiagram_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_ss_id,
       java.util.UUID         p_m_parent_package_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_sys_id,
       java.util.UUID         p_m_component_package_id,
       java.util.UUID         p_m_component_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
      UseCaseDiagram_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_package_id};
          new_inst = (UseCaseDiagram_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_component_package_id = IdAssigner.preprocessUUID(p_m_component_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_parent_package_id = IdAssigner.preprocessUUID(p_m_parent_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new UseCaseDiagram_c(modelRoot,
p_m_package_id,
p_m_dom_id,
p_m_ss_id,
p_m_parent_package_id,
p_m_name,
p_m_descrip,
p_m_sys_id,
p_m_component_package_id,
p_m_component_id
);
		new_inst.m_contentPath = contentPath;
    new_inst.setComponent(null);
	}
    return new_inst;
  }

  static public UseCaseDiagram_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_package_id,
       java.util.UUID         p_m_dom_id,
       java.util.UUID         p_m_ss_id,
       java.util.UUID         p_m_parent_package_id,
       String       p_m_name,
       String       p_m_descrip,
       java.util.UUID         p_m_sys_id,
       java.util.UUID         p_m_component_package_id,
       java.util.UUID         p_m_component_id){
    InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
    UseCaseDiagram_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_package_id
            };
        source = (UseCaseDiagram_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dom_id = IdAssigner.preprocessUUID(p_m_dom_id);
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sys_id = IdAssigner.preprocessUUID(p_m_sys_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_package_id = IdAssigner.preprocessUUID(p_m_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_component_package_id = IdAssigner.preprocessUUID(p_m_component_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_parent_package_id = IdAssigner.preprocessUUID(p_m_parent_package_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_component_id = IdAssigner.preprocessUUID(p_m_component_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    UseCaseDiagram_c new_inst = new UseCaseDiagram_c(modelRoot,
p_m_package_id,
p_m_dom_id,
p_m_ss_id,
p_m_parent_package_id,
p_m_name,
p_m_descrip,
p_m_sys_id,
p_m_component_package_id,
p_m_component_id
);
    return new_inst;
  }
  public UseCaseDiagram_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_ss_id = IdAssigner.NULL_UUID;   
     m_dom_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_descrip = "";   
     m_sys_id = IdAssigner.NULL_UUID;   
     m_package_id = idAssigner.createUUID();
     m_component_package_id = IdAssigner.NULL_UUID;   
     m_parent_package_id = IdAssigner.NULL_UUID;   
     m_component_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_package_id);
    Object [] key = {m_package_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_package_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_package_id !=  p_newKey ){
	
		m_package_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof UseCaseDiagram_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof UseCaseDiagram_c)) {
           return false;
       }
       
       UseCaseDiagram_c me = (UseCaseDiagram_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getPackage_id()) || IdAssigner.NULL_UUID.equals(((UseCaseDiagram_c)elem).getPackage_id())) && this != elem)) {
      	return false;
      }
      if (!getPackage_id().equals(((UseCaseDiagram_c)elem).getPackage_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof UseCaseDiagram_c)) {
           return false;
       }
       
       UseCaseDiagram_c me = (UseCaseDiagram_c)elem;
      if (!getPackage_idCachedValue().equals(((UseCaseDiagram_c)elem).getPackage_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_ss_id ;
  private java.util.UUID         m_dom_id ;
  private String       m_name ;
  private String       m_descrip ;
  private java.util.UUID         m_sys_id ;
  private java.util.UUID         m_package_id ;
  private java.util.UUID         m_component_package_id ;
  private java.util.UUID         m_parent_package_id ;
  private java.util.UUID         m_component_id ;
      
// declare association references from this class
  
  
    
// referring navigation

UseCaseInUseCase_c IsConnectionToParentUseCaseInUseCase ;
public void relateAcrossR1209To(UseCaseInUseCase_c target)
{
	relateAcrossR1209To(target, true);
}
public void relateAcrossR1209To(UseCaseInUseCase_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsConnectionToParentUseCaseInUseCase) return;  // already related

    if ( IsConnectionToParentUseCaseInUseCase != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsConnectionToParentUseCaseInUseCase != null) {
    
        IsConnectionToParentUseCaseInUseCase.clearBackPointerR1209To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1209To(UseCaseInUseCase_c target)", 
			"Relate performed across R1209 from Use Case Diagram to Use Case in Use Case without unrelate of prior instance.");  
		}
    }
                
    	IsConnectionToParentUseCaseInUseCase = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_parent_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1209To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1209", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1209From(UseCaseInUseCase_c target)
{
	unrelateAcrossR1209From(target, true);
}
public void unrelateAcrossR1209From(UseCaseInUseCase_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsConnectionToParentUseCaseInUseCase == null) return;  // already unrelated
	
	if (target != IsConnectionToParentUseCaseInUseCase) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1209", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1209To(this);
    }
    

      if(IsConnectionToParentUseCaseInUseCase != null) {
      
        m_parent_package_id = IsConnectionToParentUseCaseInUseCase.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_parent_package_id))
        {
          m_parent_package_id = IsConnectionToParentUseCaseInUseCase.getPackage_idCachedValue();
        }       
        IsConnectionToParentUseCaseInUseCase = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1209", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1209(UseCaseInUseCase_c [] targets)
{
    return getOneUC_UCCOnR1209(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(UseCaseInUseCase_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1209(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(UseCaseInUseCase_c target)
{
  return getOneUC_UCCOnR1209(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(UseCaseInUseCase_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1209(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(UseCaseInUseCase_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1209(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(ModelRoot modelRoot, UseCaseInUseCase_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1209(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1209(ModelRoot modelRoot, UseCaseInUseCase_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneUC_UCCOnR1209(modelRoot,target,test);
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1209(ModelRoot modelRoot, UseCaseInUseCase_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209) {
	    for ( int i = 0; i < target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c [] targets)
{
  return getManyUC_UCCsOnR1209(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1209(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1209(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_HasChildrenUseCaseDiagramHasChildren_R1209) {
	    for (int j = 0; j < targets[i].backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c target)
{
  return getManyUC_UCCsOnR1209(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1209(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1209(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1209(UseCaseInUseCase_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209) {
    for (int i = 0; i < target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_HasChildrenUseCaseDiagramHasChildren_R1209.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

Domain_c CanBeDisplayedInDomain ;
public void relateAcrossR1201To(Domain_c target)
{
	relateAcrossR1201To(target, true);
}
public void relateAcrossR1201To(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == CanBeDisplayedInDomain) return;  // already related

    if ( CanBeDisplayedInDomain != target ) {
    
    Object oldKey = getInstanceKey();

    if (CanBeDisplayedInDomain != null) {
        UmlProblem.removeXtUMLProblem(this, CanBeDisplayedInDomain);
    
        CanBeDisplayedInDomain.clearBackPointerR1201To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1201To(Domain_c target)", 
			"Relate performed across R1201 from Use Case Diagram to Domain without unrelate of prior instance.");  
		}
    }
                
    	CanBeDisplayedInDomain = target ;
        m_dom_id = target.getDom_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1201To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1201", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1201From(Domain_c target)
{
	unrelateAcrossR1201From(target, true);
}
public void unrelateAcrossR1201From(Domain_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (CanBeDisplayedInDomain == null) return;  // already unrelated
	
	if (target != CanBeDisplayedInDomain) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1201", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1201To(this);
    }
    

      if(CanBeDisplayedInDomain != null) {
      
        m_dom_id = CanBeDisplayedInDomain.getDom_id();
        CanBeDisplayedInDomain = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1201", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1201(Domain_c [] targets)
{
    return getOneUC_UCCOnR1201(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(Domain_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1201(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(Domain_c target)
{
  return getOneUC_UCCOnR1201(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(Domain_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1201(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1201(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1201(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1201(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  UseCaseDiagram_c result = null;
  
  result=find_getOneUC_UCCOnR1201(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,UseCaseDiagram_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneUC_UCCOnR1201(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1201(ModelRoot modelRoot, Domain_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201) {
	    for ( int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c [] targets)
{
  return getManyUC_UCCsOnR1201(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1201(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1201(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, UseCaseDiagram_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201) {
	    for (int j = 0; j < targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c target)
{
  return getManyUC_UCCsOnR1201(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1201(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1201(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1201(Domain_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, UseCaseDiagram_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201) {
    for (int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1201.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

Subsystem_c CanBeDisplayedInSubsystem ;
public void relateAcrossR1202To(Subsystem_c target)
{
	relateAcrossR1202To(target, true);
}
public void relateAcrossR1202To(Subsystem_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == CanBeDisplayedInSubsystem) return;  // already related

    if ( CanBeDisplayedInSubsystem != target ) {
    
    Object oldKey = getInstanceKey();

    if (CanBeDisplayedInSubsystem != null) {
        UmlProblem.removeXtUMLProblem(this, CanBeDisplayedInSubsystem);
    
        CanBeDisplayedInSubsystem.clearBackPointerR1202To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1202To(Subsystem_c target)", 
			"Relate performed across R1202 from Use Case Diagram to Subsystem without unrelate of prior instance.");  
		}
    }
                
    	CanBeDisplayedInSubsystem = target ;
        m_ss_id = target.getSs_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1202To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1202", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1202From(Subsystem_c target)
{
	unrelateAcrossR1202From(target, true);
}
public void unrelateAcrossR1202From(Subsystem_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (CanBeDisplayedInSubsystem == null) return;  // already unrelated
	
	if (target != CanBeDisplayedInSubsystem) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1202", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1202To(this);
    }
    

      if(CanBeDisplayedInSubsystem != null) {
      
        m_ss_id = CanBeDisplayedInSubsystem.getSs_id();
        CanBeDisplayedInSubsystem = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1202", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1202(Subsystem_c [] targets)
{
    return getOneUC_UCCOnR1202(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(Subsystem_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1202(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(Subsystem_c target)
{
  return getOneUC_UCCOnR1202(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(Subsystem_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1202(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(Subsystem_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1202(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1202(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1202(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  UseCaseDiagram_c result = null;
  
  result=find_getOneUC_UCCOnR1202(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,UseCaseDiagram_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneUC_UCCOnR1202(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1202(ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202) {
	    for ( int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c [] targets)
{
  return getManyUC_UCCsOnR1202(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1202(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1202(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, UseCaseDiagram_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202) {
	    for (int j = 0; j < targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c target)
{
  return getManyUC_UCCsOnR1202(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1202(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1202(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1202(Subsystem_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, UseCaseDiagram_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202) {
    for (int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1202.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

SystemModel_c SystemModel ;
public void relateAcrossR1211To(SystemModel_c target)
{
	relateAcrossR1211To(target, true);
}
public void relateAcrossR1211To(SystemModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == SystemModel) return;  // already related

    if ( SystemModel != target ) {
    
    Object oldKey = getInstanceKey();

    if (SystemModel != null) {
        UmlProblem.removeXtUMLProblem(this, SystemModel);
    
        SystemModel.clearBackPointerR1211To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1211To(SystemModel_c target)", 
			"Relate performed across R1211 from Use Case Diagram to System Model without unrelate of prior instance.");  
		}
    }
                
    	SystemModel = target ;
        m_sys_id = target.getSys_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1211To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1211", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1211From(SystemModel_c target)
{
	unrelateAcrossR1211From(target, true);
}
public void unrelateAcrossR1211From(SystemModel_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (SystemModel == null) return;  // already unrelated
	
	if (target != SystemModel) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1211", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1211To(this);
    }
    

      if(SystemModel != null) {
      
        m_sys_id = SystemModel.getSys_id();
        SystemModel = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1211", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1211(SystemModel_c [] targets)
{
    return getOneUC_UCCOnR1211(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(SystemModel_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1211(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(SystemModel_c target)
{
  return getOneUC_UCCOnR1211(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(SystemModel_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1211(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(SystemModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1211(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1211(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1211(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  UseCaseDiagram_c result = null;
  
  result=find_getOneUC_UCCOnR1211(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,UseCaseDiagram_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneUC_UCCOnR1211(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1211(ModelRoot modelRoot, SystemModel_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211) {
	    for ( int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c [] targets)
{
  return getManyUC_UCCsOnR1211(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1211(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1211(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, UseCaseDiagram_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211) {
	    for (int j = 0; j < targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c target)
{
  return getManyUC_UCCsOnR1211(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1211(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1211(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1211(SystemModel_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, UseCaseDiagram_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211) {
    for (int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1211.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

ComponentPackage_c ComponentPackage ;
public void relateAcrossR1212To(ComponentPackage_c target)
{
	relateAcrossR1212To(target, true);
}
public void relateAcrossR1212To(ComponentPackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ComponentPackage) return;  // already related

    if ( ComponentPackage != target ) {
    
    Object oldKey = getInstanceKey();

    if (ComponentPackage != null) {
        UmlProblem.removeXtUMLProblem(this, ComponentPackage);
    
        ComponentPackage.clearBackPointerR1212To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1212To(ComponentPackage_c target)", 
			"Relate performed across R1212 from Use Case Diagram to Component Package without unrelate of prior instance.");  
		}
    }
                
    	ComponentPackage = target ;
        if(IdAssigner.NULL_UUID.equals(target.getPackage_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_component_package_id = target.getPackage_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1212To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1212", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1212From(ComponentPackage_c target)
{
	unrelateAcrossR1212From(target, true);
}
public void unrelateAcrossR1212From(ComponentPackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ComponentPackage == null) return;  // already unrelated
	
	if (target != ComponentPackage) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1212", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1212To(this);
    }
    

      if(ComponentPackage != null) {
      
        m_component_package_id = ComponentPackage.getPackage_id();
        if(IdAssigner.NULL_UUID.equals(m_component_package_id))
        {
          m_component_package_id = ComponentPackage.getPackage_idCachedValue();
        }       
        ComponentPackage = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1212", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1212(ComponentPackage_c [] targets)
{
    return getOneUC_UCCOnR1212(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ComponentPackage_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1212(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ComponentPackage_c target)
{
  return getOneUC_UCCOnR1212(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ComponentPackage_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1212(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ComponentPackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1212(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ModelRoot modelRoot, ComponentPackage_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1212(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1212(ModelRoot modelRoot, ComponentPackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  UseCaseDiagram_c result = null;
  
  result=find_getOneUC_UCCOnR1212(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,UseCaseDiagram_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneUC_UCCOnR1212(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1212(ModelRoot modelRoot, ComponentPackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212) {
	    for ( int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c [] targets)
{
  return getManyUC_UCCsOnR1212(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1212(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1212(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, UseCaseDiagram_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212) {
	    for (int j = 0; j < targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c target)
{
  return getManyUC_UCCsOnR1212(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1212(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1212(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1212(ComponentPackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, UseCaseDiagram_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212) {
    for (int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1212.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

Component_c Component ;
public void relateAcrossR1213To(Component_c target)
{
	relateAcrossR1213To(target, true);
}
public void relateAcrossR1213To(Component_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == Component) return;  // already related

    if ( Component != target ) {
    
    Object oldKey = getInstanceKey();

    if (Component != null) {
        UmlProblem.removeXtUMLProblem(this, Component);
    
        Component.clearBackPointerR1213To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1213To(Component_c target)", 
			"Relate performed across R1213 from Use Case Diagram to Component without unrelate of prior instance.");  
		}
    }
                
    	Component = target ;
        if(IdAssigner.NULL_UUID.equals(target.getId()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_component_id = target.getIdCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1213To(this);
        target.addRef();
        UmlProblem.handleDanglingReference(this, target);
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1213", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1213From(Component_c target)
{
	unrelateAcrossR1213From(target, true);
}
public void unrelateAcrossR1213From(Component_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (Component == null) return;  // already unrelated
	
	if (target != Component) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1213", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1213To(this);
    }
    

      if(Component != null) {
      
        m_component_id = Component.getId();
        if(IdAssigner.NULL_UUID.equals(m_component_id))
        {
          m_component_id = Component.getIdCachedValue();
        }       
        Component = null ;
        target.removeRef();
        UmlProblem.removeXtUMLProblem(this, target);
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1213", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1213(Component_c [] targets)
{
    return getOneUC_UCCOnR1213(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(Component_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1213(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(Component_c target)
{
  return getOneUC_UCCOnR1213(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(Component_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1213(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(Component_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1213(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1213(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1213(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  UseCaseDiagram_c result = null;
  
  result=find_getOneUC_UCCOnR1213(modelRoot,target,test);
  if (result==null && (loadComponent)) {
     // Containment Relation
     List comps =  PersistenceManager.findAllChildComponents(target.getPersistableComponent(),modelRoot,UseCaseDiagram_c.class);
    for (int i = 0; i < comps.size(); i++) {
      PersistableModelComponent component = (PersistableModelComponent) comps.get(i);
      if (!component.isLoaded()) {
        try {
          component.load(new NullProgressMonitor());
          result=find_getOneUC_UCCOnR1213(modelRoot,target,test);
          if(result!=null) return result;
        } catch (Exception e) {
          CorePlugin.logError("Error Loading component", e);
        }
      }
    }
  }
  
  return result;
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1213(ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213) {
	    for ( int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.size(); ++i ) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c [] targets)
{
  return getManyUC_UCCsOnR1213(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1213(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1213(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
  if(loadComponent){
     //Containment Relation
     PersistableModelComponent[] pmcs= new PersistableModelComponent[targets.length];
            for (int i = 0; i < targets.length; i++) {
               pmcs[i]=targets[i].getPersistableComponent();
            }
	 PersistenceManager.ensureAllChildInstancesLoaded(pmcs,modelRoot, UseCaseDiagram_c.class);
  
  }
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213) {
	    for (int j = 0; j < targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.size(); ++j) {
	      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c target)
{
  return getManyUC_UCCsOnR1213(target, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c target, boolean loadComponent)
{
  return getManyUC_UCCsOnR1213(target, null, loadComponent);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c target, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1213(target, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1213(Component_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new UseCaseDiagram_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  if(loadComponent){
     //Containment Relation
 	 PersistenceManager.ensureAllChildInstancesLoaded(target.getPersistableComponent(),modelRoot, UseCaseDiagram_c.class);
  }
  Vector matches = new Vector();
  synchronized(target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213) {
    for (int i = 0; i < target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.size(); ++i) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_CanDisplayUseCaseDiagramCanDisplay_R1213.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new UseCaseDiagram_c[0];
	}
  }


  
    
// referring navigation

SpecificationPackage_c IsSupertypeSpecificationPackage ;
public void relateAcrossR1402To(SpecificationPackage_c target)
{
	relateAcrossR1402To(target, true);
}
public void relateAcrossR1402To(SpecificationPackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeSpecificationPackage) return;  // already related

    if ( IsSupertypeSpecificationPackage != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeSpecificationPackage != null) {
    
        IsSupertypeSpecificationPackage.clearBackPointerR1402To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"UseCaseDiagram_c.relateAcrossR1402To(SpecificationPackage_c target)", 
			"Relate performed across R1402 from Use Case Diagram to Specification Package without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeSpecificationPackage = target ;
        m_package_id = target.getPackage_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR1402To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "1402", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR1402From(SpecificationPackage_c target)
{
	unrelateAcrossR1402From(target, true);
}
public void unrelateAcrossR1402From(SpecificationPackage_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeSpecificationPackage == null) return;  // already unrelated
	
	if (target != IsSupertypeSpecificationPackage) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R1402", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR1402To(this);
    }
    

      if(IsSupertypeSpecificationPackage != null) {
      
        m_package_id = IsSupertypeSpecificationPackage.getPackage_id();
        IsSupertypeSpecificationPackage = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "1402", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static UseCaseDiagram_c getOneUC_UCCOnR1402(SpecificationPackage_c [] targets)
{
    return getOneUC_UCCOnR1402(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(SpecificationPackage_c [] targets, ClassQueryInterface_c test)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneUC_UCCOnR1402(targets[i], test);
        }
    }

    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(SpecificationPackage_c target)
{
  return getOneUC_UCCOnR1402(target, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(SpecificationPackage_c target, boolean loadComponent)
{
    return getOneUC_UCCOnR1402(target.getModelRoot(), target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(SpecificationPackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneUC_UCCOnR1402(target.getModelRoot(), target, test);
  }
  return null;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(ModelRoot modelRoot, SpecificationPackage_c target, ClassQueryInterface_c test)
{
	return getOneUC_UCCOnR1402(modelRoot, target, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1402(ModelRoot modelRoot, SpecificationPackage_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneUC_UCCOnR1402(modelRoot,target,test);
}
private static UseCaseDiagram_c find_getOneUC_UCCOnR1402(ModelRoot modelRoot, SpecificationPackage_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    UseCaseDiagram_c source = (UseCaseDiagram_c)target.backPointer_IsSubtypeUseCaseDiagramIsSubtype_R1402;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c [] targets)
{
  return getManyUC_UCCsOnR1402(targets, null);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c [] targets, boolean loadComponent)
{
  return getManyUC_UCCsOnR1402(targets, null, loadComponent);
}
public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c [] targets, ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1402(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new UseCaseDiagram_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      UseCaseDiagram_c source = (UseCaseDiagram_c)targets[i].backPointer_IsSubtypeUseCaseDiagramIsSubtype_R1402;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new UseCaseDiagram_c[0];
  }
  }

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c target)
{
  if (target != null) {
    SpecificationPackage_c [] targetArray = new SpecificationPackage_c[1];
    targetArray[0] = target;
    return getManyUC_UCCsOnR1402(targetArray);
  } else {
    UseCaseDiagram_c [] result = new UseCaseDiagram_c [0] ;
  return result ;
}
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1402(SpecificationPackage_c target, boolean loadComponent)
{
  if (target != null) {
    SpecificationPackage_c [] targetArray = new SpecificationPackage_c[1];
    targetArray[0] = target;
    return getManyUC_UCCsOnR1402(targetArray, loadComponent);
  } else {
    UseCaseDiagram_c [] result = new UseCaseDiagram_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

UseCaseInUseCase_c backPointer_CanShowUseCaseInUseCaseCanShow_R1208;

public void setUseCaseInUseCaseOrderInChildListR1208(UseCaseInUseCase_c target, int index) {
	unrelateAcrossR1208From(target);
	UseCaseInUseCase_c[] elements = UseCaseInUseCase_c.getManyUC_UIUsOnR1208(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1208From((UseCaseInUseCase_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1208To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1208To((UseCaseInUseCase_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1208To(UseCaseInUseCase_c target)
{
  if (target != null) {
    target.relateAcrossR1208To(this, true) ;
  }
}

public void relateAcrossR1208To(UseCaseInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1208To(this, notifyChanges) ;
  }
}

public void setBackPointerR1208To(UseCaseInUseCase_c target)
{
    backPointer_CanShowUseCaseInUseCaseCanShow_R1208 = target;
}

public void unrelateAcrossR1208From(UseCaseInUseCase_c target)
{
  if (target != null) {
    target.unrelateAcrossR1208From(this, true) ;
  }
}

public void unrelateAcrossR1208From(UseCaseInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1208From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1208To(UseCaseInUseCase_c target)
{
	if (target == backPointer_CanShowUseCaseInUseCaseCanShow_R1208) {
		backPointer_CanShowUseCaseInUseCaseCanShow_R1208 = null;
	}
}

public static UseCaseDiagram_c getOneUC_UCCOnR1208(UseCaseInUseCase_c [] targets)
{
    return getOneUC_UCCOnR1208(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1208(UseCaseInUseCase_c [] targets, ClassQueryInterface_c test)
{
    return getOneUC_UCCOnR1208(targets, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1208(UseCaseInUseCase_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             UseCaseDiagram_c candidate_val = getOneUC_UCCOnR1208(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneUC_UCCOnR1208(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1208(UseCaseInUseCase_c target)
{
	return getOneUC_UCCOnR1208(target, true);
}
public static UseCaseDiagram_c getOneUC_UCCOnR1208(UseCaseInUseCase_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsShownInUseCaseDiagram != null){
		target.IsShownInUseCaseDiagram.loadProxy();
	}
	}
    return target.IsShownInUseCaseDiagram ;
  } else {
    return null;
  }
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1208(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseDiagram_c[0];
  
  
  LinkedHashSet<UseCaseDiagram_c> elementsSet = new LinkedHashSet<UseCaseDiagram_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsShownInUseCaseDiagram == null)
	  targets[i].loadProxy();
    UseCaseDiagram_c associate = targets[i].IsShownInUseCaseDiagram;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  UseCaseDiagram_c[] result = new UseCaseDiagram_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c [] targets)
{
  return getManyUC_UCCsOnR1208(targets, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UseCaseInUseCase_c [] targetArray = new UseCaseInUseCase_c[1];
    targetArray[0] = target;
    return getManyUC_UCCsOnR1208(targetArray, test, loadComponent);
  } else {
    UseCaseDiagram_c [] result = new UseCaseDiagram_c [0] ;
    return result ;
  }
  
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c target,
    ClassQueryInterface_c test)
{
    return getManyUC_UCCsOnR1208(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c target)
{
    return getManyUC_UCCsOnR1208(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1208(UseCaseInUseCase_c target, boolean loadComponent)
{
    return getManyUC_UCCsOnR1208(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ParticipantInUseCase_c> backPointer_CanDisplayParticipantInUseCaseCanDisplay_R1203 = new ArrayList<ParticipantInUseCase_c>();

public void setParticipantInUseCaseOrderInChildListR1203(ParticipantInUseCase_c target, int index) {
	unrelateAcrossR1203From(target);
	ParticipantInUseCase_c[] elements = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1203From((ParticipantInUseCase_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1203To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1203To((ParticipantInUseCase_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1203To(ParticipantInUseCase_c target)
{
  if (target != null) {
    target.relateAcrossR1203To(this, true) ;
  }
}

public void relateAcrossR1203To(ParticipantInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1203To(this, notifyChanges) ;
  }
}

public void setBackPointerR1203To(ParticipantInUseCase_c target)
{
  	synchronized (backPointer_CanDisplayParticipantInUseCaseCanDisplay_R1203) {
		backPointer_CanDisplayParticipantInUseCaseCanDisplay_R1203.add(target);
	}
}

public void unrelateAcrossR1203From(ParticipantInUseCase_c target)
{
  if (target != null) {
    target.unrelateAcrossR1203From(this, true) ;
  }
}

public void unrelateAcrossR1203From(ParticipantInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1203From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1203To(ParticipantInUseCase_c target)
{
  synchronized (backPointer_CanDisplayParticipantInUseCaseCanDisplay_R1203) {
	    backPointer_CanDisplayParticipantInUseCaseCanDisplay_R1203.remove(target);
	}
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(ParticipantInUseCase_c [] targets)
{
    return getOneUC_UCCOnR1203(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(ParticipantInUseCase_c [] targets, ClassQueryInterface_c test)
{
    return getOneUC_UCCOnR1203(targets, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(ParticipantInUseCase_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             UseCaseDiagram_c candidate_val = getOneUC_UCCOnR1203(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneUC_UCCOnR1203(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(ParticipantInUseCase_c target)
{
	return getOneUC_UCCOnR1203(target, true);
}
public static UseCaseDiagram_c getOneUC_UCCOnR1203(ParticipantInUseCase_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsDisplayedInUseCaseDiagram ;
  } else {
    return null;
  }
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1203(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseDiagram_c[0];
  
  
  LinkedHashSet<UseCaseDiagram_c> elementsSet = new LinkedHashSet<UseCaseDiagram_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDisplayedInUseCaseDiagram == null)
	  targets[i].loadProxy();
    UseCaseDiagram_c associate = targets[i].IsDisplayedInUseCaseDiagram;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseDiagram_c[] result = new UseCaseDiagram_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c [] targets)
{
  return getManyUC_UCCsOnR1203(targets, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ParticipantInUseCase_c [] targetArray = new ParticipantInUseCase_c[1];
    targetArray[0] = target;
    return getManyUC_UCCsOnR1203(targetArray, test, loadComponent);
  } else {
    UseCaseDiagram_c [] result = new UseCaseDiagram_c [0] ;
    return result ;
  }
  
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c target,
    ClassQueryInterface_c test)
{
    return getManyUC_UCCsOnR1203(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c target)
{
    return getManyUC_UCCsOnR1203(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1203(ParticipantInUseCase_c target, boolean loadComponent)
{
    return getManyUC_UCCsOnR1203(target, null, loadComponent);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(InteractionParticipant_c target)
{
  return UseCaseDiagram_c.getOneUC_UCCOnR1203(ParticipantInUseCase_c.getOneUC_PIUCOnR1203(target)) ;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1203(InteractionParticipant_c target,
    ClassQueryInterface_c test)
{
  return UseCaseDiagram_c.getOneUC_UCCOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(target), test) ;
}



    
  
  
// referred to navigation

ArrayList<AssociationInUseCase_c> backPointer_ContainsAssociationInUseCaseContains_R1214 = new ArrayList<AssociationInUseCase_c>();

public void setAssociationInUseCaseOrderInChildListR1214(AssociationInUseCase_c target, int index) {
	unrelateAcrossR1214From(target);
	AssociationInUseCase_c[] elements = AssociationInUseCase_c.getManyUC_AIUCsOnR1214(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR1214From((AssociationInUseCase_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR1214To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR1214To((AssociationInUseCase_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR1214To(AssociationInUseCase_c target)
{
  if (target != null) {
    target.relateAcrossR1214To(this, true) ;
  }
}

public void relateAcrossR1214To(AssociationInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR1214To(this, notifyChanges) ;
  }
}

public void setBackPointerR1214To(AssociationInUseCase_c target)
{
  	synchronized (backPointer_ContainsAssociationInUseCaseContains_R1214) {
		backPointer_ContainsAssociationInUseCaseContains_R1214.add(target);
	}
}

public void unrelateAcrossR1214From(AssociationInUseCase_c target)
{
  if (target != null) {
    target.unrelateAcrossR1214From(this, true) ;
  }
}

public void unrelateAcrossR1214From(AssociationInUseCase_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR1214From(this, notifyChanges) ;
  }
}

public void clearBackPointerR1214To(AssociationInUseCase_c target)
{
  synchronized (backPointer_ContainsAssociationInUseCaseContains_R1214) {
	    backPointer_ContainsAssociationInUseCaseContains_R1214.remove(target);
	}
}

public static UseCaseDiagram_c getOneUC_UCCOnR1214(AssociationInUseCase_c [] targets)
{
    return getOneUC_UCCOnR1214(targets, null);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1214(AssociationInUseCase_c [] targets, ClassQueryInterface_c test)
{
    return getOneUC_UCCOnR1214(targets, test, true);
}

public static UseCaseDiagram_c getOneUC_UCCOnR1214(AssociationInUseCase_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    UseCaseDiagram_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             UseCaseDiagram_c candidate_val = getOneUC_UCCOnR1214(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneUC_UCCOnR1214(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static UseCaseDiagram_c getOneUC_UCCOnR1214(AssociationInUseCase_c target)
{
	return getOneUC_UCCOnR1214(target, true);
}
public static UseCaseDiagram_c getOneUC_UCCOnR1214(AssociationInUseCase_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.ContainedInUseCaseDiagram ;
  } else {
    return null;
  }
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyUC_UCCsOnR1214(targets, test, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new UseCaseDiagram_c[0];
  
  
  LinkedHashSet<UseCaseDiagram_c> elementsSet = new LinkedHashSet<UseCaseDiagram_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].ContainedInUseCaseDiagram == null)
	  targets[i].loadProxy();
    UseCaseDiagram_c associate = targets[i].ContainedInUseCaseDiagram;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  UseCaseDiagram_c[] result = new UseCaseDiagram_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c [] targets)
{
  return getManyUC_UCCsOnR1214(targets, null);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AssociationInUseCase_c [] targetArray = new AssociationInUseCase_c[1];
    targetArray[0] = target;
    return getManyUC_UCCsOnR1214(targetArray, test, loadComponent);
  } else {
    UseCaseDiagram_c [] result = new UseCaseDiagram_c [0] ;
    return result ;
  }
  
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c target,
    ClassQueryInterface_c test)
{
    return getManyUC_UCCsOnR1214(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c target)
{
    return getManyUC_UCCsOnR1214(target, null, true);
}

public static UseCaseDiagram_c [] getManyUC_UCCsOnR1214(AssociationInUseCase_c target, boolean loadComponent)
{
    return getManyUC_UCCsOnR1214(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (IsConnectionToParentUseCaseInUseCase == null) {          
      // R1209
      UseCaseInUseCase_c relInst38414 = (UseCaseInUseCase_c) baseRoot.getInstanceList(UseCaseInUseCase_c.class).get(new Object[] {m_parent_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38414 == null) {
      			relInst38414 = (UseCaseInUseCase_c) Ooaofooa.getDefaultInstance().getInstanceList(UseCaseInUseCase_c.class).get(new Object[] {m_parent_package_id});
      		}
			if (relInst38414 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38414 = (UseCaseInUseCase_c) roots[i].getInstanceList(UseCaseInUseCase_c.class).get(new Object[] {m_parent_package_id});
					if (relInst38414 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38414 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38414) && !isProxy())) {
	      relInst38414.relateAcrossR1209To(this, notifyChanges);
	  }
	  }
	}
	          

	if (CanBeDisplayedInDomain == null) {          
      // R1201
      Domain_c relInst38415 = (Domain_c) baseRoot.getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38415 == null) {
      			relInst38415 = (Domain_c) Ooaofooa.getDefaultInstance().getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
      		}
			if (relInst38415 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38415 = (Domain_c) roots[i].getInstanceList(Domain_c.class).get(new Object[] {m_dom_id});
					if (relInst38415 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38415 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38415) && !isProxy())) {
	      relInst38415.relateAcrossR1201To(this, notifyChanges);
	  }
	  }
	}
	          

	if (CanBeDisplayedInSubsystem == null) {          
      // R1202
      Subsystem_c relInst38416 = (Subsystem_c) baseRoot.getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38416 == null) {
      			relInst38416 = (Subsystem_c) Ooaofooa.getDefaultInstance().getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
      		}
			if (relInst38416 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38416 = (Subsystem_c) roots[i].getInstanceList(Subsystem_c.class).get(new Object[] {m_ss_id});
					if (relInst38416 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38416 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38416) && !isProxy())) {
	      relInst38416.relateAcrossR1202To(this, notifyChanges);
	  }
	  }
	}
	          

	if (SystemModel == null) {          
      // R1211
      baseRoot = Ooaofooa.getDefaultInstance();
      if(baseRoot != modelRoot && modelRoot.isCompareRoot()) {
        baseRoot = modelRoot; 
      }
      SystemModel_c relInst38417 = (SystemModel_c) baseRoot.getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38417 == null) {
      			relInst38417 = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
      		}
			if (relInst38417 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38417 = (SystemModel_c) roots[i].getInstanceList(SystemModel_c.class).get(new Object[] {m_sys_id});
					if (relInst38417 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38417 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38417) && !isProxy())) {
	      relInst38417.relateAcrossR1211To(this, notifyChanges);
	  }
	      // set the root in the Domain's model root, not the System Model's
	      // modelRoot is the SystemModel's root when we are loading a Domain proxy
	      ((Ooaofooa)getModelRoot()).setRoot(relInst38417);
	  }
          baseRoot = modelRoot;
	}
	          

	if (ComponentPackage == null) {          
      // R1212
      ComponentPackage_c relInst38418 = (ComponentPackage_c) baseRoot.getInstanceList(ComponentPackage_c.class).get(new Object[] {m_component_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38418 == null) {
      			relInst38418 = (ComponentPackage_c) Ooaofooa.getDefaultInstance().getInstanceList(ComponentPackage_c.class).get(new Object[] {m_component_package_id});
      		}
			if (relInst38418 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38418 = (ComponentPackage_c) roots[i].getInstanceList(ComponentPackage_c.class).get(new Object[] {m_component_package_id});
					if (relInst38418 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38418 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38418) && !isProxy())) {
	      relInst38418.relateAcrossR1212To(this, notifyChanges);
	  }
	  }
	}
	          

	if (Component == null) {          
      // R1213
      Component_c relInst38419 = (Component_c) baseRoot.getInstanceList(Component_c.class).get(new Object[] {m_component_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38419 == null) {
      			relInst38419 = (Component_c) Ooaofooa.getDefaultInstance().getInstanceList(Component_c.class).get(new Object[] {m_component_id});
      		}
			if (relInst38419 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38419 = (Component_c) roots[i].getInstanceList(Component_c.class).get(new Object[] {m_component_id});
					if (relInst38419 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38419 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38419) && !isProxy())) {
	      relInst38419.relateAcrossR1213To(this, notifyChanges);
	  }
	  }
	}
	          

      // R1402
      SpecificationPackage_c relInst38420 = (SpecificationPackage_c) baseRoot.getInstanceList(SpecificationPackage_c.class).get(new Object[] {m_package_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38420 == null) {
      			relInst38420 = (SpecificationPackage_c) Ooaofooa.getDefaultInstance().getInstanceList(SpecificationPackage_c.class).get(new Object[] {m_package_id});
      		}
			if (relInst38420 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38420 = (SpecificationPackage_c) roots[i].getInstanceList(SpecificationPackage_c.class).get(new Object[] {m_package_id});
					if (relInst38420 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38420 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38420) && !isProxy())) {
	      relInst38420.relateAcrossR1402To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R1209
      // UC_UIU
		  inst=IsConnectionToParentUseCaseInUseCase;
			unrelateAcrossR1209From(IsConnectionToParentUseCaseInUseCase, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1201
      // S_DOM
		  inst=CanBeDisplayedInDomain;
			unrelateAcrossR1201From(CanBeDisplayedInDomain, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1202
      // S_SS
		  inst=CanBeDisplayedInSubsystem;
			unrelateAcrossR1202From(CanBeDisplayedInSubsystem, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1211
      // S_SYS
		  inst=SystemModel;
			unrelateAcrossR1211From(SystemModel, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1212
      // CP_CP
		  inst=ComponentPackage;
			unrelateAcrossR1212From(ComponentPackage, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1213
      // C_C
		  inst=Component;
			unrelateAcrossR1213From(Component, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R1402
      // EP_SPKG
		  inst=IsSupertypeSpecificationPackage;
			unrelateAcrossR1402From(IsSupertypeSpecificationPackage, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final UseCaseDiagram_c inst = (UseCaseDiagram_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static UseCaseDiagram_c UseCaseDiagramInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		UseCaseDiagram_c result=findUseCaseDiagramInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,UseCaseDiagram_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findUseCaseDiagramInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static UseCaseDiagram_c findUseCaseDiagramInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				UseCaseDiagram_c x = (UseCaseDiagram_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static UseCaseDiagram_c UseCaseDiagramInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return UseCaseDiagramInstance(modelRoot,test,true);
  }
  
  public static UseCaseDiagram_c UseCaseDiagramInstance(ModelRoot modelRoot)
  {
	 return UseCaseDiagramInstance(modelRoot,null,true);
  }

  public static UseCaseDiagram_c [] UseCaseDiagramInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, UseCaseDiagram_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(UseCaseDiagram_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					UseCaseDiagram_c x = (UseCaseDiagram_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				UseCaseDiagram_c[] ret_set = new UseCaseDiagram_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new UseCaseDiagram_c[0];
			}		
		} 
  }
  public static UseCaseDiagram_c [] UseCaseDiagramInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  UseCaseDiagramInstances(modelRoot,test,true);
  }
  public static UseCaseDiagram_c [] UseCaseDiagramInstances(ModelRoot modelRoot)
  {
	return UseCaseDiagramInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Use Case Diagram.dispose call: ";
	UseCaseInUseCase_c testR1208Inst = UseCaseInUseCase_c.getOneUC_UIUOnR1208(this, false);

	if ( testR1208Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1208 ";	
	}
	UseCaseInUseCase_c testR1209Inst = UseCaseInUseCase_c.getOneUC_UIUOnR1209(this, false);

	if ( testR1209Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1209 ";
	}
	Domain_c testR1201Inst = Domain_c.getOneS_DOMOnR1201(this, false);

	if ( testR1201Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1201 ";
	}
	Subsystem_c testR1202Inst = Subsystem_c.getOneS_SSOnR1202(this, false);

	if ( testR1202Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1202 ";
	}
	ParticipantInUseCase_c testR1203Inst = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(this, false);

	if ( testR1203Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1203 ";
	}
	SystemModel_c testR1211Inst = SystemModel_c.getOneS_SYSOnR1211(this, false);

	if ( testR1211Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1211 ";
	}
	ComponentPackage_c testR1212Inst = ComponentPackage_c.getOneCP_CPOnR1212(this, false);

	if ( testR1212Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1212 ";
	}
	Component_c testR1213Inst = Component_c.getOneC_COnR1213(this, false);

	if ( testR1213Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "1213 ";
	}
	AssociationInUseCase_c testR1214Inst = AssociationInUseCase_c.getOneUC_AIUCOnR1214(this, false);

	if ( testR1214Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "1214 ";	
	}
	SpecificationPackage_c testR1402Inst1 = SpecificationPackage_c.getOneEP_SPKGOnR1402(this, false);

	if ( testR1402Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "1402 ";
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Use Case Diagram", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("ss_id")){
         return true;
      }
      if(attributeName.equals("dom_id")){
         return true;
      }
      if(attributeName.equals("sys_id")){
         return true;
      }
      if(attributeName.equals("package_id")){
         return true;
      }
      if(attributeName.equals("component_package_id")){
         return true;
      }
      if(attributeName.equals("parent_package_id")){
         return true;
      }
      if(attributeName.equals("component_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getPackage_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getPackage_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getSs_idLongBased()
  {
    if ( CanBeDisplayedInSubsystem != null )
    {
      return CanBeDisplayedInSubsystem.getSs_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSs_id()
  {
    if ( CanBeDisplayedInSubsystem != null )
    {
      return CanBeDisplayedInSubsystem.getSs_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSs_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_ss_id) )
      return m_ss_id;
    else
      return getSs_id();
  }
  
  public void setSs_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_ss_id)){
	        return;
	    }
	}else if(m_ss_id != null){
	    if(m_ss_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ss_id", m_ss_id, newValue,true); 
   m_ss_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getDom_idLongBased()
  {
    if ( CanBeDisplayedInDomain != null )
    {
      return CanBeDisplayedInDomain.getDom_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDom_id()
  {
    if ( CanBeDisplayedInDomain != null )
    {
      return CanBeDisplayedInDomain.getDom_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDom_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dom_id) )
      return m_dom_id;
    else
      return getDom_id();
  }
  
  public void setDom_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_dom_id)){
	        return;
	    }
	}else if(m_dom_id != null){
	    if(m_dom_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Dom_id", m_dom_id, newValue,true); 
   m_dom_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getSys_idLongBased()
  {
    if ( SystemModel != null )
    {
      return SystemModel.getSys_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSys_id()
  {
    if ( SystemModel != null )
    {
      return SystemModel.getSys_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSys_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sys_id) )
      return m_sys_id;
    else
      return getSys_id();
  }
  
  public void setSys_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_sys_id)){
	        return;
	    }
	}else if(m_sys_id != null){
	    if(m_sys_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sys_id", m_sys_id, newValue,true); 
   m_sys_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getPackage_idLongBased()
  {
    if ( IsSupertypeSpecificationPackage != null )
    {
      return IsSupertypeSpecificationPackage.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getPackage_id()
  {
    if ( IsSupertypeSpecificationPackage != null )
    {
      return IsSupertypeSpecificationPackage.getPackage_id();
    }
    return m_package_id ; // Supertype existence is optional, just return the local cached referential value
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeSpecificationPackage != null );
 
 }                  

  public java.util.UUID getPackage_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_package_id) )
      return m_package_id;
    else
      return getPackage_id();
  }
  
  public void setPackage_id(java.util.UUID newValue)
  {
   m_package_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getComponent_package_idLongBased()
  {
    if ( ComponentPackage != null )
    {
      return ComponentPackage.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getComponent_package_id()
  {
    if ( ComponentPackage != null )
    {
      return ComponentPackage.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getComponent_package_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_component_package_id) )
      return m_component_package_id;
    else
      return getComponent_package_id();
  }
  
  public void setComponent_package_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_component_package_id)){
	        return;
	    }
	}else if(m_component_package_id != null){
	    if(m_component_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Component_package_id", m_component_package_id, newValue,true); 
   m_component_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getParent_package_idLongBased()
  {
    if ( IsConnectionToParentUseCaseInUseCase != null )
    {
      return IsConnectionToParentUseCaseInUseCase.getPackage_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getParent_package_id()
  {
    if ( IsConnectionToParentUseCaseInUseCase != null )
    {
      return IsConnectionToParentUseCaseInUseCase.getPackage_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getParent_package_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_parent_package_id) )
      return m_parent_package_id;
    else
      return getParent_package_id();
  }
  
  public void setParent_package_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_parent_package_id)){
	        return;
	    }
	}else if(m_parent_package_id != null){
	    if(m_parent_package_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Parent_package_id", m_parent_package_id, newValue,true); 
   m_parent_package_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getComponent_idLongBased()
  {
    if ( Component != null )
    {
      return Component.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getComponent_id()
  {
    if ( Component != null )
    {
      return Component.getId();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getComponent_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_component_id) )
      return m_component_id;
    else
      return getComponent_id();
  }
  
  public void setComponent_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_component_id)){
	        return;
	    }
	}else if(m_component_id != null){
	    if(m_component_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Component_id", m_component_id, newValue,true); 
   m_component_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Use Case Diagram", //$NON-NLS-1$
	  " Operation entered: Use Case Diagram::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     UseCaseDiagram_c [] objs = UseCaseDiagram_c.UseCaseDiagramInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Use Case Diagram", //$NON-NLS-1$
	  " Operation entered: Use Case Diagram::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class UseCaseDiagram_c_test38422_c implements ClassQueryInterface_c
    {
	  UseCaseDiagram_c_test38422_c( java.util.UUID            p38423 ) {
	  m_p38423 = p38423;
	  }
	  private java.util.UUID             m_p38423; 
	  public boolean evaluate (Object candidate)
	  {
	      UseCaseDiagram_c selected = (UseCaseDiagram_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p38423));
	      return retval;
	  }
    }

    UseCaseDiagram_c [] objs38421 = 
    UseCaseDiagram_c.UseCaseDiagramInstances(modelRoot, new UseCaseDiagram_c_test38422_c(getPackage_id())) ;

    if ( (  (objs38421.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38421.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38421.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38421.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38421.length )  + " Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38421.length )  + " Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Use Case Diagram is a referring class in association: rel.Numb = 1202
          // The participating class is: Subsystem
    class Subsystem_c_test38427_c implements ClassQueryInterface_c
    {
	  Subsystem_c_test38427_c( java.util.UUID            p38428 ) {
	  m_p38428 = p38428;
	  }
	  private java.util.UUID             m_p38428; 
	  public boolean evaluate (Object candidate)
	  {
	      Subsystem_c selected = (Subsystem_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSs_id().equals(m_p38428));
	      return retval;
	  }
    }

    Subsystem_c [] objs38426 = 
    Subsystem_c.SubsystemInstances(modelRoot, new Subsystem_c_test38427_c(getSs_id())) ;

    if ( (  (objs38426.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1202: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38426.length )  + " SS_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1202: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38426.length )  + " SS_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a referring class in association: rel.Numb = 1201
          // The participating class is: Domain
    class Domain_c_test38430_c implements ClassQueryInterface_c
    {
	  Domain_c_test38430_c( java.util.UUID            p38431 ) {
	  m_p38431 = p38431;
	  }
	  private java.util.UUID             m_p38431; 
	  public boolean evaluate (Object candidate)
	  {
	      Domain_c selected = (Domain_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDom_id().equals(m_p38431));
	      return retval;
	  }
    }

    Domain_c [] objs38429 = 
    Domain_c.DomainInstances(modelRoot, new Domain_c_test38430_c(getDom_id())) ;

    if ( (  (objs38429.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1201: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38429.length )  + " Dom_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1201: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38429.length )  + " Dom_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a referring class in association: rel.Numb = 1211
          // The participating class is: System Model
    class SystemModel_c_test38433_c implements ClassQueryInterface_c
    {
	  SystemModel_c_test38433_c( java.util.UUID            p38434 ) {
	  m_p38434 = p38434;
	  }
	  private java.util.UUID             m_p38434; 
	  public boolean evaluate (Object candidate)
	  {
	      SystemModel_c selected = (SystemModel_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSys_id().equals(m_p38434));
	      return retval;
	  }
    }

    SystemModel_c [] objs38432 = 
    SystemModel_c.SystemModelInstances(Ooaofooa.getDefaultInstance(), new SystemModel_c_test38433_c(getSys_id())) ;

    if ( (  (objs38432.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1211: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38432.length )  + " Sys_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1211: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38432.length )  + " Sys_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a subtype in association: rel.Numb = 1402
          // The supertype class is: Specification Package
    class SpecificationPackage_c_test38436_c implements ClassQueryInterface_c
    {
	  SpecificationPackage_c_test38436_c( java.util.UUID            p38437 ) {
	  m_p38437 = p38437;
	  }
	  private java.util.UUID             m_p38437; 
	  public boolean evaluate (Object candidate)
	  {
	      SpecificationPackage_c selected = (SpecificationPackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p38437));
	      return retval;
	  }
    }

    SpecificationPackage_c [] objs38435 = 
    SpecificationPackage_c.SpecificationPackageInstances(modelRoot, new SpecificationPackage_c_test38436_c(getPackage_id())) ;

    if ( (  (objs38435.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1402: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38435.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1402: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38435.length )  , e); 
      }
      retval = false;

    }

          // Use Case Diagram is a referring class in association: rel.Numb = 1212
          // The participating class is: Component Package
    class ComponentPackage_c_test38439_c implements ClassQueryInterface_c
    {
	  ComponentPackage_c_test38439_c( java.util.UUID            p38440 ) {
	  m_p38440 = p38440;
	  }
	  private java.util.UUID             m_p38440; 
	  public boolean evaluate (Object candidate)
	  {
	      ComponentPackage_c selected = (ComponentPackage_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p38440));
	      return retval;
	  }
    }

    ComponentPackage_c [] objs38438 = 
    ComponentPackage_c.ComponentPackageInstances(modelRoot, new ComponentPackage_c_test38439_c(getComponent_package_id())) ;

    if ( (  (objs38438.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1212: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38438.length )  + " Component_Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1212: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38438.length )  + " Component_Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a referring class in association: rel.Numb = 1209
          // The participating class is: Use Case in Use Case
    class UseCaseInUseCase_c_test38442_c implements ClassQueryInterface_c
    {
	  UseCaseInUseCase_c_test38442_c( java.util.UUID            p38443 ) {
	  m_p38443 = p38443;
	  }
	  private java.util.UUID             m_p38443; 
	  public boolean evaluate (Object candidate)
	  {
	      UseCaseInUseCase_c selected = (UseCaseInUseCase_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p38443));
	      return retval;
	  }
    }

    UseCaseInUseCase_c [] objs38441 = 
    UseCaseInUseCase_c.UseCaseInUseCaseInstances(modelRoot, new UseCaseInUseCase_c_test38442_c(getParent_package_id())) ;

    if ( (  (objs38441.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1209: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38441.length )  + " Parent_Package_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1209: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38441.length )  + " Parent_Package_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a referring class in association: rel.Numb = 1213
          // The participating class is: Component
    class Component_c_test38445_c implements ClassQueryInterface_c
    {
	  Component_c_test38445_c( java.util.UUID            p38446 ) {
	  m_p38446 = p38446;
	  }
	  private java.util.UUID             m_p38446; 
	  public boolean evaluate (Object candidate)
	  {
	      Component_c selected = (Component_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p38446));
	      return retval;
	  }
    }

    Component_c [] objs38444 = 
    Component_c.ComponentInstances(modelRoot, new Component_c_test38445_c(getComponent_id())) ;

    if ( (  (objs38444.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1213: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38444.length )  + " Component_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1213: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38444.length )  + " Component_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Use Case Diagram is a participating class in association: rel.Numb = 1208
             // Object: Use Case in Use Case
    class UseCaseInUseCase_c_test38448_c implements ClassQueryInterface_c
    {
	  UseCaseInUseCase_c_test38448_c( java.util.UUID            p38449 ) {
	  m_p38449 = p38449;
	  }
	  private java.util.UUID             m_p38449; 
	  public boolean evaluate (Object candidate)
	  {
	      UseCaseInUseCase_c selected = (UseCaseInUseCase_c) candidate;
	      boolean retval = false;
	      retval = (selected.getPackage_id().equals(m_p38449));
	      return retval;
	  }
    }

    UseCaseInUseCase_c [] objs38447 = 
    UseCaseInUseCase_c.UseCaseInUseCaseInstances(modelRoot, new UseCaseInUseCase_c_test38448_c(getPackage_id())) ;

    if ( (  (objs38447.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Use Case Diagram", //$NON-NLS-1$
           "Consistency: Object: Use Case Diagram: Association: 1208: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38447.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Use Case Diagram: Association: 1208: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38447.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 1203
            // Link Object: Participant in Use Case
            // Other Side Class: Interaction Participant
          // Use Case Diagram is a participating class in association: rel.Numb = 1214
             // Object: Association In Use Case
    return retval;
  }


  // declare transform functions
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


if ( (p_At == Justification_c.Center_in_X) )
{

v_result = "«use case»" ;



}

else if ( (p_At == Justification_c.Center) )
{

v_result = getName() ;



}

return v_result;



   } // End get_compartment_text
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
return 1;



   } // End get_compartments
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
return 1;



   } // End get_entries
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.Folder;



   } // End get_style
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getPackage_id();



   } // End get_ooa_id
  public  void Newusecase()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newusecase") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseParticipant_c v_uc = new UseCaseParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_uc));


InteractionParticipant_c v_part = new InteractionParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_part));


ParticipantInUseCase_c v_piuc = new ParticipantInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_piuc));


if (v_uc != null) {
  v_uc.relateAcrossR930To(v_part);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_piuc != null) {
  v_piuc.relateAcrossR1203To( v_part ) ;   v_piuc.relateAcrossR1203To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_uc != null) {
v_uc.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newUseCase
  public  void Newusecasepackage()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newusecasepackage") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c v_ucc = new UseCaseDiagram_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ucc));


SpecificationPackage_c v_sp = new SpecificationPackage_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sp));


if (v_ucc != null) {
  v_ucc.relateAcrossR1402To(v_sp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


UseCaseInUseCase_c v_ucinuc = UseCaseInUseCase_c.getOneUC_UIUOnR1208(this);


if ( (  (v_ucinuc == null)) )
{

v_ucinuc = new UseCaseInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ucinuc));


  this.relateAcrossR1208To(v_ucinuc);



}

if (v_ucinuc != null) {
  v_ucinuc.relateAcrossR1209To(v_ucc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_ucc != null) {
v_ucc.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newUseCasePackage
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setName( Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed Use Case Diagram"			    
,Converttoinstance())) ;



   } // End initialize
  public  void Newactor()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newactor") ; 
               final ModelRoot modelRoot = getModelRoot();
ActorParticipant_c v_actor = new ActorParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_actor));


InteractionParticipant_c v_part = new InteractionParticipant_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_part));


ParticipantInUseCase_c v_piuc = new ParticipantInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_piuc));


if (v_piuc != null) {
  v_piuc.relateAcrossR1203To( this ) ;   v_piuc.relateAcrossR1203To( v_part ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_actor != null) {
  v_actor.relateAcrossR930To(v_part);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_actor != null) {
v_actor.Initialize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End newActor
  public  boolean      Newgeneralization(final java.util.UUID         p_From,final boolean      p_Fromisimported,final java.util.UUID         p_To,final boolean      p_Toisimported)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newgeneralization") ; 
               final ModelRoot modelRoot = getModelRoot();
  class InteractionParticipant_test37433_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InteractionParticipant_c selected = (InteractionParticipant_c)candidate;
		return (selected.getPart_id().equals(p_From)) ;
	}
  }
InteractionParticipant_c v_source = InteractionParticipant_c.getOneSQ_POnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this), new InteractionParticipant_test37433_c());


  class InteractionParticipant_test37434_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		InteractionParticipant_c selected = (InteractionParticipant_c)candidate;
		return (selected.getPart_id().equals(p_To)) ;
	}
  }
InteractionParticipant_c v_destination = InteractionParticipant_c.getOneSQ_POnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this), new InteractionParticipant_test37434_c());


boolean      v_createAssoc = false ;


if ( ((  (v_source != null)) && (  (v_destination != null)) && (v_source != v_destination)) )
{

UseCaseParticipant_c v_sourceUC = UseCaseParticipant_c.getOneIA_UCPOnR930(v_source);


UseCaseParticipant_c v_destUC = UseCaseParticipant_c.getOneIA_UCPOnR930(v_destination);


if ( (  (v_sourceUC != null) &&   (v_destUC != null)) )
{

v_createAssoc = true ;



}

else
{

ActorParticipant_c v_sourceActor = ActorParticipant_c.getOneSQ_APOnR930(v_source);


ActorParticipant_c v_destActor = ActorParticipant_c.getOneSQ_APOnR930(v_destination);


if ( (  (v_sourceActor != null) &&   (v_destActor != null)) )
{

v_createAssoc = true ;



}


}


}

if ( (v_createAssoc) )
{

UseCaseAssociation_c v_association = new UseCaseAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_association));


Generalization_c v_gen = new Generalization_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_gen));


AssociationInUseCase_c v_aiuc = new AssociationInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aiuc));


if (v_association != null) {
  v_association.relateAcrossR1215To(v_aiuc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1214To(v_aiuc);


if ( (  (v_source != null)) )
{

if (v_association != null) {
  v_association.relateAcrossR1206To(v_source);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if ( (  (v_destination != null)) )
{

if (v_association != null) {
  v_association.relateAcrossR1207To(v_destination);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

if (v_association != null) {
  v_association.relateAcrossR1210To(v_gen);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


return true;



}

return false;



   } // End newGeneralization
  public  boolean      Newassociation(final java.util.UUID         p_From,final boolean      p_Fromisimported,final java.util.UUID         p_To,final boolean      p_Toisimported)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newassociation") ; 
               final ModelRoot modelRoot = getModelRoot();
  class ActorParticipant_test37435_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ActorParticipant_c selected = (ActorParticipant_c)candidate;
		return (selected.getPart_id().equals(p_From)) ;
	}
  }
ActorParticipant_c v_sourceActor = ActorParticipant_c.getOneSQ_APOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new ActorParticipant_test37435_c());


  class UseCaseParticipant_test37436_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		UseCaseParticipant_c selected = (UseCaseParticipant_c)candidate;
		return (selected.getPart_id().equals(p_To)) ;
	}
  }
UseCaseParticipant_c v_destinationUC = UseCaseParticipant_c.getOneIA_UCPOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new UseCaseParticipant_test37436_c());


if ( (  (v_sourceActor != null) &&   (v_destinationUC != null)) )
{

UseCaseAssociation_c v_association = new UseCaseAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_association));


BinaryAssociation_c v_ba = new BinaryAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ba));


AssociationInUseCase_c v_aiuc = new AssociationInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aiuc));


if (v_association != null) {
  v_association.relateAcrossR1215To(v_aiuc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1214To(v_aiuc);


InteractionParticipant_c v_sourcePart = InteractionParticipant_c.getOneSQ_POnR930(v_sourceActor);


InteractionParticipant_c v_destPart = InteractionParticipant_c.getOneSQ_POnR930(v_destinationUC);


if (v_association != null) {
  v_association.relateAcrossR1206To(v_sourcePart);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1207To(v_destPart);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1210To(v_ba);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


return true;



}

return false;



   } // End newAssociation
  public  boolean      Newinclude(final java.util.UUID         p_From,final boolean      p_Fromisimported,final java.util.UUID         p_To,final boolean      p_Toisimported)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newinclude") ; 
               final ModelRoot modelRoot = getModelRoot();
  class UseCaseParticipant_test37437_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		UseCaseParticipant_c selected = (UseCaseParticipant_c)candidate;
		return (selected.getPart_id().equals(p_From)) ;
	}
  }
UseCaseParticipant_c v_sourceUC = UseCaseParticipant_c.getOneIA_UCPOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new UseCaseParticipant_test37437_c());


  class UseCaseParticipant_test37438_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		UseCaseParticipant_c selected = (UseCaseParticipant_c)candidate;
		return (selected.getPart_id().equals(p_To)) ;
	}
  }
UseCaseParticipant_c v_destinationUC = UseCaseParticipant_c.getOneIA_UCPOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new UseCaseParticipant_test37438_c());


if ( (  (v_sourceUC != null) &&   (v_destinationUC != null)) && (v_sourceUC != v_destinationUC) )
{

UseCaseAssociation_c v_association = new UseCaseAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_association));


Include_c v_inc = new Include_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_inc));


AssociationInUseCase_c v_aiuc = new AssociationInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aiuc));


if (v_association != null) {
  v_association.relateAcrossR1215To(v_aiuc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1214To(v_aiuc);


InteractionParticipant_c v_source = InteractionParticipant_c.getOneSQ_POnR930(v_sourceUC);


InteractionParticipant_c v_destination = InteractionParticipant_c.getOneSQ_POnR930(v_destinationUC);


if (v_association != null) {
  v_association.relateAcrossR1206To(v_source);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1207To(v_destination);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1210To(v_inc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


return true;



}

return false;



   } // End newInclude
  public  boolean      Newextend(final java.util.UUID         p_From,final boolean      p_Fromisimported,final java.util.UUID         p_To,final boolean      p_Toisimported)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Newextend") ; 
               final ModelRoot modelRoot = getModelRoot();
  class UseCaseParticipant_test37439_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		UseCaseParticipant_c selected = (UseCaseParticipant_c)candidate;
		return (selected.getPart_id().equals(p_From)) ;
	}
  }
UseCaseParticipant_c v_sourceUC = UseCaseParticipant_c.getOneIA_UCPOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new UseCaseParticipant_test37439_c());


  class UseCaseParticipant_test37440_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		UseCaseParticipant_c selected = (UseCaseParticipant_c)candidate;
		return (selected.getPart_id().equals(p_To)) ;
	}
  }
UseCaseParticipant_c v_destinationUC = UseCaseParticipant_c.getOneIA_UCPOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this)), new UseCaseParticipant_test37440_c());


if ( (  (v_sourceUC != null) &&   (v_destinationUC != null)) && (v_sourceUC != v_destinationUC) )
{

UseCaseAssociation_c v_association = new UseCaseAssociation_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_association));


Extend_c v_ext = new Extend_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ext));


AssociationInUseCase_c v_aiuc = new AssociationInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_aiuc));


if (v_association != null) {
  v_association.relateAcrossR1215To(v_aiuc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


  this.relateAcrossR1214To(v_aiuc);


InteractionParticipant_c v_source = InteractionParticipant_c.getOneSQ_POnR930(v_sourceUC);


InteractionParticipant_c v_destination = InteractionParticipant_c.getOneSQ_POnR930(v_destinationUC);


if (v_association != null) {
  v_association.relateAcrossR1206To(v_source);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1207To(v_destination);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_association != null) {
  v_association.relateAcrossR1210To(v_ext);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


return true;



}

return false;



   } // End newExtend
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseInUseCase_c v_ucpInUcp = UseCaseInUseCase_c.getOneUC_UIUOnR1209(this);


if ( (  (v_ucpInUcp != null)) )
{

this.unrelateAcrossR1209From(v_ucpInUcp);


UseCaseDiagram_c v_other_child = UseCaseDiagram_c.getOneUC_UCCOnR1209(v_ucpInUcp);


if (   (v_other_child == null) )
{

UseCaseDiagram_c v_ucc = UseCaseDiagram_c.getOneUC_UCCOnR1208(v_ucpInUcp);


if ( (  (v_ucc != null)) )
{

if (v_ucc != null) {
v_ucc.unrelateAcrossR1208From(v_ucpInUcp);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

if (v_ucpInUcp != null) {
// get the location of this element in the instance list
// before deleting
if ( v_ucpInUcp.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_ucpInUcp));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}


}

UseCaseInUseCase_c v_ucinuc = UseCaseInUseCase_c.getOneUC_UIUOnR1208(this);


UseCaseDiagram_c [] v_ucs = UseCaseDiagram_c.getManyUC_UCCsOnR1209(v_ucinuc);


UseCaseDiagram_c  v_uc = null;
for ( int i37051 = 0; i37051 < v_ucs.length; i37051++)
{
  v_uc = v_ucs[i37051] ;

if (v_uc != null) {
v_uc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Domain_c v_domain = Domain_c.getOneS_DOMOnR1201(this);


if ( (  (v_domain != null)) )
{

this.unrelateAcrossR1201From(v_domain);



}

Subsystem_c v_ss = Subsystem_c.getOneS_SSOnR1202(this);


if ( (  (v_ss != null)) )
{

this.unrelateAcrossR1202From(v_ss);



}

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1211(this);


if ( (  (v_system != null)) )
{

this.unrelateAcrossR1211From(v_system);



}

ComponentPackage_c v_compPackage = ComponentPackage_c.getOneCP_CPOnR1212(this);


if ( (  (v_compPackage != null)) )
{

this.unrelateAcrossR1212From(v_compPackage);



}

Component_c v_comp = Component_c.getOneC_COnR1213(this);


if ( (  (v_comp != null)) )
{

this.unrelateAcrossR1213From(v_comp);



}

ParticipantInUseCase_c [] v_piucs = ParticipantInUseCase_c.getManyUC_PIUCsOnR1203(this);


ParticipantInUseCase_c  v_piuc = null;
for ( int i37052 = 0; i37052 < v_piucs.length; i37052++)
{
  v_piuc = v_piucs[i37052] ;

InteractionParticipant_c v_participant = InteractionParticipant_c.getOneSQ_POnR1203(v_piuc);


if ( (  (v_participant != null)) )
{

if (v_participant != null) {
v_participant.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}

AssociationInUseCase_c [] v_aiucs = AssociationInUseCase_c.getManyUC_AIUCsOnR1214(this);


AssociationInUseCase_c  v_aiuc = null;
for ( int i37053 = 0; i37053 < v_aiucs.length; i37053++)
{
  v_aiuc = v_aiucs[i37053] ;

UseCaseAssociation_c v_assoc = UseCaseAssociation_c.getOneUC_UCAOnR1215(v_aiuc);


if (v_aiuc != null) {
v_aiuc.unrelateAcrossR1215From(v_assoc);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_aiuc != null) {
v_aiuc.unrelateAcrossR1214From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_assoc != null) {
v_assoc.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

SpecificationPackage_c v_specPkg = SpecificationPackage_c.getOneEP_SPKGOnR1402(this);


if ( (  (v_specPkg != null)) )
{

this.unrelateAcrossR1402From(v_specPkg);


if (v_specPkg != null) {
v_specPkg.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  void Associatewithpackage(final java.util.UUID         p_Pkgid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithpackage") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


Package_c v_package = (Package_c) modelRoot.getInstanceList(Package_c.class).getGlobal(null, p_Pkgid);


SpecificationPackage_c v_specPkg = SpecificationPackage_c.getOneEP_SPKGOnR1402(this);


if (v_specPkg != null) {
  v_specPkg.relateAcrossR1400To(v_package);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End associateWithPackage
  public  void Associatewithsystem(final java.util.UUID         p_Sysid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


SystemModel_c v_system = (SystemModel_c) Ooaofooa.getDefaultInstance().getInstanceList(SystemModel_c.class).get(p_Sysid);


if (v_system != null) {
  v_system.relateAcrossR1211To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End associateWithSystem
  public  void Associatewithsubsystem(final java.util.UUID         p_Ssid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithsubsystem") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


Subsystem_c v_ss = (Subsystem_c) modelRoot.getInstanceList(Subsystem_c.class).getGlobal(null, p_Ssid);


if (v_ss != null) {
  v_ss.relateAcrossR1202To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End associateWithSubsystem
  public  void Associatewithdomain(final java.util.UUID         p_Domid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithdomain") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


Domain_c v_domain = (Domain_c) modelRoot.getInstanceList(Domain_c.class).getGlobal(null, p_Domid);


if (v_domain != null) {
  v_domain.relateAcrossR1201To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End associateWithDomain
  public  void Associatewithcomponent(final java.util.UUID         p_Compid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithcomponent") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


Component_c v_component = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, p_Compid);


  this.relateAcrossR1213To(v_component);



   } // End associateWithComponent
  public  void Associatewithcomponentpackage(final java.util.UUID         p_Cpid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithcomponentpackage") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


ComponentPackage_c v_cp = (ComponentPackage_c) modelRoot.getInstanceList(ComponentPackage_c.class).getGlobal(null, p_Cpid);


if (v_cp != null) {
  v_cp.relateAcrossR1212To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End associateWithComponentPackage
  public  void Associatewithusecasediagram(final java.util.UUID         p_Ucdid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Associatewithusecasediagram") ; 
               final ModelRoot modelRoot = getModelRoot();
Deassociatefromparent() ;


UseCaseDiagram_c v_ucd = (UseCaseDiagram_c) modelRoot.getInstanceList(UseCaseDiagram_c.class).getGlobal(null, p_Ucdid);


UseCaseInUseCase_c v_uiu = UseCaseInUseCase_c.getOneUC_UIUOnR1208(v_ucd);


if ( (  (v_uiu == null)) )
{

v_uiu = new UseCaseInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_uiu));


if (v_ucd != null) {
  v_ucd.relateAcrossR1208To(v_uiu);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

  this.relateAcrossR1209To(v_uiu);



   } // End associateWithUseCaseDiagram
  public  void Deassociatefromparent()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Deassociatefromparent") ; 
               final ModelRoot modelRoot = getModelRoot();
SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1211(this);


if ( (  (v_system != null)) )
{

this.unrelateAcrossR1211From(v_system);



}

Domain_c v_domain = Domain_c.getOneS_DOMOnR1201(this);


if ( (  (v_domain != null)) )
{

this.unrelateAcrossR1201From(v_domain);



}

Subsystem_c v_subsystem = Subsystem_c.getOneS_SSOnR1202(this);


if ( (  (v_subsystem != null)) )
{

this.unrelateAcrossR1202From(v_subsystem);



}

ComponentPackage_c v_cp = ComponentPackage_c.getOneCP_CPOnR1212(this);


if ( (  (v_cp != null)) )
{

this.unrelateAcrossR1212From(v_cp);



}

Component_c v_comp = Component_c.getOneC_COnR1213(this);


if ( (  (v_comp != null)) )
{

this.unrelateAcrossR1213From(v_comp);



}

SpecificationPackage_c v_specPkg = SpecificationPackage_c.getOneEP_SPKGOnR1402(this);


Package_c v_package = Package_c.getOneEP_PKGOnR1400(v_specPkg);


if ( (  (v_package != null)) )
{

if (v_specPkg != null) {
v_specPkg.unrelateAcrossR1400From(v_package);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}



}

UseCaseInUseCase_c v_ucinuc = UseCaseInUseCase_c.getOneUC_UIUOnR1209(this);


if ( (  (v_ucinuc != null)) )
{

UseCaseDiagram_c v_ucd = UseCaseDiagram_c.getOneUC_UCCOnR1208(v_ucinuc);


if (v_ucinuc != null) {
v_ucinuc.unrelateAcrossR1209From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


UseCaseDiagram_c [] v_otherUCs = UseCaseDiagram_c.getManyUC_UCCsOnR1209(v_ucinuc);


if ( (  (v_otherUCs.length == 0)) )
{

if (v_ucinuc != null) {
v_ucinuc.unrelateAcrossR1208From(v_ucd);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_ucinuc != null) {
// get the location of this element in the instance list
// before deleting
if ( v_ucinuc.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_ucinuc));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}


}


   } // End deassociateFromParent
  public  void Pasteusecasediagram(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Pasteusecasediagram") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c v_ucd = (UseCaseDiagram_c) modelRoot.getInstanceList(UseCaseDiagram_c.class).getGlobal(null, p_Id);


if ( (  (v_ucd != null)) )
{

if (v_ucd != null) {
  v_ucd.setName( Ooaofooa.Getuniqueinitialnameinparent(modelRoot			    
,v_ucd.Converttoinstance()			    
,v_ucd.getName()			    
,Converttoinstance())) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_ucd != null) {
v_ucd.Associatewithusecasediagram(			    
getPackage_id() ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End pasteUseCaseDiagram
  public  int          Getusecasediagramcount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getusecasediagramcount") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseDiagram_c [] v_useCases = UseCaseDiagram_c.getManyUC_UCCsOnR1209(UseCaseInUseCase_c.getManyUC_UIUsOnR1208(this));


return   (v_useCases.length);



   } // End getUsecaseDiagramCount
  public  java.util.UUID         Getusecasediagramid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getusecasediagramid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


UseCaseDiagram_c [] v_usecases = UseCaseDiagram_c.getManyUC_UCCsOnR1209(UseCaseInUseCase_c.getManyUC_UIUsOnR1208(this));


int          v_count = -1 ;


UseCaseDiagram_c  v_usecase = null;
for ( int i37054 = 0; i37054 < v_usecases.length; i37054++)
{
  v_usecase = v_usecases[i37054] ;

if ( (  (v_usecase != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_usecase.Get_ooa_id();



}


}

return v_id;



   } // End getUsecaseDiagramId
  public  int          Getusecasecount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getusecasecount") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseParticipant_c [] v_useCases = UseCaseParticipant_c.getManyIA_UCPsOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(this));


return   (v_useCases.length);



   } // End getUsecaseCount
  public  java.util.UUID         Getusecaseid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getusecaseid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


UseCaseParticipant_c [] v_usecases = UseCaseParticipant_c.getManyIA_UCPsOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(this));


int          v_count = -1 ;


UseCaseParticipant_c  v_usecase = null;
for ( int i37055 = 0; i37055 < v_usecases.length; i37055++)
{
  v_usecase = v_usecases[i37055] ;

if ( (  (v_usecase != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_usecase.Get_ooa_id();



}


}

return v_id;



   } // End getUsecaseId
  public  int          Getactorcount()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getactorcount") ; 
               final ModelRoot modelRoot = getModelRoot();
ActorParticipant_c [] v_actors = ActorParticipant_c.getManySQ_APsOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(this));


return   (v_actors.length);



   } // End getActorCount
  public  java.util.UUID         Getactorid(final int          p_Index)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Getactorid") ; 
               final ModelRoot modelRoot = getModelRoot();
java.util.UUID         v_id = Gd_c.Null_unique_id() ;


ActorParticipant_c [] v_actors = ActorParticipant_c.getManySQ_APsOnR930(InteractionParticipant_c.getManySQ_PsOnR1203(this));


int          v_count = -1 ;


ActorParticipant_c  v_actor = null;
for ( int i37056 = 0; i37056 < v_actors.length; i37056++)
{
  v_actor = v_actors[i37056] ;

if ( (  (v_actor != null)) )
{

v_count = v_count + 1 ;



}

if ( (v_count == p_Index) )
{

return v_actor.Get_ooa_id();



}


}

return v_id;



   } // End getActorId
  public  void Pasteusecaseparticipant(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Pasteusecaseparticipant") ; 
               final ModelRoot modelRoot = getModelRoot();
UseCaseParticipant_c v_usecase = (UseCaseParticipant_c) modelRoot.getInstanceList(UseCaseParticipant_c.class).getGlobal(null, p_Id);


if ( (  (v_usecase != null)) )
{

InteractionParticipant_c v_part = InteractionParticipant_c.getOneSQ_POnR930(v_usecase);


ParticipantInUseCase_c v_existingContainer = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(v_part);


if ( (  (v_existingContainer != null)) )
{

UseCaseDiagram_c v_ucd = UseCaseDiagram_c.getOneUC_UCCOnR1203(v_existingContainer);


if ( (  (v_ucd != null)) )
{

if (v_existingContainer != null) {
v_existingContainer.unrelateAcrossR1203From( v_ucd ) ; v_existingContainer.unrelateAcrossR1203From( v_part ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}


}

ParticipantInUseCase_c v_piuc = new ParticipantInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_piuc));


if (v_piuc != null) {
  v_piuc.relateAcrossR1203To( v_part ) ;   v_piuc.relateAcrossR1203To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


   } // End pasteUseCaseParticipant
  public  void Pasteactorparticipant(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Use Case Diagram", " Operation entered: UseCaseDiagram::Pasteactorparticipant") ; 
               final ModelRoot modelRoot = getModelRoot();
ActorParticipant_c v_actor = (ActorParticipant_c) modelRoot.getInstanceList(ActorParticipant_c.class).getGlobal(null, p_Id);


if ( (  (v_actor != null)) )
{

InteractionParticipant_c v_part = InteractionParticipant_c.getOneSQ_POnR930(v_actor);


ParticipantInUseCase_c v_existingContainer = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(v_part);


if ( (  (v_existingContainer != null)) )
{

UseCaseDiagram_c v_ucd = UseCaseDiagram_c.getOneUC_UCCOnR1203(v_existingContainer);


if ( (  (v_ucd != null)) )
{

if (v_existingContainer != null) {
v_existingContainer.unrelateAcrossR1203From( v_ucd ) ; v_existingContainer.unrelateAcrossR1203From( v_part ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}



}


}

ParticipantInUseCase_c v_piuc = new ParticipantInUseCase_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_piuc));


if (v_piuc != null) {
  v_piuc.relateAcrossR1203To( v_part ) ;   v_piuc.relateAcrossR1203To( this ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}



}


   } // End pasteActorParticipant

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	if (adapter == org.eclipse.core.resources.IResource.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
        	return comp.getFile().getParent();
        }
	}else if(adapter == org.eclipse.core.resources.IFile.class) {
        PersistableModelComponent comp = getPersistableComponent(false);
        if ( comp != null )
        {
            return comp.getFile();
        }
	}
	  return null;
  }
} // end Use Case Diagram
