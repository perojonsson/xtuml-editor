package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ControlNode_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CONTROL_NODE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ControlNode_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ControlNode_c(ModelRoot modelRoot, java.util.UUID p_m_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);

		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ControlNode_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
		ControlNode_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ControlNode_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ControlNode_c(modelRoot, p_m_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ControlNode_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id) {
		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
		ControlNode_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ControlNode_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);

				return source;
			}
		}
		// there is no instance matching the id
		ControlNode_c new_inst = new ControlNode_c(modelRoot, p_m_id);
		return new_inst;
	}
	public ControlNode_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = IdAssigner.NULL_UUID;
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ControlNode_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ControlNode_c)) {
			return false;
		}

		ControlNode_c me = (ControlNode_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ControlNode_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ControlNode_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ControlNode_c)) {
			return false;
		}

		ControlNode_c me = (ControlNode_c) elem;
		if (!getIdCachedValue().equals(
				((ControlNode_c) elem).getIdCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;

	// declare association references from this class

	// referring navigation

	ActivityNode_c IsSupertypeActivityNode;
	public void relateAcrossR1105To(ActivityNode_c target) {
		relateAcrossR1105To(target, true);
	}
	public void relateAcrossR1105To(ActivityNode_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeActivityNode)
			return; // already related

		if (IsSupertypeActivityNode != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeActivityNode != null) {

				IsSupertypeActivityNode.clearBackPointerR1105To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ControlNode_c.relateAcrossR1105To(ActivityNode_c target)",
									"Relate performed across R1105 from Control Node to Activity Node without unrelate of prior instance.");
				}
			}

			IsSupertypeActivityNode = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1105To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1105", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR1105From(ActivityNode_c target) {
		unrelateAcrossR1105From(target, true);
	}
	public void unrelateAcrossR1105From(ActivityNode_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeActivityNode == null)
			return; // already unrelated

		if (target != IsSupertypeActivityNode) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R1105",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1105To(this);
		}

		if (IsSupertypeActivityNode != null) {

			m_id = IsSupertypeActivityNode.getId();
			if (IdAssigner.NULL_UUID.equals(m_id)) {
				m_id = IsSupertypeActivityNode.getIdCachedValue();
			}
			IsSupertypeActivityNode = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1105", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ControlNode_c getOneA_CTLOnR1105(ActivityNode_c[] targets) {
		return getOneA_CTLOnR1105(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1105(ActivityNode_c[] targets,
			ClassQueryInterface_c test) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneA_CTLOnR1105(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1105(ActivityNode_c target) {
		return getOneA_CTLOnR1105(target, null);
	}

	public static ControlNode_c getOneA_CTLOnR1105(ActivityNode_c target,
			boolean loadComponent) {
		return getOneA_CTLOnR1105(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ControlNode_c getOneA_CTLOnR1105(ActivityNode_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneA_CTLOnR1105(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ControlNode_c getOneA_CTLOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		return getOneA_CTLOnR1105(modelRoot, target, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneA_CTLOnR1105(modelRoot, target, test);
	}
	private static ControlNode_c find_getOneA_CTLOnR1105(ModelRoot modelRoot,
			ActivityNode_c target, ClassQueryInterface_c test) {
		if (target != null) {
			ControlNode_c source = (ControlNode_c) target.backPointer_IsSubtypeControlNodeIsSubtype_R1105;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ControlNode_c[] getManyA_CTLsOnR1105(ActivityNode_c[] targets) {
		return getManyA_CTLsOnR1105(targets, null);
	}
	public static ControlNode_c[] getManyA_CTLsOnR1105(
			ActivityNode_c[] targets, boolean loadComponent) {
		return getManyA_CTLsOnR1105(targets, null, loadComponent);
	}
	public static ControlNode_c[] getManyA_CTLsOnR1105(
			ActivityNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1105(targets, test, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1105(
			ActivityNode_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ControlNode_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ControlNode_c source = (ControlNode_c) targets[i].backPointer_IsSubtypeControlNodeIsSubtype_R1105;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ControlNode_c[] ret_set = new ControlNode_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ControlNode_c[0];
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1105(ActivityNode_c target) {
		if (target != null) {
			ActivityNode_c[] targetArray = new ActivityNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1105(targetArray);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1105(ActivityNode_c target,
			boolean loadComponent) {
		if (target != null) {
			ActivityNode_c[] targetArray = new ActivityNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1105(targetArray, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	InitialNode_c backPointer_IsSubtypeInitialNodeIsSubtype_R1106;

	public void setInitialNodeOrderInChildListR1106(InitialNode_c target,
			int index) {
		unrelateAcrossR1106From(target);
		InitialNode_c[] elements = InitialNode_c.getManyA_INIsOnR1106(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1106From((InitialNode_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1106To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1106To((InitialNode_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1106To(InitialNode_c target) {
		if (target != null) {
			target.relateAcrossR1106To(this, true);
		}
	}

	public void relateAcrossR1106To(InitialNode_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1106To(this, notifyChanges);
		}
	}

	public void setBackPointerR1106To(InitialNode_c target) {
		backPointer_IsSubtypeInitialNodeIsSubtype_R1106 = target;
	}

	public void unrelateAcrossR1106From(InitialNode_c target) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, true);
		}
	}

	public void unrelateAcrossR1106From(InitialNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1106To(InitialNode_c target) {
		if (target == backPointer_IsSubtypeInitialNodeIsSubtype_R1106) {
			backPointer_IsSubtypeInitialNodeIsSubtype_R1106 = null;
		}
	}

	public static ControlNode_c getOneA_CTLOnR1106(InitialNode_c[] targets) {
		return getOneA_CTLOnR1106(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1106(InitialNode_c[] targets,
			ClassQueryInterface_c test) {
		return getOneA_CTLOnR1106(targets, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1106(InitialNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ControlNode_c candidate_val = getOneA_CTLOnR1106(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_CTLOnR1106(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1106(InitialNode_c target) {
		return getOneA_CTLOnR1106(target, true);
	}
	public static ControlNode_c getOneA_CTLOnR1106(InitialNode_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeControlNode;
		} else {
			return null;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c[] targets,
			ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(targets, test, true);
	}

	public static ControlNode_c [] getManyA_CTLsOnR1106(InitialNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ControlNode_c[0];
  
  
  LinkedHashSet<ControlNode_c> elementsSet = new LinkedHashSet<ControlNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeControlNode == null)
	  targets[i].loadProxy();
    ControlNode_c associate = targets[i].IsSupertypeControlNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ControlNode_c[] result = new ControlNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c[] targets) {
		return getManyA_CTLsOnR1106(targets, null);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			InitialNode_c[] targetArray = new InitialNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1106(targetArray, test, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}

	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c target,
			ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c target) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(InitialNode_c target,
			boolean loadComponent) {
		return getManyA_CTLsOnR1106(target, null, loadComponent);
	}

	// referred to navigation

	FlowFinalNode_c backPointer_IsSubtypeFlowFinalNodeIsSubtype_R1106;

	public void setFlowFinalNodeOrderInChildListR1106(FlowFinalNode_c target,
			int index) {
		unrelateAcrossR1106From(target);
		FlowFinalNode_c[] elements = FlowFinalNode_c.getManyA_FFsOnR1106(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1106From((FlowFinalNode_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1106To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1106To((FlowFinalNode_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1106To(FlowFinalNode_c target) {
		if (target != null) {
			target.relateAcrossR1106To(this, true);
		}
	}

	public void relateAcrossR1106To(FlowFinalNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1106To(this, notifyChanges);
		}
	}

	public void setBackPointerR1106To(FlowFinalNode_c target) {
		backPointer_IsSubtypeFlowFinalNodeIsSubtype_R1106 = target;
	}

	public void unrelateAcrossR1106From(FlowFinalNode_c target) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, true);
		}
	}

	public void unrelateAcrossR1106From(FlowFinalNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1106To(FlowFinalNode_c target) {
		if (target == backPointer_IsSubtypeFlowFinalNodeIsSubtype_R1106) {
			backPointer_IsSubtypeFlowFinalNodeIsSubtype_R1106 = null;
		}
	}

	public static ControlNode_c getOneA_CTLOnR1106(FlowFinalNode_c[] targets) {
		return getOneA_CTLOnR1106(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1106(FlowFinalNode_c[] targets,
			ClassQueryInterface_c test) {
		return getOneA_CTLOnR1106(targets, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1106(FlowFinalNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ControlNode_c candidate_val = getOneA_CTLOnR1106(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_CTLOnR1106(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1106(FlowFinalNode_c target) {
		return getOneA_CTLOnR1106(target, true);
	}
	public static ControlNode_c getOneA_CTLOnR1106(FlowFinalNode_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeControlNode;
		} else {
			return null;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			FlowFinalNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(targets, test, true);
	}

	public static ControlNode_c [] getManyA_CTLsOnR1106(FlowFinalNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ControlNode_c[0];
  
  
  LinkedHashSet<ControlNode_c> elementsSet = new LinkedHashSet<ControlNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeControlNode == null)
	  targets[i].loadProxy();
    ControlNode_c associate = targets[i].IsSupertypeControlNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ControlNode_c[] result = new ControlNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ControlNode_c[] getManyA_CTLsOnR1106(FlowFinalNode_c[] targets) {
		return getManyA_CTLsOnR1106(targets, null);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(FlowFinalNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			FlowFinalNode_c[] targetArray = new FlowFinalNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1106(targetArray, test, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}

	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(FlowFinalNode_c target,
			ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(FlowFinalNode_c target) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(FlowFinalNode_c target,
			boolean loadComponent) {
		return getManyA_CTLsOnR1106(target, null, loadComponent);
	}

	// referred to navigation

	ActivityFinalNode_c backPointer_IsSubtypeActivityFinalNodeIsSubtype_R1106;

	public void setActivityFinalNodeOrderInChildListR1106(
			ActivityFinalNode_c target, int index) {
		unrelateAcrossR1106From(target);
		ActivityFinalNode_c[] elements = ActivityFinalNode_c
				.getManyA_AFsOnR1106(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1106From((ActivityFinalNode_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1106To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1106To((ActivityFinalNode_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1106To(ActivityFinalNode_c target) {
		if (target != null) {
			target.relateAcrossR1106To(this, true);
		}
	}

	public void relateAcrossR1106To(ActivityFinalNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1106To(this, notifyChanges);
		}
	}

	public void setBackPointerR1106To(ActivityFinalNode_c target) {
		backPointer_IsSubtypeActivityFinalNodeIsSubtype_R1106 = target;
	}

	public void unrelateAcrossR1106From(ActivityFinalNode_c target) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, true);
		}
	}

	public void unrelateAcrossR1106From(ActivityFinalNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1106To(ActivityFinalNode_c target) {
		if (target == backPointer_IsSubtypeActivityFinalNodeIsSubtype_R1106) {
			backPointer_IsSubtypeActivityFinalNodeIsSubtype_R1106 = null;
		}
	}

	public static ControlNode_c getOneA_CTLOnR1106(ActivityFinalNode_c[] targets) {
		return getOneA_CTLOnR1106(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1106(
			ActivityFinalNode_c[] targets, ClassQueryInterface_c test) {
		return getOneA_CTLOnR1106(targets, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1106(
			ActivityFinalNode_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ControlNode_c candidate_val = getOneA_CTLOnR1106(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_CTLOnR1106(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1106(ActivityFinalNode_c target) {
		return getOneA_CTLOnR1106(target, true);
	}
	public static ControlNode_c getOneA_CTLOnR1106(ActivityFinalNode_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeControlNode;
		} else {
			return null;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(targets, test, true);
	}

	public static ControlNode_c [] getManyA_CTLsOnR1106(ActivityFinalNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ControlNode_c[0];
  
  
  LinkedHashSet<ControlNode_c> elementsSet = new LinkedHashSet<ControlNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeControlNode == null)
	  targets[i].loadProxy();
    ControlNode_c associate = targets[i].IsSupertypeControlNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ControlNode_c[] result = new ControlNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c[] targets) {
		return getManyA_CTLsOnR1106(targets, null);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ActivityFinalNode_c[] targetArray = new ActivityFinalNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1106(targetArray, test, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}

	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c target, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c target) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ActivityFinalNode_c target, boolean loadComponent) {
		return getManyA_CTLsOnR1106(target, null, loadComponent);
	}

	// referred to navigation

	DecisionMergeNode_c backPointer_IsSubtypeDecisionMergeNodeIsSubtype_R1106;

	public void setDecisionMergeNodeOrderInChildListR1106(
			DecisionMergeNode_c target, int index) {
		unrelateAcrossR1106From(target);
		DecisionMergeNode_c[] elements = DecisionMergeNode_c
				.getManyA_DMsOnR1106(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1106From((DecisionMergeNode_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1106To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1106To((DecisionMergeNode_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1106To(DecisionMergeNode_c target) {
		if (target != null) {
			target.relateAcrossR1106To(this, true);
		}
	}

	public void relateAcrossR1106To(DecisionMergeNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1106To(this, notifyChanges);
		}
	}

	public void setBackPointerR1106To(DecisionMergeNode_c target) {
		backPointer_IsSubtypeDecisionMergeNodeIsSubtype_R1106 = target;
	}

	public void unrelateAcrossR1106From(DecisionMergeNode_c target) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, true);
		}
	}

	public void unrelateAcrossR1106From(DecisionMergeNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1106To(DecisionMergeNode_c target) {
		if (target == backPointer_IsSubtypeDecisionMergeNodeIsSubtype_R1106) {
			backPointer_IsSubtypeDecisionMergeNodeIsSubtype_R1106 = null;
		}
	}

	public static ControlNode_c getOneA_CTLOnR1106(DecisionMergeNode_c[] targets) {
		return getOneA_CTLOnR1106(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1106(
			DecisionMergeNode_c[] targets, ClassQueryInterface_c test) {
		return getOneA_CTLOnR1106(targets, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1106(
			DecisionMergeNode_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ControlNode_c candidate_val = getOneA_CTLOnR1106(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_CTLOnR1106(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1106(DecisionMergeNode_c target) {
		return getOneA_CTLOnR1106(target, true);
	}
	public static ControlNode_c getOneA_CTLOnR1106(DecisionMergeNode_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeControlNode;
		} else {
			return null;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(targets, test, true);
	}

	public static ControlNode_c [] getManyA_CTLsOnR1106(DecisionMergeNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ControlNode_c[0];
  
  
  LinkedHashSet<ControlNode_c> elementsSet = new LinkedHashSet<ControlNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeControlNode == null)
	  targets[i].loadProxy();
    ControlNode_c associate = targets[i].IsSupertypeControlNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ControlNode_c[] result = new ControlNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c[] targets) {
		return getManyA_CTLsOnR1106(targets, null);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			DecisionMergeNode_c[] targetArray = new DecisionMergeNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1106(targetArray, test, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}

	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c target, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c target) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			DecisionMergeNode_c target, boolean loadComponent) {
		return getManyA_CTLsOnR1106(target, null, loadComponent);
	}

	// referred to navigation

	ForkJoinNode_c backPointer_IsSubtypeForkJoinNodeIsSubtype_R1106;

	public void setForkJoinNodeOrderInChildListR1106(ForkJoinNode_c target,
			int index) {
		unrelateAcrossR1106From(target);
		ForkJoinNode_c[] elements = ForkJoinNode_c.getManyA_FJsOnR1106(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR1106From((ForkJoinNode_c) elements[i]);
			}
			count++;
		}
		relateAcrossR1106To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR1106To((ForkJoinNode_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR1106To(ForkJoinNode_c target) {
		if (target != null) {
			target.relateAcrossR1106To(this, true);
		}
	}

	public void relateAcrossR1106To(ForkJoinNode_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR1106To(this, notifyChanges);
		}
	}

	public void setBackPointerR1106To(ForkJoinNode_c target) {
		backPointer_IsSubtypeForkJoinNodeIsSubtype_R1106 = target;
	}

	public void unrelateAcrossR1106From(ForkJoinNode_c target) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, true);
		}
	}

	public void unrelateAcrossR1106From(ForkJoinNode_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR1106From(this, notifyChanges);
		}
	}

	public void clearBackPointerR1106To(ForkJoinNode_c target) {
		if (target == backPointer_IsSubtypeForkJoinNodeIsSubtype_R1106) {
			backPointer_IsSubtypeForkJoinNodeIsSubtype_R1106 = null;
		}
	}

	public static ControlNode_c getOneA_CTLOnR1106(ForkJoinNode_c[] targets) {
		return getOneA_CTLOnR1106(targets, null);
	}

	public static ControlNode_c getOneA_CTLOnR1106(ForkJoinNode_c[] targets,
			ClassQueryInterface_c test) {
		return getOneA_CTLOnR1106(targets, test, true);
	}

	public static ControlNode_c getOneA_CTLOnR1106(ForkJoinNode_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {
		ControlNode_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ControlNode_c candidate_val = getOneA_CTLOnR1106(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneA_CTLOnR1106(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ControlNode_c getOneA_CTLOnR1106(ForkJoinNode_c target) {
		return getOneA_CTLOnR1106(target, true);
	}
	public static ControlNode_c getOneA_CTLOnR1106(ForkJoinNode_c target,
			boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeControlNode;
		} else {
			return null;
		}
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(
			ForkJoinNode_c[] targets, ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(targets, test, true);
	}

	public static ControlNode_c [] getManyA_CTLsOnR1106(ForkJoinNode_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ControlNode_c[0];
  
  
  LinkedHashSet<ControlNode_c> elementsSet = new LinkedHashSet<ControlNode_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeControlNode == null)
	  targets[i].loadProxy();
    ControlNode_c associate = targets[i].IsSupertypeControlNode;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ControlNode_c[] result = new ControlNode_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ControlNode_c[] getManyA_CTLsOnR1106(ForkJoinNode_c[] targets) {
		return getManyA_CTLsOnR1106(targets, null);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(ForkJoinNode_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target != null) {
			ForkJoinNode_c[] targetArray = new ForkJoinNode_c[1];
			targetArray[0] = target;
			return getManyA_CTLsOnR1106(targetArray, test, loadComponent);
		} else {
			ControlNode_c[] result = new ControlNode_c[0];
			return result;
		}

	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(ForkJoinNode_c target,
			ClassQueryInterface_c test) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(ForkJoinNode_c target) {
		return getManyA_CTLsOnR1106(target, null, true);
	}

	public static ControlNode_c[] getManyA_CTLsOnR1106(ForkJoinNode_c target,
			boolean loadComponent) {
		return getManyA_CTLsOnR1106(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R1105
		ActivityNode_c relInst58515 = (ActivityNode_c) baseRoot
				.getInstanceList(ActivityNode_c.class).get(new Object[]{m_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58515 == null) {
			relInst58515 = (ActivityNode_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(ActivityNode_c.class)
					.get(new Object[]{m_id});
		}
		if (relInst58515 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58515 = (ActivityNode_c) roots[i].getInstanceList(
						ActivityNode_c.class).get(new Object[]{m_id});
				if (relInst58515 != null)
					break;
			}
		}
		//synchronized
		if (relInst58515 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58515) && !isProxy())) {
				relInst58515.relateAcrossR1105To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1105
		// A_N
		inst = IsSupertypeActivityNode;
		unrelateAcrossR1105From(IsSupertypeActivityNode, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ControlNode_c inst = (ControlNode_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ControlNode_c ControlNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		ControlNode_c result = findControlNodeInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ControlNode_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findControlNodeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ControlNode_c findControlNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ControlNode_c x = (ControlNode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ControlNode_c ControlNodeInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ControlNodeInstance(modelRoot, test, true);
	}

	public static ControlNode_c ControlNodeInstance(ModelRoot modelRoot) {
		return ControlNodeInstance(modelRoot, null, true);
	}

	public static ControlNode_c[] ControlNodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ControlNode_c.class);
		}
		InstanceList instances = modelRoot.getInstanceList(ControlNode_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ControlNode_c x = (ControlNode_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ControlNode_c[] ret_set = new ControlNode_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ControlNode_c[0];
			}
		}
	}
	public static ControlNode_c[] ControlNodeInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return ControlNodeInstances(modelRoot, test, true);
	}
	public static ControlNode_c[] ControlNodeInstances(ModelRoot modelRoot) {
		return ControlNodeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Control Node.dispose call: ";
		ActivityNode_c testR1105Inst3 = ActivityNode_c.getOneA_NOnR1105(this,
				false);

		if (testR1105Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1105 ";
		}
		InitialNode_c testR1106Inst1 = InitialNode_c.getOneA_INIOnR1106(this,
				false);

		if (testR1106Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1106 ";
		}
		FlowFinalNode_c testR1106Inst2 = FlowFinalNode_c.getOneA_FFOnR1106(
				this, false);

		if (testR1106Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1106 ";
		}
		ActivityFinalNode_c testR1106Inst3 = ActivityFinalNode_c
				.getOneA_AFOnR1106(this, false);

		if (testR1106Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1106 ";
		}
		DecisionMergeNode_c testR1106Inst4 = DecisionMergeNode_c
				.getOneA_DMOnR1106(this, false);

		if (testR1106Inst4 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1106 ";
		}
		ForkJoinNode_c testR1106Inst5 = ForkJoinNode_c.getOneA_FJOnR1106(this,
				false);

		if (testR1106Inst5 != null) {
			delete_error = true;
			errorMsg = errorMsg + "1106 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Control Node", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getIdCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (IsSupertypeActivityNode != null) {
			return IsSupertypeActivityNode.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getId() {
		if (IsSupertypeActivityNode != null) {
			return IsSupertypeActivityNode.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeActivityNode != null);

	}

	public java.util.UUID getIdCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_id))
			return m_id;
		else
			return getId();
	}

	public void setId(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_id)) {
				return;
			}
		} else if (m_id != null) {
			if (m_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Id",
				m_id, newValue, true);
		m_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Control Node", //$NON-NLS-1$
				" Operation entered: Control Node::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ControlNode_c[] objs = ControlNode_c.ControlNodeInstances(modelRoot,
				null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Control Node", //$NON-NLS-1$
				" Operation entered: Control Node::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ControlNode_c_test58517_c implements ClassQueryInterface_c {
			ControlNode_c_test58517_c(java.util.UUID p58518) {
				m_p58518 = p58518;
			}
			private java.util.UUID m_p58518;
			public boolean evaluate(Object candidate) {
				ControlNode_c selected = (ControlNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58518));
				return retval;
			}
		}

		ControlNode_c[] objs58516 = ControlNode_c.ControlNodeInstances(
				modelRoot, new ControlNode_c_test58517_c(getId()));

		if (((objs58516.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Control Node", //$NON-NLS-1$
								"Consistency: Object: Control Node: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58516.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Control Node: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs58516.length), e);
			}
			retval = false;

		}

		if (((objs58516.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Control Node", //$NON-NLS-1$
								"Consistency: Object: Control Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58516.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Control Node: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58516.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Control Node is a subtype in association: rel.Numb = 1105
		// The supertype class is: Activity Node
		class ActivityNode_c_test58522_c implements ClassQueryInterface_c {
			ActivityNode_c_test58522_c(java.util.UUID p58523) {
				m_p58523 = p58523;
			}
			private java.util.UUID m_p58523;
			public boolean evaluate(Object candidate) {
				ActivityNode_c selected = (ActivityNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58523));
				return retval;
			}
		}

		ActivityNode_c[] objs58521 = ActivityNode_c.ActivityNodeInstances(
				modelRoot, new ActivityNode_c_test58522_c(getId()));

		if (((objs58521.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Control Node", //$NON-NLS-1$
								"Consistency: Object: Control Node: Association: 1105: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58521.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Control Node: Association: 1105: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58521.length), e);
			}
			retval = false;

		}

		// Supertype: rel.Numb = 1106
		int objs58524 = 0;
		// Subtype Object: Initial Node
		class InitialNode_c_test58525_c implements ClassQueryInterface_c {
			InitialNode_c_test58525_c(java.util.UUID p58526) {
				m_p58526 = p58526;
			}
			private java.util.UUID m_p58526;
			public boolean evaluate(Object candidate) {
				InitialNode_c selected = (InitialNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58526));
				return retval;
			}
		}

		InitialNode_c[] objs58527 = InitialNode_c.InitialNodeInstances(
				modelRoot, new InitialNode_c_test58525_c(getId()));

		objs58524 = objs58524 + objs58527.length;
		// Subtype Object: Flow Final Node
		class FlowFinalNode_c_test58528_c implements ClassQueryInterface_c {
			FlowFinalNode_c_test58528_c(java.util.UUID p58529) {
				m_p58529 = p58529;
			}
			private java.util.UUID m_p58529;
			public boolean evaluate(Object candidate) {
				FlowFinalNode_c selected = (FlowFinalNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58529));
				return retval;
			}
		}

		FlowFinalNode_c[] objs58530 = FlowFinalNode_c.FlowFinalNodeInstances(
				modelRoot, new FlowFinalNode_c_test58528_c(getId()));

		objs58524 = objs58524 + objs58530.length;
		// Subtype Object: Activity Final Node
		class ActivityFinalNode_c_test58531_c implements ClassQueryInterface_c {
			ActivityFinalNode_c_test58531_c(java.util.UUID p58532) {
				m_p58532 = p58532;
			}
			private java.util.UUID m_p58532;
			public boolean evaluate(Object candidate) {
				ActivityFinalNode_c selected = (ActivityFinalNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58532));
				return retval;
			}
		}

		ActivityFinalNode_c[] objs58533 = ActivityFinalNode_c
				.ActivityFinalNodeInstances(modelRoot,
						new ActivityFinalNode_c_test58531_c(getId()));

		objs58524 = objs58524 + objs58533.length;
		// Subtype Object: Decision Merge Node
		class DecisionMergeNode_c_test58534_c implements ClassQueryInterface_c {
			DecisionMergeNode_c_test58534_c(java.util.UUID p58535) {
				m_p58535 = p58535;
			}
			private java.util.UUID m_p58535;
			public boolean evaluate(Object candidate) {
				DecisionMergeNode_c selected = (DecisionMergeNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58535));
				return retval;
			}
		}

		DecisionMergeNode_c[] objs58536 = DecisionMergeNode_c
				.DecisionMergeNodeInstances(modelRoot,
						new DecisionMergeNode_c_test58534_c(getId()));

		objs58524 = objs58524 + objs58536.length;
		// Subtype Object: Fork Join Node
		class ForkJoinNode_c_test58537_c implements ClassQueryInterface_c {
			ForkJoinNode_c_test58537_c(java.util.UUID p58538) {
				m_p58538 = p58538;
			}
			private java.util.UUID m_p58538;
			public boolean evaluate(Object candidate) {
				ForkJoinNode_c selected = (ForkJoinNode_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58538));
				return retval;
			}
		}

		ForkJoinNode_c[] objs58539 = ForkJoinNode_c.ForkJoinNodeInstances(
				modelRoot, new ForkJoinNode_c_test58537_c(getId()));

		objs58524 = objs58524 + objs58539.length;
		if (objs58524 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Control Node", //$NON-NLS-1$
								"Consistency: Object: Control Node: Association: 1106: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58524)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Control Node: Association: 1106: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58524), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Control Node",
				" Operation entered: ControlNode::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ActivityNode_c v_parent = ActivityNode_c.getOneA_NOnR1105(this);

		if (((v_parent != null))) {

			if (v_parent != null) {
				v_parent.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			return;

		}

		InitialNode_c v_ini = InitialNode_c.getOneA_INIOnR1106(this);

		if (((v_ini != null))) {

			this.unrelateAcrossR1106From(v_ini);

			if (v_ini != null) {
				v_ini.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ActivityFinalNode_c v_af = ActivityFinalNode_c.getOneA_AFOnR1106(this);

		if (((v_af != null))) {

			this.unrelateAcrossR1106From(v_af);

			if (v_af != null) {
				v_af.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		FlowFinalNode_c v_ff = FlowFinalNode_c.getOneA_FFOnR1106(this);

		if (((v_ff != null))) {

			this.unrelateAcrossR1106From(v_ff);

			if (v_ff != null) {
				v_ff.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		DecisionMergeNode_c v_d = DecisionMergeNode_c.getOneA_DMOnR1106(this);

		if (((v_d != null))) {

			this.unrelateAcrossR1106From(v_d);

			if (v_d != null) {
				v_d.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		ForkJoinNode_c v_fj = ForkJoinNode_c.getOneA_FJOnR1106(this);

		if (((v_fj != null))) {

			this.unrelateAcrossR1106From(v_fj);

			if (v_fj != null) {
				v_fj.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public boolean Incomingedgeallowed() {
		Ooaofooa.log.println(ILogger.OPERATION, "Control Node",
				" Operation entered: ControlNode::Incomingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		InitialNode_c v_ini = InitialNode_c.getOneA_INIOnR1106(this);

		if (((v_ini != null))) {

			return v_ini.Incomingedgeallowed();

		}

		else {

			ActivityFinalNode_c v_af = ActivityFinalNode_c
					.getOneA_AFOnR1106(this);

			if (((v_af != null))) {

				return v_af.Incomingedgeallowed();

			}

			else {

				FlowFinalNode_c v_ff = FlowFinalNode_c.getOneA_FFOnR1106(this);

				if (((v_ff != null))) {

					return v_ff.Incomingedgeallowed();

				}

				else {

					DecisionMergeNode_c v_d = DecisionMergeNode_c
							.getOneA_DMOnR1106(this);

					if (((v_d != null))) {

						return v_d.Incomingedgeallowed();

					}

					else {

						ForkJoinNode_c v_fj = ForkJoinNode_c
								.getOneA_FJOnR1106(this);

						if (((v_fj != null))) {

							return v_fj.Incomingedgeallowed();

						}

					}

				}

			}

		}

		return false;

	} // End incomingEdgeAllowed
	public boolean Outgoingedgeallowed() {
		Ooaofooa.log.println(ILogger.OPERATION, "Control Node",
				" Operation entered: ControlNode::Outgoingedgeallowed");
		final ModelRoot modelRoot = getModelRoot();
		InitialNode_c v_ini = InitialNode_c.getOneA_INIOnR1106(this);

		if (((v_ini != null))) {

			return v_ini.Outgoingedgeallowed();

		}

		else {

			ActivityFinalNode_c v_af = ActivityFinalNode_c
					.getOneA_AFOnR1106(this);

			if (((v_af != null))) {

				return v_af.Outgoingedgeallowed();

			}

			else {

				FlowFinalNode_c v_ff = FlowFinalNode_c.getOneA_FFOnR1106(this);

				if (((v_ff != null))) {

					return v_ff.Outgoingedgeallowed();

				}

				else {

					DecisionMergeNode_c v_d = DecisionMergeNode_c
							.getOneA_DMOnR1106(this);

					if (((v_d != null))) {

						return v_d.Outgoingedgeallowed();

					}

					else {

						ForkJoinNode_c v_fj = ForkJoinNode_c
								.getOneA_FJOnR1106(this);

						if (((v_fj != null))) {

							return v_fj.Outgoingedgeallowed();

						}

					}

				}

			}

		}

		return false;

	} // End outgoingEdgeAllowed

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Control Node
