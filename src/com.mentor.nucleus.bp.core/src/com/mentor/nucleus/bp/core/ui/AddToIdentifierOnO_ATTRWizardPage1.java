package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    AddToIdentifierOnO_ATTRWizardPage1.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class AddToIdentifierOnO_ATTRWizardPage1 extends PtWizardPage
		implements
			Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo IdentifierCombo;
	public Label IdentifierLabel;

	// cache for user choices
	ClassIdentifier_c Identifier = null;
	ClassIdentifier_c[] IdentifierInstances;

	/**
	 * Constructors for AddToIdentifierOnO_ATTRWizardPage1.
	 */
	public AddToIdentifierOnO_ATTRWizardPage1() {
		super("");
		init();
	}

	public AddToIdentifierOnO_ATTRWizardPage1(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Add to Identifier");
		setDescription("Select identifier to add this attribute to");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((AddToIdentifierOnO_ATTRWizard) getWizard())
						.getSelection());

		// cache for context
		Attribute_c v_attr = ((AddToIdentifierOnO_ATTRWizard) getWizard()).v_attr;

		// select related by where USER::selectOneWithInt
		ClassIdentifier_c[] v_IdentifierInstances = ClassIdentifier_c
				.getManyO_IDsOnR104(ModelClass_c.getManyO_OBJsOnR102(v_attr));
		ClassIdentifier_c v_Identifier = null;
		int IdentifierInstCount;
		int IdentifierResultCount = 0;
		for (IdentifierInstCount = 0; IdentifierInstCount < v_IdentifierInstances.length; IdentifierInstCount++) {
			ClassIdentifier_c selected = v_IdentifierInstances[IdentifierInstCount];
			if (User_c.Selectonewithint(selected.getOid_id())
					&& !v_attr.Ispartofid(selected.getOid_id())) {
				IdentifierResultCount++;
			}
		}
		this.IdentifierInstances = new ClassIdentifier_c[IdentifierResultCount];
		IdentifierResultCount = 0;
		for (IdentifierInstCount = 0; IdentifierInstCount < v_IdentifierInstances.length; IdentifierInstCount++) {
			ClassIdentifier_c selected = v_IdentifierInstances[IdentifierInstCount];
			if (User_c.Selectonewithint(selected.getOid_id())
					&& !v_attr.Ispartofid(selected.getOid_id())) {
				this.IdentifierInstances[IdentifierResultCount] = selected;
				IdentifierResultCount++;
			}
		}
		IdentifierCombo.removeAll();
		for (IdentifierInstCount = 0; IdentifierInstCount < IdentifierResultCount; IdentifierInstCount++)
			IdentifierCombo
					.add(((ClassIdentifier_c) this.IdentifierInstances[IdentifierInstCount])
							.Get_name());
		if (IdentifierResultCount > 0) {
			IdentifierCombo.select(0);
			updateSelectedIdentifier();
		}

		if (((v_Identifier != null))) {

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		IdentifierLabel = new Label(composite, SWT.NONE);
		IdentifierLabel.setText("Identifier");
		IdentifierCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		IdentifierCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		IdentifierCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedIdentifier() {
		this.Identifier = IdentifierInstances[IdentifierCombo
				.getSelectionIndex()];
		((AddToIdentifierOnO_ATTRWizard) getWizard()).v_Identifier = this.Identifier;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == IdentifierCombo) {
			updateSelectedIdentifier();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Identifier == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((AddToIdentifierOnO_ATTRWizard) getWizard()).v_Identifier = Identifier;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Identifier == null)
			return false;
		return true;
	}

}
