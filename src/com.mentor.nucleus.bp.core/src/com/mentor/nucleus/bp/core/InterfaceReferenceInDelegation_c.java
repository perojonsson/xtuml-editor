package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InterfaceReferenceInDelegation_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_INTERFACE_REFERENCE_IN_DELEGATION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class InterfaceReferenceInDelegation_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public InterfaceReferenceInDelegation_c(ModelRoot modelRoot,
			java.util.UUID p_m_reference_id, java.util.UUID p_m_delegation_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_reference_id = IdAssigner.preprocessUUID(p_m_reference_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_delegation_id = IdAssigner.preprocessUUID(p_m_delegation_id);

		Object[] key = {m_reference_id, m_delegation_id};
		addInstanceToMap(key);
	}
	static public InterfaceReferenceInDelegation_c createProxy(
			ModelRoot modelRoot, java.util.UUID p_m_reference_id,
			java.util.UUID p_m_delegation_id, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);
		InterfaceReferenceInDelegation_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_reference_id, p_m_delegation_id};
			new_inst = (InterfaceReferenceInDelegation_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_reference_id = IdAssigner
						.preprocessUUID(p_m_reference_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_delegation_id = IdAssigner
						.preprocessUUID(p_m_delegation_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new InterfaceReferenceInDelegation_c(modelRoot,
					p_m_reference_id, p_m_delegation_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public InterfaceReferenceInDelegation_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_reference_id,
			java.util.UUID p_m_delegation_id) {
		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);
		InterfaceReferenceInDelegation_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_reference_id, p_m_delegation_id};
			source = (InterfaceReferenceInDelegation_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_reference_id = IdAssigner
						.preprocessUUID(p_m_reference_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_delegation_id = IdAssigner
						.preprocessUUID(p_m_delegation_id);

				return source;
			}
		}
		// there is no instance matching the id
		InterfaceReferenceInDelegation_c new_inst = new InterfaceReferenceInDelegation_c(
				modelRoot, p_m_reference_id, p_m_delegation_id);
		return new_inst;
	}
	public InterfaceReferenceInDelegation_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_reference_id = IdAssigner.NULL_UUID;
		m_delegation_id = IdAssigner.NULL_UUID;
		Object[] key = {m_reference_id, m_delegation_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_reference_id, m_delegation_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_reference_id != p_newKey) {

			m_reference_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof InterfaceReferenceInDelegation_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof InterfaceReferenceInDelegation_c)) {
			return false;
		}

		InterfaceReferenceInDelegation_c me = (InterfaceReferenceInDelegation_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getReference_id()) || IdAssigner.NULL_UUID
						.equals(((InterfaceReferenceInDelegation_c) elem)
								.getReference_id())) && this != elem)) {
			return false;
		}
		if (!getReference_id().equals(
				((InterfaceReferenceInDelegation_c) elem).getReference_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getDelegation_id()) || IdAssigner.NULL_UUID
						.equals(((InterfaceReferenceInDelegation_c) elem)
								.getDelegation_id())) && this != elem)) {
			return false;
		}
		if (!getDelegation_id().equals(
				((InterfaceReferenceInDelegation_c) elem).getDelegation_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof InterfaceReferenceInDelegation_c)) {
			return false;
		}

		InterfaceReferenceInDelegation_c me = (InterfaceReferenceInDelegation_c) elem;
		if (!getReference_idCachedValue().equals(
				((InterfaceReferenceInDelegation_c) elem)
						.getReference_idCachedValue()))
			return false;
		if (!getDelegation_idCachedValue().equals(
				((InterfaceReferenceInDelegation_c) elem)
						.getDelegation_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_reference_id;
	private java.util.UUID m_delegation_id;

	// declare association references from this class

	// referring navigation

	Delegation_c MayDelegateThroughDelegation;
	public void relateAcrossR4013To(Delegation_c target) {
		relateAcrossR4013To(target, true);
	}
	public void relateAcrossR4013To(Delegation_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MayDelegateThroughDelegation)
			return; // already related

		if (MayDelegateThroughDelegation != target) {

			Object oldKey = getInstanceKey();

			if (MayDelegateThroughDelegation != null) {

				MayDelegateThroughDelegation.clearBackPointerR4013To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InterfaceReferenceInDelegation_c.relateAcrossR4013To(Delegation_c target)",
									"Relate performed across R4013 from Interface Reference In Delegation to Delegation without unrelate of prior instance.");
				}
			}

			MayDelegateThroughDelegation = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_delegation_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4013To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4013From(Delegation_c target) {
		unrelateAcrossR4013From(target, true);
	}
	public void unrelateAcrossR4013From(Delegation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MayDelegateThroughDelegation == null)
			return; // already unrelated

		if (target != MayDelegateThroughDelegation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4013",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4013To(this);
		}

		if (MayDelegateThroughDelegation != null) {

			m_delegation_id = MayDelegateThroughDelegation.getId();
			if (IdAssigner.NULL_UUID.equals(m_delegation_id)) {
				m_delegation_id = MayDelegateThroughDelegation
						.getIdCachedValue();
			}
			MayDelegateThroughDelegation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	InterfaceReference_c HandlesDelegationForInterfaceReference;
	public void relateAcrossR4013To(InterfaceReference_c target) {
		relateAcrossR4013To(target, true);
	}
	public void relateAcrossR4013To(InterfaceReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HandlesDelegationForInterfaceReference)
			return; // already related

		if (HandlesDelegationForInterfaceReference != target) {

			Object oldKey = getInstanceKey();

			if (HandlesDelegationForInterfaceReference != null) {

				HandlesDelegationForInterfaceReference
						.clearBackPointerR4013To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InterfaceReferenceInDelegation_c.relateAcrossR4013To(InterfaceReference_c target)",
									"Relate performed across R4013 from Interface Reference In Delegation to Interface Reference without unrelate of prior instance.");
				}
			}

			HandlesDelegationForInterfaceReference = target;
			m_reference_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4013To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4013From(InterfaceReference_c target) {
		unrelateAcrossR4013From(target, true);
	}
	public void unrelateAcrossR4013From(InterfaceReference_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (HandlesDelegationForInterfaceReference == null)
			return; // already unrelated

		if (target != HandlesDelegationForInterfaceReference) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4013",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4013To(this);
		}

		if (HandlesDelegationForInterfaceReference != null) {

			m_reference_id = HandlesDelegationForInterfaceReference.getId();
			HandlesDelegationForInterfaceReference = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4013", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			Delegation_c[] targets) {
		return getOneC_RIDOnR4013(targets, null);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			Delegation_c[] targets, ClassQueryInterface_c test) {
		InterfaceReferenceInDelegation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneC_RIDOnR4013(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			Delegation_c target) {
		return getOneC_RIDOnR4013(target, null);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			Delegation_c target, boolean loadComponent) {
		return getOneC_RIDOnR4013(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			Delegation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneC_RIDOnR4013(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			ModelRoot modelRoot, Delegation_c target, ClassQueryInterface_c test) {
		return getOneC_RIDOnR4013(modelRoot, target, test, true);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			ModelRoot modelRoot, Delegation_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneC_RIDOnR4013(modelRoot, target, test);
	}
	private static InterfaceReferenceInDelegation_c find_getOneC_RIDOnR4013(
			ModelRoot modelRoot, Delegation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013) {
				for (int i = 0; i < target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
						.size(); ++i) {
					InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c[] targets) {
		return getManyC_RIDsOnR4013(targets, null);
	}
	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c[] targets, boolean loadComponent) {
		return getManyC_RIDsOnR4013(targets, null, loadComponent);
	}
	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c[] targets, ClassQueryInterface_c test) {
		return getManyC_RIDsOnR4013(targets, test, true);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InterfaceReferenceInDelegation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013) {
				for (int j = 0; j < targets[i].backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
						.size(); ++j) {
					InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) targets[i].backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InterfaceReferenceInDelegation_c[] ret_set = new InterfaceReferenceInDelegation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InterfaceReferenceInDelegation_c[0];
		}
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c target) {
		return getManyC_RIDsOnR4013(target, null);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c target, boolean loadComponent) {
		return getManyC_RIDsOnR4013(target, null, loadComponent);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c target, ClassQueryInterface_c test) {
		return getManyC_RIDsOnR4013(target, test, true);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			Delegation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InterfaceReferenceInDelegation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013) {
			for (int i = 0; i < target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
					.size(); ++i) {
				InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) target.backPointer_HandlesDelegationForInterfaceReferenceInDelegationHandlesDelegationFor_R4013
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InterfaceReferenceInDelegation_c[] ret_set = new InterfaceReferenceInDelegation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InterfaceReferenceInDelegation_c[0];
		}
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			InterfaceReference_c[] targets) {
		return getOneC_RIDOnR4013(targets, null);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			InterfaceReference_c[] targets, ClassQueryInterface_c test) {
		InterfaceReferenceInDelegation_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneC_RIDOnR4013(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			InterfaceReference_c target) {
		return getOneC_RIDOnR4013(target, null);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			InterfaceReference_c target, boolean loadComponent) {
		return getOneC_RIDOnR4013(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			InterfaceReference_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneC_RIDOnR4013(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			ModelRoot modelRoot, InterfaceReference_c target,
			ClassQueryInterface_c test) {
		return getOneC_RIDOnR4013(modelRoot, target, test, true);
	}

	public static InterfaceReferenceInDelegation_c getOneC_RIDOnR4013(
			ModelRoot modelRoot, InterfaceReference_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneC_RIDOnR4013(modelRoot, target, test);
	}
	private static InterfaceReferenceInDelegation_c find_getOneC_RIDOnR4013(
			ModelRoot modelRoot, InterfaceReference_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013) {
				for (int i = 0; i < target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
						.size(); ++i) {
					InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c[] targets) {
		return getManyC_RIDsOnR4013(targets, null);
	}
	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c[] targets, boolean loadComponent) {
		return getManyC_RIDsOnR4013(targets, null, loadComponent);
	}
	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c[] targets, ClassQueryInterface_c test) {
		return getManyC_RIDsOnR4013(targets, test, true);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InterfaceReferenceInDelegation_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013) {
				for (int j = 0; j < targets[i].backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
						.size(); ++j) {
					InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) targets[i].backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InterfaceReferenceInDelegation_c[] ret_set = new InterfaceReferenceInDelegation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InterfaceReferenceInDelegation_c[0];
		}
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c target) {
		return getManyC_RIDsOnR4013(target, null);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c target, boolean loadComponent) {
		return getManyC_RIDsOnR4013(target, null, loadComponent);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c target, ClassQueryInterface_c test) {
		return getManyC_RIDsOnR4013(target, test, true);
	}

	public static InterfaceReferenceInDelegation_c[] getManyC_RIDsOnR4013(
			InterfaceReference_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InterfaceReferenceInDelegation_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013) {
			for (int i = 0; i < target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
					.size(); ++i) {
				InterfaceReferenceInDelegation_c source = (InterfaceReferenceInDelegation_c) target.backPointer_MayDelegateThroughInterfaceReferenceInDelegationMayDelegateThrough_R4013
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InterfaceReferenceInDelegation_c[] ret_set = new InterfaceReferenceInDelegation_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InterfaceReferenceInDelegation_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R4013
		Delegation_c relInst56978 = (Delegation_c) baseRoot.getInstanceList(
				Delegation_c.class).get(new Object[]{m_delegation_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56978 == null) {
			relInst56978 = (Delegation_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Delegation_c.class)
					.get(new Object[]{m_delegation_id});
		}
		if (relInst56978 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56978 = (Delegation_c) roots[i].getInstanceList(
						Delegation_c.class).get(new Object[]{m_delegation_id});
				if (relInst56978 != null)
					break;
			}
		}
		//synchronized
		if (relInst56978 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56978) && !isProxy())) {
				relInst56978.relateAcrossR4013To(this, notifyChanges);
			}
		}

		InterfaceReference_c relInst56979 = (InterfaceReference_c) baseRoot
				.getInstanceList(InterfaceReference_c.class).get(
						new Object[]{m_reference_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst56979 == null) {
			relInst56979 = (InterfaceReference_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(InterfaceReference_c.class)
					.get(new Object[]{m_reference_id});
		}
		if (relInst56979 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst56979 = (InterfaceReference_c) roots[i].getInstanceList(
						InterfaceReference_c.class).get(
						new Object[]{m_reference_id});
				if (relInst56979 != null)
					break;
			}
		}
		//synchronized
		if (relInst56979 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst56979) && !isProxy())) {
				relInst56979.relateAcrossR4013To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4013
		// C_DG
		inst = MayDelegateThroughDelegation;
		unrelateAcrossR4013From(MayDelegateThroughDelegation, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// C_IR
		inst = HandlesDelegationForInterfaceReference;
		unrelateAcrossR4013From(HandlesDelegationForInterfaceReference,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InterfaceReferenceInDelegation_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InterfaceReferenceInDelegation_c inst = (InterfaceReferenceInDelegation_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static InterfaceReferenceInDelegation_c InterfaceReferenceInDelegationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InterfaceReferenceInDelegation_c result = findInterfaceReferenceInDelegationInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					InterfaceReferenceInDelegation_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findInterfaceReferenceInDelegationInstance(
								modelRoot, test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static InterfaceReferenceInDelegation_c findInterfaceReferenceInDelegationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InterfaceReferenceInDelegation_c x = (InterfaceReferenceInDelegation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static InterfaceReferenceInDelegation_c InterfaceReferenceInDelegationInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InterfaceReferenceInDelegationInstance(modelRoot, test, true);
	}

	public static InterfaceReferenceInDelegation_c InterfaceReferenceInDelegationInstance(
			ModelRoot modelRoot) {
		return InterfaceReferenceInDelegationInstance(modelRoot, null, true);
	}

	public static InterfaceReferenceInDelegation_c[] InterfaceReferenceInDelegationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InterfaceReferenceInDelegation_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(InterfaceReferenceInDelegation_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InterfaceReferenceInDelegation_c x = (InterfaceReferenceInDelegation_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				InterfaceReferenceInDelegation_c[] ret_set = new InterfaceReferenceInDelegation_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InterfaceReferenceInDelegation_c[0];
			}
		}
	}
	public static InterfaceReferenceInDelegation_c[] InterfaceReferenceInDelegationInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InterfaceReferenceInDelegationInstances(modelRoot, test, true);
	}
	public static InterfaceReferenceInDelegation_c[] InterfaceReferenceInDelegationInstances(
			ModelRoot modelRoot) {
		return InterfaceReferenceInDelegationInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Interface Reference In Delegation.dispose call: ";
		InterfaceReference_c testR4013Inst = InterfaceReference_c
				.getOneC_IROnR4013(this, false);

		if (testR4013Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4013 ";
		}

		Delegation_c testR4013InstOth = Delegation_c.getOneC_DGOnR4013(this,
				false);

		if (testR4013InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "4013 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Interface Reference In Delegation", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("reference_id")) {
			return true;
		}
		if (attributeName.equals("delegation_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getReference_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getReference_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getDelegation_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getDelegation_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getReference_idLongBased() {
		if (HandlesDelegationForInterfaceReference != null) {
			return HandlesDelegationForInterfaceReference.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getReference_id() {
		if (HandlesDelegationForInterfaceReference != null) {
			return HandlesDelegationForInterfaceReference.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getReference_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_reference_id))
			return m_reference_id;
		else
			return getReference_id();
	}

	public void setReference_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_reference_id)) {
				return;
			}
		} else if (m_reference_id != null) {
			if (m_reference_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Reference_id", m_reference_id, newValue, true);
		m_reference_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getDelegation_idLongBased() {
		if (MayDelegateThroughDelegation != null) {
			return MayDelegateThroughDelegation.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getDelegation_id() {
		if (MayDelegateThroughDelegation != null) {
			return MayDelegateThroughDelegation.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getDelegation_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_delegation_id))
			return m_delegation_id;
		else
			return getDelegation_id();
	}

	public void setDelegation_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_delegation_id)) {
				return;
			}
		} else if (m_delegation_id != null) {
			if (m_delegation_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Delegation_id", m_delegation_id, newValue, true);
		m_delegation_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION,
						"Interface Reference In Delegation", //$NON-NLS-1$
						" Operation entered: Interface Reference In Delegation::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		InterfaceReferenceInDelegation_c[] objs = InterfaceReferenceInDelegation_c
				.InterfaceReferenceInDelegationInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION,
						"Interface Reference In Delegation", //$NON-NLS-1$
						" Operation entered: Interface Reference In Delegation::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class InterfaceReferenceInDelegation_c_test56981_c
				implements
					ClassQueryInterface_c {
			InterfaceReferenceInDelegation_c_test56981_c(java.util.UUID p56982,
					java.util.UUID p56983) {
				m_p56982 = p56982;
				m_p56983 = p56983;
			}
			private java.util.UUID m_p56982;
			private java.util.UUID m_p56983;
			public boolean evaluate(Object candidate) {
				InterfaceReferenceInDelegation_c selected = (InterfaceReferenceInDelegation_c) candidate;
				boolean retval = false;
				retval = (selected.getReference_id().equals(m_p56982))
						& (selected.getDelegation_id().equals(m_p56983));
				return retval;
			}
		}

		InterfaceReferenceInDelegation_c[] objs56980 = InterfaceReferenceInDelegation_c
				.InterfaceReferenceInDelegationInstances(modelRoot,
						new InterfaceReferenceInDelegation_c_test56981_c(
								getReference_id(), getDelegation_id()));

		if (((objs56980.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Interface Reference In Delegation", //$NON-NLS-1$
								"Consistency: Object: Interface Reference In Delegation: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs56980.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Interface Reference In Delegation: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56980.length), e);
			}
			retval = false;

		}

		if (((objs56980.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Interface Reference In Delegation", //$NON-NLS-1$
								"Consistency: Object: Interface Reference In Delegation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs56980.length)
										+ " Reference_Id: " + "Not Printable" + " Delegation_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Interface Reference In Delegation: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs56980.length)
										+ " Reference_Id: " + "Not Printable" + " Delegation_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Interface Reference In Delegation is a link class in association: rel.Numb = 4013
		// Other side
		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Interface Reference In Delegation
