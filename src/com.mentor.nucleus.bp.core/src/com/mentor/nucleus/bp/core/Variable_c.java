      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Variable_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_VARIABLE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Variable_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Variable_c(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_block_id,
       String       p_m_name,
       boolean      p_m_declared,
       java.util.UUID         p_m_dt_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       //extract 28 bit value only            
       m_var_idLongBased = 0xfffffff & p_m_var_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       m_name = p_m_name;
       m_declared = p_m_declared;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    setUniqueId(m_var_id);
    Object [] key = {m_var_id};
    addInstanceToMap(key);
  }
  static public Variable_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_block_id,
       String       p_m_name,
       boolean      p_m_declared,
       java.util.UUID         p_m_dt_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
      Variable_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_var_id};
          new_inst = (Variable_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       //extract 28 bit value only            
       new_inst.m_var_idLongBased = 0xfffffff & p_m_var_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       new_inst.m_name = p_m_name;
       new_inst.m_declared = p_m_declared;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Variable_c(modelRoot,
p_m_var_id,
p_m_block_id,
p_m_name,
p_m_declared,
p_m_dt_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Variable_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_block_id,
       String       p_m_name,
       boolean      p_m_declared,
       java.util.UUID         p_m_dt_id){
    InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
    Variable_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_var_id
            };
        source = (Variable_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       //extract 28 bit value only            
       source.m_var_idLongBased = 0xfffffff & p_m_var_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       source.m_name = p_m_name;
       source.m_declared = p_m_declared;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Variable_c new_inst = new Variable_c(modelRoot,
p_m_var_id,
p_m_block_id,
p_m_name,
p_m_declared,
p_m_dt_id
);
    return new_inst;
  }
  public Variable_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_var_id = idAssigner.createUUID();
     m_block_id = IdAssigner.NULL_UUID;   
     m_name = "";   
     m_dt_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_var_id);
    Object [] key = {m_var_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_var_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_var_id !=  p_newKey ){
	
		m_var_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Variable_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Variable_c)) {
           return false;
       }
       
       Variable_c me = (Variable_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getVar_id()) || IdAssigner.NULL_UUID.equals(((Variable_c)elem).getVar_id())) && this != elem)) {
      	return false;
      }
      if (!getVar_id().equals(((Variable_c)elem).getVar_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Variable_c)) {
           return false;
       }
       
       Variable_c me = (Variable_c)elem;
      if (!getVar_id().equals(((Variable_c)elem).getVar_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_var_id ;
  private long m_var_idLongBased ;
  private java.util.UUID         m_block_id ;
  private String       m_name ;
  private boolean      m_declared ;
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Block_c Block ;
public void relateAcrossR823To(Block_c target)
{
	relateAcrossR823To(target, true);
}
public void relateAcrossR823To(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == Block) return;  // already related

    if ( Block != target ) {
    
    Object oldKey = getInstanceKey();

    if (Block != null) {
    
        Block.clearBackPointerR823To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Variable_c.relateAcrossR823To(Block_c target)", 
			"Relate performed across R823 from Variable to Block without unrelate of prior instance.");  
		}
    }
                
    	Block = target ;
        m_block_id = target.getBlock_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR823To(this);
        target.addRef();
    }
}
public void unrelateAcrossR823From(Block_c target)
{
	unrelateAcrossR823From(target, true);
}
public void unrelateAcrossR823From(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (Block == null) return;  // already unrelated
	
	if (target != Block) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R823", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR823To(this);
    }
    

      if(Block != null) {
      
        m_block_id = Block.getBlock_id();
        Block = null ;
        target.removeRef();
    }
}

  
    
      
public static Variable_c getOneV_VAROnR823(Block_c [] targets)
{
    return getOneV_VAROnR823(targets, null);
}

public static Variable_c getOneV_VAROnR823(Block_c [] targets, ClassQueryInterface_c test)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_VAROnR823(targets[i], test);
        }
    }

    return ret_val;
}

public static Variable_c getOneV_VAROnR823(Block_c target)
{
  return getOneV_VAROnR823(target, null);
}

public static Variable_c getOneV_VAROnR823(Block_c target, boolean loadComponent)
{
    return getOneV_VAROnR823(target.getModelRoot(), target, null, loadComponent);
}

public static Variable_c getOneV_VAROnR823(Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_VAROnR823(target.getModelRoot(), target, test);
  }
  return null;
}

public static Variable_c getOneV_VAROnR823(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
	return getOneV_VAROnR823(modelRoot, target, test, true);
}

public static Variable_c getOneV_VAROnR823(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_VAROnR823(modelRoot,target,test);
}
private static Variable_c find_getOneV_VAROnR823(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsScopeForVariableIsScopeFor_R823) {
	    for ( int i = 0; i < target.backPointer_IsScopeForVariableIsScopeFor_R823.size(); ++i ) {
	      Variable_c source = (Variable_c)target.backPointer_IsScopeForVariableIsScopeFor_R823.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Variable_c [] getManyV_VARsOnR823(Block_c [] targets)
{
  return getManyV_VARsOnR823(targets, null);
}
public static Variable_c [] getManyV_VARsOnR823(Block_c [] targets, boolean loadComponent)
{
  return getManyV_VARsOnR823(targets, null, loadComponent);
}
public static Variable_c [] getManyV_VARsOnR823(Block_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_VARsOnR823(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR823(Block_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Variable_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Variable_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsScopeForVariableIsScopeFor_R823) {
	    for (int j = 0; j < targets[i].backPointer_IsScopeForVariableIsScopeFor_R823.size(); ++j) {
	      Variable_c source = (Variable_c)targets[i].backPointer_IsScopeForVariableIsScopeFor_R823.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Variable_c[] ret_set = new Variable_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Variable_c[0];
  }
  }

public static Variable_c [] getManyV_VARsOnR823(Block_c target)
{
  return getManyV_VARsOnR823(target, null);
}

public static Variable_c [] getManyV_VARsOnR823(Block_c target, boolean loadComponent)
{
  return getManyV_VARsOnR823(target, null, loadComponent);
}

public static Variable_c [] getManyV_VARsOnR823(Block_c target, ClassQueryInterface_c test)
{
	return getManyV_VARsOnR823(target, test, true);
}

public static Variable_c [] getManyV_VARsOnR823(Block_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Variable_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsScopeForVariableIsScopeFor_R823) {
    for (int i = 0; i < target.backPointer_IsScopeForVariableIsScopeFor_R823.size(); ++i) {
      Variable_c source = (Variable_c)target.backPointer_IsScopeForVariableIsScopeFor_R823.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Variable_c[] ret_set = new Variable_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Variable_c[0];
	}
  }


  
    
// referring navigation

DataType_c HasDataType ;
public void relateAcrossR848To(DataType_c target)
{
	relateAcrossR848To(target, true);
}
public void relateAcrossR848To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasDataType) return;  // already related

    if ( HasDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasDataType != null) {
    
        HasDataType.clearBackPointerR848To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Variable_c.relateAcrossR848To(DataType_c target)", 
			"Relate performed across R848 from Variable to Data Type without unrelate of prior instance.");  
		}
    }
                
    	HasDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR848To(this);
        target.addRef();
    }
}
public void unrelateAcrossR848From(DataType_c target)
{
	unrelateAcrossR848From(target, true);
}
public void unrelateAcrossR848From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasDataType == null) return;  // already unrelated
	
	if (target != HasDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R848", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR848To(this);
    }
    

      if(HasDataType != null) {
      
        m_dt_id = HasDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = HasDataType.getDt_idCachedValue();
        }       
        HasDataType = null ;
        target.removeRef();
    }
}

  
    
      
public static Variable_c getOneV_VAROnR848(DataType_c [] targets)
{
    return getOneV_VAROnR848(targets, null);
}

public static Variable_c getOneV_VAROnR848(DataType_c [] targets, ClassQueryInterface_c test)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_VAROnR848(targets[i], test);
        }
    }

    return ret_val;
}

public static Variable_c getOneV_VAROnR848(DataType_c target)
{
  return getOneV_VAROnR848(target, null);
}

public static Variable_c getOneV_VAROnR848(DataType_c target, boolean loadComponent)
{
    return getOneV_VAROnR848(target.getModelRoot(), target, null, loadComponent);
}

public static Variable_c getOneV_VAROnR848(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_VAROnR848(target.getModelRoot(), target, test);
  }
  return null;
}

public static Variable_c getOneV_VAROnR848(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneV_VAROnR848(modelRoot, target, test, true);
}

public static Variable_c getOneV_VAROnR848(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_VAROnR848(modelRoot,target,test);
}
private static Variable_c find_getOneV_VAROnR848(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTypeOfVariableIsTypeOf_R848) {
	    for ( int i = 0; i < target.backPointer_IsTypeOfVariableIsTypeOf_R848.size(); ++i ) {
	      Variable_c source = (Variable_c)target.backPointer_IsTypeOfVariableIsTypeOf_R848.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Variable_c [] getManyV_VARsOnR848(DataType_c [] targets)
{
  return getManyV_VARsOnR848(targets, null);
}
public static Variable_c [] getManyV_VARsOnR848(DataType_c [] targets, boolean loadComponent)
{
  return getManyV_VARsOnR848(targets, null, loadComponent);
}
public static Variable_c [] getManyV_VARsOnR848(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_VARsOnR848(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR848(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Variable_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Variable_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTypeOfVariableIsTypeOf_R848) {
	    for (int j = 0; j < targets[i].backPointer_IsTypeOfVariableIsTypeOf_R848.size(); ++j) {
	      Variable_c source = (Variable_c)targets[i].backPointer_IsTypeOfVariableIsTypeOf_R848.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Variable_c[] ret_set = new Variable_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Variable_c[0];
  }
  }

public static Variable_c [] getManyV_VARsOnR848(DataType_c target)
{
  return getManyV_VARsOnR848(target, null);
}

public static Variable_c [] getManyV_VARsOnR848(DataType_c target, boolean loadComponent)
{
  return getManyV_VARsOnR848(target, null, loadComponent);
}

public static Variable_c [] getManyV_VARsOnR848(DataType_c target, ClassQueryInterface_c test)
{
	return getManyV_VARsOnR848(target, test, true);
}

public static Variable_c [] getManyV_VARsOnR848(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Variable_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTypeOfVariableIsTypeOf_R848) {
    for (int i = 0; i < target.backPointer_IsTypeOfVariableIsTypeOf_R848.size(); ++i) {
      Variable_c source = (Variable_c)target.backPointer_IsTypeOfVariableIsTypeOf_R848.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Variable_c[] ret_set = new Variable_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Variable_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<VariableLocation_c> backPointer_VariableLocation_R835 = new ArrayList<VariableLocation_c>();

public void setVariableLocationOrderInChildListR835(VariableLocation_c target, int index) {
	unrelateAcrossR835From(target);
	VariableLocation_c[] elements = VariableLocation_c.getManyV_LOCsOnR835(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR835From((VariableLocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR835To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR835To((VariableLocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR835To(VariableLocation_c target)
{
  if (target != null) {
    target.relateAcrossR835To(this, true) ;
  }
}

public void relateAcrossR835To(VariableLocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR835To(this, notifyChanges) ;
  }
}

public void setBackPointerR835To(VariableLocation_c target)
{
  	synchronized (backPointer_VariableLocation_R835) {
		backPointer_VariableLocation_R835.add(target);
	}
}

public void unrelateAcrossR835From(VariableLocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR835From(this, true) ;
  }
}

public void unrelateAcrossR835From(VariableLocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR835From(this, notifyChanges) ;
  }
}

public void clearBackPointerR835To(VariableLocation_c target)
{
  synchronized (backPointer_VariableLocation_R835) {
	    backPointer_VariableLocation_R835.remove(target);
	}
}

public static Variable_c getOneV_VAROnR835(VariableLocation_c [] targets)
{
    return getOneV_VAROnR835(targets, null);
}

public static Variable_c getOneV_VAROnR835(VariableLocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR835(targets, test, true);
}

public static Variable_c getOneV_VAROnR835(VariableLocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR835(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR835(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR835(VariableLocation_c target)
{
	return getOneV_VAROnR835(target, true);
}
public static Variable_c getOneV_VAROnR835(VariableLocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Variable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR835(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].Variable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c [] targets)
{
  return getManyV_VARsOnR835(targets, null);
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    VariableLocation_c [] targetArray = new VariableLocation_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR835(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR835(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c target)
{
    return getManyV_VARsOnR835(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR835(VariableLocation_c target, boolean loadComponent)
{
    return getManyV_VARsOnR835(target, null, loadComponent);
}


    
  
  
// referred to navigation

InstanceHandle_c backPointer_IsSubtypeInstanceHandleIsSubtype_R814;

public void setInstanceHandleOrderInChildListR814(InstanceHandle_c target, int index) {
	unrelateAcrossR814From(target);
	InstanceHandle_c[] elements = InstanceHandle_c.getManyV_INTsOnR814(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR814From((InstanceHandle_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR814To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR814To((InstanceHandle_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR814To(InstanceHandle_c target)
{
  if (target != null) {
    target.relateAcrossR814To(this, true) ;
  }
}

public void relateAcrossR814To(InstanceHandle_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR814To(this, notifyChanges) ;
  }
}

public void setBackPointerR814To(InstanceHandle_c target)
{
    backPointer_IsSubtypeInstanceHandleIsSubtype_R814 = target;
}

public void unrelateAcrossR814From(InstanceHandle_c target)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, true) ;
  }
}

public void unrelateAcrossR814From(InstanceHandle_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, notifyChanges) ;
  }
}

public void clearBackPointerR814To(InstanceHandle_c target)
{
	if (target == backPointer_IsSubtypeInstanceHandleIsSubtype_R814) {
		backPointer_IsSubtypeInstanceHandleIsSubtype_R814 = null;
	}
}

public static Variable_c getOneV_VAROnR814(InstanceHandle_c [] targets)
{
    return getOneV_VAROnR814(targets, null);
}

public static Variable_c getOneV_VAROnR814(InstanceHandle_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR814(targets, test, true);
}

public static Variable_c getOneV_VAROnR814(InstanceHandle_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR814(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR814(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR814(InstanceHandle_c target)
{
	return getOneV_VAROnR814(target, true);
}
public static Variable_c getOneV_VAROnR814(InstanceHandle_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR814(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].IsSupertypeVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c [] targets)
{
  return getManyV_VARsOnR814(targets, null);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceHandle_c [] targetArray = new InstanceHandle_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR814(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c target)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceHandle_c target, boolean loadComponent)
{
    return getManyV_VARsOnR814(target, null, loadComponent);
}

  
  
  
// referred to navigation

InstanceSet_c backPointer_IsSubtypeInstanceSetIsSubtype_R814;

public void setInstanceSetOrderInChildListR814(InstanceSet_c target, int index) {
	unrelateAcrossR814From(target);
	InstanceSet_c[] elements = InstanceSet_c.getManyV_INSsOnR814(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR814From((InstanceSet_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR814To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR814To((InstanceSet_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR814To(InstanceSet_c target)
{
  if (target != null) {
    target.relateAcrossR814To(this, true) ;
  }
}

public void relateAcrossR814To(InstanceSet_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR814To(this, notifyChanges) ;
  }
}

public void setBackPointerR814To(InstanceSet_c target)
{
    backPointer_IsSubtypeInstanceSetIsSubtype_R814 = target;
}

public void unrelateAcrossR814From(InstanceSet_c target)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, true) ;
  }
}

public void unrelateAcrossR814From(InstanceSet_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, notifyChanges) ;
  }
}

public void clearBackPointerR814To(InstanceSet_c target)
{
	if (target == backPointer_IsSubtypeInstanceSetIsSubtype_R814) {
		backPointer_IsSubtypeInstanceSetIsSubtype_R814 = null;
	}
}

public static Variable_c getOneV_VAROnR814(InstanceSet_c [] targets)
{
    return getOneV_VAROnR814(targets, null);
}

public static Variable_c getOneV_VAROnR814(InstanceSet_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR814(targets, test, true);
}

public static Variable_c getOneV_VAROnR814(InstanceSet_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR814(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR814(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR814(InstanceSet_c target)
{
	return getOneV_VAROnR814(target, true);
}
public static Variable_c getOneV_VAROnR814(InstanceSet_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR814(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].IsSupertypeVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c [] targets)
{
  return getManyV_VARsOnR814(targets, null);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceSet_c [] targetArray = new InstanceSet_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR814(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c target)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(InstanceSet_c target, boolean loadComponent)
{
    return getManyV_VARsOnR814(target, null, loadComponent);
}

  
  
  
// referred to navigation

TransientVar_c backPointer_IsSubtypeTransientVarIsSubtype_R814;

public void setTransientVarOrderInChildListR814(TransientVar_c target, int index) {
	unrelateAcrossR814From(target);
	TransientVar_c[] elements = TransientVar_c.getManyV_TRNsOnR814(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR814From((TransientVar_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR814To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR814To((TransientVar_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR814To(TransientVar_c target)
{
  if (target != null) {
    target.relateAcrossR814To(this, true) ;
  }
}

public void relateAcrossR814To(TransientVar_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR814To(this, notifyChanges) ;
  }
}

public void setBackPointerR814To(TransientVar_c target)
{
    backPointer_IsSubtypeTransientVarIsSubtype_R814 = target;
}

public void unrelateAcrossR814From(TransientVar_c target)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, true) ;
  }
}

public void unrelateAcrossR814From(TransientVar_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR814From(this, notifyChanges) ;
  }
}

public void clearBackPointerR814To(TransientVar_c target)
{
	if (target == backPointer_IsSubtypeTransientVarIsSubtype_R814) {
		backPointer_IsSubtypeTransientVarIsSubtype_R814 = null;
	}
}

public static Variable_c getOneV_VAROnR814(TransientVar_c [] targets)
{
    return getOneV_VAROnR814(targets, null);
}

public static Variable_c getOneV_VAROnR814(TransientVar_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR814(targets, test, true);
}

public static Variable_c getOneV_VAROnR814(TransientVar_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR814(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR814(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR814(TransientVar_c target)
{
	return getOneV_VAROnR814(target, true);
}
public static Variable_c getOneV_VAROnR814(TransientVar_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR814(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].IsSupertypeVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c [] targets)
{
  return getManyV_VARsOnR814(targets, null);
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TransientVar_c [] targetArray = new TransientVar_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR814(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c target)
{
    return getManyV_VARsOnR814(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR814(TransientVar_c target, boolean loadComponent)
{
    return getManyV_VARsOnR814(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<TransientValueReference_c> backPointer_TransientValueReference_R805 = new ArrayList<TransientValueReference_c>();

public void setTransientValueReferenceOrderInChildListR805(TransientValueReference_c target, int index) {
	unrelateAcrossR805From(target);
	TransientValueReference_c[] elements = TransientValueReference_c.getManyV_TVLsOnR805(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR805From((TransientValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR805To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR805To((TransientValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR805To(TransientValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR805To(this, true) ;
  }
}

public void relateAcrossR805To(TransientValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR805To(this, notifyChanges) ;
  }
}

public void setBackPointerR805To(TransientValueReference_c target)
{
  	synchronized (backPointer_TransientValueReference_R805) {
		backPointer_TransientValueReference_R805.add(target);
	}
}

public void unrelateAcrossR805From(TransientValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR805From(this, true) ;
  }
}

public void unrelateAcrossR805From(TransientValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR805From(this, notifyChanges) ;
  }
}

public void clearBackPointerR805To(TransientValueReference_c target)
{
  synchronized (backPointer_TransientValueReference_R805) {
	    backPointer_TransientValueReference_R805.remove(target);
	}
}

public static Variable_c getOneV_VAROnR805(TransientValueReference_c [] targets)
{
    return getOneV_VAROnR805(targets, null);
}

public static Variable_c getOneV_VAROnR805(TransientValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR805(targets, test, true);
}

public static Variable_c getOneV_VAROnR805(TransientValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR805(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR805(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR805(TransientValueReference_c target)
{
	return getOneV_VAROnR805(target, true);
}
public static Variable_c getOneV_VAROnR805(TransientValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ReferencesVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR805(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].ReferencesVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c [] targets)
{
  return getManyV_VARsOnR805(targets, null);
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TransientValueReference_c [] targetArray = new TransientValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR805(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR805(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c target)
{
    return getManyV_VARsOnR805(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR805(TransientValueReference_c target, boolean loadComponent)
{
    return getManyV_VARsOnR805(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InstanceReference_c> backPointer_InstanceReference_R808 = new ArrayList<InstanceReference_c>();

public void setInstanceReferenceOrderInChildListR808(InstanceReference_c target, int index) {
	unrelateAcrossR808From(target);
	InstanceReference_c[] elements = InstanceReference_c.getManyV_IRFsOnR808(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR808From((InstanceReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR808To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR808To((InstanceReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR808To(InstanceReference_c target)
{
  if (target != null) {
    target.relateAcrossR808To(this, true) ;
  }
}

public void relateAcrossR808To(InstanceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR808To(this, notifyChanges) ;
  }
}

public void setBackPointerR808To(InstanceReference_c target)
{
  	synchronized (backPointer_InstanceReference_R808) {
		backPointer_InstanceReference_R808.add(target);
	}
}

public void unrelateAcrossR808From(InstanceReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR808From(this, true) ;
  }
}

public void unrelateAcrossR808From(InstanceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR808From(this, notifyChanges) ;
  }
}

public void clearBackPointerR808To(InstanceReference_c target)
{
  synchronized (backPointer_InstanceReference_R808) {
	    backPointer_InstanceReference_R808.remove(target);
	}
}

public static Variable_c getOneV_VAROnR808(InstanceReference_c [] targets)
{
    return getOneV_VAROnR808(targets, null);
}

public static Variable_c getOneV_VAROnR808(InstanceReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR808(targets, test, true);
}

public static Variable_c getOneV_VAROnR808(InstanceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR808(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR808(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR808(InstanceReference_c target)
{
	return getOneV_VAROnR808(target, true);
}
public static Variable_c getOneV_VAROnR808(InstanceReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.RefersToVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR808(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].RefersToVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c [] targets)
{
  return getManyV_VARsOnR808(targets, null);
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceReference_c [] targetArray = new InstanceReference_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR808(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR808(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c target)
{
    return getManyV_VARsOnR808(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR808(InstanceReference_c target, boolean loadComponent)
{
    return getManyV_VARsOnR808(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InstanceSetReference_c> backPointer_InstanceSetReference_R809 = new ArrayList<InstanceSetReference_c>();

public void setInstanceSetReferenceOrderInChildListR809(InstanceSetReference_c target, int index) {
	unrelateAcrossR809From(target);
	InstanceSetReference_c[] elements = InstanceSetReference_c.getManyV_ISRsOnR809(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR809From((InstanceSetReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR809To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR809To((InstanceSetReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR809To(InstanceSetReference_c target)
{
  if (target != null) {
    target.relateAcrossR809To(this, true) ;
  }
}

public void relateAcrossR809To(InstanceSetReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR809To(this, notifyChanges) ;
  }
}

public void setBackPointerR809To(InstanceSetReference_c target)
{
  	synchronized (backPointer_InstanceSetReference_R809) {
		backPointer_InstanceSetReference_R809.add(target);
	}
}

public void unrelateAcrossR809From(InstanceSetReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR809From(this, true) ;
  }
}

public void unrelateAcrossR809From(InstanceSetReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR809From(this, notifyChanges) ;
  }
}

public void clearBackPointerR809To(InstanceSetReference_c target)
{
  synchronized (backPointer_InstanceSetReference_R809) {
	    backPointer_InstanceSetReference_R809.remove(target);
	}
}

public static Variable_c getOneV_VAROnR809(InstanceSetReference_c [] targets)
{
    return getOneV_VAROnR809(targets, null);
}

public static Variable_c getOneV_VAROnR809(InstanceSetReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR809(targets, test, true);
}

public static Variable_c getOneV_VAROnR809(InstanceSetReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR809(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR809(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR809(InstanceSetReference_c target)
{
	return getOneV_VAROnR809(target, true);
}
public static Variable_c getOneV_VAROnR809(InstanceSetReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.RefersToVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR809(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].RefersToVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c [] targets)
{
  return getManyV_VARsOnR809(targets, null);
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceSetReference_c [] targetArray = new InstanceSetReference_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR809(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR809(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c target)
{
    return getManyV_VARsOnR809(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR809(InstanceSetReference_c target, boolean loadComponent)
{
    return getManyV_VARsOnR809(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<OperationValue_c> backPointer_VariableOperationValueVariable_R830 = new ArrayList<OperationValue_c>();

public void setOperationValueOrderInChildListR830(OperationValue_c target, int index) {
	unrelateAcrossR830From(target);
	OperationValue_c[] elements = OperationValue_c.getManyV_TRVsOnR830(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR830From((OperationValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR830To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR830To((OperationValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR830To(OperationValue_c target)
{
  if (target != null) {
    target.relateAcrossR830To(this, true) ;
  }
}

public void relateAcrossR830To(OperationValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR830To(this, notifyChanges) ;
  }
}

public void setBackPointerR830To(OperationValue_c target)
{
  	synchronized (backPointer_VariableOperationValueVariable_R830) {
		backPointer_VariableOperationValueVariable_R830.add(target);
	}
}

public void unrelateAcrossR830From(OperationValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR830From(this, true) ;
  }
}

public void unrelateAcrossR830From(OperationValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR830From(this, notifyChanges) ;
  }
}

public void clearBackPointerR830To(OperationValue_c target)
{
  synchronized (backPointer_VariableOperationValueVariable_R830) {
	    backPointer_VariableOperationValueVariable_R830.remove(target);
	}
}

public static Variable_c getOneV_VAROnR830(OperationValue_c [] targets)
{
    return getOneV_VAROnR830(targets, null);
}

public static Variable_c getOneV_VAROnR830(OperationValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR830(targets, test, true);
}

public static Variable_c getOneV_VAROnR830(OperationValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR830(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR830(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR830(OperationValue_c target)
{
	return getOneV_VAROnR830(target, true);
}
public static Variable_c getOneV_VAROnR830(OperationValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Variable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR830(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].Variable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c [] targets)
{
  return getManyV_VARsOnR830(targets, null);
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    OperationValue_c [] targetArray = new OperationValue_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR830(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR830(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c target)
{
    return getManyV_VARsOnR830(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR830(OperationValue_c target, boolean loadComponent)
{
    return getManyV_VARsOnR830(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Dimensions_c> backPointer_MayHaveDimensionsMayHave_R849 = new ArrayList<Dimensions_c>();

public void setDimensionsOrderInChildListR849(Dimensions_c target, int index) {
	unrelateAcrossR849From(target);
	Dimensions_c[] elements = Dimensions_c.getManyS_DIMsOnR849(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR849From((Dimensions_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR849To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR849To((Dimensions_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR849To(Dimensions_c target)
{
  if (target != null) {
    target.relateAcrossR849To(this, true) ;
  }
}

public void relateAcrossR849To(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR849To(this, notifyChanges) ;
  }
}

public void setBackPointerR849To(Dimensions_c target)
{
  	synchronized (backPointer_MayHaveDimensionsMayHave_R849) {
		backPointer_MayHaveDimensionsMayHave_R849.add(target);
	}
}

public void unrelateAcrossR849From(Dimensions_c target)
{
  if (target != null) {
    target.unrelateAcrossR849From(this, true) ;
  }
}

public void unrelateAcrossR849From(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR849From(this, notifyChanges) ;
  }
}

public void clearBackPointerR849To(Dimensions_c target)
{
  synchronized (backPointer_MayHaveDimensionsMayHave_R849) {
	    backPointer_MayHaveDimensionsMayHave_R849.remove(target);
	}
}

public static Variable_c getOneV_VAROnR849(Dimensions_c [] targets)
{
    return getOneV_VAROnR849(targets, null);
}

public static Variable_c getOneV_VAROnR849(Dimensions_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR849(targets, test, true);
}

public static Variable_c getOneV_VAROnR849(Dimensions_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR849(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR849(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR849(Dimensions_c target)
{
	return getOneV_VAROnR849(target, true);
}
public static Variable_c getOneV_VAROnR849(Dimensions_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesOccurrencesOfVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR849(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].SpecifiesOccurrencesOfVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c [] targets)
{
  return getManyV_VARsOnR849(targets, null);
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Dimensions_c [] targetArray = new Dimensions_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR849(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR849(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c target)
{
    return getManyV_VARsOnR849(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR849(Dimensions_c target, boolean loadComponent)
{
    return getManyV_VARsOnR849(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SelectFromInstancesWhere_c> backPointer_SelectFromInstancesWhere_R665 = new ArrayList<SelectFromInstancesWhere_c>();

public void setSelectFromInstancesWhereOrderInChildListR665(SelectFromInstancesWhere_c target, int index) {
	unrelateAcrossR665From(target);
	SelectFromInstancesWhere_c[] elements = SelectFromInstancesWhere_c.getManyACT_FIWsOnR665(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR665From((SelectFromInstancesWhere_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR665To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR665To((SelectFromInstancesWhere_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR665To(SelectFromInstancesWhere_c target)
{
  if (target != null) {
    target.relateAcrossR665To(this, true) ;
  }
}

public void relateAcrossR665To(SelectFromInstancesWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR665To(this, notifyChanges) ;
  }
}

public void setBackPointerR665To(SelectFromInstancesWhere_c target)
{
  	synchronized (backPointer_SelectFromInstancesWhere_R665) {
		backPointer_SelectFromInstancesWhere_R665.add(target);
	}
}

public void unrelateAcrossR665From(SelectFromInstancesWhere_c target)
{
  if (target != null) {
    target.unrelateAcrossR665From(this, true) ;
  }
}

public void unrelateAcrossR665From(SelectFromInstancesWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR665From(this, notifyChanges) ;
  }
}

public void clearBackPointerR665To(SelectFromInstancesWhere_c target)
{
  synchronized (backPointer_SelectFromInstancesWhere_R665) {
	    backPointer_SelectFromInstancesWhere_R665.remove(target);
	}
}

public static Variable_c getOneV_VAROnR665(SelectFromInstancesWhere_c [] targets)
{
    return getOneV_VAROnR665(targets, null);
}

public static Variable_c getOneV_VAROnR665(SelectFromInstancesWhere_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR665(targets, test, true);
}

public static Variable_c getOneV_VAROnR665(SelectFromInstancesWhere_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR665(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR665(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR665(SelectFromInstancesWhere_c target)
{
	return getOneV_VAROnR665(target, true);
}
public static Variable_c getOneV_VAROnR665(SelectFromInstancesWhere_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ResultVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR665(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].ResultVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c [] targets)
{
  return getManyV_VARsOnR665(targets, null);
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectFromInstancesWhere_c [] targetArray = new SelectFromInstancesWhere_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR665(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR665(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c target)
{
    return getManyV_VARsOnR665(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR665(SelectFromInstancesWhere_c target, boolean loadComponent)
{
    return getManyV_VARsOnR665(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SelectFromInstances_c> backPointer_SelectFromInstances_R639 = new ArrayList<SelectFromInstances_c>();

public void setSelectFromInstancesOrderInChildListR639(SelectFromInstances_c target, int index) {
	unrelateAcrossR639From(target);
	SelectFromInstances_c[] elements = SelectFromInstances_c.getManyACT_FIOsOnR639(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR639From((SelectFromInstances_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR639To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR639To((SelectFromInstances_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR639To(SelectFromInstances_c target)
{
  if (target != null) {
    target.relateAcrossR639To(this, true) ;
  }
}

public void relateAcrossR639To(SelectFromInstances_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR639To(this, notifyChanges) ;
  }
}

public void setBackPointerR639To(SelectFromInstances_c target)
{
  	synchronized (backPointer_SelectFromInstances_R639) {
		backPointer_SelectFromInstances_R639.add(target);
	}
}

public void unrelateAcrossR639From(SelectFromInstances_c target)
{
  if (target != null) {
    target.unrelateAcrossR639From(this, true) ;
  }
}

public void unrelateAcrossR639From(SelectFromInstances_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR639From(this, notifyChanges) ;
  }
}

public void clearBackPointerR639To(SelectFromInstances_c target)
{
  synchronized (backPointer_SelectFromInstances_R639) {
	    backPointer_SelectFromInstances_R639.remove(target);
	}
}

public static Variable_c getOneV_VAROnR639(SelectFromInstances_c [] targets)
{
    return getOneV_VAROnR639(targets, null);
}

public static Variable_c getOneV_VAROnR639(SelectFromInstances_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR639(targets, test, true);
}

public static Variable_c getOneV_VAROnR639(SelectFromInstances_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR639(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR639(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR639(SelectFromInstances_c target)
{
	return getOneV_VAROnR639(target, true);
}
public static Variable_c getOneV_VAROnR639(SelectFromInstances_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SelectionVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR639(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].SelectionVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c [] targets)
{
  return getManyV_VARsOnR639(targets, null);
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectFromInstances_c [] targetArray = new SelectFromInstances_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR639(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR639(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c target)
{
    return getManyV_VARsOnR639(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR639(SelectFromInstances_c target, boolean loadComponent)
{
    return getManyV_VARsOnR639(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Select_c> backPointer_Select_R638 = new ArrayList<Select_c>();

public void setSelectOrderInChildListR638(Select_c target, int index) {
	unrelateAcrossR638From(target);
	Select_c[] elements = Select_c.getManyACT_SELsOnR638(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR638From((Select_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR638To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR638To((Select_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR638To(Select_c target)
{
  if (target != null) {
    target.relateAcrossR638To(this, true) ;
  }
}

public void relateAcrossR638To(Select_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR638To(this, notifyChanges) ;
  }
}

public void setBackPointerR638To(Select_c target)
{
  	synchronized (backPointer_Select_R638) {
		backPointer_Select_R638.add(target);
	}
}

public void unrelateAcrossR638From(Select_c target)
{
  if (target != null) {
    target.unrelateAcrossR638From(this, true) ;
  }
}

public void unrelateAcrossR638From(Select_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR638From(this, notifyChanges) ;
  }
}

public void clearBackPointerR638To(Select_c target)
{
  synchronized (backPointer_Select_R638) {
	    backPointer_Select_R638.remove(target);
	}
}

public static Variable_c getOneV_VAROnR638(Select_c [] targets)
{
    return getOneV_VAROnR638(targets, null);
}

public static Variable_c getOneV_VAROnR638(Select_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR638(targets, test, true);
}

public static Variable_c getOneV_VAROnR638(Select_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR638(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR638(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR638(Select_c target)
{
	return getOneV_VAROnR638(target, true);
}
public static Variable_c getOneV_VAROnR638(Select_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SelectionVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR638(Select_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR638(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR638(Select_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].SelectionVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR638(Select_c [] targets)
{
  return getManyV_VARsOnR638(targets, null);
}

public static Variable_c [] getManyV_VARsOnR638(Select_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Select_c [] targetArray = new Select_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR638(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR638(Select_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR638(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR638(Select_c target)
{
    return getManyV_VARsOnR638(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR638(Select_c target, boolean loadComponent)
{
    return getManyV_VARsOnR638(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Relate_c> backPointer_IsOneVariableRelateIsOneVariable_R615 = new ArrayList<Relate_c>();

public void setRelateOrderInChildListR615(Relate_c target, int index) {
	unrelateAcrossR615From(target);
	Relate_c[] elements = Relate_c.getManyACT_RELsOnR615(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR615From((Relate_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR615To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR615To((Relate_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR615To(Relate_c target)
{
  if (target != null) {
    target.relateAcrossR615To(this, true) ;
  }
}

public void relateAcrossR615To(Relate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR615To(this, notifyChanges) ;
  }
}

public void setBackPointerR615To(Relate_c target)
{
  	synchronized (backPointer_IsOneVariableRelateIsOneVariable_R615) {
		backPointer_IsOneVariableRelateIsOneVariable_R615.add(target);
	}
}

public void unrelateAcrossR615From(Relate_c target)
{
  if (target != null) {
    target.unrelateAcrossR615From(this, true) ;
  }
}

public void unrelateAcrossR615From(Relate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR615From(this, notifyChanges) ;
  }
}

public void clearBackPointerR615To(Relate_c target)
{
  synchronized (backPointer_IsOneVariableRelateIsOneVariable_R615) {
	    backPointer_IsOneVariableRelateIsOneVariable_R615.remove(target);
	}
}

public static Variable_c getOneV_VAROnR615(Relate_c [] targets)
{
    return getOneV_VAROnR615(targets, null);
}

public static Variable_c getOneV_VAROnR615(Relate_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR615(targets, test, true);
}

public static Variable_c getOneV_VAROnR615(Relate_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR615(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR615(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR615(Relate_c target)
{
	return getOneV_VAROnR615(target, true);
}
public static Variable_c getOneV_VAROnR615(Relate_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OneVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR615(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OneVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c [] targets)
{
  return getManyV_VARsOnR615(targets, null);
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Relate_c [] targetArray = new Relate_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR615(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR615(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c target)
{
    return getManyV_VARsOnR615(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR615(Relate_c target, boolean loadComponent)
{
    return getManyV_VARsOnR615(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Relate_c> backPointer_IsOtherVariableRelateIsOtherVariable_R616 = new ArrayList<Relate_c>();

public void setRelateOrderInChildListR616(Relate_c target, int index) {
	unrelateAcrossR616From(target);
	Relate_c[] elements = Relate_c.getManyACT_RELsOnR616(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR616From((Relate_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR616To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR616To((Relate_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR616To(Relate_c target)
{
  if (target != null) {
    target.relateAcrossR616To(this, true) ;
  }
}

public void relateAcrossR616To(Relate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR616To(this, notifyChanges) ;
  }
}

public void setBackPointerR616To(Relate_c target)
{
  	synchronized (backPointer_IsOtherVariableRelateIsOtherVariable_R616) {
		backPointer_IsOtherVariableRelateIsOtherVariable_R616.add(target);
	}
}

public void unrelateAcrossR616From(Relate_c target)
{
  if (target != null) {
    target.unrelateAcrossR616From(this, true) ;
  }
}

public void unrelateAcrossR616From(Relate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR616From(this, notifyChanges) ;
  }
}

public void clearBackPointerR616To(Relate_c target)
{
  synchronized (backPointer_IsOtherVariableRelateIsOtherVariable_R616) {
	    backPointer_IsOtherVariableRelateIsOtherVariable_R616.remove(target);
	}
}

public static Variable_c getOneV_VAROnR616(Relate_c [] targets)
{
    return getOneV_VAROnR616(targets, null);
}

public static Variable_c getOneV_VAROnR616(Relate_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR616(targets, test, true);
}

public static Variable_c getOneV_VAROnR616(Relate_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR616(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR616(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR616(Relate_c target)
{
	return getOneV_VAROnR616(target, true);
}
public static Variable_c getOneV_VAROnR616(Relate_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OtherVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR616(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OtherVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c [] targets)
{
  return getManyV_VARsOnR616(targets, null);
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Relate_c [] targetArray = new Relate_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR616(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR616(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c target)
{
    return getManyV_VARsOnR616(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR616(Relate_c target, boolean loadComponent)
{
    return getManyV_VARsOnR616(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<RelateUsing_c> backPointer_IsOneVariableRelateUsingIsOneVariable_R617 = new ArrayList<RelateUsing_c>();

public void setRelateUsingOrderInChildListR617(RelateUsing_c target, int index) {
	unrelateAcrossR617From(target);
	RelateUsing_c[] elements = RelateUsing_c.getManyACT_RUsOnR617(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR617From((RelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR617To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR617To((RelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR617To(RelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR617To(this, true) ;
  }
}

public void relateAcrossR617To(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR617To(this, notifyChanges) ;
  }
}

public void setBackPointerR617To(RelateUsing_c target)
{
  	synchronized (backPointer_IsOneVariableRelateUsingIsOneVariable_R617) {
		backPointer_IsOneVariableRelateUsingIsOneVariable_R617.add(target);
	}
}

public void unrelateAcrossR617From(RelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR617From(this, true) ;
  }
}

public void unrelateAcrossR617From(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR617From(this, notifyChanges) ;
  }
}

public void clearBackPointerR617To(RelateUsing_c target)
{
  synchronized (backPointer_IsOneVariableRelateUsingIsOneVariable_R617) {
	    backPointer_IsOneVariableRelateUsingIsOneVariable_R617.remove(target);
	}
}

public static Variable_c getOneV_VAROnR617(RelateUsing_c [] targets)
{
    return getOneV_VAROnR617(targets, null);
}

public static Variable_c getOneV_VAROnR617(RelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR617(targets, test, true);
}

public static Variable_c getOneV_VAROnR617(RelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR617(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR617(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR617(RelateUsing_c target)
{
	return getOneV_VAROnR617(target, true);
}
public static Variable_c getOneV_VAROnR617(RelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OneVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR617(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OneVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c [] targets)
{
  return getManyV_VARsOnR617(targets, null);
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RelateUsing_c [] targetArray = new RelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR617(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR617(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c target)
{
    return getManyV_VARsOnR617(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR617(RelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR617(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<RelateUsing_c> backPointer_IsOtherVariableRelateUsingIsOtherVariable_R618 = new ArrayList<RelateUsing_c>();

public void setRelateUsingOrderInChildListR618(RelateUsing_c target, int index) {
	unrelateAcrossR618From(target);
	RelateUsing_c[] elements = RelateUsing_c.getManyACT_RUsOnR618(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR618From((RelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR618To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR618To((RelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR618To(RelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR618To(this, true) ;
  }
}

public void relateAcrossR618To(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR618To(this, notifyChanges) ;
  }
}

public void setBackPointerR618To(RelateUsing_c target)
{
  	synchronized (backPointer_IsOtherVariableRelateUsingIsOtherVariable_R618) {
		backPointer_IsOtherVariableRelateUsingIsOtherVariable_R618.add(target);
	}
}

public void unrelateAcrossR618From(RelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR618From(this, true) ;
  }
}

public void unrelateAcrossR618From(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR618From(this, notifyChanges) ;
  }
}

public void clearBackPointerR618To(RelateUsing_c target)
{
  synchronized (backPointer_IsOtherVariableRelateUsingIsOtherVariable_R618) {
	    backPointer_IsOtherVariableRelateUsingIsOtherVariable_R618.remove(target);
	}
}

public static Variable_c getOneV_VAROnR618(RelateUsing_c [] targets)
{
    return getOneV_VAROnR618(targets, null);
}

public static Variable_c getOneV_VAROnR618(RelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR618(targets, test, true);
}

public static Variable_c getOneV_VAROnR618(RelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR618(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR618(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR618(RelateUsing_c target)
{
	return getOneV_VAROnR618(target, true);
}
public static Variable_c getOneV_VAROnR618(RelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OtherVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR618(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OtherVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c [] targets)
{
  return getManyV_VARsOnR618(targets, null);
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RelateUsing_c [] targetArray = new RelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR618(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR618(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c target)
{
    return getManyV_VARsOnR618(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR618(RelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR618(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<RelateUsing_c> backPointer_IsUsingVariableRelateUsingIsUsingVariable_R619 = new ArrayList<RelateUsing_c>();

public void setRelateUsingOrderInChildListR619(RelateUsing_c target, int index) {
	unrelateAcrossR619From(target);
	RelateUsing_c[] elements = RelateUsing_c.getManyACT_RUsOnR619(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR619From((RelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR619To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR619To((RelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR619To(RelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR619To(this, true) ;
  }
}

public void relateAcrossR619To(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR619To(this, notifyChanges) ;
  }
}

public void setBackPointerR619To(RelateUsing_c target)
{
  	synchronized (backPointer_IsUsingVariableRelateUsingIsUsingVariable_R619) {
		backPointer_IsUsingVariableRelateUsingIsUsingVariable_R619.add(target);
	}
}

public void unrelateAcrossR619From(RelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR619From(this, true) ;
  }
}

public void unrelateAcrossR619From(RelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR619From(this, notifyChanges) ;
  }
}

public void clearBackPointerR619To(RelateUsing_c target)
{
  synchronized (backPointer_IsUsingVariableRelateUsingIsUsingVariable_R619) {
	    backPointer_IsUsingVariableRelateUsingIsUsingVariable_R619.remove(target);
	}
}

public static Variable_c getOneV_VAROnR619(RelateUsing_c [] targets)
{
    return getOneV_VAROnR619(targets, null);
}

public static Variable_c getOneV_VAROnR619(RelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR619(targets, test, true);
}

public static Variable_c getOneV_VAROnR619(RelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR619(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR619(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR619(RelateUsing_c target)
{
	return getOneV_VAROnR619(target, true);
}
public static Variable_c getOneV_VAROnR619(RelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.UsingVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR619(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].UsingVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c [] targets)
{
  return getManyV_VARsOnR619(targets, null);
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RelateUsing_c [] targetArray = new RelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR619(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR619(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c target)
{
    return getManyV_VARsOnR619(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR619(RelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR619(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Unrelate_c> backPointer_IsOneVariableUnrelateIsOneVariable_R620 = new ArrayList<Unrelate_c>();

public void setUnrelateOrderInChildListR620(Unrelate_c target, int index) {
	unrelateAcrossR620From(target);
	Unrelate_c[] elements = Unrelate_c.getManyACT_UNRsOnR620(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR620From((Unrelate_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR620To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR620To((Unrelate_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR620To(Unrelate_c target)
{
  if (target != null) {
    target.relateAcrossR620To(this, true) ;
  }
}

public void relateAcrossR620To(Unrelate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR620To(this, notifyChanges) ;
  }
}

public void setBackPointerR620To(Unrelate_c target)
{
  	synchronized (backPointer_IsOneVariableUnrelateIsOneVariable_R620) {
		backPointer_IsOneVariableUnrelateIsOneVariable_R620.add(target);
	}
}

public void unrelateAcrossR620From(Unrelate_c target)
{
  if (target != null) {
    target.unrelateAcrossR620From(this, true) ;
  }
}

public void unrelateAcrossR620From(Unrelate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR620From(this, notifyChanges) ;
  }
}

public void clearBackPointerR620To(Unrelate_c target)
{
  synchronized (backPointer_IsOneVariableUnrelateIsOneVariable_R620) {
	    backPointer_IsOneVariableUnrelateIsOneVariable_R620.remove(target);
	}
}

public static Variable_c getOneV_VAROnR620(Unrelate_c [] targets)
{
    return getOneV_VAROnR620(targets, null);
}

public static Variable_c getOneV_VAROnR620(Unrelate_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR620(targets, test, true);
}

public static Variable_c getOneV_VAROnR620(Unrelate_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR620(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR620(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR620(Unrelate_c target)
{
	return getOneV_VAROnR620(target, true);
}
public static Variable_c getOneV_VAROnR620(Unrelate_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OneVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR620(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OneVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c [] targets)
{
  return getManyV_VARsOnR620(targets, null);
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Unrelate_c [] targetArray = new Unrelate_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR620(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR620(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c target)
{
    return getManyV_VARsOnR620(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR620(Unrelate_c target, boolean loadComponent)
{
    return getManyV_VARsOnR620(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Unrelate_c> backPointer_IsOtherVariableUnrelateIsOtherVariable_R621 = new ArrayList<Unrelate_c>();

public void setUnrelateOrderInChildListR621(Unrelate_c target, int index) {
	unrelateAcrossR621From(target);
	Unrelate_c[] elements = Unrelate_c.getManyACT_UNRsOnR621(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR621From((Unrelate_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR621To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR621To((Unrelate_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR621To(Unrelate_c target)
{
  if (target != null) {
    target.relateAcrossR621To(this, true) ;
  }
}

public void relateAcrossR621To(Unrelate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR621To(this, notifyChanges) ;
  }
}

public void setBackPointerR621To(Unrelate_c target)
{
  	synchronized (backPointer_IsOtherVariableUnrelateIsOtherVariable_R621) {
		backPointer_IsOtherVariableUnrelateIsOtherVariable_R621.add(target);
	}
}

public void unrelateAcrossR621From(Unrelate_c target)
{
  if (target != null) {
    target.unrelateAcrossR621From(this, true) ;
  }
}

public void unrelateAcrossR621From(Unrelate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR621From(this, notifyChanges) ;
  }
}

public void clearBackPointerR621To(Unrelate_c target)
{
  synchronized (backPointer_IsOtherVariableUnrelateIsOtherVariable_R621) {
	    backPointer_IsOtherVariableUnrelateIsOtherVariable_R621.remove(target);
	}
}

public static Variable_c getOneV_VAROnR621(Unrelate_c [] targets)
{
    return getOneV_VAROnR621(targets, null);
}

public static Variable_c getOneV_VAROnR621(Unrelate_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR621(targets, test, true);
}

public static Variable_c getOneV_VAROnR621(Unrelate_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR621(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR621(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR621(Unrelate_c target)
{
	return getOneV_VAROnR621(target, true);
}
public static Variable_c getOneV_VAROnR621(Unrelate_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OtherVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR621(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OtherVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c [] targets)
{
  return getManyV_VARsOnR621(targets, null);
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Unrelate_c [] targetArray = new Unrelate_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR621(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR621(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c target)
{
    return getManyV_VARsOnR621(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR621(Unrelate_c target, boolean loadComponent)
{
    return getManyV_VARsOnR621(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<UnrelateUsing_c> backPointer_IsOneVariableUnrelateUsingIsOneVariable_R622 = new ArrayList<UnrelateUsing_c>();

public void setUnrelateUsingOrderInChildListR622(UnrelateUsing_c target, int index) {
	unrelateAcrossR622From(target);
	UnrelateUsing_c[] elements = UnrelateUsing_c.getManyACT_URUsOnR622(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR622From((UnrelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR622To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR622To((UnrelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR622To(UnrelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR622To(this, true) ;
  }
}

public void relateAcrossR622To(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR622To(this, notifyChanges) ;
  }
}

public void setBackPointerR622To(UnrelateUsing_c target)
{
  	synchronized (backPointer_IsOneVariableUnrelateUsingIsOneVariable_R622) {
		backPointer_IsOneVariableUnrelateUsingIsOneVariable_R622.add(target);
	}
}

public void unrelateAcrossR622From(UnrelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR622From(this, true) ;
  }
}

public void unrelateAcrossR622From(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR622From(this, notifyChanges) ;
  }
}

public void clearBackPointerR622To(UnrelateUsing_c target)
{
  synchronized (backPointer_IsOneVariableUnrelateUsingIsOneVariable_R622) {
	    backPointer_IsOneVariableUnrelateUsingIsOneVariable_R622.remove(target);
	}
}

public static Variable_c getOneV_VAROnR622(UnrelateUsing_c [] targets)
{
    return getOneV_VAROnR622(targets, null);
}

public static Variable_c getOneV_VAROnR622(UnrelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR622(targets, test, true);
}

public static Variable_c getOneV_VAROnR622(UnrelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR622(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR622(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR622(UnrelateUsing_c target)
{
	return getOneV_VAROnR622(target, true);
}
public static Variable_c getOneV_VAROnR622(UnrelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OneVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR622(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OneVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c [] targets)
{
  return getManyV_VARsOnR622(targets, null);
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UnrelateUsing_c [] targetArray = new UnrelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR622(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR622(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c target)
{
    return getManyV_VARsOnR622(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR622(UnrelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR622(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<UnrelateUsing_c> backPointer_IsOtherVariableUnrelateUsingIsOtherVariable_R623 = new ArrayList<UnrelateUsing_c>();

public void setUnrelateUsingOrderInChildListR623(UnrelateUsing_c target, int index) {
	unrelateAcrossR623From(target);
	UnrelateUsing_c[] elements = UnrelateUsing_c.getManyACT_URUsOnR623(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR623From((UnrelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR623To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR623To((UnrelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR623To(UnrelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR623To(this, true) ;
  }
}

public void relateAcrossR623To(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR623To(this, notifyChanges) ;
  }
}

public void setBackPointerR623To(UnrelateUsing_c target)
{
  	synchronized (backPointer_IsOtherVariableUnrelateUsingIsOtherVariable_R623) {
		backPointer_IsOtherVariableUnrelateUsingIsOtherVariable_R623.add(target);
	}
}

public void unrelateAcrossR623From(UnrelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR623From(this, true) ;
  }
}

public void unrelateAcrossR623From(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR623From(this, notifyChanges) ;
  }
}

public void clearBackPointerR623To(UnrelateUsing_c target)
{
  synchronized (backPointer_IsOtherVariableUnrelateUsingIsOtherVariable_R623) {
	    backPointer_IsOtherVariableUnrelateUsingIsOtherVariable_R623.remove(target);
	}
}

public static Variable_c getOneV_VAROnR623(UnrelateUsing_c [] targets)
{
    return getOneV_VAROnR623(targets, null);
}

public static Variable_c getOneV_VAROnR623(UnrelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR623(targets, test, true);
}

public static Variable_c getOneV_VAROnR623(UnrelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR623(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR623(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR623(UnrelateUsing_c target)
{
	return getOneV_VAROnR623(target, true);
}
public static Variable_c getOneV_VAROnR623(UnrelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OtherVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR623(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].OtherVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c [] targets)
{
  return getManyV_VARsOnR623(targets, null);
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UnrelateUsing_c [] targetArray = new UnrelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR623(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR623(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c target)
{
    return getManyV_VARsOnR623(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR623(UnrelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR623(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<UnrelateUsing_c> backPointer_IsUsingVariableUnrelateUsingIsUsingVariable_R624 = new ArrayList<UnrelateUsing_c>();

public void setUnrelateUsingOrderInChildListR624(UnrelateUsing_c target, int index) {
	unrelateAcrossR624From(target);
	UnrelateUsing_c[] elements = UnrelateUsing_c.getManyACT_URUsOnR624(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR624From((UnrelateUsing_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR624To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR624To((UnrelateUsing_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR624To(UnrelateUsing_c target)
{
  if (target != null) {
    target.relateAcrossR624To(this, true) ;
  }
}

public void relateAcrossR624To(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR624To(this, notifyChanges) ;
  }
}

public void setBackPointerR624To(UnrelateUsing_c target)
{
  	synchronized (backPointer_IsUsingVariableUnrelateUsingIsUsingVariable_R624) {
		backPointer_IsUsingVariableUnrelateUsingIsUsingVariable_R624.add(target);
	}
}

public void unrelateAcrossR624From(UnrelateUsing_c target)
{
  if (target != null) {
    target.unrelateAcrossR624From(this, true) ;
  }
}

public void unrelateAcrossR624From(UnrelateUsing_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR624From(this, notifyChanges) ;
  }
}

public void clearBackPointerR624To(UnrelateUsing_c target)
{
  synchronized (backPointer_IsUsingVariableUnrelateUsingIsUsingVariable_R624) {
	    backPointer_IsUsingVariableUnrelateUsingIsUsingVariable_R624.remove(target);
	}
}

public static Variable_c getOneV_VAROnR624(UnrelateUsing_c [] targets)
{
    return getOneV_VAROnR624(targets, null);
}

public static Variable_c getOneV_VAROnR624(UnrelateUsing_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR624(targets, test, true);
}

public static Variable_c getOneV_VAROnR624(UnrelateUsing_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR624(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR624(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR624(UnrelateUsing_c target)
{
	return getOneV_VAROnR624(target, true);
}
public static Variable_c getOneV_VAROnR624(UnrelateUsing_c target, boolean loadComponent)
{
  if (target != null) {
    return target.UsingVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR624(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].UsingVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c [] targets)
{
  return getManyV_VARsOnR624(targets, null);
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UnrelateUsing_c [] targetArray = new UnrelateUsing_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR624(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR624(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c target)
{
    return getManyV_VARsOnR624(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR624(UnrelateUsing_c target, boolean loadComponent)
{
    return getManyV_VARsOnR624(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<OperationInvocation_c> backPointer_IsTargetOfOperationInvocationIsTargetOf_R667 = new ArrayList<OperationInvocation_c>();

public void setOperationInvocationOrderInChildListR667(OperationInvocation_c target, int index) {
	unrelateAcrossR667From(target);
	OperationInvocation_c[] elements = OperationInvocation_c.getManyACT_TFMsOnR667(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR667From((OperationInvocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR667To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR667To((OperationInvocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR667To(OperationInvocation_c target)
{
  if (target != null) {
    target.relateAcrossR667To(this, true) ;
  }
}

public void relateAcrossR667To(OperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR667To(this, notifyChanges) ;
  }
}

public void setBackPointerR667To(OperationInvocation_c target)
{
  	synchronized (backPointer_IsTargetOfOperationInvocationIsTargetOf_R667) {
		backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.add(target);
	}
}

public void unrelateAcrossR667From(OperationInvocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR667From(this, true) ;
  }
}

public void unrelateAcrossR667From(OperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR667From(this, notifyChanges) ;
  }
}

public void clearBackPointerR667To(OperationInvocation_c target)
{
  synchronized (backPointer_IsTargetOfOperationInvocationIsTargetOf_R667) {
	    backPointer_IsTargetOfOperationInvocationIsTargetOf_R667.remove(target);
	}
}

public static Variable_c getOneV_VAROnR667(OperationInvocation_c [] targets)
{
    return getOneV_VAROnR667(targets, null);
}

public static Variable_c getOneV_VAROnR667(OperationInvocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR667(targets, test, true);
}

public static Variable_c getOneV_VAROnR667(OperationInvocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR667(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR667(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR667(OperationInvocation_c target)
{
	return getOneV_VAROnR667(target, true);
}
public static Variable_c getOneV_VAROnR667(OperationInvocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasTargetVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR667(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].HasTargetVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c [] targets)
{
  return getManyV_VARsOnR667(targets, null);
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    OperationInvocation_c [] targetArray = new OperationInvocation_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR667(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR667(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c target)
{
    return getManyV_VARsOnR667(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR667(OperationInvocation_c target, boolean loadComponent)
{
    return getManyV_VARsOnR667(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Create_c> backPointer_Create_R633 = new ArrayList<Create_c>();

public void setCreateOrderInChildListR633(Create_c target, int index) {
	unrelateAcrossR633From(target);
	Create_c[] elements = Create_c.getManyACT_CRsOnR633(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR633From((Create_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR633To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR633To((Create_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR633To(Create_c target)
{
  if (target != null) {
    target.relateAcrossR633To(this, true) ;
  }
}

public void relateAcrossR633To(Create_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR633To(this, notifyChanges) ;
  }
}

public void setBackPointerR633To(Create_c target)
{
  	synchronized (backPointer_Create_R633) {
		backPointer_Create_R633.add(target);
	}
}

public void unrelateAcrossR633From(Create_c target)
{
  if (target != null) {
    target.unrelateAcrossR633From(this, true) ;
  }
}

public void unrelateAcrossR633From(Create_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR633From(this, notifyChanges) ;
  }
}

public void clearBackPointerR633To(Create_c target)
{
  synchronized (backPointer_Create_R633) {
	    backPointer_Create_R633.remove(target);
	}
}

public static Variable_c getOneV_VAROnR633(Create_c [] targets)
{
    return getOneV_VAROnR633(targets, null);
}

public static Variable_c getOneV_VAROnR633(Create_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR633(targets, test, true);
}

public static Variable_c getOneV_VAROnR633(Create_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR633(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR633(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR633(Create_c target)
{
	return getOneV_VAROnR633(target, true);
}
public static Variable_c getOneV_VAROnR633(Create_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ResultVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR633(Create_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR633(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR633(Create_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].ResultVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR633(Create_c [] targets)
{
  return getManyV_VARsOnR633(targets, null);
}

public static Variable_c [] getManyV_VARsOnR633(Create_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Create_c [] targetArray = new Create_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR633(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR633(Create_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR633(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR633(Create_c target)
{
    return getManyV_VARsOnR633(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR633(Create_c target, boolean loadComponent)
{
    return getManyV_VARsOnR633(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Delete_c> backPointer_Delete_R634 = new ArrayList<Delete_c>();

public void setDeleteOrderInChildListR634(Delete_c target, int index) {
	unrelateAcrossR634From(target);
	Delete_c[] elements = Delete_c.getManyACT_DELsOnR634(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR634From((Delete_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR634To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR634To((Delete_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR634To(Delete_c target)
{
  if (target != null) {
    target.relateAcrossR634To(this, true) ;
  }
}

public void relateAcrossR634To(Delete_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR634To(this, notifyChanges) ;
  }
}

public void setBackPointerR634To(Delete_c target)
{
  	synchronized (backPointer_Delete_R634) {
		backPointer_Delete_R634.add(target);
	}
}

public void unrelateAcrossR634From(Delete_c target)
{
  if (target != null) {
    target.unrelateAcrossR634From(this, true) ;
  }
}

public void unrelateAcrossR634From(Delete_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR634From(this, notifyChanges) ;
  }
}

public void clearBackPointerR634To(Delete_c target)
{
  synchronized (backPointer_Delete_R634) {
	    backPointer_Delete_R634.remove(target);
	}
}

public static Variable_c getOneV_VAROnR634(Delete_c [] targets)
{
    return getOneV_VAROnR634(targets, null);
}

public static Variable_c getOneV_VAROnR634(Delete_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR634(targets, test, true);
}

public static Variable_c getOneV_VAROnR634(Delete_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR634(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR634(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR634(Delete_c target)
{
	return getOneV_VAROnR634(target, true);
}
public static Variable_c getOneV_VAROnR634(Delete_c target, boolean loadComponent)
{
  if (target != null) {
    return target.DestroysVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR634(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].DestroysVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c [] targets)
{
  return getManyV_VARsOnR634(targets, null);
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Delete_c [] targetArray = new Delete_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR634(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR634(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c target)
{
    return getManyV_VARsOnR634(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR634(Delete_c target, boolean loadComponent)
{
    return getManyV_VARsOnR634(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Generate_c> backPointer_Generate_R712 = new ArrayList<Generate_c>();

public void setGenerateOrderInChildListR712(Generate_c target, int index) {
	unrelateAcrossR712From(target);
	Generate_c[] elements = Generate_c.getManyE_GENsOnR712(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR712From((Generate_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR712To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR712To((Generate_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR712To(Generate_c target)
{
  if (target != null) {
    target.relateAcrossR712To(this, true) ;
  }
}

public void relateAcrossR712To(Generate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR712To(this, notifyChanges) ;
  }
}

public void setBackPointerR712To(Generate_c target)
{
  	synchronized (backPointer_Generate_R712) {
		backPointer_Generate_R712.add(target);
	}
}

public void unrelateAcrossR712From(Generate_c target)
{
  if (target != null) {
    target.unrelateAcrossR712From(this, true) ;
  }
}

public void unrelateAcrossR712From(Generate_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR712From(this, notifyChanges) ;
  }
}

public void clearBackPointerR712To(Generate_c target)
{
  synchronized (backPointer_Generate_R712) {
	    backPointer_Generate_R712.remove(target);
	}
}

public static Variable_c getOneV_VAROnR712(Generate_c [] targets)
{
    return getOneV_VAROnR712(targets, null);
}

public static Variable_c getOneV_VAROnR712(Generate_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR712(targets, test, true);
}

public static Variable_c getOneV_VAROnR712(Generate_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR712(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR712(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR712(Generate_c target)
{
	return getOneV_VAROnR712(target, true);
}
public static Variable_c getOneV_VAROnR712(Generate_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasRecipientVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR712(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].HasRecipientVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c [] targets)
{
  return getManyV_VARsOnR712(targets, null);
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Generate_c [] targetArray = new Generate_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR712(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR712(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c target)
{
    return getManyV_VARsOnR712(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR712(Generate_c target, boolean loadComponent)
{
    return getManyV_VARsOnR712(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<CreateEventToInstance_c> backPointer_CreateEventToInstance_R711 = new ArrayList<CreateEventToInstance_c>();

public void setCreateEventToInstanceOrderInChildListR711(CreateEventToInstance_c target, int index) {
	unrelateAcrossR711From(target);
	CreateEventToInstance_c[] elements = CreateEventToInstance_c.getManyE_CEIsOnR711(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR711From((CreateEventToInstance_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR711To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR711To((CreateEventToInstance_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR711To(CreateEventToInstance_c target)
{
  if (target != null) {
    target.relateAcrossR711To(this, true) ;
  }
}

public void relateAcrossR711To(CreateEventToInstance_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR711To(this, notifyChanges) ;
  }
}

public void setBackPointerR711To(CreateEventToInstance_c target)
{
  	synchronized (backPointer_CreateEventToInstance_R711) {
		backPointer_CreateEventToInstance_R711.add(target);
	}
}

public void unrelateAcrossR711From(CreateEventToInstance_c target)
{
  if (target != null) {
    target.unrelateAcrossR711From(this, true) ;
  }
}

public void unrelateAcrossR711From(CreateEventToInstance_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR711From(this, notifyChanges) ;
  }
}

public void clearBackPointerR711To(CreateEventToInstance_c target)
{
  synchronized (backPointer_CreateEventToInstance_R711) {
	    backPointer_CreateEventToInstance_R711.remove(target);
	}
}

public static Variable_c getOneV_VAROnR711(CreateEventToInstance_c [] targets)
{
    return getOneV_VAROnR711(targets, null);
}

public static Variable_c getOneV_VAROnR711(CreateEventToInstance_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR711(targets, test, true);
}

public static Variable_c getOneV_VAROnR711(CreateEventToInstance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR711(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR711(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR711(CreateEventToInstance_c target)
{
	return getOneV_VAROnR711(target, true);
}
public static Variable_c getOneV_VAROnR711(CreateEventToInstance_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasRecipientVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR711(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].HasRecipientVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c [] targets)
{
  return getManyV_VARsOnR711(targets, null);
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    CreateEventToInstance_c [] targetArray = new CreateEventToInstance_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR711(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR711(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c target)
{
    return getManyV_VARsOnR711(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR711(CreateEventToInstance_c target, boolean loadComponent)
{
    return getManyV_VARsOnR711(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<CreateEventStatement_c> backPointer_CreateEventStatement_R710 = new ArrayList<CreateEventStatement_c>();

public void setCreateEventStatementOrderInChildListR710(CreateEventStatement_c target, int index) {
	unrelateAcrossR710From(target);
	CreateEventStatement_c[] elements = CreateEventStatement_c.getManyE_CESsOnR710(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR710From((CreateEventStatement_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR710To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR710To((CreateEventStatement_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR710To(CreateEventStatement_c target)
{
  if (target != null) {
    target.relateAcrossR710To(this, true) ;
  }
}

public void relateAcrossR710To(CreateEventStatement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR710To(this, notifyChanges) ;
  }
}

public void setBackPointerR710To(CreateEventStatement_c target)
{
  	synchronized (backPointer_CreateEventStatement_R710) {
		backPointer_CreateEventStatement_R710.add(target);
	}
}

public void unrelateAcrossR710From(CreateEventStatement_c target)
{
  if (target != null) {
    target.unrelateAcrossR710From(this, true) ;
  }
}

public void unrelateAcrossR710From(CreateEventStatement_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR710From(this, notifyChanges) ;
  }
}

public void clearBackPointerR710To(CreateEventStatement_c target)
{
  synchronized (backPointer_CreateEventStatement_R710) {
	    backPointer_CreateEventStatement_R710.remove(target);
	}
}

public static Variable_c getOneV_VAROnR710(CreateEventStatement_c [] targets)
{
    return getOneV_VAROnR710(targets, null);
}

public static Variable_c getOneV_VAROnR710(CreateEventStatement_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR710(targets, test, true);
}

public static Variable_c getOneV_VAROnR710(CreateEventStatement_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR710(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR710(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR710(CreateEventStatement_c target)
{
	return getOneV_VAROnR710(target, true);
}
public static Variable_c getOneV_VAROnR710(CreateEventStatement_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ResultVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR710(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].ResultVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c [] targets)
{
  return getManyV_VARsOnR710(targets, null);
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    CreateEventStatement_c [] targetArray = new CreateEventStatement_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR710(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR710(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c target)
{
    return getManyV_VARsOnR710(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR710(CreateEventStatement_c target, boolean loadComponent)
{
    return getManyV_VARsOnR710(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ForStmt_c> backPointer_IsLoopVariableForStmtIsLoopVariable_R614 = new ArrayList<ForStmt_c>();

public void setForStmtOrderInChildListR614(ForStmt_c target, int index) {
	unrelateAcrossR614From(target);
	ForStmt_c[] elements = ForStmt_c.getManyACT_FORsOnR614(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR614From((ForStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR614To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR614To((ForStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR614To(ForStmt_c target)
{
  if (target != null) {
    target.relateAcrossR614To(this, true) ;
  }
}

public void relateAcrossR614To(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR614To(this, notifyChanges) ;
  }
}

public void setBackPointerR614To(ForStmt_c target)
{
  	synchronized (backPointer_IsLoopVariableForStmtIsLoopVariable_R614) {
		backPointer_IsLoopVariableForStmtIsLoopVariable_R614.add(target);
	}
}

public void unrelateAcrossR614From(ForStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR614From(this, true) ;
  }
}

public void unrelateAcrossR614From(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR614From(this, notifyChanges) ;
  }
}

public void clearBackPointerR614To(ForStmt_c target)
{
  synchronized (backPointer_IsLoopVariableForStmtIsLoopVariable_R614) {
	    backPointer_IsLoopVariableForStmtIsLoopVariable_R614.remove(target);
	}
}

public static Variable_c getOneV_VAROnR614(ForStmt_c [] targets)
{
    return getOneV_VAROnR614(targets, null);
}

public static Variable_c getOneV_VAROnR614(ForStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR614(targets, test, true);
}

public static Variable_c getOneV_VAROnR614(ForStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR614(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR614(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR614(ForStmt_c target)
{
	return getOneV_VAROnR614(target, true);
}
public static Variable_c getOneV_VAROnR614(ForStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.LoopVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR614(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].LoopVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c [] targets)
{
  return getManyV_VARsOnR614(targets, null);
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ForStmt_c [] targetArray = new ForStmt_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR614(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR614(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c target)
{
    return getManyV_VARsOnR614(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR614(ForStmt_c target, boolean loadComponent)
{
    return getManyV_VARsOnR614(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<ForStmt_c> backPointer_IsSetVariableForStmtIsSetVariable_R652 = new ArrayList<ForStmt_c>();

public void setForStmtOrderInChildListR652(ForStmt_c target, int index) {
	unrelateAcrossR652From(target);
	ForStmt_c[] elements = ForStmt_c.getManyACT_FORsOnR652(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR652From((ForStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR652To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR652To((ForStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR652To(ForStmt_c target)
{
  if (target != null) {
    target.relateAcrossR652To(this, true) ;
  }
}

public void relateAcrossR652To(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR652To(this, notifyChanges) ;
  }
}

public void setBackPointerR652To(ForStmt_c target)
{
  	synchronized (backPointer_IsSetVariableForStmtIsSetVariable_R652) {
		backPointer_IsSetVariableForStmtIsSetVariable_R652.add(target);
	}
}

public void unrelateAcrossR652From(ForStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR652From(this, true) ;
  }
}

public void unrelateAcrossR652From(ForStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR652From(this, notifyChanges) ;
  }
}

public void clearBackPointerR652To(ForStmt_c target)
{
  synchronized (backPointer_IsSetVariableForStmtIsSetVariable_R652) {
	    backPointer_IsSetVariableForStmtIsSetVariable_R652.remove(target);
	}
}

public static Variable_c getOneV_VAROnR652(ForStmt_c [] targets)
{
    return getOneV_VAROnR652(targets, null);
}

public static Variable_c getOneV_VAROnR652(ForStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VAROnR652(targets, test, true);
}

public static Variable_c getOneV_VAROnR652(ForStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Variable_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Variable_c candidate_val = getOneV_VAROnR652(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VAROnR652(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Variable_c getOneV_VAROnR652(ForStmt_c target)
{
	return getOneV_VAROnR652(target, true);
}
public static Variable_c getOneV_VAROnR652(ForStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SetVariable ;
  } else {
    return null;
  }
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VARsOnR652(targets, test, true);
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Variable_c[0];
  
  
  LinkedHashSet<Variable_c> elementsSet = new LinkedHashSet<Variable_c>();
  for (int i = 0; i < targets.length; i++) {
    Variable_c associate = targets[i].SetVariable;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Variable_c[] result = new Variable_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c [] targets)
{
  return getManyV_VARsOnR652(targets, null);
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ForStmt_c [] targetArray = new ForStmt_c[1];
    targetArray[0] = target;
    return getManyV_VARsOnR652(targetArray, test, loadComponent);
  } else {
    Variable_c [] result = new Variable_c [0] ;
    return result ;
  }
  
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VARsOnR652(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c target)
{
    return getManyV_VARsOnR652(target, null, true);
}

public static Variable_c [] getManyV_VARsOnR652(ForStmt_c target, boolean loadComponent)
{
    return getManyV_VARsOnR652(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (Block == null) {          
      // R823
      Block_c relInst37809 = (Block_c) baseRoot.getInstanceList(Block_c.class).get(new Object[] {m_block_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37809 == null) {
      			relInst37809 = (Block_c) Ooaofooa.getDefaultInstance().getInstanceList(Block_c.class).get(new Object[] {m_block_id});
      		}
			if (relInst37809 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37809 = (Block_c) roots[i].getInstanceList(Block_c.class).get(new Object[] {m_block_id});
					if (relInst37809 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37809 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37809) && !isProxy())) {
	      relInst37809.relateAcrossR823To(this, notifyChanges);
	  }
	  }
	}
	          

	if (HasDataType == null) {          
      // R848
      DataType_c relInst37810 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37810 == null) {
      			relInst37810 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst37810 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37810 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst37810 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37810 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37810) && !isProxy())) {
	      relInst37810.relateAcrossR848To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R823
      // ACT_BLK
		  inst=Block;
			unrelateAcrossR823From(Block, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R848
      // S_DT
		  inst=HasDataType;
			unrelateAcrossR848From(HasDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Variable_c inst = (Variable_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Variable_c VariableInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Variable_c result=findVariableInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Variable_c findVariableInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Variable_c x = (Variable_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Variable_c VariableInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return VariableInstance(modelRoot,test,true);
  }
  
  public static Variable_c VariableInstance(ModelRoot modelRoot)
  {
	 return VariableInstance(modelRoot,null,true);
  }

  public static Variable_c [] VariableInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Variable_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Variable_c x = (Variable_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Variable_c[] ret_set = new Variable_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Variable_c[0];
			}		
		} 
  }
  public static Variable_c [] VariableInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  VariableInstances(modelRoot,test,true);
  }
  public static Variable_c [] VariableInstances(ModelRoot modelRoot)
  {
	return VariableInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Variable.dispose call: ";
	VariableLocation_c testR835Inst = VariableLocation_c.getOneV_LOCOnR835(this, false);

	if ( testR835Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "835 ";	
	}
	InstanceHandle_c testR814Inst1 = InstanceHandle_c.getOneV_INTOnR814(this, false);

	if ( testR814Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "814 ";
	}
	InstanceSet_c testR814Inst2 = InstanceSet_c.getOneV_INSOnR814(this, false);

	if ( testR814Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "814 ";
	}
	TransientVar_c testR814Inst3 = TransientVar_c.getOneV_TRNOnR814(this, false);

	if ( testR814Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "814 ";
	}
	TransientValueReference_c testR805Inst = TransientValueReference_c.getOneV_TVLOnR805(this, false);

	if ( testR805Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "805 ";	
	}
	InstanceReference_c testR808Inst = InstanceReference_c.getOneV_IRFOnR808(this, false);

	if ( testR808Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "808 ";	
	}
	InstanceSetReference_c testR809Inst = InstanceSetReference_c.getOneV_ISROnR809(this, false);

	if ( testR809Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "809 ";	
	}
	Block_c testR823Inst = Block_c.getOneACT_BLKOnR823(this, false);

	if ( testR823Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "823 ";
	}
	OperationValue_c testR830Inst = OperationValue_c.getOneV_TRVOnR830(this, false);

	if ( testR830Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "830 ";	
	}
	DataType_c testR848Inst = DataType_c.getOneS_DTOnR848(this, false);

	if ( testR848Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "848 ";
	}
	Dimensions_c testR849Inst = Dimensions_c.getOneS_DIMOnR849(this, false);

	if ( testR849Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "849 ";	
	}
	SelectFromInstancesWhere_c testR665Inst = SelectFromInstancesWhere_c.getOneACT_FIWOnR665(this, false);

	if ( testR665Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "665 ";	
	}
	SelectFromInstances_c testR639Inst = SelectFromInstances_c.getOneACT_FIOOnR639(this, false);

	if ( testR639Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "639 ";	
	}
	Select_c testR638Inst = Select_c.getOneACT_SELOnR638(this, false);

	if ( testR638Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "638 ";	
	}
	Relate_c testR615Inst = Relate_c.getOneACT_RELOnR615(this, false);

	if ( testR615Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "615 ";	
	}
	Relate_c testR616Inst = Relate_c.getOneACT_RELOnR616(this, false);

	if ( testR616Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "616 ";	
	}
	RelateUsing_c testR617Inst = RelateUsing_c.getOneACT_RUOnR617(this, false);

	if ( testR617Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "617 ";	
	}
	RelateUsing_c testR618Inst = RelateUsing_c.getOneACT_RUOnR618(this, false);

	if ( testR618Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "618 ";	
	}
	RelateUsing_c testR619Inst = RelateUsing_c.getOneACT_RUOnR619(this, false);

	if ( testR619Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "619 ";	
	}
	Unrelate_c testR620Inst = Unrelate_c.getOneACT_UNROnR620(this, false);

	if ( testR620Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "620 ";	
	}
	Unrelate_c testR621Inst = Unrelate_c.getOneACT_UNROnR621(this, false);

	if ( testR621Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "621 ";	
	}
	UnrelateUsing_c testR622Inst = UnrelateUsing_c.getOneACT_URUOnR622(this, false);

	if ( testR622Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "622 ";	
	}
	UnrelateUsing_c testR623Inst = UnrelateUsing_c.getOneACT_URUOnR623(this, false);

	if ( testR623Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "623 ";	
	}
	UnrelateUsing_c testR624Inst = UnrelateUsing_c.getOneACT_URUOnR624(this, false);

	if ( testR624Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "624 ";	
	}
	OperationInvocation_c testR667Inst = OperationInvocation_c.getOneACT_TFMOnR667(this, false);

	if ( testR667Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "667 ";	
	}
	Create_c testR633Inst = Create_c.getOneACT_CROnR633(this, false);

	if ( testR633Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "633 ";	
	}
	Delete_c testR634Inst = Delete_c.getOneACT_DELOnR634(this, false);

	if ( testR634Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "634 ";	
	}
	Generate_c testR712Inst = Generate_c.getOneE_GENOnR712(this, false);

	if ( testR712Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "712 ";	
	}
	CreateEventToInstance_c testR711Inst = CreateEventToInstance_c.getOneE_CEIOnR711(this, false);

	if ( testR711Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "711 ";	
	}
	CreateEventStatement_c testR710Inst = CreateEventStatement_c.getOneE_CESOnR710(this, false);

	if ( testR710Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "710 ";	
	}
	ForStmt_c testR614Inst = ForStmt_c.getOneACT_FOROnR614(this, false);

	if ( testR614Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "614 ";	
	}
	ForStmt_c testR652Inst = ForStmt_c.getOneACT_FOROnR652(this, false);

	if ( testR652Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "652 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Variable", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("var_id")){
         return true;
      }
      if(attributeName.equals("block_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getVar_idLongBased()
  {
    if(m_var_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_var_id)){
    	return 0xfffffff & m_var_id.getLeastSignificantBits();
    }
    return m_var_idLongBased ;
  }
  public java.util.UUID getVar_id()
  {
    return m_var_id ;
  }


  public void setVar_id(java.util.UUID newValue)
  {
   m_var_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getBlock_idLongBased()
  {
    if ( Block != null )
    {
      return Block.getBlock_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBlock_id()
  {
    if ( Block != null )
    {
      return Block.getBlock_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBlock_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_block_id) )
      return m_block_id;
    else
      return getBlock_id();
  }
  
  public void setBlock_id(java.util.UUID newValue)
  {
   m_block_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
   m_name = newValue ;
  }
  public boolean getDeclared()
  {
    return m_declared ;
  }


  public void setDeclared(boolean newValue)
  {
   m_declared = newValue ;
  }
  public long getDt_idLongBased()
  {
    if ( HasDataType != null )
    {
      return HasDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( HasDataType != null )
    {
      return HasDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
   m_dt_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Variable", //$NON-NLS-1$
	  " Operation entered: Variable::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Variable_c [] objs = Variable_c.VariableInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Variable", //$NON-NLS-1$
	  " Operation entered: Variable::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Variable_c_test37812_c implements ClassQueryInterface_c
    {
	  Variable_c_test37812_c( java.util.UUID            p37813 ) {
	  m_p37813 = p37813;
	  }
	  private java.util.UUID             m_p37813; 
	  public boolean evaluate (Object candidate)
	  {
	      Variable_c selected = (Variable_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37813));
	      return retval;
	  }
    }

    Variable_c [] objs37811 = 
    Variable_c.VariableInstances(modelRoot, new Variable_c_test37812_c(getVar_id())) ;

    if ( (  (objs37811.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37811.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37811.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs37811.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37811.length )  + " Var_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37811.length )  + " Var_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Variable is a referring class in association: rel.Numb = 823
          // The participating class is: Block
    class Block_c_test37817_c implements ClassQueryInterface_c
    {
	  Block_c_test37817_c( java.util.UUID            p37818 ) {
	  m_p37818 = p37818;
	  }
	  private java.util.UUID             m_p37818; 
	  public boolean evaluate (Object candidate)
	  {
	      Block_c selected = (Block_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p37818));
	      return retval;
	  }
    }

    Block_c [] objs37816 = 
    Block_c.BlockInstances(modelRoot, new Block_c_test37817_c(getBlock_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs37816.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Association: 823: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37816.length )  + " Block_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Association: 823: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37816.length )  + " Block_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Variable is a referring class in association: rel.Numb = 848
          // The participating class is: Data Type
    class DataType_c_test37820_c implements ClassQueryInterface_c
    {
	  DataType_c_test37820_c( java.util.UUID            p37821 ) {
	  m_p37821 = p37821;
	  }
	  private java.util.UUID             m_p37821; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p37821));
	      return retval;
	  }
    }

    DataType_c [] objs37819 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test37820_c(getDt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs37819.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Association: 848: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37819.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Association: 848: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37819.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Variable is a participating class in association: rel.Numb = 835
             // Object: Variable Location
    class VariableLocation_c_test37823_c implements ClassQueryInterface_c
    {
	  VariableLocation_c_test37823_c( java.util.UUID            p37824 ) {
	  m_p37824 = p37824;
	  }
	  private java.util.UUID             m_p37824; 
	  public boolean evaluate (Object candidate)
	  {
	      VariableLocation_c selected = (VariableLocation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37824));
	      return retval;
	  }
    }

    VariableLocation_c [] objs37822 = 
    VariableLocation_c.VariableLocationInstances(modelRoot, new VariableLocation_c_test37823_c(getVar_id())) ;

    if ( (  (objs37822.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Association: 835: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37822.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Association: 835: Cardinality of an unconditional formalizer is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37822.length )  , e); 
      }
      retval = false;

    }
                
          // Supertype: rel.Numb = 814
    int objs37825 = 0;
            // Subtype Object: Instance Handle
    class InstanceHandle_c_test37826_c implements ClassQueryInterface_c
    {
	  InstanceHandle_c_test37826_c( java.util.UUID            p37827 ) {
	  m_p37827 = p37827;
	  }
	  private java.util.UUID             m_p37827; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceHandle_c selected = (InstanceHandle_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37827));
	      return retval;
	  }
    }

    InstanceHandle_c [] objs37828 = 
    InstanceHandle_c.InstanceHandleInstances(modelRoot, new InstanceHandle_c_test37826_c(getVar_id())) ;
 
    objs37825 = objs37825 + objs37828.length;
            // Subtype Object: Instance Set
    class InstanceSet_c_test37829_c implements ClassQueryInterface_c
    {
	  InstanceSet_c_test37829_c( java.util.UUID            p37830 ) {
	  m_p37830 = p37830;
	  }
	  private java.util.UUID             m_p37830; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceSet_c selected = (InstanceSet_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37830));
	      return retval;
	  }
    }

    InstanceSet_c [] objs37831 = 
    InstanceSet_c.InstanceSetInstances(modelRoot, new InstanceSet_c_test37829_c(getVar_id())) ;
 
    objs37825 = objs37825 + objs37831.length;
            // Subtype Object: Transient Var
    class TransientVar_c_test37832_c implements ClassQueryInterface_c
    {
	  TransientVar_c_test37832_c( java.util.UUID            p37833 ) {
	  m_p37833 = p37833;
	  }
	  private java.util.UUID             m_p37833; 
	  public boolean evaluate (Object candidate)
	  {
	      TransientVar_c selected = (TransientVar_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37833));
	      return retval;
	  }
    }

    TransientVar_c [] objs37834 = 
    TransientVar_c.TransientVarInstances(modelRoot, new TransientVar_c_test37832_c(getVar_id())) ;
 
    objs37825 = objs37825 + objs37834.length;
    if ( objs37825 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Variable", //$NON-NLS-1$
           "Consistency: Object: Variable: Association: 814: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37825 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Variable: Association: 814: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37825 )  , e); 
      }
      retval = false;

    }

          // Variable is a participating class in association: rel.Numb = 805
             // Object: Transient Value Reference
          // Variable is a participating class in association: rel.Numb = 808
             // Object: Instance Reference
          // Variable is a participating class in association: rel.Numb = 809
             // Object: Instance Set Reference
          // Variable is a participating class in association: rel.Numb = 830
             // Object: Operation Value
          // Variable is a participating class in association: rel.Numb = 849
             // Object: Dimensions
          // Variable is a participating class in association: rel.Numb = 665
             // Object: Select From Instances Where
          // Variable is a participating class in association: rel.Numb = 639
             // Object: Select From Instances
          // Variable is a participating class in association: rel.Numb = 638
             // Object: Select
          // Variable is a participating class in association: rel.Numb = 615
             // Object: Relate
          // Variable is a participating class in association: rel.Numb = 616
             // Object: Relate
          // Variable is a participating class in association: rel.Numb = 617
             // Object: Relate Using
          // Variable is a participating class in association: rel.Numb = 618
             // Object: Relate Using
          // Variable is a participating class in association: rel.Numb = 619
             // Object: Relate Using
          // Variable is a participating class in association: rel.Numb = 620
             // Object: Unrelate
          // Variable is a participating class in association: rel.Numb = 621
             // Object: Unrelate
          // Variable is a participating class in association: rel.Numb = 622
             // Object: Unrelate Using
          // Variable is a participating class in association: rel.Numb = 623
             // Object: Unrelate Using
          // Variable is a participating class in association: rel.Numb = 624
             // Object: Unrelate Using
          // Variable is a participating class in association: rel.Numb = 667
             // Object: Operation Invocation
          // Variable is a participating class in association: rel.Numb = 633
             // Object: Create
          // Variable is a participating class in association: rel.Numb = 634
             // Object: Delete
          // Variable is a participating class in association: rel.Numb = 712
             // Object: Generate
          // Variable is a participating class in association: rel.Numb = 711
             // Object: Create Event to Instance
          // Variable is a participating class in association: rel.Numb = 710
             // Object: Create Event Statement
          // Variable is a participating class in association: rel.Numb = 614
             // Object: For Stmt
          // Variable is a participating class in association: rel.Numb = 652
             // Object: For Stmt
    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End dispose
  public  void Migrate_to_int()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Migrate_to_int") ; 
               final ModelRoot modelRoot = getModelRoot();
TransientVar_c v_trn = TransientVar_c.getOneV_TRNOnR814(this);


if ( (  (v_trn != null)) )
{

this.unrelateAcrossR814From(v_trn);


if (v_trn != null) {
v_trn.delete() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


InstanceHandle_c v_inst_ref = new InstanceHandle_c(modelRoot) ;


if (v_inst_ref != null) {
  v_inst_ref.relateAcrossR814To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End migrate_to_int
  public  void Migrate_to_ins()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Migrate_to_ins") ; 
               final ModelRoot modelRoot = getModelRoot();
TransientVar_c v_trn = TransientVar_c.getOneV_TRNOnR814(this);


if ( (  (v_trn != null)) )
{

this.unrelateAcrossR814From(v_trn);


if (v_trn != null) {
v_trn.delete() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}


InstanceSet_c v_inst_ref = new InstanceSet_c(modelRoot) ;


if (v_inst_ref != null) {
  v_inst_ref.relateAcrossR814To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End migrate_to_ins
  public  void Addlocation(final int          p_Col,final int          p_Line)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Addlocation") ; 
               final ModelRoot modelRoot = getModelRoot();
VariableLocation_c v_loc = new VariableLocation_c(modelRoot) ;


if (v_loc != null) {
  v_loc.setLinenumber( p_Line) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_loc != null) {
  v_loc.setStartposition( p_Col) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_loc != null) {
  v_loc.setEndposition( v_loc.getStartposition() + Gd_c.Strlen(			    
getName()) - 1) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_loc != null) {
  v_loc.relateAcrossR835To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



   } // End addLocation
  public  int          Getdimensionscnt()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Getdimensionscnt") ; 
               final ModelRoot modelRoot = getModelRoot();
Dimensions_c [] v_dims = Dimensions_c.getManyS_DIMsOnR849(this);


int          v_dimensions =   (v_dims.length) ;


return v_dimensions;



   } // End getDimensionsCnt
  public  void Resizedimensions(final int          p_Dimension,final int          p_Elementcount,final int          p_Numdimensions)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Resizedimensions") ; 
               final ModelRoot modelRoot = getModelRoot();
while ( (p_Numdimensions > Getdimensionscnt()) )
{

Dimensions_c v_dim = new Dimensions_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_dim));


if (v_dim != null) {
  v_dim.setDimensioncount( Getdimensionscnt()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_dim != null) {
  v_dim.relateAcrossR849To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

while ( (p_Numdimensions < Getdimensionscnt()) )
{

  class Dimensions_test37412_c implements ClassQueryInterface_c
  {
	Dimensions_test37412_c( int          p37413 ) {
		m_p37413 = p37413;
	}
	private int          m_p37413;
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == (m_p37413 - 1)) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR849(this, new Dimensions_test37412_c(Getdimensionscnt()));


if (v_dim != null) {
v_dim.unrelateAcrossR849From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_dim != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dim.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dim));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( (p_Numdimensions > 0) )
{

  class Dimensions_test37414_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR849(this, new Dimensions_test37414_c());


if ( (v_dim.getElementcount() != p_Elementcount) )
{

if (v_dim != null) {
  v_dim.setElementcount( p_Elementcount) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}


   } // End resizeDimensions
  public  boolean      Isreferringtodefaultdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Isreferringtodefaultdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR848(this);


String       v_elementType = Util_c.Getsimpleclassname(			    
Converttoinstance()) ;


if ( (v_dt.getName().equals(DataType_c.Getdefaultdatatypename(modelRoot			    
,v_elementType))) )
{

return true;



}

return false;



   } // End isReferringToDefaultDataType
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  boolean      Canrefertodatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Variable", " Operation entered: Variable::Canrefertodatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c.getOneACT_BLKOnR823(this));


boolean      v_isInGenericPackage = v_body.Associatewithcontainer() ;


if ( v_isInGenericPackage )
{

DataType_c v_dt = DataType_c.getOneS_DTOnR848(this);


if ( (  (v_dt != null)) )
{

PackageableElement_c v_containingElem = PackageableElement_c.getOnePE_PEOnR640(BodyInElement_c.getOneACT_BIEOnR640(v_body));


return v_containingElem.Canrefertodatatype(			    
v_dt.getDt_id()			    
,v_dt.getName());



}

return false;



}

else
{

DataType_c v_dt = DataType_c.getOneS_DTOnR848(this);


if ( (  (v_dt != null)) )
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if (v_body != null) {
v_body.Associatewithowningcomponent() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


Component_c v_component = Component_c.getOneC_COnR694(BodyInComponent_c.getOneACT_BICOnR694(v_body));


if ( (  (v_component != null)) )
{

RequiredSignalBody_c v_reqSig = RequiredSignalBody_c.getOneACT_RSBOnR698(v_body);


RequiredOperationBody_c v_reqOp = RequiredOperationBody_c.getOneACT_ROBOnR698(v_body);


ProvidedSignalBody_c v_proSig = ProvidedSignalBody_c.getOneACT_PSBOnR698(v_body);


ProvidedOperationBody_c v_proOp = ProvidedOperationBody_c.getOneACT_POBOnR698(v_body);


if ( (  (v_reqSig != null)) )
{

if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_reqOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proSig != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (  !v_dtPkg.Isdomainlevel()) )
{

return true;



}

else
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_dtDomain == v_domain) )
{

return true;



}


}


}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (v_dtPkg.Isdomainlevel()) )
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_domain == v_dtDomain) )
{

return true;



}


}

else
{

return true;



}


}


}

return false;



}


   } // End canReferToDataType

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Variable
