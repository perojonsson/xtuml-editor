package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.InstanceAttributeValue_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_INSTANCE_ATTRIBUTE_VALUE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class InstanceAttributeValue_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public InstanceAttributeValue_c(ModelRoot modelRoot,
			java.util.UUID p_m_av_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, String p_m_label, String p_m_value,
			String p_m_informalname, java.util.UUID p_m_informal_part_id,
			java.util.UUID p_m_formal_part_id, String p_m_descrip,
			boolean p_m_isformal) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_av_id = IdAssigner.preprocessUUID(p_m_av_id);
		//extract 28 bit value only            
		m_av_idLongBased = 0xfffffff & p_m_av_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
		m_label = p_m_label;
		m_value = p_m_value;
		m_informalname = p_m_informalname;
		m_descrip = p_m_descrip;
		m_isformal = p_m_isformal;
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_informal_part_id = IdAssigner.preprocessUUID(p_m_informal_part_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_formal_part_id = IdAssigner.preprocessUUID(p_m_formal_part_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

		setUniqueId(m_av_id);
		Object[] key = {m_av_id};
		addInstanceToMap(key);
	}
	static public InstanceAttributeValue_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_av_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, String p_m_label, String p_m_value,
			String p_m_informalname, java.util.UUID p_m_informal_part_id,
			java.util.UUID p_m_formal_part_id, String p_m_descrip,
			boolean p_m_isformal, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);
		InstanceAttributeValue_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_av_id};
			new_inst = (InstanceAttributeValue_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_av_id = IdAssigner.preprocessUUID(p_m_av_id);
				//extract 28 bit value only            
				new_inst.m_av_idLongBased = 0xfffffff & p_m_av_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				new_inst.m_label = p_m_label;
				new_inst.m_value = p_m_value;
				new_inst.m_informalname = p_m_informalname;
				new_inst.m_descrip = p_m_descrip;
				new_inst.m_isformal = p_m_isformal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_informal_part_id = IdAssigner
						.preprocessUUID(p_m_informal_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_formal_part_id = IdAssigner
						.preprocessUUID(p_m_formal_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new InstanceAttributeValue_c(modelRoot, p_m_av_id,
					p_m_obj_id, p_m_attr_id, p_m_label, p_m_value,
					p_m_informalname, p_m_informal_part_id, p_m_formal_part_id,
					p_m_descrip, p_m_isformal);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public InstanceAttributeValue_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_av_id, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_attr_id, String p_m_label, String p_m_value,
			String p_m_informalname, java.util.UUID p_m_informal_part_id,
			java.util.UUID p_m_formal_part_id, String p_m_descrip,
			boolean p_m_isformal) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);
		InstanceAttributeValue_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_av_id};
			source = (InstanceAttributeValue_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_av_id = IdAssigner.preprocessUUID(p_m_av_id);
				//extract 28 bit value only            
				source.m_av_idLongBased = 0xfffffff & p_m_av_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_attr_id = IdAssigner.preprocessUUID(p_m_attr_id);
				source.m_label = p_m_label;
				source.m_value = p_m_value;
				source.m_informalname = p_m_informalname;
				source.m_descrip = p_m_descrip;
				source.m_isformal = p_m_isformal;
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_informal_part_id = IdAssigner
						.preprocessUUID(p_m_informal_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_formal_part_id = IdAssigner
						.preprocessUUID(p_m_formal_part_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);

				return source;
			}
		}
		// there is no instance matching the id
		InstanceAttributeValue_c new_inst = new InstanceAttributeValue_c(
				modelRoot, p_m_av_id, p_m_obj_id, p_m_attr_id, p_m_label,
				p_m_value, p_m_informalname, p_m_informal_part_id,
				p_m_formal_part_id, p_m_descrip, p_m_isformal);
		return new_inst;
	}
	public InstanceAttributeValue_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_av_id = idAssigner.createUUID();
		m_attr_id = IdAssigner.NULL_UUID;
		m_label = "";
		m_value = "";
		m_informalname = "";
		m_descrip = "";
		m_informal_part_id = IdAssigner.NULL_UUID;
		m_formal_part_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		setUniqueId(m_av_id);
		Object[] key = {m_av_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_av_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_av_id != p_newKey) {

			m_av_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof InstanceAttributeValue_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof InstanceAttributeValue_c)) {
			return false;
		}

		InstanceAttributeValue_c me = (InstanceAttributeValue_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAv_id()) || IdAssigner.NULL_UUID
						.equals(((InstanceAttributeValue_c) elem).getAv_id())) && this != elem)) {
			return false;
		}
		if (!getAv_id().equals(((InstanceAttributeValue_c) elem).getAv_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof InstanceAttributeValue_c)) {
			return false;
		}

		InstanceAttributeValue_c me = (InstanceAttributeValue_c) elem;
		if (!getAv_id().equals(((InstanceAttributeValue_c) elem).getAv_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_av_id;
	private long m_av_idLongBased;
	private java.util.UUID m_attr_id;
	private String m_label;
	private String m_value;
	private String m_informalname;
	private String m_descrip;
	private boolean m_isformal;
	private java.util.UUID m_informal_part_id;
	private java.util.UUID m_formal_part_id;
	private java.util.UUID m_obj_id;

	// declare association references from this class

	// referring navigation

	Attribute_c ReferencesAttribute;
	public void relateAcrossR938To(Attribute_c target) {
		relateAcrossR938To(target, true);
	}
	public void relateAcrossR938To(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ReferencesAttribute)
			return; // already related

		if (ReferencesAttribute != target) {

			Object oldKey = getInstanceKey();

			if (ReferencesAttribute != null) {
				UmlProblem.removeXtUMLProblem(this, ReferencesAttribute);

				ReferencesAttribute.clearBackPointerR938To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InstanceAttributeValue_c.relateAcrossR938To(Attribute_c target)",
									"Relate performed across R938 from Instance Attribute Value to Attribute without unrelate of prior instance.");
				}
			}

			ReferencesAttribute = target;
			m_attr_id = target.getAttr_id();
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR938To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "938", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR938From(Attribute_c target) {
		unrelateAcrossR938From(target, true);
	}
	public void unrelateAcrossR938From(Attribute_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ReferencesAttribute == null)
			return; // already unrelated

		if (target != ReferencesAttribute) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R938",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR938To(this);
		}

		if (ReferencesAttribute != null) {

			m_attr_id = ReferencesAttribute.getAttr_id();
			m_obj_id = ReferencesAttribute.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = ReferencesAttribute.getObj_idCachedValue();
			}
			ReferencesAttribute = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "938", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			Attribute_c[] targets) {
		return getOneSQ_AVOnR938(targets, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		InstanceAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_AVOnR938(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(Attribute_c target) {
		return getOneSQ_AVOnR938(target, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			Attribute_c target, boolean loadComponent) {
		return getOneSQ_AVOnR938(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_AVOnR938(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		return getOneSQ_AVOnR938(modelRoot, target, test, true);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR938(
			ModelRoot modelRoot, Attribute_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		InstanceAttributeValue_c result = null;

		result = find_getOneSQ_AVOnR938(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					InstanceAttributeValue_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSQ_AVOnR938(modelRoot, target, test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static InstanceAttributeValue_c find_getOneSQ_AVOnR938(
			ModelRoot modelRoot, Attribute_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_DefinesInstanceAttributeValueDefines_R938) {
				for (int i = 0; i < target.backPointer_DefinesInstanceAttributeValueDefines_R938
						.size(); ++i) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_DefinesInstanceAttributeValueDefines_R938
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c[] targets) {
		return getManySQ_AVsOnR938(targets, null);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c[] targets, boolean loadComponent) {
		return getManySQ_AVsOnR938(targets, null, loadComponent);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR938(targets, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceAttributeValue_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_DefinesInstanceAttributeValueDefines_R938) {
				for (int j = 0; j < targets[i].backPointer_DefinesInstanceAttributeValueDefines_R938
						.size(); ++j) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) targets[i].backPointer_DefinesInstanceAttributeValueDefines_R938
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c target) {
		return getManySQ_AVsOnR938(target, null);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c target, boolean loadComponent) {
		return getManySQ_AVsOnR938(target, null, loadComponent);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c target, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR938(target, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR938(
			Attribute_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceAttributeValue_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_DefinesInstanceAttributeValueDefines_R938) {
			for (int i = 0; i < target.backPointer_DefinesInstanceAttributeValueDefines_R938
					.size(); ++i) {
				InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_DefinesInstanceAttributeValueDefines_R938
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	// referring navigation

	ClassInstanceParticipant_c OwnsInformalClassInstanceParticipant;
	public void relateAcrossR936To(ClassInstanceParticipant_c target) {
		relateAcrossR936To(target, true);
	}
	public void relateAcrossR936To(ClassInstanceParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OwnsInformalClassInstanceParticipant)
			return; // already related

		if (OwnsInformalClassInstanceParticipant != target) {

			Object oldKey = getInstanceKey();

			if (OwnsInformalClassInstanceParticipant != null) {

				OwnsInformalClassInstanceParticipant
						.clearBackPointerR936To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InstanceAttributeValue_c.relateAcrossR936To(ClassInstanceParticipant_c target)",
									"Relate performed across R936 from Instance Attribute Value to Class Instance Participant without unrelate of prior instance.");
				}
			}

			OwnsInformalClassInstanceParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_informal_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR936To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "936", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR936From(ClassInstanceParticipant_c target) {
		unrelateAcrossR936From(target, true);
	}
	public void unrelateAcrossR936From(ClassInstanceParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OwnsInformalClassInstanceParticipant == null)
			return; // already unrelated

		if (target != OwnsInformalClassInstanceParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R936",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR936To(this);
		}

		if (OwnsInformalClassInstanceParticipant != null) {

			m_informal_part_id = OwnsInformalClassInstanceParticipant
					.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_informal_part_id)) {
				m_informal_part_id = OwnsInformalClassInstanceParticipant
						.getPart_idCachedValue();
			}
			OwnsInformalClassInstanceParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "936", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ClassInstanceParticipant_c[] targets) {
		return getOneSQ_AVOnR936(targets, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test) {
		InstanceAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_AVOnR936(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ClassInstanceParticipant_c target) {
		return getOneSQ_AVOnR936(target, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ClassInstanceParticipant_c target, boolean loadComponent) {
		return getOneSQ_AVOnR936(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_AVOnR936(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test) {
		return getOneSQ_AVOnR936(modelRoot, target, test, true);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR936(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_AVOnR936(modelRoot, target, test);
	}
	private static InstanceAttributeValue_c find_getOneSQ_AVOnR936(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936) {
				for (int i = 0; i < target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
						.size(); ++i) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c[] targets) {
		return getManySQ_AVsOnR936(targets, null);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c[] targets, boolean loadComponent) {
		return getManySQ_AVsOnR936(targets, null, loadComponent);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR936(targets, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936) {
				for (int j = 0; j < targets[i].backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
						.size(); ++j) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) targets[i].backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c target) {
		return getManySQ_AVsOnR936(target, null);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c target, boolean loadComponent) {
		return getManySQ_AVsOnR936(target, null, loadComponent);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR936(target, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR936(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936) {
			for (int i = 0; i < target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
					.size(); ++i) {
				InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_ContainsInformalInstanceAttributeValueContainsInformal_R936
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	// referring navigation

	ClassInstanceParticipant_c OwnsFormalClassInstanceParticipant;
	public void relateAcrossR937To(ClassInstanceParticipant_c target) {
		relateAcrossR937To(target, true);
	}
	public void relateAcrossR937To(ClassInstanceParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == OwnsFormalClassInstanceParticipant)
			return; // already related

		if (OwnsFormalClassInstanceParticipant != target) {

			Object oldKey = getInstanceKey();

			if (OwnsFormalClassInstanceParticipant != null) {

				OwnsFormalClassInstanceParticipant.clearBackPointerR937To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"InstanceAttributeValue_c.relateAcrossR937To(ClassInstanceParticipant_c target)",
									"Relate performed across R937 from Instance Attribute Value to Class Instance Participant without unrelate of prior instance.");
				}
			}

			OwnsFormalClassInstanceParticipant = target;
			if (IdAssigner.NULL_UUID.equals(target.getPart_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_formal_part_id = target.getPart_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR937To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "937", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR937From(ClassInstanceParticipant_c target) {
		unrelateAcrossR937From(target, true);
	}
	public void unrelateAcrossR937From(ClassInstanceParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (OwnsFormalClassInstanceParticipant == null)
			return; // already unrelated

		if (target != OwnsFormalClassInstanceParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R937",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR937To(this);
		}

		if (OwnsFormalClassInstanceParticipant != null) {

			m_formal_part_id = OwnsFormalClassInstanceParticipant.getPart_id();
			if (IdAssigner.NULL_UUID.equals(m_formal_part_id)) {
				m_formal_part_id = OwnsFormalClassInstanceParticipant
						.getPart_idCachedValue();
			}
			OwnsFormalClassInstanceParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "937", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ClassInstanceParticipant_c[] targets) {
		return getOneSQ_AVOnR937(targets, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test) {
		InstanceAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSQ_AVOnR937(targets[i], test);
			}
		}

		return ret_val;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ClassInstanceParticipant_c target) {
		return getOneSQ_AVOnR937(target, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ClassInstanceParticipant_c target, boolean loadComponent) {
		return getOneSQ_AVOnR937(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSQ_AVOnR937(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test) {
		return getOneSQ_AVOnR937(modelRoot, target, test, true);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR937(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSQ_AVOnR937(modelRoot, target, test);
	}
	private static InstanceAttributeValue_c find_getOneSQ_AVOnR937(
			ModelRoot modelRoot, ClassInstanceParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937) {
				for (int i = 0; i < target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
						.size(); ++i) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c[] targets) {
		return getManySQ_AVsOnR937(targets, null);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c[] targets, boolean loadComponent) {
		return getManySQ_AVsOnR937(targets, null, loadComponent);
	}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR937(targets, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937) {
				for (int j = 0; j < targets[i].backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
						.size(); ++j) {
					InstanceAttributeValue_c source = (InstanceAttributeValue_c) targets[i].backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c target) {
		return getManySQ_AVsOnR937(target, null);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c target, boolean loadComponent) {
		return getManySQ_AVsOnR937(target, null, loadComponent);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR937(target, test, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR937(
			ClassInstanceParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new InstanceAttributeValue_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937) {
			for (int i = 0; i < target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
					.size(); ++i) {
				InstanceAttributeValue_c source = (InstanceAttributeValue_c) target.backPointer_ContainsFormalInstanceAttributeValueContainsFormal_R937
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new InstanceAttributeValue_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	InformalAttributeValue_c backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948;

	public void setInformalAttributeValueOrderInChildListR948(
			InformalAttributeValue_c target, int index) {
		unrelateAcrossR948From(target);
		InformalAttributeValue_c[] elements = InformalAttributeValue_c
				.getManySQ_IAVsOnR948(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR948From((InformalAttributeValue_c) elements[i]);
			}
			count++;
		}
		relateAcrossR948To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR948To((InformalAttributeValue_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR948To(InformalAttributeValue_c target) {
		if (target != null) {
			target.relateAcrossR948To(this, true);
		}
	}

	public void relateAcrossR948To(InformalAttributeValue_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR948To(this, notifyChanges);
		}
	}

	public void setBackPointerR948To(InformalAttributeValue_c target) {
		backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948 = target;
	}

	public void unrelateAcrossR948From(InformalAttributeValue_c target) {
		if (target != null) {
			target.unrelateAcrossR948From(this, true);
		}
	}

	public void unrelateAcrossR948From(InformalAttributeValue_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR948From(this, notifyChanges);
		}
	}

	public void clearBackPointerR948To(InformalAttributeValue_c target) {
		if (target == backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948) {
			backPointer_IsSubtypeInformalAttributeValueIsSubtype_R948 = null;
		}
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			InformalAttributeValue_c[] targets) {
		return getOneSQ_AVOnR948(targets, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			InformalAttributeValue_c[] targets, ClassQueryInterface_c test) {
		return getOneSQ_AVOnR948(targets, test, true);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			InformalAttributeValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					InstanceAttributeValue_c candidate_val = getOneSQ_AVOnR948(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQ_AVOnR948(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			InformalAttributeValue_c target) {
		return getOneSQ_AVOnR948(target, true);
	}
	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			InformalAttributeValue_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeInstanceAttributeValue;
		} else {
			return null;
		}
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR948(targets, test, true);
	}

	public static InstanceAttributeValue_c [] getManySQ_AVsOnR948(InformalAttributeValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InstanceAttributeValue_c[0];
  
  
  LinkedHashSet<InstanceAttributeValue_c> elementsSet = new LinkedHashSet<InstanceAttributeValue_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeInstanceAttributeValue == null)
	  targets[i].loadProxy();
    InstanceAttributeValue_c associate = targets[i].IsSupertypeInstanceAttributeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InstanceAttributeValue_c[] result = new InstanceAttributeValue_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c[] targets) {
		return getManySQ_AVsOnR948(targets, null);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			InformalAttributeValue_c[] targetArray = new InformalAttributeValue_c[1];
			targetArray[0] = target;
			return getManySQ_AVsOnR948(targetArray, test, loadComponent);
		} else {
			InstanceAttributeValue_c[] result = new InstanceAttributeValue_c[0];
			return result;
		}

	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c target, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR948(target, null, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c target) {
		return getManySQ_AVsOnR948(target, null, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			InformalAttributeValue_c target, boolean loadComponent) {
		return getManySQ_AVsOnR948(target, null, loadComponent);
	}

	// referred to navigation

	FormalAttributeValue_c backPointer_IsSubtypeFormalAttributeValueIsSubtype_R948;

	public void setFormalAttributeValueOrderInChildListR948(
			FormalAttributeValue_c target, int index) {
		unrelateAcrossR948From(target);
		FormalAttributeValue_c[] elements = FormalAttributeValue_c
				.getManySQ_FAVsOnR948(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR948From((FormalAttributeValue_c) elements[i]);
			}
			count++;
		}
		relateAcrossR948To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR948To((FormalAttributeValue_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR948To(FormalAttributeValue_c target) {
		if (target != null) {
			target.relateAcrossR948To(this, true);
		}
	}

	public void relateAcrossR948To(FormalAttributeValue_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR948To(this, notifyChanges);
		}
	}

	public void setBackPointerR948To(FormalAttributeValue_c target) {
		backPointer_IsSubtypeFormalAttributeValueIsSubtype_R948 = target;
	}

	public void unrelateAcrossR948From(FormalAttributeValue_c target) {
		if (target != null) {
			target.unrelateAcrossR948From(this, true);
		}
	}

	public void unrelateAcrossR948From(FormalAttributeValue_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR948From(this, notifyChanges);
		}
	}

	public void clearBackPointerR948To(FormalAttributeValue_c target) {
		if (target == backPointer_IsSubtypeFormalAttributeValueIsSubtype_R948) {
			backPointer_IsSubtypeFormalAttributeValueIsSubtype_R948 = null;
		}
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			FormalAttributeValue_c[] targets) {
		return getOneSQ_AVOnR948(targets, null);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			FormalAttributeValue_c[] targets, ClassQueryInterface_c test) {
		return getOneSQ_AVOnR948(targets, test, true);
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			FormalAttributeValue_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceAttributeValue_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					InstanceAttributeValue_c candidate_val = getOneSQ_AVOnR948(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSQ_AVOnR948(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			FormalAttributeValue_c target) {
		return getOneSQ_AVOnR948(target, true);
	}
	public static InstanceAttributeValue_c getOneSQ_AVOnR948(
			FormalAttributeValue_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeInstanceAttributeValue;
		} else {
			return null;
		}
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c[] targets, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR948(targets, test, true);
	}

	public static InstanceAttributeValue_c [] getManySQ_AVsOnR948(FormalAttributeValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new InstanceAttributeValue_c[0];
  
  
  LinkedHashSet<InstanceAttributeValue_c> elementsSet = new LinkedHashSet<InstanceAttributeValue_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeInstanceAttributeValue == null)
	  targets[i].loadProxy();
    InstanceAttributeValue_c associate = targets[i].IsSupertypeInstanceAttributeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  InstanceAttributeValue_c[] result = new InstanceAttributeValue_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c[] targets) {
		return getManySQ_AVsOnR948(targets, null);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			FormalAttributeValue_c[] targetArray = new FormalAttributeValue_c[1];
			targetArray[0] = target;
			return getManySQ_AVsOnR948(targetArray, test, loadComponent);
		} else {
			InstanceAttributeValue_c[] result = new InstanceAttributeValue_c[0];
			return result;
		}

	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c target, ClassQueryInterface_c test) {
		return getManySQ_AVsOnR948(target, null, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c target) {
		return getManySQ_AVsOnR948(target, null, true);
	}

	public static InstanceAttributeValue_c[] getManySQ_AVsOnR948(
			FormalAttributeValue_c target, boolean loadComponent) {
		return getManySQ_AVsOnR948(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ReferencesAttribute == null) {
			// R938
			Attribute_c relInst40530 = (Attribute_c) baseRoot.getInstanceList(
					Attribute_c.class).get(new Object[]{m_attr_id, m_obj_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40530 == null) {
				relInst40530 = (Attribute_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Attribute_c.class)
						.get(new Object[]{m_attr_id, m_obj_id});
			}
			if (relInst40530 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40530 = (Attribute_c) roots[i].getInstanceList(
							Attribute_c.class).get(
							new Object[]{m_attr_id, m_obj_id});
					if (relInst40530 != null)
						break;
				}
			}
			//synchronized
			if (relInst40530 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40530) && !isProxy())) {
					relInst40530.relateAcrossR938To(this, notifyChanges);
				}
			}
		}

		if (OwnsInformalClassInstanceParticipant == null) {
			// R936
			ClassInstanceParticipant_c relInst40531 = (ClassInstanceParticipant_c) baseRoot
					.getInstanceList(ClassInstanceParticipant_c.class).get(
							new Object[]{m_informal_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40531 == null) {
				relInst40531 = (ClassInstanceParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ClassInstanceParticipant_c.class)
						.get(new Object[]{m_informal_part_id});
			}
			if (relInst40531 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40531 = (ClassInstanceParticipant_c) roots[i]
							.getInstanceList(ClassInstanceParticipant_c.class)
							.get(new Object[]{m_informal_part_id});
					if (relInst40531 != null)
						break;
				}
			}
			//synchronized
			if (relInst40531 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40531) && !isProxy())) {
					relInst40531.relateAcrossR936To(this, notifyChanges);
				}
			}
		}

		if (OwnsFormalClassInstanceParticipant == null) {
			// R937
			ClassInstanceParticipant_c relInst40532 = (ClassInstanceParticipant_c) baseRoot
					.getInstanceList(ClassInstanceParticipant_c.class).get(
							new Object[]{m_formal_part_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst40532 == null) {
				relInst40532 = (ClassInstanceParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ClassInstanceParticipant_c.class)
						.get(new Object[]{m_formal_part_id});
			}
			if (relInst40532 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst40532 = (ClassInstanceParticipant_c) roots[i]
							.getInstanceList(ClassInstanceParticipant_c.class)
							.get(new Object[]{m_formal_part_id});
					if (relInst40532 != null)
						break;
				}
			}
			//synchronized
			if (relInst40532 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst40532) && !isProxy())) {
					relInst40532.relateAcrossR937To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R938
		// O_ATTR
		inst = ReferencesAttribute;
		unrelateAcrossR938From(ReferencesAttribute, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R936
		// SQ_CIP
		inst = OwnsInformalClassInstanceParticipant;
		unrelateAcrossR936From(OwnsInformalClassInstanceParticipant,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R937
		// SQ_CIP
		inst = OwnsFormalClassInstanceParticipant;
		unrelateAcrossR937From(OwnsFormalClassInstanceParticipant,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(InstanceAttributeValue_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final InstanceAttributeValue_c inst = (InstanceAttributeValue_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static InstanceAttributeValue_c InstanceAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceAttributeValue_c result = findInstanceAttributeValueInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					InstanceAttributeValue_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findInstanceAttributeValueInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static InstanceAttributeValue_c findInstanceAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InstanceAttributeValue_c x = (InstanceAttributeValue_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static InstanceAttributeValue_c InstanceAttributeValueInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InstanceAttributeValueInstance(modelRoot, test, true);
	}

	public static InstanceAttributeValue_c InstanceAttributeValueInstance(
			ModelRoot modelRoot) {
		return InstanceAttributeValueInstance(modelRoot, null, true);
	}

	public static InstanceAttributeValue_c[] InstanceAttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					InstanceAttributeValue_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(InstanceAttributeValue_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				InstanceAttributeValue_c x = (InstanceAttributeValue_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				InstanceAttributeValue_c[] ret_set = new InstanceAttributeValue_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new InstanceAttributeValue_c[0];
			}
		}
	}
	public static InstanceAttributeValue_c[] InstanceAttributeValueInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return InstanceAttributeValueInstances(modelRoot, test, true);
	}
	public static InstanceAttributeValue_c[] InstanceAttributeValueInstances(
			ModelRoot modelRoot) {
		return InstanceAttributeValueInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Instance Attribute Value.dispose call: ";
		Attribute_c testR938Inst = Attribute_c.getOneO_ATTROnR938(this, false);

		if (testR938Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "938 ";
		}
		ClassInstanceParticipant_c testR936Inst = ClassInstanceParticipant_c
				.getOneSQ_CIPOnR936(this, false);

		if (testR936Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "936 ";
		}
		ClassInstanceParticipant_c testR937Inst = ClassInstanceParticipant_c
				.getOneSQ_CIPOnR937(this, false);

		if (testR937Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "937 ";
		}
		InformalAttributeValue_c testR948Inst1 = InformalAttributeValue_c
				.getOneSQ_IAVOnR948(this, false);

		if (testR948Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "948 ";
		}
		FormalAttributeValue_c testR948Inst2 = FormalAttributeValue_c
				.getOneSQ_FAVOnR948(this, false);

		if (testR948Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "948 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Instance Attribute Value", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("av_id")) {
			return true;
		}
		if (attributeName.equals("attr_id")) {
			return true;
		}
		if (attributeName.equals("informal_part_id")) {
			return true;
		}
		if (attributeName.equals("formal_part_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getAv_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getAv_idLongBased() {
		if (m_av_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_av_id)) {
			return 0xfffffff & m_av_id.getLeastSignificantBits();
		}
		return m_av_idLongBased;
	}
	public java.util.UUID getAv_id() {
		return m_av_id;
	}

	public void setAv_id(java.util.UUID newValue) {
		m_av_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getAttr_idLongBased() {
		if (ReferencesAttribute != null) {
			return ReferencesAttribute.getAttr_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAttr_id() {
		if (ReferencesAttribute != null) {
			return ReferencesAttribute.getAttr_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAttr_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_attr_id))
			return m_attr_id;
		else
			return getAttr_id();
	}

	public void setAttr_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_attr_id)) {
				return;
			}
		} else if (m_attr_id != null) {
			if (m_attr_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Attr_id", m_attr_id, newValue, true);
		m_attr_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getLabel() {
		ModelRoot modelRoot = getModelRoot();
		Attribute_c v_attr = Attribute_c.getOneO_ATTROnR938(this);

		if (((v_attr != null))) {

			if ((!getValue().equals(""))) {

				return v_attr.getName() + " = " + getValue();

			}

			else {

				return v_attr.getName();

			}

		}

		else {

			if ((!getValue().equals(""))) {

				return getInformalname() + " = " + getValue();

			}

			else {

				return getInformalname();

			}

		}

	}

	public String getValue() {
		return m_value;
	}

	public void setValue(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_value)) {
				return;
			}
		} else if (m_value != null) {
			if (m_value.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Value",
				m_value, newValue, true);
		m_value = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getInformalname() {
		return m_informalname;
	}

	public void setInformalname(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_informalname)) {
				return;
			}
		} else if (m_informalname != null) {
			if (m_informalname.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Informalname", m_informalname, newValue, true);
		m_informalname = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getDescrip() {
		return m_descrip;
	}

	public void setDescrip(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_descrip)) {
				return;
			}
		} else if (m_descrip != null) {
			if (m_descrip.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Descrip", m_descrip, newValue, true);
		m_descrip = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public boolean getIsformal() {
		ModelRoot modelRoot = getModelRoot();
		ClassInstanceParticipant_c v_inst = ClassInstanceParticipant_c
				.getOneSQ_CIPOnR937(this);

		return (v_inst != null);

	}

	public long getInformal_part_idLongBased() {
		if (OwnsInformalClassInstanceParticipant != null) {
			return OwnsInformalClassInstanceParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getInformal_part_id() {
		if (OwnsInformalClassInstanceParticipant != null) {
			return OwnsInformalClassInstanceParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getInformal_part_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_informal_part_id))
			return m_informal_part_id;
		else
			return getInformal_part_id();
	}

	public void setInformal_part_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_informal_part_id)) {
				return;
			}
		} else if (m_informal_part_id != null) {
			if (m_informal_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Informal_part_id", m_informal_part_id, newValue, true);
		m_informal_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getFormal_part_idLongBased() {
		if (OwnsFormalClassInstanceParticipant != null) {
			return OwnsFormalClassInstanceParticipant.getPart_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getFormal_part_id() {
		if (OwnsFormalClassInstanceParticipant != null) {
			return OwnsFormalClassInstanceParticipant.getPart_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getFormal_part_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_formal_part_id))
			return m_formal_part_id;
		else
			return getFormal_part_id();
	}

	public void setFormal_part_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_formal_part_id)) {
				return;
			}
		} else if (m_formal_part_id != null) {
			if (m_formal_part_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Formal_part_id", m_formal_part_id, newValue, true);
		m_formal_part_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (ReferencesAttribute != null) {
			return ReferencesAttribute.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (ReferencesAttribute != null) {
			return ReferencesAttribute.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Attribute Value", //$NON-NLS-1$
						" Operation entered: Instance Attribute Value::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		InstanceAttributeValue_c[] objs = InstanceAttributeValue_c
				.InstanceAttributeValueInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Attribute Value", //$NON-NLS-1$
						" Operation entered: Instance Attribute Value::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class InstanceAttributeValue_c_test40534_c
				implements
					ClassQueryInterface_c {
			InstanceAttributeValue_c_test40534_c(java.util.UUID p40535) {
				m_p40535 = p40535;
			}
			private java.util.UUID m_p40535;
			public boolean evaluate(Object candidate) {
				InstanceAttributeValue_c selected = (InstanceAttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getAv_id().equals(m_p40535));
				return retval;
			}
		}

		InstanceAttributeValue_c[] objs40533 = InstanceAttributeValue_c
				.InstanceAttributeValueInstances(modelRoot,
						new InstanceAttributeValue_c_test40534_c(getAv_id()));

		if (((objs40533.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40533.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40533.length), e);
			}
			retval = false;

		}

		if (((objs40533.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40533.length)
										+ " Av_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40533.length)
										+ " Av_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Instance Attribute Value is a referring class in association: rel.Numb = 938
		// The participating class is: Attribute
		class Attribute_c_test40539_c implements ClassQueryInterface_c {
			Attribute_c_test40539_c(java.util.UUID p40540, java.util.UUID p40541) {
				m_p40540 = p40540;
				m_p40541 = p40541;
			}
			private java.util.UUID m_p40540;
			private java.util.UUID m_p40541;
			public boolean evaluate(Object candidate) {
				Attribute_c selected = (Attribute_c) candidate;
				boolean retval = false;
				retval = (selected.getAttr_id().equals(m_p40540))
						& (selected.getObj_id().equals(m_p40541));
				return retval;
			}
		}

		Attribute_c[] objs40538 = Attribute_c.AttributeInstances(modelRoot,
				new Attribute_c_test40539_c(getAttr_id(), getObj_id()));

		if (((objs40538.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Association: 938: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40538.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Association: 938: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40538.length)
										+ " Attr_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Instance Attribute Value is a referring class in association: rel.Numb = 936
		// The participating class is: Class Instance Participant
		class ClassInstanceParticipant_c_test40543_c
				implements
					ClassQueryInterface_c {
			ClassInstanceParticipant_c_test40543_c(java.util.UUID p40544) {
				m_p40544 = p40544;
			}
			private java.util.UUID m_p40544;
			public boolean evaluate(Object candidate) {
				ClassInstanceParticipant_c selected = (ClassInstanceParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40544));
				return retval;
			}
		}

		ClassInstanceParticipant_c[] objs40542 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstances(modelRoot,
						new ClassInstanceParticipant_c_test40543_c(
								getInformal_part_id()));

		if (((objs40542.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Association: 936: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40542.length)
										+ " Informal_Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Association: 936: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40542.length)
										+ " Informal_Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Instance Attribute Value is a referring class in association: rel.Numb = 937
		// The participating class is: Class Instance Participant
		class ClassInstanceParticipant_c_test40546_c
				implements
					ClassQueryInterface_c {
			ClassInstanceParticipant_c_test40546_c(java.util.UUID p40547) {
				m_p40547 = p40547;
			}
			private java.util.UUID m_p40547;
			public boolean evaluate(Object candidate) {
				ClassInstanceParticipant_c selected = (ClassInstanceParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getPart_id().equals(m_p40547));
				return retval;
			}
		}

		ClassInstanceParticipant_c[] objs40545 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstances(modelRoot,
						new ClassInstanceParticipant_c_test40546_c(
								getFormal_part_id()));

		if (((objs40545.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Association: 937: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs40545.length)
										+ " Formal_Part_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Association: 937: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40545.length)
										+ " Formal_Part_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 948
		int objs40548 = 0;
		// Subtype Object: Informal Attribute Value
		class InformalAttributeValue_c_test40549_c
				implements
					ClassQueryInterface_c {
			InformalAttributeValue_c_test40549_c(java.util.UUID p40550) {
				m_p40550 = p40550;
			}
			private java.util.UUID m_p40550;
			public boolean evaluate(Object candidate) {
				InformalAttributeValue_c selected = (InformalAttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getAv_id().equals(m_p40550));
				return retval;
			}
		}

		InformalAttributeValue_c[] objs40551 = InformalAttributeValue_c
				.InformalAttributeValueInstances(modelRoot,
						new InformalAttributeValue_c_test40549_c(getAv_id()));

		objs40548 = objs40548 + objs40551.length;
		// Subtype Object: Formal Attribute Value
		class FormalAttributeValue_c_test40552_c
				implements
					ClassQueryInterface_c {
			FormalAttributeValue_c_test40552_c(java.util.UUID p40553) {
				m_p40553 = p40553;
			}
			private java.util.UUID m_p40553;
			public boolean evaluate(Object candidate) {
				FormalAttributeValue_c selected = (FormalAttributeValue_c) candidate;
				boolean retval = false;
				retval = (selected.getAv_id().equals(m_p40553));
				return retval;
			}
		}

		FormalAttributeValue_c[] objs40554 = FormalAttributeValue_c
				.FormalAttributeValueInstances(modelRoot,
						new FormalAttributeValue_c_test40552_c(getAv_id()));

		objs40548 = objs40548 + objs40554.length;
		if (objs40548 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Instance Attribute Value", //$NON-NLS-1$
								"Consistency: Object: Instance Attribute Value: Association: 948: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs40548)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Instance Attribute Value: Association: 948: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs40548), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Attribute Value",
				" Operation entered: InstanceAttributeValue::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		Attribute_c v_attr = Attribute_c.getOneO_ATTROnR938(this);

		if (((v_attr != null))) {

			this.unrelateAcrossR938From(v_attr);

			ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
					.getOneSQ_CIPOnR937(this);

			if (((v_cip != null))) {

				this.unrelateAcrossR937From(v_cip);

			}

			FormalAttributeValue_c v_fav = FormalAttributeValue_c
					.getOneSQ_FAVOnR948(this);

			if (((v_fav != null))) {

				this.unrelateAcrossR948From(v_fav);

				if (v_fav != null) {
					// get the location of this element in the instance list
					// before deleting
					if (v_fav.delete()) {
						Ooaofooa.getDefaultInstance().fireModelElementDeleted(
								new BaseModelDelta(
										Modeleventnotification_c.DELTA_DELETE,
										v_fav));
					}
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError("Delete attempted on null instance.", t);
				}

			}

		}

		ClassInstanceParticipant_c v_cip = ClassInstanceParticipant_c
				.getOneSQ_CIPOnR936(this);

		if (((v_cip != null))) {

			if (v_cip != null) {
				v_cip.unrelateAcrossR936From(this);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

		}

		InformalAttributeValue_c v_iav = InformalAttributeValue_c
				.getOneSQ_IAVOnR948(this);

		if (((v_iav != null))) {

			this.unrelateAcrossR948From(v_iav);

			if (v_iav != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_iav.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_iav));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Initialize() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Attribute Value",
				" Operation entered: InstanceAttributeValue::Initialize");
		final ModelRoot modelRoot = getModelRoot();
		String v_name = "Informal Attribute";

		String v_success = Ooaofooa.Getnewelementname(modelRoot,
				Converttoinstance(), v_name, false);

		if ((!v_success.equals(""))) {

			setInformalname(v_success);

		}

		else {

			Dispose();

		}

	} // End initialize
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Attribute Value",
				" Operation entered: InstanceAttributeValue::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		return getLabel();

	} // End get_name
	public boolean Canrename() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Attribute Value",
				" Operation entered: InstanceAttributeValue::Canrename");
		final ModelRoot modelRoot = getModelRoot();
		return !getIsformal();

	} // End canRename
	public boolean Candelete() {
		Ooaofooa.log.println(ILogger.OPERATION, "Instance Attribute Value",
				" Operation entered: InstanceAttributeValue::Candelete");
		final ModelRoot modelRoot = getModelRoot();
		return !getIsformal();

	} // End canDelete
	public Object Converttoinstance() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Attribute Value",
						" Operation entered: InstanceAttributeValue::Converttoinstance");
		return this;
	} // End convertToInstance
	public void Resolveattributelocal() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Instance Attribute Value",
						" Operation entered: InstanceAttributeValue::Resolveattributelocal");
		final ModelRoot modelRoot = getModelRoot();
		Attribute_c v_attrProxy = Attribute_c.getOneO_ATTROnR938(this);

		if (((v_attrProxy != null))
				&& (Util_c.Isproxy(v_attrProxy.Converttoinstance()))
				&& (!Util_c.Isproxy(Converttoinstance()))) {

			class Attribute_test37707_c implements ClassQueryInterface_c {
				Attribute_test37707_c(String p37708) {
					m_p37708 = p37708;
				}
				private String m_p37708;
				public boolean evaluate(Object candidate) {
					Attribute_c selected = (Attribute_c) candidate;
					return (selected.getName().equals(m_p37708));
				}
			}
			Attribute_c v_attribute = Attribute_c.getOneO_ATTROnR102(
					ModelClass_c.getManyO_OBJsOnR934(ClassInstanceParticipant_c
							.getManySQ_CIPsOnR937(this)),
					new Attribute_test37707_c(v_attrProxy.getName()));

			if (((v_attribute != null))) {

				this.relateAcrossR938To(v_attribute);

			}

			else {

				Dispose();

			}

		}

	} // End resolveAttributeLocal

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Instance Attribute Value
