      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.StateMachineState_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_STATE_MACHINE_STATE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class StateMachineState_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public StateMachineState_c(ModelRoot modelRoot,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_name,
       int          p_m_numb,
       int          p_m_final)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       //extract 28 bit value only            
       m_smstt_idLongBased = 0xfffffff & p_m_smstt_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       m_name = p_m_name;
       m_numb = p_m_numb;
       m_final = p_m_final;
        
    setUniqueId(m_smstt_id);
    Object [] key = {m_sm_id,m_smstt_id};
    addInstanceToMap(key);
  }
  static public StateMachineState_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_name,
       int          p_m_numb,
       int          p_m_final, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
      StateMachineState_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_sm_id,p_m_smstt_id};
          new_inst = (StateMachineState_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       //extract 28 bit value only            
       new_inst.m_smstt_idLongBased = 0xfffffff & p_m_smstt_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       new_inst.m_name = p_m_name;
       new_inst.m_numb = p_m_numb;
       new_inst.m_final = p_m_final;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new StateMachineState_c(modelRoot,
p_m_smstt_id,
p_m_sm_id,
p_m_smspd_id,
p_m_name,
p_m_numb,
p_m_final
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public StateMachineState_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_smstt_id,
       java.util.UUID         p_m_sm_id,
       java.util.UUID         p_m_smspd_id,
       String       p_m_name,
       int          p_m_numb,
       int          p_m_final){
    InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
    StateMachineState_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_sm_id
        ,
        p_m_smstt_id
            };
        source = (StateMachineState_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
       //extract 28 bit value only            
       source.m_smstt_idLongBased = 0xfffffff & p_m_smstt_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
       source.m_name = p_m_name;
       source.m_numb = p_m_numb;
       source.m_final = p_m_final;
        
           return source ;
        }
      }
      // there is no instance matching the id
    StateMachineState_c new_inst = new StateMachineState_c(modelRoot,
p_m_smstt_id,
p_m_sm_id,
p_m_smspd_id,
p_m_name,
p_m_numb,
p_m_final
);
    return new_inst;
  }
  public StateMachineState_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_smstt_id = idAssigner.createUUID();
     m_sm_id = IdAssigner.NULL_UUID;   
     m_smspd_id = IdAssigner.NULL_UUID;   
     m_name = "";   
    setUniqueId(m_smstt_id);
    Object [] key = {m_sm_id,m_smstt_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_sm_id,m_smstt_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_sm_id !=  p_newKey ){
	
		m_sm_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof StateMachineState_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof StateMachineState_c)) {
           return false;
       }
       
       StateMachineState_c me = (StateMachineState_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID.equals(((StateMachineState_c)elem).getSm_id())) && this != elem)) {
      	return false;
      }
      if (!getSm_id().equals(((StateMachineState_c)elem).getSm_id())) return false;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getSmstt_id()) || IdAssigner.NULL_UUID.equals(((StateMachineState_c)elem).getSmstt_id())) && this != elem)) {
      	return false;
      }
      if (!getSmstt_id().equals(((StateMachineState_c)elem).getSmstt_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof StateMachineState_c)) {
           return false;
       }
       
       StateMachineState_c me = (StateMachineState_c)elem;
      if (!getSm_idCachedValue().equals(((StateMachineState_c)elem).getSm_idCachedValue())) return false;
      if (!getSmstt_id().equals(((StateMachineState_c)elem).getSmstt_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_smstt_id ;
  private long m_smstt_idLongBased ;
  private java.util.UUID         m_sm_id ;
  private java.util.UUID         m_smspd_id ;
  private String       m_name ;
  private int          m_numb ;
  private int          m_final ;
      
// declare association references from this class
  
  
    
// referring navigation

StateMachine_c StateMachine ;
public void relateAcrossR501To(StateMachine_c target)
{
	relateAcrossR501To(target, true);
}
public void relateAcrossR501To(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == StateMachine) return;  // already related

    if ( StateMachine != target ) {
    
    Object oldKey = getInstanceKey();

    if (StateMachine != null) {
    
        StateMachine.clearBackPointerR501To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"StateMachineState_c.relateAcrossR501To(StateMachine_c target)", 
			"Relate performed across R501 from State Machine State to State Machine without unrelate of prior instance.");  
		}
    }
                
    	StateMachine = target ;
        m_sm_id = target.getSm_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR501To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "501", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR501From(StateMachine_c target)
{
	unrelateAcrossR501From(target, true);
}
public void unrelateAcrossR501From(StateMachine_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (StateMachine == null) return;  // already unrelated
	
	if (target != StateMachine) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R501", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR501To(this);
    }
    

      if(StateMachine != null) {
      
        m_sm_id = StateMachine.getSm_id();
        StateMachine = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "501", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static StateMachineState_c getOneSM_STATEOnR501(StateMachine_c [] targets)
{
    return getOneSM_STATEOnR501(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR501(StateMachine_c [] targets, ClassQueryInterface_c test)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSM_STATEOnR501(targets[i], test);
        }
    }

    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR501(StateMachine_c target)
{
  return getOneSM_STATEOnR501(target, null);
}

public static StateMachineState_c getOneSM_STATEOnR501(StateMachine_c target, boolean loadComponent)
{
    return getOneSM_STATEOnR501(target.getModelRoot(), target, null, loadComponent);
}

public static StateMachineState_c getOneSM_STATEOnR501(StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSM_STATEOnR501(target.getModelRoot(), target, test);
  }
  return null;
}

public static StateMachineState_c getOneSM_STATEOnR501(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
	return getOneSM_STATEOnR501(modelRoot, target, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR501(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSM_STATEOnR501(modelRoot,target,test);
}
private static StateMachineState_c find_getOneSM_STATEOnR501(ModelRoot modelRoot, StateMachine_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501) {
	    for ( int i = 0; i < target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.size(); ++i ) {
	      StateMachineState_c source = (StateMachineState_c)target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c [] targets)
{
  return getManySM_STATEsOnR501(targets, null);
}
public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c [] targets, boolean loadComponent)
{
  return getManySM_STATEsOnR501(targets, null, loadComponent);
}
public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c [] targets, ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR501(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new StateMachineState_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501) {
	    for (int j = 0; j < targets[i].backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.size(); ++j) {
	      StateMachineState_c source = (StateMachineState_c)targets[i].backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	StateMachineState_c[] ret_set = new StateMachineState_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new StateMachineState_c[0];
  }
  }

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c target)
{
  return getManySM_STATEsOnR501(target, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c target, boolean loadComponent)
{
  return getManySM_STATEsOnR501(target, null, loadComponent);
}

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c target, ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR501(target, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR501(StateMachine_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new StateMachineState_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501) {
    for (int i = 0; i < target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.size(); ++i) {
      StateMachineState_c source = (StateMachineState_c)target.backPointer_IsDecomposedIntoStateMachineStateIsDecomposedInto_R501.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		StateMachineState_c[] ret_set = new StateMachineState_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new StateMachineState_c[0];
	}
  }


  
    
// referring navigation

EventSupplementalData_c ReceivesAsynchronousDataViaEventSupplementalData ;
public void relateAcrossR521To(EventSupplementalData_c target)
{
	relateAcrossR521To(target, true);
}
public void relateAcrossR521To(EventSupplementalData_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == ReceivesAsynchronousDataViaEventSupplementalData) return;  // already related

    if ( ReceivesAsynchronousDataViaEventSupplementalData != target ) {
    
    Object oldKey = getInstanceKey();

    if (ReceivesAsynchronousDataViaEventSupplementalData != null) {
    
        ReceivesAsynchronousDataViaEventSupplementalData.clearBackPointerR521To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"StateMachineState_c.relateAcrossR521To(EventSupplementalData_c target)", 
			"Relate performed across R521 from State Machine State to Event Supplemental Data without unrelate of prior instance.");  
		}
    }
                
    	ReceivesAsynchronousDataViaEventSupplementalData = target ;
        if(IdAssigner.NULL_UUID.equals(target.getSm_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_sm_id = target.getSm_idCachedValue();
        }
        m_smspd_id = target.getSmspd_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR521To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "521", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR521From(EventSupplementalData_c target)
{
	unrelateAcrossR521From(target, true);
}
public void unrelateAcrossR521From(EventSupplementalData_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (ReceivesAsynchronousDataViaEventSupplementalData == null) return;  // already unrelated
	
	if (target != ReceivesAsynchronousDataViaEventSupplementalData) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R521", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR521To(this);
    }
    

      if(ReceivesAsynchronousDataViaEventSupplementalData != null) {
      
        m_sm_id = ReceivesAsynchronousDataViaEventSupplementalData.getSm_id();
        if(IdAssigner.NULL_UUID.equals(m_sm_id))
        {
          m_sm_id = ReceivesAsynchronousDataViaEventSupplementalData.getSm_idCachedValue();
        }       
        m_smspd_id = ReceivesAsynchronousDataViaEventSupplementalData.getSmspd_id();
        ReceivesAsynchronousDataViaEventSupplementalData = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "521", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static StateMachineState_c getOneSM_STATEOnR521(EventSupplementalData_c [] targets)
{
    return getOneSM_STATEOnR521(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR521(EventSupplementalData_c [] targets, ClassQueryInterface_c test)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneSM_STATEOnR521(targets[i], test);
        }
    }

    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR521(EventSupplementalData_c target)
{
  return getOneSM_STATEOnR521(target, null);
}

public static StateMachineState_c getOneSM_STATEOnR521(EventSupplementalData_c target, boolean loadComponent)
{
    return getOneSM_STATEOnR521(target.getModelRoot(), target, null, loadComponent);
}

public static StateMachineState_c getOneSM_STATEOnR521(EventSupplementalData_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneSM_STATEOnR521(target.getModelRoot(), target, test);
  }
  return null;
}

public static StateMachineState_c getOneSM_STATEOnR521(ModelRoot modelRoot, EventSupplementalData_c target, ClassQueryInterface_c test)
{
	return getOneSM_STATEOnR521(modelRoot, target, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR521(ModelRoot modelRoot, EventSupplementalData_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneSM_STATEOnR521(modelRoot,target,test);
}
private static StateMachineState_c find_getOneSM_STATEOnR521(ModelRoot modelRoot, EventSupplementalData_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521) {
	    for ( int i = 0; i < target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.size(); ++i ) {
	      StateMachineState_c source = (StateMachineState_c)target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c [] targets)
{
  return getManySM_STATEsOnR521(targets, null);
}
public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c [] targets, boolean loadComponent)
{
  return getManySM_STATEsOnR521(targets, null, loadComponent);
}
public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c [] targets, ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR521(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new StateMachineState_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521) {
	    for (int j = 0; j < targets[i].backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.size(); ++j) {
	      StateMachineState_c source = (StateMachineState_c)targets[i].backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	StateMachineState_c[] ret_set = new StateMachineState_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new StateMachineState_c[0];
  }
  }

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c target)
{
  return getManySM_STATEsOnR521(target, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c target, boolean loadComponent)
{
  return getManySM_STATEsOnR521(target, null, loadComponent);
}

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c target, ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR521(target, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR521(EventSupplementalData_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new StateMachineState_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521) {
    for (int i = 0; i < target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.size(); ++i) {
      StateMachineState_c source = (StateMachineState_c)target.backPointer_IsDeliveredByReceivedEventToStateMachineStateIsDeliveredByReceivedEventTo_R521.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		StateMachineState_c[] ret_set = new StateMachineState_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new StateMachineState_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Transition_c> backPointer_IsDestinationOfTransitionIsDestinationOf_R506 = new ArrayList<Transition_c>();

public void setTransitionOrderInChildListR506(Transition_c target, int index) {
	unrelateAcrossR506From(target);
	Transition_c[] elements = Transition_c.getManySM_TXNsOnR506(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR506From((Transition_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR506To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR506To((Transition_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR506To(Transition_c target)
{
  if (target != null) {
    target.relateAcrossR506To(this, true) ;
  }
}

public void relateAcrossR506To(Transition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR506To(this, notifyChanges) ;
  }
}

public void setBackPointerR506To(Transition_c target)
{
  	synchronized (backPointer_IsDestinationOfTransitionIsDestinationOf_R506) {
		backPointer_IsDestinationOfTransitionIsDestinationOf_R506.add(target);
	}
}

public void unrelateAcrossR506From(Transition_c target)
{
  if (target != null) {
    target.unrelateAcrossR506From(this, true) ;
  }
}

public void unrelateAcrossR506From(Transition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR506From(this, notifyChanges) ;
  }
}

public void clearBackPointerR506To(Transition_c target)
{
  synchronized (backPointer_IsDestinationOfTransitionIsDestinationOf_R506) {
	    backPointer_IsDestinationOfTransitionIsDestinationOf_R506.remove(target);
	}
}

public static StateMachineState_c getOneSM_STATEOnR506(Transition_c [] targets)
{
    return getOneSM_STATEOnR506(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR506(Transition_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_STATEOnR506(targets, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR506(Transition_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachineState_c candidate_val = getOneSM_STATEOnR506(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_STATEOnR506(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR506(Transition_c target)
{
	return getOneSM_STATEOnR506(target, true);
}
public static StateMachineState_c getOneSM_STATEOnR506(Transition_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsDestinedToStateMachineState ;
  } else {
    return null;
  }
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR506(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachineState_c[0];
  
  
  LinkedHashSet<StateMachineState_c> elementsSet = new LinkedHashSet<StateMachineState_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsDestinedToStateMachineState == null)
	  targets[i].loadProxy();
    StateMachineState_c associate = targets[i].IsDestinedToStateMachineState;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachineState_c[] result = new StateMachineState_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c [] targets)
{
  return getManySM_STATEsOnR506(targets, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Transition_c [] targetArray = new Transition_c[1];
    targetArray[0] = target;
    return getManySM_STATEsOnR506(targetArray, test, loadComponent);
  } else {
    StateMachineState_c [] result = new StateMachineState_c [0] ;
    return result ;
  }
  
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c target,
    ClassQueryInterface_c test)
{
    return getManySM_STATEsOnR506(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c target)
{
    return getManySM_STATEsOnR506(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR506(Transition_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR506(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<NoEventTransition_c> backPointer_IsOriginationOfNoEventTransitionIsOriginationOf_R508 = new ArrayList<NoEventTransition_c>();

public void setNoEventTransitionOrderInChildListR508(NoEventTransition_c target, int index) {
	unrelateAcrossR508From(target);
	NoEventTransition_c[] elements = NoEventTransition_c.getManySM_NETXNsOnR508(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR508From((NoEventTransition_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR508To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR508To((NoEventTransition_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR508To(NoEventTransition_c target)
{
  if (target != null) {
    target.relateAcrossR508To(this, true) ;
  }
}

public void relateAcrossR508To(NoEventTransition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR508To(this, notifyChanges) ;
  }
}

public void setBackPointerR508To(NoEventTransition_c target)
{
  	synchronized (backPointer_IsOriginationOfNoEventTransitionIsOriginationOf_R508) {
		backPointer_IsOriginationOfNoEventTransitionIsOriginationOf_R508.add(target);
	}
}

public void unrelateAcrossR508From(NoEventTransition_c target)
{
  if (target != null) {
    target.unrelateAcrossR508From(this, true) ;
  }
}

public void unrelateAcrossR508From(NoEventTransition_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR508From(this, notifyChanges) ;
  }
}

public void clearBackPointerR508To(NoEventTransition_c target)
{
  synchronized (backPointer_IsOriginationOfNoEventTransitionIsOriginationOf_R508) {
	    backPointer_IsOriginationOfNoEventTransitionIsOriginationOf_R508.remove(target);
	}
}

public static StateMachineState_c getOneSM_STATEOnR508(NoEventTransition_c [] targets)
{
    return getOneSM_STATEOnR508(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR508(NoEventTransition_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_STATEOnR508(targets, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR508(NoEventTransition_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachineState_c candidate_val = getOneSM_STATEOnR508(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_STATEOnR508(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR508(NoEventTransition_c target)
{
	return getOneSM_STATEOnR508(target, true);
}
public static StateMachineState_c getOneSM_STATEOnR508(NoEventTransition_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.OriginatesFromStateMachineState ;
  } else {
    return null;
  }
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR508(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachineState_c[0];
  
  
  LinkedHashSet<StateMachineState_c> elementsSet = new LinkedHashSet<StateMachineState_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].OriginatesFromStateMachineState == null)
	  targets[i].loadProxy();
    StateMachineState_c associate = targets[i].OriginatesFromStateMachineState;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachineState_c[] result = new StateMachineState_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c [] targets)
{
  return getManySM_STATEsOnR508(targets, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    NoEventTransition_c [] targetArray = new NoEventTransition_c[1];
    targetArray[0] = target;
    return getManySM_STATEsOnR508(targetArray, test, loadComponent);
  } else {
    StateMachineState_c [] result = new StateMachineState_c [0] ;
    return result ;
  }
  
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c target,
    ClassQueryInterface_c test)
{
    return getManySM_STATEsOnR508(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c target)
{
    return getManySM_STATEsOnR508(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR508(NoEventTransition_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR508(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<MooreActionHome_c> backPointer_MooreActionHome_R511 = new ArrayList<MooreActionHome_c>();

public void setMooreActionHomeOrderInChildListR511(MooreActionHome_c target, int index) {
	unrelateAcrossR511From(target);
	MooreActionHome_c[] elements = MooreActionHome_c.getManySM_MOAHsOnR511(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR511From((MooreActionHome_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR511To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR511To((MooreActionHome_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR511To(MooreActionHome_c target)
{
  if (target != null) {
    target.relateAcrossR511To(this, true) ;
  }
}

public void relateAcrossR511To(MooreActionHome_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR511To(this, notifyChanges) ;
  }
}

public void setBackPointerR511To(MooreActionHome_c target)
{
  	synchronized (backPointer_MooreActionHome_R511) {
		backPointer_MooreActionHome_R511.add(target);
	}
}

public void unrelateAcrossR511From(MooreActionHome_c target)
{
  if (target != null) {
    target.unrelateAcrossR511From(this, true) ;
  }
}

public void unrelateAcrossR511From(MooreActionHome_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR511From(this, notifyChanges) ;
  }
}

public void clearBackPointerR511To(MooreActionHome_c target)
{
  synchronized (backPointer_MooreActionHome_R511) {
	    backPointer_MooreActionHome_R511.remove(target);
	}
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreActionHome_c [] targets)
{
    return getOneSM_STATEOnR511(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreActionHome_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_STATEOnR511(targets, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreActionHome_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachineState_c candidate_val = getOneSM_STATEOnR511(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_STATEOnR511(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreActionHome_c target)
{
	return getOneSM_STATEOnR511(target, true);
}
public static StateMachineState_c getOneSM_STATEOnR511(MooreActionHome_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.StateMachineState ;
  } else {
    return null;
  }
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR511(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachineState_c[0];
  
  
  LinkedHashSet<StateMachineState_c> elementsSet = new LinkedHashSet<StateMachineState_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].StateMachineState == null)
	  targets[i].loadProxy();
    StateMachineState_c associate = targets[i].StateMachineState;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachineState_c[] result = new StateMachineState_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c [] targets)
{
  return getManySM_STATEsOnR511(targets, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MooreActionHome_c [] targetArray = new MooreActionHome_c[1];
    targetArray[0] = target;
    return getManySM_STATEsOnR511(targetArray, test, loadComponent);
  } else {
    StateMachineState_c [] result = new StateMachineState_c [0] ;
    return result ;
  }
  
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c target,
    ClassQueryInterface_c test)
{
    return getManySM_STATEsOnR511(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c target)
{
    return getManySM_STATEsOnR511(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreActionHome_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR511(target, null, loadComponent);
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreStateMachine_c target)
{
  return StateMachineState_c.getOneSM_STATEOnR511(MooreActionHome_c.getOneSM_MOAHOnR511(target)) ;
}

public static StateMachineState_c getOneSM_STATEOnR511(MooreStateMachine_c target,
    ClassQueryInterface_c test)
{
  return StateMachineState_c.getOneSM_STATEOnR511(MooreActionHome_c.getManySM_MOAHsOnR511(target), test) ;
}

public static StateMachineState_c [] getManySM_STATEsOnR511(MooreStateMachine_c target,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR511(target, test, true);
}
public static StateMachineState_c [] getManySM_STATEsOnR511(MooreStateMachine_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  MooreActionHome_c [] associators = MooreActionHome_c.getManySM_MOAHsOnR511(target, loadComponent) ;
    return StateMachineState_c.getManySM_STATEsOnR511(associators, test, loadComponent) ;
}
public static StateMachineState_c [] getManySM_STATEsOnR511(MooreStateMachine_c target)
{
    return getManySM_STATEsOnR511(target, null, true);
}
public static StateMachineState_c [] getManySM_STATEsOnR511(MooreStateMachine_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR511(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<StateEventMatrixEntry_c> backPointer_ReceivesStateEventMatrixEntryReceives_R503 = new ArrayList<StateEventMatrixEntry_c>();

public void setStateEventMatrixEntryOrderInChildListR503(StateEventMatrixEntry_c target, int index) {
	unrelateAcrossR503From(target);
	StateEventMatrixEntry_c[] elements = StateEventMatrixEntry_c.getManySM_SEMEsOnR503(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR503From((StateEventMatrixEntry_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR503To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR503To((StateEventMatrixEntry_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR503To(StateEventMatrixEntry_c target)
{
  if (target != null) {
    target.relateAcrossR503To(this, true) ;
  }
}

public void relateAcrossR503To(StateEventMatrixEntry_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR503To(this, notifyChanges) ;
  }
}

public void setBackPointerR503To(StateEventMatrixEntry_c target)
{
  	synchronized (backPointer_ReceivesStateEventMatrixEntryReceives_R503) {
		backPointer_ReceivesStateEventMatrixEntryReceives_R503.add(target);
	}
}

public void unrelateAcrossR503From(StateEventMatrixEntry_c target)
{
  if (target != null) {
    target.unrelateAcrossR503From(this, true) ;
  }
}

public void unrelateAcrossR503From(StateEventMatrixEntry_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR503From(this, notifyChanges) ;
  }
}

public void clearBackPointerR503To(StateEventMatrixEntry_c target)
{
  synchronized (backPointer_ReceivesStateEventMatrixEntryReceives_R503) {
	    backPointer_ReceivesStateEventMatrixEntryReceives_R503.remove(target);
	}
}

public static StateMachineState_c getOneSM_STATEOnR503(StateEventMatrixEntry_c [] targets)
{
    return getOneSM_STATEOnR503(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR503(StateEventMatrixEntry_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_STATEOnR503(targets, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR503(StateEventMatrixEntry_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachineState_c candidate_val = getOneSM_STATEOnR503(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_STATEOnR503(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR503(StateEventMatrixEntry_c target)
{
	return getOneSM_STATEOnR503(target, true);
}
public static StateMachineState_c getOneSM_STATEOnR503(StateEventMatrixEntry_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.IsReceivedByStateMachineState ;
  } else {
    return null;
  }
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR503(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachineState_c[0];
  
  
  LinkedHashSet<StateMachineState_c> elementsSet = new LinkedHashSet<StateMachineState_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsReceivedByStateMachineState == null)
	  targets[i].loadProxy();
    StateMachineState_c associate = targets[i].IsReceivedByStateMachineState;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachineState_c[] result = new StateMachineState_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c [] targets)
{
  return getManySM_STATEsOnR503(targets, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    StateEventMatrixEntry_c [] targetArray = new StateEventMatrixEntry_c[1];
    targetArray[0] = target;
    return getManySM_STATEsOnR503(targetArray, test, loadComponent);
  } else {
    StateMachineState_c [] result = new StateMachineState_c [0] ;
    return result ;
  }
  
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c target,
    ClassQueryInterface_c test)
{
    return getManySM_STATEsOnR503(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c target)
{
    return getManySM_STATEsOnR503(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR503(StateEventMatrixEntry_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR503(target, null, loadComponent);
}

public static StateMachineState_c getOneSM_STATEOnR503(SemEvent_c target)
{
  return StateMachineState_c.getOneSM_STATEOnR503(StateEventMatrixEntry_c.getOneSM_SEMEOnR503(target)) ;
}

public static StateMachineState_c getOneSM_STATEOnR503(SemEvent_c target,
    ClassQueryInterface_c test)
{
  return StateMachineState_c.getOneSM_STATEOnR503(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(target), test) ;
}

public static StateMachineState_c [] getManySM_STATEsOnR503(SemEvent_c target,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR503(target, test, true);
}
public static StateMachineState_c [] getManySM_STATEsOnR503(SemEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  StateEventMatrixEntry_c [] associators = StateEventMatrixEntry_c.getManySM_SEMEsOnR503(target, loadComponent) ;
    return StateMachineState_c.getManySM_STATEsOnR503(associators, test, loadComponent) ;
}
public static StateMachineState_c [] getManySM_STATEsOnR503(SemEvent_c target)
{
    return getManySM_STATEsOnR503(target, null, true);
}
public static StateMachineState_c [] getManySM_STATEsOnR503(SemEvent_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR503(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<Instance_c> backPointer_DefinesStateOfInstanceDefinesStateOf_R2915 = new ArrayList<Instance_c>();

public void setInstanceOrderInChildListR2915(Instance_c target, int index) {
	unrelateAcrossR2915From(target);
	Instance_c[] elements = Instance_c.getManyI_INSsOnR2915(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2915From((Instance_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2915To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2915To((Instance_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2915To(Instance_c target)
{
  if (target != null) {
    target.relateAcrossR2915To(this, true) ;
  }
}

public void relateAcrossR2915To(Instance_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2915To(this, notifyChanges) ;
  }
}

public void setBackPointerR2915To(Instance_c target)
{
  	synchronized (backPointer_DefinesStateOfInstanceDefinesStateOf_R2915) {
		backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.add(target);
	}
}

public void unrelateAcrossR2915From(Instance_c target)
{
  if (target != null) {
    target.unrelateAcrossR2915From(this, true) ;
  }
}

public void unrelateAcrossR2915From(Instance_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2915From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2915To(Instance_c target)
{
  synchronized (backPointer_DefinesStateOfInstanceDefinesStateOf_R2915) {
	    backPointer_DefinesStateOfInstanceDefinesStateOf_R2915.remove(target);
	}
}

public static StateMachineState_c getOneSM_STATEOnR2915(Instance_c [] targets)
{
    return getOneSM_STATEOnR2915(targets, null);
}

public static StateMachineState_c getOneSM_STATEOnR2915(Instance_c [] targets, ClassQueryInterface_c test)
{
    return getOneSM_STATEOnR2915(targets, test, true);
}

public static StateMachineState_c getOneSM_STATEOnR2915(Instance_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    StateMachineState_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             StateMachineState_c candidate_val = getOneSM_STATEOnR2915(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneSM_STATEOnR2915(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static StateMachineState_c getOneSM_STATEOnR2915(Instance_c target)
{
	return getOneSM_STATEOnR2915(target, true);
}
public static StateMachineState_c getOneSM_STATEOnR2915(Instance_c target, boolean loadComponent)
{
  if (target != null) {
    return target.OccupiesStateMachineState ;
  } else {
    return null;
  }
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c [] targets,
    ClassQueryInterface_c test)
{
	return getManySM_STATEsOnR2915(targets, test, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateMachineState_c[0];
  
  
  LinkedHashSet<StateMachineState_c> elementsSet = new LinkedHashSet<StateMachineState_c>();
  for (int i = 0; i < targets.length; i++) {
    StateMachineState_c associate = targets[i].OccupiesStateMachineState;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateMachineState_c[] result = new StateMachineState_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c [] targets)
{
  return getManySM_STATEsOnR2915(targets, null);
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Instance_c [] targetArray = new Instance_c[1];
    targetArray[0] = target;
    return getManySM_STATEsOnR2915(targetArray, test, loadComponent);
  } else {
    StateMachineState_c [] result = new StateMachineState_c [0] ;
    return result ;
  }
  
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c target,
    ClassQueryInterface_c test)
{
    return getManySM_STATEsOnR2915(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c target)
{
    return getManySM_STATEsOnR2915(target, null, true);
}

public static StateMachineState_c [] getManySM_STATEsOnR2915(Instance_c target, boolean loadComponent)
{
    return getManySM_STATEsOnR2915(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (StateMachine == null) {          
      // R501
      StateMachine_c relInst38882 = (StateMachine_c) baseRoot.getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38882 == null) {
      			relInst38882 = (StateMachine_c) Ooaofooa.getDefaultInstance().getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
      		}
			if (relInst38882 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38882 = (StateMachine_c) roots[i].getInstanceList(StateMachine_c.class).get(new Object[] {m_sm_id});
					if (relInst38882 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38882 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38882) && !isProxy())) {
	      relInst38882.relateAcrossR501To(this, notifyChanges);
	  }
	  }
	}
	          

	if (ReceivesAsynchronousDataViaEventSupplementalData == null) {          
      // R521
      EventSupplementalData_c relInst38883 = (EventSupplementalData_c) baseRoot.getInstanceList(EventSupplementalData_c.class).get(new Object[] {m_smspd_id,m_sm_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst38883 == null) {
      			relInst38883 = (EventSupplementalData_c) Ooaofooa.getDefaultInstance().getInstanceList(EventSupplementalData_c.class).get(new Object[] {m_smspd_id,m_sm_id});
      		}
			if (relInst38883 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst38883 = (EventSupplementalData_c) roots[i].getInstanceList(EventSupplementalData_c.class).get(new Object[] {m_smspd_id,m_sm_id});
					if (relInst38883 != null)
						break;
				}
			}
			//synchronized
      if ( relInst38883 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst38883) && !isProxy())) {
	      relInst38883.relateAcrossR521To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R501
      // SM_SM
		  inst=StateMachine;
			unrelateAcrossR501From(StateMachine, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R521
      // SM_SUPDT
		  inst=ReceivesAsynchronousDataViaEventSupplementalData;
			unrelateAcrossR521From(ReceivesAsynchronousDataViaEventSupplementalData, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final StateMachineState_c inst = (StateMachineState_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static StateMachineState_c StateMachineStateInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		StateMachineState_c result=findStateMachineStateInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,StateMachineState_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findStateMachineStateInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static StateMachineState_c findStateMachineStateInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				StateMachineState_c x = (StateMachineState_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static StateMachineState_c StateMachineStateInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return StateMachineStateInstance(modelRoot,test,true);
  }
  
  public static StateMachineState_c StateMachineStateInstance(ModelRoot modelRoot)
  {
	 return StateMachineStateInstance(modelRoot,null,true);
  }

  public static StateMachineState_c [] StateMachineStateInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, StateMachineState_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(StateMachineState_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					StateMachineState_c x = (StateMachineState_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				StateMachineState_c[] ret_set = new StateMachineState_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new StateMachineState_c[0];
			}		
		} 
  }
  public static StateMachineState_c [] StateMachineStateInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  StateMachineStateInstances(modelRoot,test,true);
  }
  public static StateMachineState_c [] StateMachineStateInstances(ModelRoot modelRoot)
  {
	return StateMachineStateInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the State Machine State.dispose call: ";
	Transition_c testR506Inst = Transition_c.getOneSM_TXNOnR506(this, false);

	if ( testR506Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "506 ";	
	}
	StateMachine_c testR501Inst = StateMachine_c.getOneSM_SMOnR501(this, false);

	if ( testR501Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "501 ";
	}
	NoEventTransition_c testR508Inst = NoEventTransition_c.getOneSM_NETXNOnR508(this, false);

	if ( testR508Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "508 ";	
	}
 	MooreActionHome_c testR511Inst = MooreActionHome_c.getOneSM_MOAHOnR511(this, false);

 	if ( testR511Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "511 ";
 	}
	EventSupplementalData_c testR521Inst = EventSupplementalData_c.getOneSM_SUPDTOnR521(this, false);

	if ( testR521Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "521 ";
	}
	StateEventMatrixEntry_c testR503Inst = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(this, false);

	if ( testR503Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "503 ";
	}
	Instance_c testR2915Inst = Instance_c.getOneI_INSOnR2915(this, false);

	if ( testR2915Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "2915 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "State Machine State", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("smstt_id")){
         return true;
      }
      if(attributeName.equals("sm_id")){
         return true;
      }
      if(attributeName.equals("smspd_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getSm_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getSm_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    tempID= getSmstt_id();
    
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public long getSmstt_idLongBased()
  {
    if(m_smstt_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_smstt_id)){
    	return 0xfffffff & m_smstt_id.getLeastSignificantBits();
    }
    return m_smstt_idLongBased ;
  }
  public java.util.UUID getSmstt_id()
  {
    return m_smstt_id ;
  }


  public void setSmstt_id(java.util.UUID newValue)
  {
   m_smstt_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getSm_idLongBased()
  {
    if ( StateMachine != null )
    {
      return StateMachine.getSm_idLongBased();
    }
    if ( ReceivesAsynchronousDataViaEventSupplementalData != null )
    {
      return ReceivesAsynchronousDataViaEventSupplementalData.getSm_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSm_id()
  {
    if ( StateMachine != null )
    {
      return StateMachine.getSm_id();
    }
    if ( ReceivesAsynchronousDataViaEventSupplementalData != null )
    {
      return ReceivesAsynchronousDataViaEventSupplementalData.getSm_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSm_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_sm_id) )
      return m_sm_id;
    else
      return getSm_id();
  }
  
  public long getSmspd_idLongBased()
  {
    if ( ReceivesAsynchronousDataViaEventSupplementalData != null )
    {
      return ReceivesAsynchronousDataViaEventSupplementalData.getSmspd_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getSmspd_id()
  {
    if ( ReceivesAsynchronousDataViaEventSupplementalData != null )
    {
      return ReceivesAsynchronousDataViaEventSupplementalData.getSmspd_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getSmspd_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_smspd_id) )
      return m_smspd_id;
    else
      return getSmspd_id();
  }
  
  public void setSmspd_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_smspd_id)){
	        return;
	    }
	}else if(m_smspd_id != null){
	    if(m_smspd_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Smspd_id", m_smspd_id, newValue,true); 
   m_smspd_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getName()
  {
    return m_name ;
  }


  public void setName(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_name)){
	        return;
	    }
	}else if(m_name != null){
	    if(m_name.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Name", m_name, newValue,true); 
   m_name = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getNumb()
  {
    return m_numb ;
  }


  public void setNumb(int newValue)
  {
    if(m_numb == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Numb", new Integer(m_numb), new Integer(newValue),true);

   m_numb = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public int getFinal()
  {
    return m_final ;
  }


  public void setFinal(int newValue)
  {
    if(m_final == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Final", new Integer(m_final), new Integer(newValue),true);

   m_final = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "State Machine State", //$NON-NLS-1$
	  " Operation entered: State Machine State::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     StateMachineState_c [] objs = StateMachineState_c.StateMachineStateInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "State Machine State", //$NON-NLS-1$
	  " Operation entered: State Machine State::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class StateMachineState_c_test38885_c implements ClassQueryInterface_c
    {
	  StateMachineState_c_test38885_c( java.util.UUID            p38886, java.util.UUID            p38887 ) {
	       m_p38886 = p38886; 
m_p38887 = p38887;
	  }
	  private java.util.UUID             m_p38886; private java.util.UUID             m_p38887; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachineState_c selected = (StateMachineState_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38886)) & (selected.getSmstt_id().equals(m_p38887));
	      return retval;
	  }
    }

    StateMachineState_c [] objs38884 = 
    StateMachineState_c.StateMachineStateInstances(modelRoot, new StateMachineState_c_test38885_c(getSm_id(), getSmstt_id())) ;

    if ( (  (objs38884.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine State", //$NON-NLS-1$
           "Consistency: Object: State Machine State: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38884.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine State: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38884.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38884.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine State", //$NON-NLS-1$
           "Consistency: Object: State Machine State: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38884.length )  + " SM_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine State: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38884.length )  + " SM_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

    class StateMachineState_c_test38889_c implements ClassQueryInterface_c
    {
	  StateMachineState_c_test38889_c( java.util.UUID            p38890, java.util.UUID            p38891, java.util.UUID            p38892 ) {
	            m_p38890 = p38890; 
m_p38891 = p38891; 
m_p38892 = p38892;
	  }
	  private java.util.UUID             m_p38890; private java.util.UUID             m_p38891; private java.util.UUID             m_p38892; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachineState_c selected = (StateMachineState_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSmspd_id().equals(m_p38890)) & (selected.getSmstt_id().equals(m_p38891)) & (selected.getSm_id().equals(m_p38892));
	      return retval;
	  }
    }

    StateMachineState_c [] objs38888 = 
    StateMachineState_c.StateMachineStateInstances(modelRoot, new StateMachineState_c_test38889_c(getSmspd_id(), getSmstt_id(), getSm_id())) ;

    if ( (  (objs38888.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine State", //$NON-NLS-1$
           "Consistency: Object: State Machine State: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs38888.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine State: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38888.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs38888.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine State", //$NON-NLS-1$
           "Consistency: Object: State Machine State: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38888.length )  + " SMspd_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable"  + " SM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine State: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38888.length )  + " SMspd_ID: " + "Not Printable"  + " SMstt_ID: " + "Not Printable"  + " SM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // State Machine State is a referring class in association: rel.Numb = 501
          // The participating class is: State Machine
    class StateMachine_c_test38895_c implements ClassQueryInterface_c
    {
	  StateMachine_c_test38895_c( java.util.UUID            p38896 ) {
	  m_p38896 = p38896;
	  }
	  private java.util.UUID             m_p38896; 
	  public boolean evaluate (Object candidate)
	  {
	      StateMachine_c selected = (StateMachine_c) candidate;
	      boolean retval = false;
	      retval = (selected.getSm_id().equals(m_p38896));
	      return retval;
	  }
    }

    StateMachine_c [] objs38894 = 
    StateMachine_c.StateMachineInstances(modelRoot, new StateMachine_c_test38895_c(getSm_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs38894.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "State Machine State", //$NON-NLS-1$
           "Consistency: Object: State Machine State: Association: 501: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs38894.length )  + " SM_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: State Machine State: Association: 501: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs38894.length )  + " SM_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // State Machine State is a referring class in association: rel.Numb = 521
          // The participating class is: Event Supplemental Data
		  // This class is deprecated, no consistency check generated

          // State Machine State is a participating class in association: rel.Numb = 508
             // Object: No Event Transition
          // Associated Other Side: rel.Numb = 511
            // Link Object: Moore Action Home
          // Associated One Side: rel.Numb = 503
            // Link Object: State Event Matrix Entry
            // Other Side Class: SEM Event
          // State Machine State is a participating class in association: rel.Numb = 2915
             // Object: Instance
          // State Machine State is a participating class in association: rel.Numb = 506
             // Object: Transition
    return retval;
  }


  // declare transform functions
  public  int  Get_style()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.RoundBox;



   } // End get_style
  public  int          Get_compartments()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_compartments") ; 
               final ModelRoot modelRoot = getModelRoot();
return 2;



   } // End get_compartments
  public  String       Get_compartment_text(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_compartment_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


if ( (p_Comp_num == 1) )
{

if ( (p_At == Justification_c.Left) )
{

v_result = " " + Gd_c.Int_to_string(			    
getNumb()) + ". " + getName() ;



}


}

else if ( (p_Comp_num == 2) )
{

if ( (p_At == Justification_c.Left) )
{

Action_c v_moore_action = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(MooreActionHome_c.getOneSM_MOAHOnR511(this)));


if ( (  (v_moore_action != null)) )
{

if ( (v_moore_action.getSuc_pars() == Parsestatus_c.parseSuccessful) )
{

v_result = "entry/" + Gd_c.Newline() ;



}

else if ( (v_moore_action.getSuc_pars() == Parsestatus_c.parseUnsuccessful) )
{

v_result = "*** PARSE ERROR(S) ***" + Gd_c.Newline() ;



}

v_result = v_result + v_moore_action.getAction_semantics() ;



}


}


}

return v_result;



   } // End get_compartment_text
  public  int          Get_entries(final int          p_Comp_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_entries") ; 
               final ModelRoot modelRoot = getModelRoot();
return 1;



   } // End get_entries
  public  int  Get_text_style(final int  p_At,final int          p_Comp_num,final int          p_Ent_num)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_text_style") ; 
               final ModelRoot modelRoot = getModelRoot();
return Style_c.None;



   } // End get_text_style
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getSmstt_id();



   } // End get_ooa_id
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_name = Ooaofooa.Getuniqueinitialname(modelRoot			    
,"Unnamed State"			    
,Converttoinstance()) ;


String       v_success = Ooaofooa.Getnewelementname(modelRoot			    
,Converttoinstance()			    
,v_name			    
,true) ;


if ( (! v_success.equals("")) )
{

setName( v_success) ;



}

else
{

Dispose() ;



}

setNumb( 1) ;


StateMachineState_c [] v_states = StateMachineState_c.getManySM_STATEsOnR501(StateMachine_c.getManySM_SMsOnR501(this));


StateMachineState_c  v_state = null;
for ( int i37159 = 0; i37159 < v_states.length; i37159++)
{
  v_state = v_states[i37159] ;

if ( (v_state.getSmstt_id().equals(getSmstt_id())) )
{

continue;



}

if ( (v_state.getNumb() >= getNumb()) )
{

setNumb( v_state.getNumb() + 1) ;



}


}

ActionHome_c v_ah = new ActionHome_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ah));


MooreActionHome_c v_moah = new MooreActionHome_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_moah));


if (v_ah != null) {
  v_ah.relateAcrossR513To(v_moah);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR501(this);


MooreStateMachine_c v_msm = MooreStateMachine_c.getOneSM_MOOREOnR510(v_sm);


if (v_moah != null) {
  v_moah.relateAcrossR511To( this ) ;   v_moah.relateAcrossR511To( v_msm ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


Action_c v_act = new Action_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_act));


if (v_act != null) {
  v_act.setSuc_pars( Parsestatus_c.parseInitial) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_act != null) {
  v_act.relateAcrossR514To(v_ah);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


if (v_act != null) {
  v_act.relateAcrossR515To(v_sm);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


SemEvent_c [] v_event_set = SemEvent_c.getManySM_SEVTsOnR525(StateMachineEvent_c.getManySM_EVTsOnR502(v_sm));


SemEvent_c  v_event = null;
for ( int i37160 = 0; i37160 < v_event_set.length; i37160++)
{
  v_event = v_event_set[i37160] ;

StateEventMatrixEntry_c v_sem = new StateEventMatrixEntry_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_sem));


CantHappen_c v_ch = new CantHappen_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_ch));


if (v_sem != null) {
  v_sem.relateAcrossR503To( this ) ;   v_sem.relateAcrossR503To( v_event ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate using attempted on null link class instance.", t);
}


if (v_ch != null) {
  v_ch.relateAcrossR504To(v_sem);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


   } // End initialize
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
StateMachine_c v_sm_sm = StateMachine_c.getOneSM_SMOnR501(this);


this.unrelateAcrossR501From(v_sm_sm);


StateEventMatrixEntry_c [] v_semes = StateEventMatrixEntry_c.getManySM_SEMEsOnR503(this);


StateEventMatrixEntry_c  v_seme = null;
for ( int i37161 = 0; i37161 < v_semes.length; i37161++)
{
  v_seme = v_semes[i37161] ;

if (v_seme != null) {
v_seme.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Transition_c [] v_txns = Transition_c.getManySM_TXNsOnR506(this);


Transition_c  v_txn = null;
for ( int i37162 = 0; i37162 < v_txns.length; i37162++)
{
  v_txn = v_txns[i37162] ;

if (v_txn != null) {
v_txn.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Transition_c [] v_netxns = Transition_c.getManySM_TXNsOnR507(NoEventTransition_c.getManySM_NETXNsOnR508(this));


Transition_c  v_netxn = null;
for ( int i37163 = 0; i37163 < v_netxns.length; i37163++)
{
  v_netxn = v_netxns[i37163] ;

if (v_netxn != null) {
v_netxn.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

Instance_c [] v_ins_sts = Instance_c.getManyI_INSsOnR2915(this);


Instance_c  v_ins_st = null;
for ( int i37164 = 0; i37164 < v_ins_sts.length; i37164++)
{
  v_ins_st = v_ins_sts[i37164] ;

this.unrelateAcrossR2915From(v_ins_st);



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

if ( ((p_Value.equals("ch generic pkg") || p_Value.equals("ignore spec pkg")) || (p_Value.equals("ch spec pkg") || p_Value.equals("ignore generic pkg"))) )
{

ModelClass_c v_cls = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));


if ( (  (v_cls == null)) )
{

v_cls = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));



}

PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(v_cls);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_cc = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_cc != null) ;


if ( (((p_Value.equals("ch spec pkg")) || (p_Value.equals("ignore spec pkg"))) && (v_isInGenericPackage)) )
{

return false;



}

if ( (((p_Value.equals("ch generic pkg")) || (p_Value.equals("ignore generic pkg"))) && (  !v_isInGenericPackage)) )
{

return false;



}

  class StateMachineEvent_test37375_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return Ooaofooa.Canstateignoreorsayeventcanthappen(modelRoot			    
,((p_Value.equals("ch spec pkg")) || (p_Value.equals("ch generic pkg")))			    
,selected.getSmevt_id()			    
,selected.getSm_id()			    
,getSmstt_id()			    
,getSm_id()) ;
	}
  }
StateMachineEvent_c v_event = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new StateMachineEvent_test37375_c()) ;


return   (v_event != null);



}


}

return false;



   } // End actionFilter
  public  boolean      Notalreadyassigned(final boolean      p_Crtxn,final java.util.UUID         p_Eventid,final java.util.UUID         p_Eventstatemachineid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Notalreadyassigned") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineEvent_test37376_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return selected.getSmevt_id().equals(p_Eventid) && selected.getSm_id().equals(p_Eventstatemachineid) ;
	}
  }
StateMachineEvent_c v_event = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new StateMachineEvent_test37376_c()) ;


  class StateMachineEvent_test37610_c implements ClassQueryInterface_c
  {
	StateMachineEvent_test37610_c( java.util.UUID         p37611 ) {
		m_p37611 = p37611;
	}
	private java.util.UUID         m_p37611;
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return selected.getSm_id().equals(m_p37611) ;
	}
  }
StateMachineEvent_c v_nonLocalEvent = StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getManySM_SEVTsOnR526(NonLocalEvent_c.getManySM_NLEVTsOnR527(PolymorphicEvent_c.getManySM_PEVTsOnR525(v_event))), new StateMachineEvent_test37610_c(getSm_id()));


if ( (  (v_nonLocalEvent != null)) )
{

v_event = v_nonLocalEvent ;



}

if ( (p_Crtxn) )
{

  class CreationTransition_test37612_c implements ClassQueryInterface_c
  {
	CreationTransition_test37612_c( java.util.UUID         p37613 ) {
		m_p37613 = p37613;
	}
	private java.util.UUID         m_p37613;
	public boolean evaluate (Object candidate)
	{
		CreationTransition_c selected = (CreationTransition_c)candidate;
		return selected.getSmevt_id().equals(m_p37613) ;
	}
  }
CreationTransition_c v_crt = CreationTransition_c.getOneSM_CRTXNOnR507(Transition_c.getManySM_TXNsOnR505(StateMachine_c.getManySM_SMsOnR501(this)), new CreationTransition_test37612_c(v_event.getSmevt_id()));


return   (v_crt == null);



}

else
{

  class NewStateTransition_test37614_c implements ClassQueryInterface_c
  {
	NewStateTransition_test37614_c( java.util.UUID         p37615 ) {
		m_p37615 = p37615;
	}
	private java.util.UUID         m_p37615;
	public boolean evaluate (Object candidate)
	{
		NewStateTransition_c selected = (NewStateTransition_c)candidate;
		return selected.getSmevt_id().equals(m_p37615) ;
	}
  }
NewStateTransition_c v_nst = NewStateTransition_c.getOneSM_NSTXNOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(this), new NewStateTransition_test37614_c(v_event.getSmevt_id()));


return   (v_nst == null);



}


   } // End notAlreadyAssigned
  public  boolean      Canignoreorsayeventcanthappen(final boolean      p_Considercanthappen,final java.util.UUID         p_Eventid,final java.util.UUID         p_Eventstatemachineid)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Canignoreorsayeventcanthappen") ; 
               final ModelRoot modelRoot = getModelRoot();
  class StateMachineEvent_test37377_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineEvent_c selected = (StateMachineEvent_c)candidate;
		return selected.getSmevt_id().equals(p_Eventid) && selected.getSm_id().equals(p_Eventstatemachineid) ;
	}
  }
StateMachineEvent_c v_event = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new StateMachineEvent_test37377_c()) ;


if (   (v_event == null) )
{

return false;



}

ClassStateMachine_c v_eventClassStateMachine = ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR502(v_event));


StateMachine_c v_selfStateMachine = StateMachine_c.getOneSM_SMOnR501(this);


ClassStateMachine_c v_selfClassStateMachine = ClassStateMachine_c.getOneSM_ASMOnR517(v_selfStateMachine);


if ( (  (v_eventClassStateMachine != null) ||   (v_selfClassStateMachine != null)) )
{

if ( (! v_event.getSm_id().equals(getSm_id())) )
{

return false;



}


}

else
{

NonLocalEvent_c v_nonLocalEvent = NonLocalEvent_c.getOneSM_NLEVTOnR526(SemEvent_c.getOneSM_SEVTOnR525(v_event));


if ( (  (v_nonLocalEvent != null)) )
{

return false;



}

ModelClass_c v_selfClass = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(v_selfStateMachine));


InstanceStateMachine_c v_eventStateMachine = InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR502(v_event));


if ( (! p_Eventstatemachineid.equals(getSm_id())) )
{

ModelClass_c v_eventClass = ModelClass_c.getOneO_OBJOnR518(v_eventStateMachine);


if ( (  !v_eventClass.Issupertypeof(			    
v_selfClass.getObj_id())) )
{

return false;



}

if ( (v_event.Isassignedinsupertypestatemachine(			    
v_selfClass.getObj_id())) )
{

return false;



}


}

if ( (v_event.Isassignedinsubtypestatemachine(			    
v_selfClass.getObj_id())) )
{

return false;



}


}

SemEvent_c v_matrixEvent = SemEvent_c.getOneSM_SEVTOnR525(v_event);


if ( (  (v_matrixEvent == null)) )
{

  class SemEvent_test37616_c implements ClassQueryInterface_c
  {
	SemEvent_test37616_c( java.util.UUID         p37617 ) {
		m_p37617 = p37617;
	}
	private java.util.UUID         m_p37617;
	public boolean evaluate (Object candidate)
	{
		SemEvent_c selected = (SemEvent_c)candidate;
		return selected.getSm_id().equals(m_p37617) ;
	}
  }
v_matrixEvent = SemEvent_c.getOneSM_SEVTOnR526(NonLocalEvent_c.getManySM_NLEVTsOnR527(PolymorphicEvent_c.getManySM_PEVTsOnR525(v_event)), new SemEvent_test37616_c(getSm_id()));



}

  class StateEventMatrixEntry_test37618_c implements ClassQueryInterface_c
  {
	StateEventMatrixEntry_test37618_c( java.util.UUID         p37619, java.util.UUID         p37620 ) {
		m_p37619 = p37619;
				m_p37620 = p37620;
	}
	private java.util.UUID         m_p37619;
		private java.util.UUID         m_p37620;
	public boolean evaluate (Object candidate)
	{
		StateEventMatrixEntry_c selected = (StateEventMatrixEntry_c)candidate;
		return selected.getSmstt_id().equals(m_p37619) && selected.getSm_id().equals(m_p37620) ;
	}
  }
StateEventMatrixEntry_c v_matrixEntry = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(v_matrixEvent, new StateEventMatrixEntry_test37618_c(getSmstt_id(), getSm_id()));


if ( (  (v_matrixEntry != null)) )
{

if ( (p_Considercanthappen) )
{

EventIgnored_c v_ignore = EventIgnored_c.getOneSM_EIGNOnR504(v_matrixEntry);


if ( (  (v_ignore == null)) )
{

return false;



}


}

else
{

CantHappen_c v_cantHappen = CantHappen_c.getOneSM_CHOnR504(v_matrixEntry);


if ( (  (v_cantHappen == null)) )
{

return false;



}


}


}

else
{

if ( (p_Considercanthappen) )
{

return false;



}


}

return true;



   } // End canIgnoreOrSayEventCantHappen
  public  String       Getnamewithclass()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Getnamewithclass") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));


if ( (  (v_clazz == null)) )
{

v_clazz = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));



}

return v_clazz.getKey_lett() + ": " + getName();



   } // End getNameWithClass
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Converttoinstance") ; 
// just return this instance as an Object
return this;
   } // End convertToInstance
  public  boolean      Checkbreakpoint(final int  p_Changetype)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Checkbreakpoint") ; 
               final ModelRoot modelRoot = getModelRoot();
return false;



   } // End checkBreakpoint
  public  void Checkintegrity()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Checkintegrity") ; 
               final ModelRoot modelRoot = getModelRoot();
ModelClass_c v_class = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_class));


String       v_machineName = "Instance State Machine" ;


if ( (  (v_package == null)) )
{

v_class = ModelClass_c.getOneO_OBJOnR519(ClassStateMachine_c.getOneSM_ASMOnR517(StateMachine_c.getOneSM_SMOnR501(this)));


v_package = Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_class));


v_machineName = "Class State Machine" ;



}

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


java.util.UUID         v_sys_id = Gd_c.Null_unique_id() ;


if ( (  (v_system != null)) )
{

v_sys_id = v_system.getSys_id() ;



}

StateMachineState_c [] v_states = StateMachineState_c.getManySM_STATEsOnR501(StateMachine_c.getManySM_SMsOnR501(this));


StateMachineState_c  v_state = null;
for ( int i37165 = 0; i37165 < v_states.length; i37165++)
{
  v_state = v_states[i37165] ;

if ( (v_state != this && v_state.getNumb() == getNumb()) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another state under the same state machine " + "with the same state number."			    
,Converttoinstance()			    
,getSmstt_id()			    
,getName()			    
,v_class.Getpath(			    
true			    
,getName()) + "::" + v_machineName + "::" + getName()			    
,Severity_c.Error			    
,v_sys_id ) ;



}

if ( (v_state != this && v_state.getName().equals(getName())) )
{

IntegrityManager_c.Createissue(modelRoot			    
,"Found another state under the same state machine " + "with a matching name."			    
,Converttoinstance()			    
,getSmstt_id()			    
,getName()			    
,v_class.Getpath(			    
true			    
,getName()) + "::" + v_machineName + "::" + getName()			    
,Severity_c.Error			    
,v_sys_id ) ;



}


}


   } // End checkIntegrity
  public  String       Getdescription()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "State Machine State", " Operation entered: StateMachineState::Getdescription") ; 
               final ModelRoot modelRoot = getModelRoot();
Action_c v_action = Action_c.getOneSM_ACTOnR514(ActionHome_c.getOneSM_AHOnR513(MooreActionHome_c.getOneSM_MOAHOnR511(this)));


return v_action.getDescrip();



   } // End getDescription

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return StateMachineStateActionFilter.getSingleton();
    }
	  return null;
  }
} // end State Machine State
