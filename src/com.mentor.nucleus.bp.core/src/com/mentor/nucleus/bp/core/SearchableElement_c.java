package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.SearchableElement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SEARCHABLE_ELEMENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class SearchableElement_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public SearchableElement_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_participant_id, String p_m_modelrootid,
			String p_m_classname, Object p_m_elementid) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_participant_id = IdAssigner.preprocessUUID(p_m_participant_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		m_modelrootid = p_m_modelrootid;
		m_classname = p_m_classname;
		m_elementid = p_m_elementid;

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public SearchableElement_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_participant_id,
			String p_m_modelrootid, String p_m_classname, Object p_m_elementid,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);
		SearchableElement_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (SearchableElement_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_participant_id = IdAssigner
						.preprocessUUID(p_m_participant_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				new_inst.m_modelrootid = p_m_modelrootid;
				new_inst.m_classname = p_m_classname;
				new_inst.m_elementid = p_m_elementid;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new SearchableElement_c(modelRoot, p_m_id,
					p_m_participant_id, p_m_modelrootid, p_m_classname,
					p_m_elementid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public SearchableElement_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_participant_id,
			String p_m_modelrootid, String p_m_classname, Object p_m_elementid) {
		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);
		SearchableElement_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (SearchableElement_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_participant_id = IdAssigner
						.preprocessUUID(p_m_participant_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				source.m_modelrootid = p_m_modelrootid;
				source.m_classname = p_m_classname;
				source.m_elementid = p_m_elementid;

				return source;
			}
		}
		// there is no instance matching the id
		SearchableElement_c new_inst = new SearchableElement_c(modelRoot,
				p_m_id, p_m_participant_id, p_m_modelrootid, p_m_classname,
				p_m_elementid);
		return new_inst;
	}
	public SearchableElement_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_participant_id = IdAssigner.NULL_UUID;
		m_id = idAssigner.createUUID();
		m_modelrootid = "";
		m_classname = "";
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof SearchableElement_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof SearchableElement_c)) {
			return false;
		}

		SearchableElement_c me = (SearchableElement_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((SearchableElement_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((SearchableElement_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof SearchableElement_c)) {
			return false;
		}

		SearchableElement_c me = (SearchableElement_c) elem;
		if (!getId().equals(((SearchableElement_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_participant_id;
	private java.util.UUID m_id;
	private long m_idLongBased;
	private String m_modelrootid;
	private String m_classname;
	private Object m_elementid;

	// declare association references from this class

	// referring navigation

	SearchParticipant_c ParticipatesAsSearchParticipant;
	public void relateAcrossR9700To(SearchParticipant_c target) {
		relateAcrossR9700To(target, true);
	}
	public void relateAcrossR9700To(SearchParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ParticipatesAsSearchParticipant)
			return; // already related

		if (ParticipatesAsSearchParticipant != target) {

			Object oldKey = getInstanceKey();

			if (ParticipatesAsSearchParticipant != null) {

				ParticipatesAsSearchParticipant.clearBackPointerR9700To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"SearchableElement_c.relateAcrossR9700To(SearchParticipant_c target)",
									"Relate performed across R9700 from Searchable Element to Search Participant without unrelate of prior instance.");
				}
			}

			ParticipatesAsSearchParticipant = target;
			m_participant_id = target.getId();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR9700To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "9700", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR9700From(SearchParticipant_c target) {
		unrelateAcrossR9700From(target, true);
	}
	public void unrelateAcrossR9700From(SearchParticipant_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (ParticipatesAsSearchParticipant == null)
			return; // already unrelated

		if (target != ParticipatesAsSearchParticipant) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R9700",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR9700To(this);
		}

		if (ParticipatesAsSearchParticipant != null) {

			m_participant_id = ParticipatesAsSearchParticipant.getId();
			ParticipatesAsSearchParticipant = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "9700", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static SearchableElement_c getOneSP_SEOnR9700(
			SearchParticipant_c[] targets) {
		return getOneSP_SEOnR9700(targets, null);
	}

	public static SearchableElement_c getOneSP_SEOnR9700(
			SearchParticipant_c[] targets, ClassQueryInterface_c test) {
		SearchableElement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSP_SEOnR9700(targets[i], test);
			}
		}

		return ret_val;
	}

	public static SearchableElement_c getOneSP_SEOnR9700(
			SearchParticipant_c target) {
		return getOneSP_SEOnR9700(target, null);
	}

	public static SearchableElement_c getOneSP_SEOnR9700(
			SearchParticipant_c target, boolean loadComponent) {
		return getOneSP_SEOnR9700(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static SearchableElement_c getOneSP_SEOnR9700(
			SearchParticipant_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSP_SEOnR9700(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static SearchableElement_c getOneSP_SEOnR9700(ModelRoot modelRoot,
			SearchParticipant_c target, ClassQueryInterface_c test) {
		return getOneSP_SEOnR9700(modelRoot, target, test, true);
	}

	public static SearchableElement_c getOneSP_SEOnR9700(ModelRoot modelRoot,
			SearchParticipant_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSP_SEOnR9700(modelRoot, target, test);
	}
	private static SearchableElement_c find_getOneSP_SEOnR9700(
			ModelRoot modelRoot, SearchParticipant_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			SearchableElement_c source = (SearchableElement_c) target.backPointer_ProvidesParticipationForSearchableElementProvidesParticipationFor_R9700;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c[] targets) {
		return getManySP_SEsOnR9700(targets, null);
	}
	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c[] targets, boolean loadComponent) {
		return getManySP_SEsOnR9700(targets, null, loadComponent);
	}
	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c[] targets, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9700(targets, test, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new SearchableElement_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			SearchableElement_c source = (SearchableElement_c) targets[i].backPointer_ProvidesParticipationForSearchableElementProvidesParticipationFor_R9700;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			SearchableElement_c[] ret_set = new SearchableElement_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new SearchableElement_c[0];
		}
	}

	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c target) {
		if (target != null) {
			SearchParticipant_c[] targetArray = new SearchParticipant_c[1];
			targetArray[0] = target;
			return getManySP_SEsOnR9700(targetArray);
		} else {
			SearchableElement_c[] result = new SearchableElement_c[0];
			return result;
		}
	}

	public static SearchableElement_c[] getManySP_SEsOnR9700(
			SearchParticipant_c target, boolean loadComponent) {
		if (target != null) {
			SearchParticipant_c[] targetArray = new SearchParticipant_c[1];
			targetArray[0] = target;
			return getManySP_SEsOnR9700(targetArray, loadComponent);
		} else {
			SearchableElement_c[] result = new SearchableElement_c[0];
			return result;
		}
	}

	// declare associations referring to this class

	// referred to navigation

	NamedSearchable_c backPointer_IsSubtypeNamedSearchableIsSubtype_R9702;

	public void setNamedSearchableOrderInChildListR9702(
			NamedSearchable_c target, int index) {
		unrelateAcrossR9702From(target);
		NamedSearchable_c[] elements = NamedSearchable_c
				.getManySP_NSsOnR9702(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9702From((NamedSearchable_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9702To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9702To((NamedSearchable_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9702To(NamedSearchable_c target) {
		if (target != null) {
			target.relateAcrossR9702To(this, true);
		}
	}

	public void relateAcrossR9702To(NamedSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9702To(this, notifyChanges);
		}
	}

	public void setBackPointerR9702To(NamedSearchable_c target) {
		backPointer_IsSubtypeNamedSearchableIsSubtype_R9702 = target;
	}

	public void unrelateAcrossR9702From(NamedSearchable_c target) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, true);
		}
	}

	public void unrelateAcrossR9702From(NamedSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9702To(NamedSearchable_c target) {
		if (target == backPointer_IsSubtypeNamedSearchableIsSubtype_R9702) {
			backPointer_IsSubtypeNamedSearchableIsSubtype_R9702 = null;
		}
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			NamedSearchable_c[] targets) {
		return getOneSP_SEOnR9702(targets, null);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			NamedSearchable_c[] targets, ClassQueryInterface_c test) {
		return getOneSP_SEOnR9702(targets, test, true);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			NamedSearchable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		SearchableElement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					SearchableElement_c candidate_val = getOneSP_SEOnR9702(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSP_SEOnR9702(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			NamedSearchable_c target) {
		return getOneSP_SEOnR9702(target, true);
	}
	public static SearchableElement_c getOneSP_SEOnR9702(
			NamedSearchable_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeSearchableElement;
		} else {
			return null;
		}
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c[] targets, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(targets, test, true);
	}

	public static SearchableElement_c [] getManySP_SEsOnR9702(NamedSearchable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SearchableElement_c[0];
  
  
  LinkedHashSet<SearchableElement_c> elementsSet = new LinkedHashSet<SearchableElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSearchableElement == null)
	  targets[i].loadProxy();
    SearchableElement_c associate = targets[i].IsSupertypeSearchableElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SearchableElement_c[] result = new SearchableElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c[] targets) {
		return getManySP_SEsOnR9702(targets, null);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			NamedSearchable_c[] targetArray = new NamedSearchable_c[1];
			targetArray[0] = target;
			return getManySP_SEsOnR9702(targetArray, test, loadComponent);
		} else {
			SearchableElement_c[] result = new SearchableElement_c[0];
			return result;
		}

	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c target, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c target) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			NamedSearchable_c target, boolean loadComponent) {
		return getManySP_SEsOnR9702(target, null, loadComponent);
	}

	// referred to navigation

	ActionLanguageSearchable_c backPointer_IsSubtypeActionLanguageSearchableIsSubtype_R9702;

	public void setActionLanguageSearchableOrderInChildListR9702(
			ActionLanguageSearchable_c target, int index) {
		unrelateAcrossR9702From(target);
		ActionLanguageSearchable_c[] elements = ActionLanguageSearchable_c
				.getManySP_ALSsOnR9702(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9702From((ActionLanguageSearchable_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9702To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9702To((ActionLanguageSearchable_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9702To(ActionLanguageSearchable_c target) {
		if (target != null) {
			target.relateAcrossR9702To(this, true);
		}
	}

	public void relateAcrossR9702To(ActionLanguageSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9702To(this, notifyChanges);
		}
	}

	public void setBackPointerR9702To(ActionLanguageSearchable_c target) {
		backPointer_IsSubtypeActionLanguageSearchableIsSubtype_R9702 = target;
	}

	public void unrelateAcrossR9702From(ActionLanguageSearchable_c target) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, true);
		}
	}

	public void unrelateAcrossR9702From(ActionLanguageSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9702To(ActionLanguageSearchable_c target) {
		if (target == backPointer_IsSubtypeActionLanguageSearchableIsSubtype_R9702) {
			backPointer_IsSubtypeActionLanguageSearchableIsSubtype_R9702 = null;
		}
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			ActionLanguageSearchable_c[] targets) {
		return getOneSP_SEOnR9702(targets, null);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			ActionLanguageSearchable_c[] targets, ClassQueryInterface_c test) {
		return getOneSP_SEOnR9702(targets, test, true);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			ActionLanguageSearchable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		SearchableElement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					SearchableElement_c candidate_val = getOneSP_SEOnR9702(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSP_SEOnR9702(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			ActionLanguageSearchable_c target) {
		return getOneSP_SEOnR9702(target, true);
	}
	public static SearchableElement_c getOneSP_SEOnR9702(
			ActionLanguageSearchable_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeSearchableElement;
		} else {
			return null;
		}
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c[] targets, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(targets, test, true);
	}

	public static SearchableElement_c [] getManySP_SEsOnR9702(ActionLanguageSearchable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SearchableElement_c[0];
  
  
  LinkedHashSet<SearchableElement_c> elementsSet = new LinkedHashSet<SearchableElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSearchableElement == null)
	  targets[i].loadProxy();
    SearchableElement_c associate = targets[i].IsSupertypeSearchableElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SearchableElement_c[] result = new SearchableElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c[] targets) {
		return getManySP_SEsOnR9702(targets, null);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ActionLanguageSearchable_c[] targetArray = new ActionLanguageSearchable_c[1];
			targetArray[0] = target;
			return getManySP_SEsOnR9702(targetArray, test, loadComponent);
		} else {
			SearchableElement_c[] result = new SearchableElement_c[0];
			return result;
		}

	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c target, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c target) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			ActionLanguageSearchable_c target, boolean loadComponent) {
		return getManySP_SEsOnR9702(target, null, loadComponent);
	}

	// referred to navigation

	DescriptionSearchable_c backPointer_IsSubtypeDescriptionSearchableIsSubtype_R9702;

	public void setDescriptionSearchableOrderInChildListR9702(
			DescriptionSearchable_c target, int index) {
		unrelateAcrossR9702From(target);
		DescriptionSearchable_c[] elements = DescriptionSearchable_c
				.getManySP_DSsOnR9702(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR9702From((DescriptionSearchable_c) elements[i]);
			}
			count++;
		}
		relateAcrossR9702To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR9702To((DescriptionSearchable_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR9702To(DescriptionSearchable_c target) {
		if (target != null) {
			target.relateAcrossR9702To(this, true);
		}
	}

	public void relateAcrossR9702To(DescriptionSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR9702To(this, notifyChanges);
		}
	}

	public void setBackPointerR9702To(DescriptionSearchable_c target) {
		backPointer_IsSubtypeDescriptionSearchableIsSubtype_R9702 = target;
	}

	public void unrelateAcrossR9702From(DescriptionSearchable_c target) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, true);
		}
	}

	public void unrelateAcrossR9702From(DescriptionSearchable_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR9702From(this, notifyChanges);
		}
	}

	public void clearBackPointerR9702To(DescriptionSearchable_c target) {
		if (target == backPointer_IsSubtypeDescriptionSearchableIsSubtype_R9702) {
			backPointer_IsSubtypeDescriptionSearchableIsSubtype_R9702 = null;
		}
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			DescriptionSearchable_c[] targets) {
		return getOneSP_SEOnR9702(targets, null);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			DescriptionSearchable_c[] targets, ClassQueryInterface_c test) {
		return getOneSP_SEOnR9702(targets, test, true);
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			DescriptionSearchable_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		SearchableElement_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					SearchableElement_c candidate_val = getOneSP_SEOnR9702(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSP_SEOnR9702(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static SearchableElement_c getOneSP_SEOnR9702(
			DescriptionSearchable_c target) {
		return getOneSP_SEOnR9702(target, true);
	}
	public static SearchableElement_c getOneSP_SEOnR9702(
			DescriptionSearchable_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeSearchableElement;
		} else {
			return null;
		}
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c[] targets, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(targets, test, true);
	}

	public static SearchableElement_c [] getManySP_SEsOnR9702(DescriptionSearchable_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new SearchableElement_c[0];
  
  
  LinkedHashSet<SearchableElement_c> elementsSet = new LinkedHashSet<SearchableElement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeSearchableElement == null)
	  targets[i].loadProxy();
    SearchableElement_c associate = targets[i].IsSupertypeSearchableElement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  SearchableElement_c[] result = new SearchableElement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c[] targets) {
		return getManySP_SEsOnR9702(targets, null);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			DescriptionSearchable_c[] targetArray = new DescriptionSearchable_c[1];
			targetArray[0] = target;
			return getManySP_SEsOnR9702(targetArray, test, loadComponent);
		} else {
			SearchableElement_c[] result = new SearchableElement_c[0];
			return result;
		}

	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c target, ClassQueryInterface_c test) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c target) {
		return getManySP_SEsOnR9702(target, null, true);
	}

	public static SearchableElement_c[] getManySP_SEsOnR9702(
			DescriptionSearchable_c target, boolean loadComponent) {
		return getManySP_SEsOnR9702(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (ParticipatesAsSearchParticipant == null) {
			// R9700
			SearchParticipant_c relInst39617 = (SearchParticipant_c) baseRoot
					.getInstanceList(SearchParticipant_c.class).get(
							new Object[]{m_participant_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39617 == null) {
				relInst39617 = (SearchParticipant_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SearchParticipant_c.class)
						.get(new Object[]{m_participant_id});
			}
			if (relInst39617 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39617 = (SearchParticipant_c) roots[i]
							.getInstanceList(SearchParticipant_c.class).get(
									new Object[]{m_participant_id});
					if (relInst39617 != null)
						break;
				}
			}
			//synchronized
			if (relInst39617 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39617) && !isProxy())) {
					relInst39617.relateAcrossR9700To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R9700
		// SP_SP
		inst = ParticipatesAsSearchParticipant;
		unrelateAcrossR9700From(ParticipatesAsSearchParticipant, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(SearchableElement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final SearchableElement_c inst = (SearchableElement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static SearchableElement_c SearchableElementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		SearchableElement_c result = findSearchableElementInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					SearchableElement_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findSearchableElementInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static SearchableElement_c findSearchableElementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SearchableElement_c x = (SearchableElement_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static SearchableElement_c SearchableElementInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SearchableElementInstance(modelRoot, test, true);
	}

	public static SearchableElement_c SearchableElementInstance(
			ModelRoot modelRoot) {
		return SearchableElementInstance(modelRoot, null, true);
	}

	public static SearchableElement_c[] SearchableElementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					SearchableElement_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(SearchableElement_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				SearchableElement_c x = (SearchableElement_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				SearchableElement_c[] ret_set = new SearchableElement_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new SearchableElement_c[0];
			}
		}
	}
	public static SearchableElement_c[] SearchableElementInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SearchableElementInstances(modelRoot, test, true);
	}
	public static SearchableElement_c[] SearchableElementInstances(
			ModelRoot modelRoot) {
		return SearchableElementInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Searchable Element.dispose call: ";
		SearchParticipant_c testR9700Inst = SearchParticipant_c
				.getOneSP_SPOnR9700(this, false);

		if (testR9700Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "9700 ";
		}
		NamedSearchable_c testR9702Inst1 = NamedSearchable_c
				.getOneSP_NSOnR9702(this, false);

		if (testR9702Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9702 ";
		}
		ActionLanguageSearchable_c testR9702Inst2 = ActionLanguageSearchable_c
				.getOneSP_ALSOnR9702(this, false);

		if (testR9702Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9702 ";
		}
		DescriptionSearchable_c testR9702Inst3 = DescriptionSearchable_c
				.getOneSP_DSOnR9702(this, false);

		if (testR9702Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "9702 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Searchable Element",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("participant_id")) {
			return true;
		}
		if (attributeName.equals("id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getParticipant_idLongBased() {
		if (ParticipatesAsSearchParticipant != null) {
			return ParticipatesAsSearchParticipant.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getParticipant_id() {
		if (ParticipatesAsSearchParticipant != null) {
			return ParticipatesAsSearchParticipant.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParticipant_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_participant_id))
			return m_participant_id;
		else
			return getParticipant_id();
	}

	public void setParticipant_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_participant_id)) {
				return;
			}
		} else if (m_participant_id != null) {
			if (m_participant_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Participant_id", m_participant_id, newValue, true);
		m_participant_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public String getModelrootid() {
		return m_modelrootid;
	}

	public void setModelrootid(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_modelrootid)) {
				return;
			}
		} else if (m_modelrootid != null) {
			if (m_modelrootid.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Modelrootid", m_modelrootid, newValue, true);
		m_modelrootid = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getClassname() {
		return m_classname;
	}

	public void setClassname(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_classname)) {
				return;
			}
		} else if (m_classname != null) {
			if (m_classname.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Classname", m_classname, newValue, true);
		m_classname = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public Object getElementid() {
		return m_elementid;
	}

	public void setElementid(Object newValue) {
		if (m_elementid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Elementid", m_elementid, newValue, true);
		m_elementid = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Searchable Element", //$NON-NLS-1$
						" Operation entered: Searchable Element::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		SearchableElement_c[] objs = SearchableElement_c
				.SearchableElementInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Searchable Element", //$NON-NLS-1$
				" Operation entered: Searchable Element::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class SearchableElement_c_test39619_c implements ClassQueryInterface_c {
			SearchableElement_c_test39619_c(java.util.UUID p39620) {
				m_p39620 = p39620;
			}
			private java.util.UUID m_p39620;
			public boolean evaluate(Object candidate) {
				SearchableElement_c selected = (SearchableElement_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39620));
				return retval;
			}
		}

		SearchableElement_c[] objs39618 = SearchableElement_c
				.SearchableElementInstances(modelRoot,
						new SearchableElement_c_test39619_c(getId()));

		if (((objs39618.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Searchable Element", //$NON-NLS-1$
								"Consistency: Object: Searchable Element: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39618.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Searchable Element: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39618.length), e);
			}
			retval = false;

		}

		if (((objs39618.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Searchable Element", //$NON-NLS-1$
								"Consistency: Object: Searchable Element: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39618.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Searchable Element: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39618.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Searchable Element is a referring class in association: rel.Numb = 9700
		// The participating class is: Search Participant
		class SearchParticipant_c_test39624_c implements ClassQueryInterface_c {
			SearchParticipant_c_test39624_c(java.util.UUID p39625) {
				m_p39625 = p39625;
			}
			private java.util.UUID m_p39625;
			public boolean evaluate(Object candidate) {
				SearchParticipant_c selected = (SearchParticipant_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39625));
				return retval;
			}
		}

		SearchParticipant_c[] objs39623 = SearchParticipant_c
				.SearchParticipantInstances(
						modelRoot,
						new SearchParticipant_c_test39624_c(getParticipant_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39623.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Searchable Element", //$NON-NLS-1$
								"Consistency: Object: Searchable Element: Association: 9700: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39623.length)
										+ " Participant_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Searchable Element: Association: 9700: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39623.length)
										+ " Participant_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 9702
		int objs39626 = 0;
		// Subtype Object: Named Searchable
		class NamedSearchable_c_test39627_c implements ClassQueryInterface_c {
			NamedSearchable_c_test39627_c(java.util.UUID p39628) {
				m_p39628 = p39628;
			}
			private java.util.UUID m_p39628;
			public boolean evaluate(Object candidate) {
				NamedSearchable_c selected = (NamedSearchable_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39628));
				return retval;
			}
		}

		NamedSearchable_c[] objs39629 = NamedSearchable_c
				.NamedSearchableInstances(modelRoot,
						new NamedSearchable_c_test39627_c(getId()));

		objs39626 = objs39626 + objs39629.length;
		// Subtype Object: Action Language Searchable
		class ActionLanguageSearchable_c_test39630_c
				implements
					ClassQueryInterface_c {
			ActionLanguageSearchable_c_test39630_c(java.util.UUID p39631) {
				m_p39631 = p39631;
			}
			private java.util.UUID m_p39631;
			public boolean evaluate(Object candidate) {
				ActionLanguageSearchable_c selected = (ActionLanguageSearchable_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39631));
				return retval;
			}
		}

		ActionLanguageSearchable_c[] objs39632 = ActionLanguageSearchable_c
				.ActionLanguageSearchableInstances(modelRoot,
						new ActionLanguageSearchable_c_test39630_c(getId()));

		objs39626 = objs39626 + objs39632.length;
		// Subtype Object: Description Searchable
		class DescriptionSearchable_c_test39633_c
				implements
					ClassQueryInterface_c {
			DescriptionSearchable_c_test39633_c(java.util.UUID p39634) {
				m_p39634 = p39634;
			}
			private java.util.UUID m_p39634;
			public boolean evaluate(Object candidate) {
				DescriptionSearchable_c selected = (DescriptionSearchable_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p39634));
				return retval;
			}
		}

		DescriptionSearchable_c[] objs39635 = DescriptionSearchable_c
				.DescriptionSearchableInstances(modelRoot,
						new DescriptionSearchable_c_test39633_c(getId()));

		objs39626 = objs39626 + objs39635.length;
		if (objs39626 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Searchable Element", //$NON-NLS-1$
								"Consistency: Object: Searchable Element: Association: 9702: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39626)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Searchable Element: Association: 9702: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39626), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Searchable Element",
				" Operation entered: SearchableElement::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		DescriptionSearchable_c v_descriptionSearchable = DescriptionSearchable_c
				.getOneSP_DSOnR9702(this);

		if (((v_descriptionSearchable != null))) {

			this.unrelateAcrossR9702From(v_descriptionSearchable);

			if (v_descriptionSearchable != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_descriptionSearchable.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_descriptionSearchable));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		ActionLanguageSearchable_c v_actionLanguageSearchable = ActionLanguageSearchable_c
				.getOneSP_ALSOnR9702(this);

		if (((v_actionLanguageSearchable != null))) {

			this.unrelateAcrossR9702From(v_actionLanguageSearchable);

			if (v_actionLanguageSearchable != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_actionLanguageSearchable.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_actionLanguageSearchable));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		NamedSearchable_c v_namedSearchable = NamedSearchable_c
				.getOneSP_NSOnR9702(this);

		if (((v_namedSearchable != null))) {

			this.unrelateAcrossR9702From(v_namedSearchable);

			if (v_namedSearchable != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_namedSearchable.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_namedSearchable));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		SearchParticipant_c v_searchParticipant = SearchParticipant_c
				.getOneSP_SPOnR9700(this);

		if (((v_searchParticipant != null))) {

			this.unrelateAcrossR9700From(v_searchParticipant);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Searchable Element
