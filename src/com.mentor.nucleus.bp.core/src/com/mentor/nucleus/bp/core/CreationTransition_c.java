package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.CreationTransition_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CREATION_TRANSITION extends genericEvent_c {
	public abstract int getEvtcode();
}

public class CreationTransition_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public CreationTransition_c(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_smspd_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
		//extract 28 bit value only            
		m_smspd_idLongBased = 0xfffffff & p_m_smspd_id
				.getLeastSignificantBits();

		Object[] key = {m_sm_id, m_trans_id};
		addInstanceToMap(key);
	}
	static public CreationTransition_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_smspd_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);
		CreationTransition_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_trans_id};
			new_inst = (CreationTransition_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//extract 28 bit value only            
				new_inst.m_smspd_idLongBased = 0xfffffff & p_m_smspd_id
						.getLeastSignificantBits();

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new CreationTransition_c(modelRoot, p_m_trans_id,
					p_m_sm_id, p_m_smevt_id, p_m_smspd_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public CreationTransition_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_trans_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_smspd_id) {
		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);
		CreationTransition_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_sm_id, p_m_trans_id};
			source = (CreationTransition_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_trans_id = IdAssigner.preprocessUUID(p_m_trans_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//extract 28 bit value only            
				source.m_smspd_idLongBased = 0xfffffff & p_m_smspd_id
						.getLeastSignificantBits();

				return source;
			}
		}
		// there is no instance matching the id
		CreationTransition_c new_inst = new CreationTransition_c(modelRoot,
				p_m_trans_id, p_m_sm_id, p_m_smevt_id, p_m_smspd_id);
		return new_inst;
	}
	public CreationTransition_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_trans_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		Object[] key = {m_sm_id, m_trans_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_sm_id, m_trans_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_sm_id != p_newKey) {

			m_sm_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof CreationTransition_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof CreationTransition_c)) {
			return false;
		}

		CreationTransition_c me = (CreationTransition_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((CreationTransition_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((CreationTransition_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getTrans_id()) || IdAssigner.NULL_UUID
						.equals(((CreationTransition_c) elem).getTrans_id())) && this != elem)) {
			return false;
		}
		if (!getTrans_id().equals(((CreationTransition_c) elem).getTrans_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof CreationTransition_c)) {
			return false;
		}

		CreationTransition_c me = (CreationTransition_c) elem;
		if (!getSm_idCachedValue().equals(
				((CreationTransition_c) elem).getSm_idCachedValue()))
			return false;
		if (!getTrans_idCachedValue().equals(
				((CreationTransition_c) elem).getTrans_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_trans_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_smspd_id;
	private long m_smspd_idLongBased;

	// declare association references from this class

	// referring navigation

	Transition_c IsSupertypeTransition;
	public void relateAcrossR507To(Transition_c target) {
		relateAcrossR507To(target, true);
	}
	public void relateAcrossR507To(Transition_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeTransition)
			return; // already related

		if (IsSupertypeTransition != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeTransition != null) {

				IsSupertypeTransition.clearBackPointerR507To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreationTransition_c.relateAcrossR507To(Transition_c target)",
									"Relate performed across R507 from Creation Transition to Transition without unrelate of prior instance.");
				}
			}

			IsSupertypeTransition = target;
			m_trans_id = target.getTrans_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR507To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "507", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR507From(Transition_c target) {
		unrelateAcrossR507From(target, true);
	}
	public void unrelateAcrossR507From(Transition_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeTransition == null)
			return; // already unrelated

		if (target != IsSupertypeTransition) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R507",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR507To(this);
		}

		if (IsSupertypeTransition != null) {

			m_trans_id = IsSupertypeTransition.getTrans_id();
			m_sm_id = IsSupertypeTransition.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeTransition.getSm_idCachedValue();
			}
			IsSupertypeTransition = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "507", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			Transition_c[] targets) {
		return getOneSM_CRTXNOnR507(targets, null);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			Transition_c[] targets, ClassQueryInterface_c test) {
		CreationTransition_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_CRTXNOnR507(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(Transition_c target) {
		return getOneSM_CRTXNOnR507(target, null);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			Transition_c target, boolean loadComponent) {
		return getOneSM_CRTXNOnR507(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			Transition_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_CRTXNOnR507(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test) {
		return getOneSM_CRTXNOnR507(modelRoot, target, test, true);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR507(
			ModelRoot modelRoot, Transition_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_CRTXNOnR507(modelRoot, target, test);
	}
	private static CreationTransition_c find_getOneSM_CRTXNOnR507(
			ModelRoot modelRoot, Transition_c target, ClassQueryInterface_c test) {
		if (target != null) {
			CreationTransition_c source = (CreationTransition_c) target.backPointer_IsSubtypeCreationTransitionIsSubtype_R507;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c[] targets) {
		return getManySM_CRTXNsOnR507(targets, null);
	}
	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c[] targets, boolean loadComponent) {
		return getManySM_CRTXNsOnR507(targets, null, loadComponent);
	}
	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c[] targets, ClassQueryInterface_c test) {
		return getManySM_CRTXNsOnR507(targets, test, true);
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreationTransition_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			CreationTransition_c source = (CreationTransition_c) targets[i].backPointer_IsSubtypeCreationTransitionIsSubtype_R507;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			CreationTransition_c[] ret_set = new CreationTransition_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreationTransition_c[0];
		}
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c target) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_CRTXNsOnR507(targetArray);
		} else {
			CreationTransition_c[] result = new CreationTransition_c[0];
			return result;
		}
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR507(
			Transition_c target, boolean loadComponent) {
		if (target != null) {
			Transition_c[] targetArray = new Transition_c[1];
			targetArray[0] = target;
			return getManySM_CRTXNsOnR507(targetArray, loadComponent);
		} else {
			CreationTransition_c[] result = new CreationTransition_c[0];
			return result;
		}
	}

	// referring navigation

	LocalEvent_c IsAssignedToLocalEvent;
	public void relateAcrossR509To(LocalEvent_c target) {
		relateAcrossR509To(target, true);
	}
	public void relateAcrossR509To(LocalEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsAssignedToLocalEvent)
			return; // already related

		if (IsAssignedToLocalEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsAssignedToLocalEvent != null) {

				IsAssignedToLocalEvent.clearBackPointerR509To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CreationTransition_c.relateAcrossR509To(LocalEvent_c target)",
									"Relate performed across R509 from Creation Transition to Local Event without unrelate of prior instance.");
				}
			}

			IsAssignedToLocalEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR509To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "509", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR509From(LocalEvent_c target) {
		unrelateAcrossR509From(target, true);
	}
	public void unrelateAcrossR509From(LocalEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsAssignedToLocalEvent == null)
			return; // already unrelated

		if (target != IsAssignedToLocalEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R509",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR509To(this);
		}

		if (IsAssignedToLocalEvent != null) {

			m_sm_id = IsAssignedToLocalEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsAssignedToLocalEvent.getSm_idCachedValue();
			}
			m_smevt_id = IsAssignedToLocalEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsAssignedToLocalEvent.getSmevt_idCachedValue();
			}
			IsAssignedToLocalEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "509", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			LocalEvent_c[] targets) {
		return getOneSM_CRTXNOnR509(targets, null);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			LocalEvent_c[] targets, ClassQueryInterface_c test) {
		CreationTransition_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_CRTXNOnR509(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(LocalEvent_c target) {
		return getOneSM_CRTXNOnR509(target, null);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			LocalEvent_c target, boolean loadComponent) {
		return getOneSM_CRTXNOnR509(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			LocalEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_CRTXNOnR509(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			ModelRoot modelRoot, LocalEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_CRTXNOnR509(modelRoot, target, test, true);
	}

	public static CreationTransition_c getOneSM_CRTXNOnR509(
			ModelRoot modelRoot, LocalEvent_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_CRTXNOnR509(modelRoot, target, test);
	}
	private static CreationTransition_c find_getOneSM_CRTXNOnR509(
			ModelRoot modelRoot, LocalEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			CreationTransition_c source = (CreationTransition_c) target.backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c[] targets) {
		return getManySM_CRTXNsOnR509(targets, null);
	}
	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c[] targets, boolean loadComponent) {
		return getManySM_CRTXNsOnR509(targets, null, loadComponent);
	}
	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c[] targets, ClassQueryInterface_c test) {
		return getManySM_CRTXNsOnR509(targets, test, true);
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CreationTransition_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			CreationTransition_c source = (CreationTransition_c) targets[i].backPointer_HasAssignedToItCreationTransitionHasAssignedToIt_R509;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			CreationTransition_c[] ret_set = new CreationTransition_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CreationTransition_c[0];
		}
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c target) {
		if (target != null) {
			LocalEvent_c[] targetArray = new LocalEvent_c[1];
			targetArray[0] = target;
			return getManySM_CRTXNsOnR509(targetArray);
		} else {
			CreationTransition_c[] result = new CreationTransition_c[0];
			return result;
		}
	}

	public static CreationTransition_c[] getManySM_CRTXNsOnR509(
			LocalEvent_c target, boolean loadComponent) {
		if (target != null) {
			LocalEvent_c[] targetArray = new LocalEvent_c[1];
			targetArray[0] = target;
			return getManySM_CRTXNsOnR509(targetArray, loadComponent);
		} else {
			CreationTransition_c[] result = new CreationTransition_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R507
		Transition_c relInst39247 = (Transition_c) baseRoot.getInstanceList(
				Transition_c.class).get(new Object[]{m_trans_id, m_sm_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39247 == null) {
			relInst39247 = (Transition_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Transition_c.class)
					.get(new Object[]{m_trans_id, m_sm_id});
		}
		if (relInst39247 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39247 = (Transition_c) roots[i].getInstanceList(
						Transition_c.class).get(
						new Object[]{m_trans_id, m_sm_id});
				if (relInst39247 != null)
					break;
			}
		}
		//synchronized
		if (relInst39247 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39247) && !isProxy())) {
				relInst39247.relateAcrossR507To(this, notifyChanges);
			}
		}

		if (IsAssignedToLocalEvent == null) {
			// R509
			LocalEvent_c relInst39248 = (LocalEvent_c) baseRoot
					.getInstanceList(LocalEvent_c.class).get(
							new Object[]{m_sm_id, m_smevt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39248 == null) {
				relInst39248 = (LocalEvent_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(LocalEvent_c.class)
						.get(new Object[]{m_sm_id, m_smevt_id});
			}
			if (relInst39248 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39248 = (LocalEvent_c) roots[i].getInstanceList(
							LocalEvent_c.class).get(
							new Object[]{m_sm_id, m_smevt_id});
					if (relInst39248 != null)
						break;
				}
			}
			//synchronized
			if (relInst39248 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39248) && !isProxy())) {
					relInst39248.relateAcrossR509To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R507
		// SM_TXN
		inst = IsSupertypeTransition;
		unrelateAcrossR507From(IsSupertypeTransition, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R509
		// SM_LEVT
		inst = IsAssignedToLocalEvent;
		unrelateAcrossR509From(IsAssignedToLocalEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(CreationTransition_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final CreationTransition_c inst = (CreationTransition_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static CreationTransition_c CreationTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		CreationTransition_c result = findCreationTransitionInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					CreationTransition_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findCreationTransitionInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static CreationTransition_c findCreationTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreationTransition_c x = (CreationTransition_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static CreationTransition_c CreationTransitionInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreationTransitionInstance(modelRoot, test, true);
	}

	public static CreationTransition_c CreationTransitionInstance(
			ModelRoot modelRoot) {
		return CreationTransitionInstance(modelRoot, null, true);
	}

	public static CreationTransition_c[] CreationTransitionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					CreationTransition_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(CreationTransition_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CreationTransition_c x = (CreationTransition_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				CreationTransition_c[] ret_set = new CreationTransition_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new CreationTransition_c[0];
			}
		}
	}
	public static CreationTransition_c[] CreationTransitionInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CreationTransitionInstances(modelRoot, test, true);
	}
	public static CreationTransition_c[] CreationTransitionInstances(
			ModelRoot modelRoot) {
		return CreationTransitionInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Creation Transition.dispose call: ";
		Transition_c testR507Inst2 = Transition_c.getOneSM_TXNOnR507(this,
				false);

		if (testR507Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "507 ";
		}
		LocalEvent_c testR509Inst = LocalEvent_c.getOneSM_LEVTOnR509(this,
				false);

		if (testR509Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "509 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Creation Transition",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("trans_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getTrans_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getTrans_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getTrans_idLongBased() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getTrans_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getTrans_id() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getTrans_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeTransition != null);

	}

	public java.util.UUID getTrans_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_trans_id))
			return m_trans_id;
		else
			return getTrans_id();
	}

	public void setTrans_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_trans_id)) {
				return;
			}
		} else if (m_trans_id != null) {
			if (m_trans_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Trans_id", m_trans_id, newValue, true);
		m_trans_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getSm_idLongBased();
		}
		if (IsAssignedToLocalEvent != null) {
			return IsAssignedToLocalEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeTransition != null) {
			return IsSupertypeTransition.getSm_id();
		}
		if (IsAssignedToLocalEvent != null) {
			return IsAssignedToLocalEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public long getSmevt_idLongBased() {
		if (IsAssignedToLocalEvent != null) {
			return IsAssignedToLocalEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsAssignedToLocalEvent != null) {
			return IsAssignedToLocalEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (m_smspd_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_smspd_id)) {
			return 0xfffffff & m_smspd_id.getLeastSignificantBits();
		}
		return m_smspd_idLongBased;
	}
	public java.util.UUID getSmspd_id() {
		return m_smspd_id;
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Creation Transition", //$NON-NLS-1$
						" Operation entered: Creation Transition::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		CreationTransition_c[] objs = CreationTransition_c
				.CreationTransitionInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition", //$NON-NLS-1$
				" Operation entered: Creation Transition::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class CreationTransition_c_test39250_c implements ClassQueryInterface_c {
			CreationTransition_c_test39250_c(java.util.UUID p39251,
					java.util.UUID p39252) {
				m_p39251 = p39251;
				m_p39252 = p39252;
			}
			private java.util.UUID m_p39251;
			private java.util.UUID m_p39252;
			public boolean evaluate(Object candidate) {
				CreationTransition_c selected = (CreationTransition_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39251))
						& (selected.getTrans_id().equals(m_p39252));
				return retval;
			}
		}

		CreationTransition_c[] objs39249 = CreationTransition_c
				.CreationTransitionInstances(modelRoot,
						new CreationTransition_c_test39250_c(getSm_id(),
								getTrans_id()));

		if (((objs39249.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Creation Transition", //$NON-NLS-1$
								"Consistency: Object: Creation Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39249.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Creation Transition: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39249.length), e);
			}
			retval = false;

		}

		if (((objs39249.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Creation Transition", //$NON-NLS-1$
								"Consistency: Object: Creation Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39249.length)
										+ " SM_ID: " + "Not Printable" + " Trans_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Creation Transition: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39249.length)
										+ " SM_ID: " + "Not Printable" + " Trans_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Creation Transition is a subtype in association: rel.Numb = 507
		// The supertype class is: Transition
		class Transition_c_test39256_c implements ClassQueryInterface_c {
			Transition_c_test39256_c(java.util.UUID p39257,
					java.util.UUID p39258) {
				m_p39257 = p39257;
				m_p39258 = p39258;
			}
			private java.util.UUID m_p39257;
			private java.util.UUID m_p39258;
			public boolean evaluate(Object candidate) {
				Transition_c selected = (Transition_c) candidate;
				boolean retval = false;
				retval = (selected.getTrans_id().equals(m_p39257))
						& (selected.getSm_id().equals(m_p39258));
				return retval;
			}
		}

		Transition_c[] objs39255 = Transition_c.TransitionInstances(modelRoot,
				new Transition_c_test39256_c(getTrans_id(), getSm_id()));

		if (((objs39255.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Creation Transition", //$NON-NLS-1$
								"Consistency: Object: Creation Transition: Association: 507: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39255.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Creation Transition: Association: 507: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39255.length), e);
			}
			retval = false;

		}

		// Creation Transition is a referring class in association: rel.Numb = 509
		// The participating class is: Local Event
		class LocalEvent_c_test39260_c implements ClassQueryInterface_c {
			LocalEvent_c_test39260_c(java.util.UUID p39261,
					java.util.UUID p39262) {
				m_p39261 = p39261;
				m_p39262 = p39262;
			}
			private java.util.UUID m_p39261;
			private java.util.UUID m_p39262;
			public boolean evaluate(Object candidate) {
				LocalEvent_c selected = (LocalEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39261))
						& (selected.getSmevt_id().equals(m_p39262));
				return retval;
			}
		}

		LocalEvent_c[] objs39259 = LocalEvent_c.LocalEventInstances(modelRoot,
				new LocalEvent_c_test39260_c(getSm_id(), getSmevt_id()));

		if (((objs39259.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Creation Transition", //$NON-NLS-1$
								"Consistency: Object: Creation Transition: Association: 509: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39259.length)
										+ " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Creation Transition: Association: 509: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39259.length)
										+ " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final java.util.UUID p_Ooa_id,
			final boolean p_Ooa_typeisimportedclass, final int p_At,
			final java.util.UUID p_Parent_id) {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		if ((p_At == End_c.Middle)) {

			StateMachineEvent_c v_evt = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c
							.getOneSM_SEVTOnR526(LocalEvent_c
									.getOneSM_LEVTOnR509(this)));

			if (((v_evt != null))) {

				v_result = v_evt.Get_event_text();

			}

			else {

				v_result = "No Event Assigned";

			}

			Action_c v_action = Action_c.getOneSM_ACTOnR514(ActionHome_c
					.getOneSM_AHOnR513(TransitionActionHome_c
							.getOneSM_TAHOnR530(Transition_c
									.getOneSM_TXNOnR507(this))));

			if ((v_action != null)
					&& !v_action.getAction_semantics().equals("")) {

				v_result = v_result + "/";

				if (Pref_c
						.Getboolean("bridgepoint_prefs_show_transition_actions")) {

					v_result = v_result + Gd_c.Newline()
							+ v_action.getAction_semantics();

				}

				else {

					v_result = v_result + "...";

				}

			}

		}

		return v_result;

	} // End get_connector_text
	public int Get_style(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Get_style");
		final ModelRoot modelRoot = getModelRoot();
		if ((p_At == End_c.End)) {

			return Style_c.FilledCircle;

		}

		else if ((p_At == End_c.Start)) {

			return Style_c.OpenArrow;

		}

		else {

			return Style_c.None;

		}

	} // End get_style
	public java.util.UUID Get_ooa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Get_ooa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getTrans_id();

	} // End get_ooa_id
	public boolean Actionfilter(final String p_Name, final String p_Value) {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Actionfilter");
		final ModelRoot modelRoot = getModelRoot();
		Transition_c v_trans = Transition_c.getOneSM_TXNOnR507(this);

		return v_trans.Actionfilter(p_Name, p_Value);

	} // End actionFilter
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "No Event Assigned";

		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(LocalEvent_c
						.getOneSM_LEVTOnR509(this)));

		if ((v_evt != null)) {

			v_result = v_evt.Get_name();

		}

		v_result = v_result + " to creation state";

		StateMachineState_c v_destState = StateMachineState_c
				.getOneSM_STATEOnR506(Transition_c.getOneSM_TXNOnR507(this));

		if ((v_destState != null)) {

			v_result = v_result + ": " + v_destState.getName();

		}

		return v_result;

	} // End get_name
	public boolean Mergestatemachineeventcreationevent(
			final java.util.UUID p_Eventid) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Creation Transition",
						" Operation entered: CreationTransition::Mergestatemachineeventcreationevent");
		final ModelRoot modelRoot = getModelRoot();
		Transition_c v_transition = Transition_c.getOneSM_TXNOnR507(this);

		return v_transition.Mergestatemachineeventassignedlocalevent(p_Eventid);

	} // End mergeStateMachineEventCreationEvent
	public String Getdescription() {
		Ooaofooa.log.println(ILogger.OPERATION, "Creation Transition",
				" Operation entered: CreationTransition::Getdescription");
		final ModelRoot modelRoot = getModelRoot();
		Transition_c v_transition = Transition_c.getOneSM_TXNOnR507(this);

		return v_transition.Getdescription();

	} // End getDescription

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		if (adapter == IActionFilter.class) {
			return CreationTransitionActionFilter.getSingleton();
		}
		return null;
	}
} // end Creation Transition
