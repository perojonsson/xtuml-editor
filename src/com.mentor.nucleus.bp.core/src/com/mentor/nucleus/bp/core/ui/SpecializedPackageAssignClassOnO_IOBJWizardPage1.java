package com.mentor.nucleus.bp.core.ui;
//====================================================================
//
// File:    SpecializedPackageAssignClassOnO_IOBJWizardPage1.java
//
// WARNING: Do not edit this generated file
// Generated by arc/page.inc
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

import java.util.ArrayList;
import java.util.List;

public class SpecializedPackageAssignClassOnO_IOBJWizardPage1
		extends
			PtWizardPage implements Listener {
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";

	IWorkbench workbench;
	IStructuredSelection selection;

	// widgets on this page (public for unit tests)
	public Combo SubsystemCombo;
	public Label SubsystemLabel;

	// cache for user choices
	Subsystem_c Subsystem = null;
	Subsystem_c[] SubsystemInstances;

	/**
	 * Constructors for SpecializedPackageAssignClassOnO_IOBJWizardPage1.
	 */
	public SpecializedPackageAssignClassOnO_IOBJWizardPage1() {
		super("");
		init();
	}

	public SpecializedPackageAssignClassOnO_IOBJWizardPage1(String name) {
		super(name);
		init();
	}

	private void init() {
		setTitle("Assign Class");
		setDescription("Select class this imported class represents");
	}

	public void onPageEntry() {
		Ooaofooa modelRoot = Selection
				.getModelRoot((StructuredSelection) ((SpecializedPackageAssignClassOnO_IOBJWizard) getWizard())
						.getSelection());

		// cache for previous user selections
		ModelClass_c v_Class = ((SpecializedPackageAssignClassOnO_IOBJWizard) getWizard()).v_Class;

		// cache for context
		ImportedClass_c v_iobj = ((SpecializedPackageAssignClassOnO_IOBJWizard) getWizard()).v_iobj;

		// select related by where USER::selectOne
		Subsystem_c[] v_SubsystemInstances = Subsystem_c
				.getManyS_SSsOnR1(Domain_c.getManyS_DOMsOnR1(Subsystem_c
						.getManyS_SSsOnR3(v_iobj)));
		Subsystem_c v_Subsystem = null;
		int SubsystemInstCount;
		int SubsystemResultCount = 0;
		for (SubsystemInstCount = 0; SubsystemInstCount < v_SubsystemInstances.length; SubsystemInstCount++) {
			Subsystem_c selected = v_SubsystemInstances[SubsystemInstCount];
			if (User_c.Selectone(selected.getSs_id())
					&& !selected.getSs_id().equals(v_iobj.getSs_id())) {
				SubsystemResultCount++;
			}
		}
		this.SubsystemInstances = new Subsystem_c[SubsystemResultCount];
		SubsystemResultCount = 0;
		for (SubsystemInstCount = 0; SubsystemInstCount < v_SubsystemInstances.length; SubsystemInstCount++) {
			Subsystem_c selected = v_SubsystemInstances[SubsystemInstCount];
			if (User_c.Selectone(selected.getSs_id())
					&& !selected.getSs_id().equals(v_iobj.getSs_id())) {
				this.SubsystemInstances[SubsystemResultCount] = selected;
				SubsystemResultCount++;
			}
		}
		SubsystemCombo.removeAll();
		for (SubsystemInstCount = 0; SubsystemInstCount < SubsystemResultCount; SubsystemInstCount++)
			SubsystemCombo
					.add(((Subsystem_c) this.SubsystemInstances[SubsystemInstCount])
							.getName());
		if (SubsystemResultCount == 1) {
			SubsystemCombo.select(0);
			updateSelectedSubsystem();
		}

		if (((v_Subsystem != null))) {

			if (((v_Class != null))) {

			}

		}

	}

	public void createControl(Composite parent) {
		// create the composite to hold the widgets   
		GridData gd = null;
		Composite composite = new Composite(parent, SWT.NULL);

		// create the desired layout for this wizard page
		GridLayout gl = new GridLayout();
		int ncol = 5;
		gl.numColumns = ncol;
		composite.setLayout(gl);

		SubsystemLabel = new Label(composite, SWT.NONE);
		SubsystemLabel.setText("Subsystem");
		SubsystemCombo = new Combo(composite, SWT.BORDER | SWT.READ_ONLY);
		SubsystemCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		// set the composite as the control for this page
		setControl(composite);
		onPageEntry(); // Initialize the ui widget contents
		addListeners();
	}

	private void addListeners() {
		SubsystemCombo.addListener(SWT.Selection, this);
	}

	// public for unit tests
	public void updateSelectedSubsystem() {
		this.Subsystem = SubsystemInstances[SubsystemCombo.getSelectionIndex()];
		((SpecializedPackageAssignClassOnO_IOBJWizard) getWizard()).v_Subsystem = this.Subsystem;
	}

	/**
	 * @see Listener#handleEvent(Event)
	 */
	public void handleEvent(Event event) {
		if (event.widget == SubsystemCombo) {
			updateSelectedSubsystem();
		}
		getWizard().getContainer().updateButtons();
	}

	public boolean isPageComplete() {
		boolean isPageComplete = true;
		if (Subsystem == null)
			isPageComplete = false;
		return isPageComplete;
	}

	public IWizardPage getNextPage() {
		((SpecializedPackageAssignClassOnO_IOBJWizard) getWizard()).v_Subsystem = Subsystem;
		PtWizardPage page = (PtWizardPage) getWizard().getNextPage(this);
		page.onPageEntry();
		return page;
	}

	/**
	 * @see IWizardPage#canFlipToNextPage()
	 */
	public boolean canFlipToNextPage() {
		if ((PtWizardPage) getWizard().getNextPage(this) == null)
			return false;
		if (Subsystem == null)
			return false;
		return true;
	}

}
