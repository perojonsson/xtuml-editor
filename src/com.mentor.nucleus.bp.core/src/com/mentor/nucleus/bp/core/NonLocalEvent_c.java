package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.NonLocalEvent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_NON_LOCAL_EVENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class NonLocalEvent_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public NonLocalEvent_c(ModelRoot modelRoot, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id,
			java.util.UUID p_m_polysmevt_id, java.util.UUID p_m_polysm_id,
			java.util.UUID p_m_polysmspd_id, String p_m_local_meaning) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_polysmevt_id = IdAssigner.preprocessUUID(p_m_polysmevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_polysm_id = IdAssigner.preprocessUUID(p_m_polysm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_polysmspd_id = IdAssigner.preprocessUUID(p_m_polysmspd_id);
		//extract 28 bit value only            
		m_polysmspd_idLongBased = 0xfffffff & p_m_polysmspd_id
				.getLeastSignificantBits();
		m_local_meaning = p_m_local_meaning;
		// default value for m_name

		Object[] key = {m_smspd_id, m_sm_id, m_smevt_id};
		addInstanceToMap(key);
	}
	static public NonLocalEvent_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, java.util.UUID p_m_polysmevt_id,
			java.util.UUID p_m_polysm_id, java.util.UUID p_m_polysmspd_id,
			String p_m_local_meaning, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);
		NonLocalEvent_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smspd_id, p_m_sm_id, p_m_smevt_id};
			new_inst = (NonLocalEvent_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_polysmevt_id = IdAssigner
						.preprocessUUID(p_m_polysmevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_polysm_id = IdAssigner.preprocessUUID(p_m_polysm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_polysmspd_id = IdAssigner
						.preprocessUUID(p_m_polysmspd_id);
				//extract 28 bit value only            
				new_inst.m_polysmspd_idLongBased = 0xfffffff & p_m_polysmspd_id
						.getLeastSignificantBits();
				new_inst.m_local_meaning = p_m_local_meaning;
				// default value for m_name

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new NonLocalEvent_c(modelRoot, p_m_smevt_id, p_m_sm_id,
					p_m_smspd_id, p_m_polysmevt_id, p_m_polysm_id,
					p_m_polysmspd_id, p_m_local_meaning);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public NonLocalEvent_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smevt_id, java.util.UUID p_m_sm_id,
			java.util.UUID p_m_smspd_id, java.util.UUID p_m_polysmevt_id,
			java.util.UUID p_m_polysm_id, java.util.UUID p_m_polysmspd_id,
			String p_m_local_meaning) {
		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);
		NonLocalEvent_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smspd_id, p_m_sm_id, p_m_smevt_id};
			source = (NonLocalEvent_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_polysmevt_id = IdAssigner
						.preprocessUUID(p_m_polysmevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_polysm_id = IdAssigner.preprocessUUID(p_m_polysm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_polysmspd_id = IdAssigner
						.preprocessUUID(p_m_polysmspd_id);
				//extract 28 bit value only            
				source.m_polysmspd_idLongBased = 0xfffffff & p_m_polysmspd_id
						.getLeastSignificantBits();
				source.m_local_meaning = p_m_local_meaning;
				// default value for m_name

				return source;
			}
		}
		// there is no instance matching the id
		NonLocalEvent_c new_inst = new NonLocalEvent_c(modelRoot, p_m_smevt_id,
				p_m_sm_id, p_m_smspd_id, p_m_polysmevt_id, p_m_polysm_id,
				p_m_polysmspd_id, p_m_local_meaning);
		return new_inst;
	}
	public NonLocalEvent_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smevt_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		m_polysmevt_id = IdAssigner.NULL_UUID;
		m_polysm_id = IdAssigner.NULL_UUID;
		m_polysmspd_id = IdAssigner.NULL_UUID;
		m_local_meaning = "";
		m_name = "";
		Object[] key = {m_smspd_id, m_sm_id, m_smevt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smspd_id, m_sm_id, m_smevt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smspd_id != p_newKey) {

			m_smspd_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof NonLocalEvent_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof NonLocalEvent_c)) {
			return false;
		}

		NonLocalEvent_c me = (NonLocalEvent_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((NonLocalEvent_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(((NonLocalEvent_c) elem).getSmspd_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((NonLocalEvent_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((NonLocalEvent_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((NonLocalEvent_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(((NonLocalEvent_c) elem).getSmevt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof NonLocalEvent_c)) {
			return false;
		}

		NonLocalEvent_c me = (NonLocalEvent_c) elem;
		if (!getSmspd_idCachedValue().equals(
				((NonLocalEvent_c) elem).getSmspd_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((NonLocalEvent_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmevt_idCachedValue().equals(
				((NonLocalEvent_c) elem).getSmevt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smspd_id;
	private java.util.UUID m_polysmevt_id;
	private java.util.UUID m_polysm_id;
	private java.util.UUID m_polysmspd_id;
	private long m_polysmspd_idLongBased;
	private String m_local_meaning;
	private String m_name;

	// declare association references from this class

	// referring navigation

	SemEvent_c IsSupertypeSemEvent;
	public void relateAcrossR526To(SemEvent_c target) {
		relateAcrossR526To(target, true);
	}
	public void relateAcrossR526To(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeSemEvent)
			return; // already related

		if (IsSupertypeSemEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeSemEvent != null) {

				IsSupertypeSemEvent.clearBackPointerR526To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"NonLocalEvent_c.relateAcrossR526To(SemEvent_c target)",
									"Relate performed across R526 from Non Local Event to SEM Event without unrelate of prior instance.");
				}
			}

			IsSupertypeSemEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR526To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR526From(SemEvent_c target) {
		unrelateAcrossR526From(target, true);
	}
	public void unrelateAcrossR526From(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeSemEvent == null)
			return; // already unrelated

		if (target != IsSupertypeSemEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R526",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR526To(this);
		}

		if (IsSupertypeSemEvent != null) {

			m_smevt_id = IsSupertypeSemEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = IsSupertypeSemEvent.getSmevt_idCachedValue();
			}
			m_sm_id = IsSupertypeSemEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsSupertypeSemEvent.getSm_idCachedValue();
			}
			m_smspd_id = IsSupertypeSemEvent.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = IsSupertypeSemEvent.getSmspd_idCachedValue();
			}
			IsSupertypeSemEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "526", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(SemEvent_c[] targets) {
		return getOneSM_NLEVTOnR526(targets, null);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(SemEvent_c[] targets,
			ClassQueryInterface_c test) {
		NonLocalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_NLEVTOnR526(targets[i], test);
			}
		}

		return ret_val;
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(SemEvent_c target) {
		return getOneSM_NLEVTOnR526(target, null);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(SemEvent_c target,
			boolean loadComponent) {
		return getOneSM_NLEVTOnR526(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(SemEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_NLEVTOnR526(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_NLEVTOnR526(modelRoot, target, test, true);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR526(ModelRoot modelRoot,
			SemEvent_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_NLEVTOnR526(modelRoot, target, test);
	}
	private static NonLocalEvent_c find_getOneSM_NLEVTOnR526(
			ModelRoot modelRoot, SemEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			NonLocalEvent_c source = (NonLocalEvent_c) target.backPointer_IsSubtypeNonLocalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(SemEvent_c[] targets) {
		return getManySM_NLEVTsOnR526(targets, null);
	}
	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(
			SemEvent_c[] targets, boolean loadComponent) {
		return getManySM_NLEVTsOnR526(targets, null, loadComponent);
	}
	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(
			SemEvent_c[] targets, ClassQueryInterface_c test) {
		return getManySM_NLEVTsOnR526(targets, test, true);
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(
			SemEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new NonLocalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			NonLocalEvent_c source = (NonLocalEvent_c) targets[i].backPointer_IsSubtypeNonLocalEventIsSubtype_R526;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			NonLocalEvent_c[] ret_set = new NonLocalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NonLocalEvent_c[0];
		}
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(SemEvent_c target) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_NLEVTsOnR526(targetArray);
		} else {
			NonLocalEvent_c[] result = new NonLocalEvent_c[0];
			return result;
		}
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR526(SemEvent_c target,
			boolean loadComponent) {
		if (target != null) {
			SemEvent_c[] targetArray = new SemEvent_c[1];
			targetArray[0] = target;
			return getManySM_NLEVTsOnR526(targetArray, loadComponent);
		} else {
			NonLocalEvent_c[] result = new NonLocalEvent_c[0];
			return result;
		}
	}

	// referring navigation

	PolymorphicEvent_c IsDefinedByPolymorphicEvent;
	public void relateAcrossR527To(PolymorphicEvent_c target) {
		relateAcrossR527To(target, true);
	}
	public void relateAcrossR527To(PolymorphicEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsDefinedByPolymorphicEvent)
			return; // already related

		if (IsDefinedByPolymorphicEvent != target) {

			Object oldKey = getInstanceKey();

			if (IsDefinedByPolymorphicEvent != null) {
				UmlProblem
						.removeXtUMLProblem(this, IsDefinedByPolymorphicEvent);

				IsDefinedByPolymorphicEvent.clearBackPointerR527To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"NonLocalEvent_c.relateAcrossR527To(PolymorphicEvent_c target)",
									"Relate performed across R527 from Non Local Event to Polymorphic Event without unrelate of prior instance.");
				}
			}

			IsDefinedByPolymorphicEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_polysmevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_polysm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR527To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "527", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR527From(PolymorphicEvent_c target) {
		unrelateAcrossR527From(target, true);
	}
	public void unrelateAcrossR527From(PolymorphicEvent_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsDefinedByPolymorphicEvent == null)
			return; // already unrelated

		if (target != IsDefinedByPolymorphicEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R527",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR527To(this);
		}

		if (IsDefinedByPolymorphicEvent != null) {

			m_polysmevt_id = IsDefinedByPolymorphicEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_polysmevt_id)) {
				m_polysmevt_id = IsDefinedByPolymorphicEvent
						.getSmevt_idCachedValue();
			}
			m_polysm_id = IsDefinedByPolymorphicEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_polysm_id)) {
				m_polysm_id = IsDefinedByPolymorphicEvent.getSm_idCachedValue();
			}
			IsDefinedByPolymorphicEvent = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "527", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(
			PolymorphicEvent_c[] targets) {
		return getOneSM_NLEVTOnR527(targets, null);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(
			PolymorphicEvent_c[] targets, ClassQueryInterface_c test) {
		NonLocalEvent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_NLEVTOnR527(targets[i], test);
			}
		}

		return ret_val;
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(PolymorphicEvent_c target) {
		return getOneSM_NLEVTOnR527(target, null);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(
			PolymorphicEvent_c target, boolean loadComponent) {
		return getOneSM_NLEVTOnR527(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(
			PolymorphicEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_NLEVTOnR527(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(ModelRoot modelRoot,
			PolymorphicEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_NLEVTOnR527(modelRoot, target, test, true);
	}

	public static NonLocalEvent_c getOneSM_NLEVTOnR527(ModelRoot modelRoot,
			PolymorphicEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		NonLocalEvent_c result = null;

		result = find_getOneSM_NLEVTOnR527(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// not a Containment Relation
			List comps = PersistenceManager.findAllComponents(modelRoot,
					NonLocalEvent_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneSM_NLEVTOnR527(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static NonLocalEvent_c find_getOneSM_NLEVTOnR527(
			ModelRoot modelRoot, PolymorphicEvent_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527) {
				for (int i = 0; i < target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
						.size(); ++i) {
					NonLocalEvent_c source = (NonLocalEvent_c) target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c[] targets) {
		return getManySM_NLEVTsOnR527(targets, null);
	}
	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c[] targets, boolean loadComponent) {
		return getManySM_NLEVTsOnR527(targets, null, loadComponent);
	}
	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c[] targets, ClassQueryInterface_c test) {
		return getManySM_NLEVTsOnR527(targets, test, true);
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new NonLocalEvent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					NonLocalEvent_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527) {
				for (int j = 0; j < targets[i].backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
						.size(); ++j) {
					NonLocalEvent_c source = (NonLocalEvent_c) targets[i].backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			NonLocalEvent_c[] ret_set = new NonLocalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NonLocalEvent_c[0];
		}
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c target) {
		return getManySM_NLEVTsOnR527(target, null);
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c target, boolean loadComponent) {
		return getManySM_NLEVTsOnR527(target, null, loadComponent);
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c target, ClassQueryInterface_c test) {
		return getManySM_NLEVTsOnR527(target, test, true);
	}

	public static NonLocalEvent_c[] getManySM_NLEVTsOnR527(
			PolymorphicEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new NonLocalEvent_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//not a Containment Relation
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					NonLocalEvent_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527) {
			for (int i = 0; i < target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
					.size(); ++i) {
				NonLocalEvent_c source = (NonLocalEvent_c) target.backPointer_IsAliasedByNonLocalEventIsAliasedBy_R527
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			NonLocalEvent_c[] ret_set = new NonLocalEvent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new NonLocalEvent_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R526
		SemEvent_c relInst39067 = (SemEvent_c) baseRoot.getInstanceList(
				SemEvent_c.class).get(
				new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst39067 == null) {
			relInst39067 = (SemEvent_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(SemEvent_c.class)
					.get(new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		}
		if (relInst39067 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst39067 = (SemEvent_c) roots[i].getInstanceList(
						SemEvent_c.class).get(
						new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
				if (relInst39067 != null)
					break;
			}
		}
		//synchronized
		if (relInst39067 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst39067) && !isProxy())) {
				relInst39067.relateAcrossR526To(this, notifyChanges);
			}
		}

		if (IsDefinedByPolymorphicEvent == null) {
			// R527
			PolymorphicEvent_c relInst39068 = (PolymorphicEvent_c) baseRoot
					.getInstanceList(PolymorphicEvent_c.class).get(
							new Object[]{m_polysm_id, m_polysmevt_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst39068 == null) {
				relInst39068 = (PolymorphicEvent_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(PolymorphicEvent_c.class)
						.get(new Object[]{m_polysm_id, m_polysmevt_id});
			}
			if (relInst39068 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst39068 = (PolymorphicEvent_c) roots[i]
							.getInstanceList(PolymorphicEvent_c.class).get(
									new Object[]{m_polysm_id, m_polysmevt_id});
					if (relInst39068 != null)
						break;
				}
			}
			//synchronized
			if (relInst39068 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst39068) && !isProxy())) {
					relInst39068.relateAcrossR527To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R526
		// SM_SEVT
		inst = IsSupertypeSemEvent;
		unrelateAcrossR526From(IsSupertypeSemEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R527
		// SM_PEVT
		inst = IsDefinedByPolymorphicEvent;
		unrelateAcrossR527From(IsDefinedByPolymorphicEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(NonLocalEvent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final NonLocalEvent_c inst = (NonLocalEvent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static NonLocalEvent_c NonLocalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		NonLocalEvent_c result = findNonLocalEventInstance(modelRoot, test,
				loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					NonLocalEvent_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findNonLocalEventInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static NonLocalEvent_c findNonLocalEventInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NonLocalEvent_c x = (NonLocalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static NonLocalEvent_c NonLocalEventInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return NonLocalEventInstance(modelRoot, test, true);
	}

	public static NonLocalEvent_c NonLocalEventInstance(ModelRoot modelRoot) {
		return NonLocalEventInstance(modelRoot, null, true);
	}

	public static NonLocalEvent_c[] NonLocalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					NonLocalEvent_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(NonLocalEvent_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				NonLocalEvent_c x = (NonLocalEvent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				NonLocalEvent_c[] ret_set = new NonLocalEvent_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new NonLocalEvent_c[0];
			}
		}
	}
	public static NonLocalEvent_c[] NonLocalEventInstances(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return NonLocalEventInstances(modelRoot, test, true);
	}
	public static NonLocalEvent_c[] NonLocalEventInstances(ModelRoot modelRoot) {
		return NonLocalEventInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Non Local Event.dispose call: ";
		SemEvent_c testR526Inst2 = SemEvent_c.getOneSM_SEVTOnR526(this, false);

		if (testR526Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "526 ";
		}
		PolymorphicEvent_c testR527Inst = PolymorphicEvent_c
				.getOneSM_PEVTOnR527(this, false);

		if (testR527Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "527 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Non Local Event",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		if (attributeName.equals("polysmevt_id")) {
			return true;
		}
		if (attributeName.equals("polysm_id")) {
			return true;
		}
		if (attributeName.equals("polysmspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmevt_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeSemEvent != null);

	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public void setSm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_sm_id)) {
				return;
			}
		} else if (m_sm_id != null) {
			if (m_sm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sm_id",
				m_sm_id, newValue, true);
		m_sm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmspd_idLongBased() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (IsSupertypeSemEvent != null) {
			return IsSupertypeSemEvent.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPolysmevt_idLongBased() {
		if (IsDefinedByPolymorphicEvent != null) {
			return IsDefinedByPolymorphicEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPolysmevt_id() {
		if (IsDefinedByPolymorphicEvent != null) {
			return IsDefinedByPolymorphicEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPolysmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_polysmevt_id))
			return m_polysmevt_id;
		else
			return getPolysmevt_id();
	}

	public void setPolysmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_polysmevt_id)) {
				return;
			}
		} else if (m_polysmevt_id != null) {
			if (m_polysmevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Polysmevt_id", m_polysmevt_id, newValue, true);
		m_polysmevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPolysm_idLongBased() {
		if (IsDefinedByPolymorphicEvent != null) {
			return IsDefinedByPolymorphicEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getPolysm_id() {
		if (IsDefinedByPolymorphicEvent != null) {
			return IsDefinedByPolymorphicEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getPolysm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_polysm_id))
			return m_polysm_id;
		else
			return getPolysm_id();
	}

	public void setPolysm_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_polysm_id)) {
				return;
			}
		} else if (m_polysm_id != null) {
			if (m_polysm_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Polysm_id", m_polysm_id, newValue, true);
		m_polysm_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getPolysmspd_idLongBased() {
		if (m_polysmspd_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_polysmspd_id)) {
			return 0xfffffff & m_polysmspd_id.getLeastSignificantBits();
		}
		return m_polysmspd_idLongBased;
	}
	public java.util.UUID getPolysmspd_id() {
		return m_polysmspd_id;
	}

	public void setPolysmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_polysmspd_id)) {
				return;
			}
		} else if (m_polysmspd_id != null) {
			if (m_polysmspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Polysmspd_id", m_polysmspd_id, newValue, true);
		m_polysmspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getLocal_meaning() {
		return m_local_meaning;
	}

	public void setLocal_meaning(String newValue) {
		if (newValue != null) {
			if (newValue.equals(m_local_meaning)) {
				return;
			}
		} else if (m_local_meaning != null) {
			if (m_local_meaning.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Local_meaning", m_local_meaning, newValue, true);
		m_local_meaning = newValue;
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public String getName() {
		ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(this));

		if (((v_evt != null))) {

			return v_evt.Get_name();

		}

		else {

			return Ooaofooa.Getorphanedelementname(modelRoot);

		}

	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event", //$NON-NLS-1$
				" Operation entered: Non Local Event::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		NonLocalEvent_c[] objs = NonLocalEvent_c.NonLocalEventInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event", //$NON-NLS-1$
				" Operation entered: Non Local Event::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class NonLocalEvent_c_test39070_c implements ClassQueryInterface_c {
			NonLocalEvent_c_test39070_c(java.util.UUID p39071,
					java.util.UUID p39072, java.util.UUID p39073) {
				m_p39071 = p39071;
				m_p39072 = p39072;
				m_p39073 = p39073;
			}
			private java.util.UUID m_p39071;
			private java.util.UUID m_p39072;
			private java.util.UUID m_p39073;
			public boolean evaluate(Object candidate) {
				NonLocalEvent_c selected = (NonLocalEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmspd_id().equals(m_p39071))
						& (selected.getSm_id().equals(m_p39072))
						& (selected.getSmevt_id().equals(m_p39073));
				return retval;
			}
		}

		NonLocalEvent_c[] objs39069 = NonLocalEvent_c.NonLocalEventInstances(
				modelRoot, new NonLocalEvent_c_test39070_c(getSmspd_id(),
						getSm_id(), getSmevt_id()));

		if (((objs39069.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Non Local Event", //$NON-NLS-1$
								"Consistency: Object: Non Local Event: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39069.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin.logError(
						"Consistency: Object: Non Local Event: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs39069.length), e);
			}
			retval = false;

		}

		if (((objs39069.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Non Local Event", //$NON-NLS-1$
								"Consistency: Object: Non Local Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39069.length)
										+ " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Non Local Event: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39069.length)
										+ " SMspd_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Non Local Event is a subtype in association: rel.Numb = 526
		// The supertype class is: SEM Event
		class SemEvent_c_test39077_c implements ClassQueryInterface_c {
			SemEvent_c_test39077_c(java.util.UUID p39078,
					java.util.UUID p39079, java.util.UUID p39080) {
				m_p39078 = p39078;
				m_p39079 = p39079;
				m_p39080 = p39080;
			}
			private java.util.UUID m_p39078;
			private java.util.UUID m_p39079;
			private java.util.UUID m_p39080;
			public boolean evaluate(Object candidate) {
				SemEvent_c selected = (SemEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39078))
						& (selected.getSm_id().equals(m_p39079))
						& (selected.getSmspd_id().equals(m_p39080));
				return retval;
			}
		}

		SemEvent_c[] objs39076 = SemEvent_c.SemEventInstances(modelRoot,
				new SemEvent_c_test39077_c(getSmevt_id(), getSm_id(),
						getSmspd_id()));

		if (((objs39076.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Non Local Event", //$NON-NLS-1$
								"Consistency: Object: Non Local Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs39076.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Non Local Event: Association: 526: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39076.length), e);
			}
			retval = false;

		}

		// Non Local Event is a referring class in association: rel.Numb = 527
		// The participating class is: Polymorphic Event
		class PolymorphicEvent_c_test39082_c implements ClassQueryInterface_c {
			PolymorphicEvent_c_test39082_c(java.util.UUID p39083,
					java.util.UUID p39084) {
				m_p39083 = p39083;
				m_p39084 = p39084;
			}
			private java.util.UUID m_p39083;
			private java.util.UUID m_p39084;
			public boolean evaluate(Object candidate) {
				PolymorphicEvent_c selected = (PolymorphicEvent_c) candidate;
				boolean retval = false;
				retval = (selected.getSmevt_id().equals(m_p39083))
						& (selected.getSm_id().equals(m_p39084));
				return retval;
			}
		}

		PolymorphicEvent_c[] objs39081 = PolymorphicEvent_c
				.PolymorphicEventInstances(modelRoot,
						new PolymorphicEvent_c_test39082_c(getPolysmevt_id(),
								getPolysm_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs39081.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Non Local Event", //$NON-NLS-1$
								"Consistency: Object: Non Local Event: Association: 527: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs39081.length)
										+ " polySMevt_ID: " + "Not Printable" + " polySM_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Non Local Event: Association: 527: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs39081.length)
										+ " polySMevt_ID: " + "Not Printable" + " polySM_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event",
				" Operation entered: NonLocalEvent::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(this));

		return v_evt.Get_name();

	} // End get_name
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event",
				" Operation entered: NonLocalEvent::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SemEvent_c v_sevt = SemEvent_c.getOneSM_SEVTOnR526(this);

		this.unrelateAcrossR526From(v_sevt);

		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(v_sevt);

		if (((v_evt != null))) {

			if (v_evt != null) {
				v_evt.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		PolymorphicEvent_c v_pevt = PolymorphicEvent_c
				.getOneSM_PEVTOnR527(this);

		if (((v_pevt != null))) {

			this.unrelateAcrossR527From(v_pevt);

			if (v_pevt != null) {
				v_pevt.Migratetolocalevent();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Checkifnolongerassigned() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event",
				" Operation entered: NonLocalEvent::Checkifnolongerassigned");
		final ModelRoot modelRoot = getModelRoot();
		NewStateTransition_c[] v_assignments = NewStateTransition_c
				.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c
						.getManySM_SEMEsOnR503(SemEvent_c
								.getManySM_SEVTsOnR526(this)));

		EventIgnored_c[] v_ignores = EventIgnored_c
				.getManySM_EIGNsOnR504(StateEventMatrixEntry_c
						.getManySM_SEMEsOnR503(SemEvent_c
								.getManySM_SEVTsOnR526(this)));

		if (((v_assignments.length == 0) && (v_ignores.length == 0))) {

			StateMachineEvent_c v_event = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(this));

			PolymorphicEvent_c v_polyEvent = PolymorphicEvent_c
					.getOneSM_PEVTOnR527(this);

			if (v_event != null) {
				v_event.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

			if (v_polyEvent != null) {
				v_polyEvent.Migratetolocalevent();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

	} // End checkIfNoLongerAssigned
	public void Resolveinheritedevent() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event",
				" Operation entered: NonLocalEvent::Resolveinheritedevent");
		final ModelRoot modelRoot = getModelRoot();
		PolymorphicEvent_c v_poly = PolymorphicEvent_c
				.getOneSM_PEVTOnR527(this);

		if (((v_poly != null) && !Util_c.Isproxy(Converttoinstance()))) {

			boolean v_remove = false;

			StateMachineEvent_c v_evt = StateMachineEvent_c
					.getOneSM_EVTOnR525(v_poly);

			StateMachineEvent_c v_nlevt = StateMachineEvent_c
					.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(this));

			StateMachine_c v_sm = StateMachine_c.getOneSM_SMOnR502(v_nlevt);

			ModelClass_c v_clazz = ModelClass_c
					.getOneO_OBJOnR519(ClassStateMachine_c
							.getOneSM_ASMOnR517(v_sm));

			if (((v_clazz == null))) {

				v_clazz = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c
						.getOneSM_ISMOnR517(v_sm));

			}

			ModelClass_c v_superClass = (ModelClass_c) modelRoot
					.getInstanceList(ModelClass_c.class).getGlobal(null,
							Gd_c.Null_unique_id());

			if (((v_evt != null))) {

				StateMachine_c v_superSm = StateMachine_c
						.getOneSM_SMOnR502(v_evt);

				v_superClass = ModelClass_c
						.getOneO_OBJOnR519(ClassStateMachine_c
								.getOneSM_ASMOnR517(v_superSm));

				if (((v_superClass == null))) {

					v_superClass = ModelClass_c
							.getOneO_OBJOnR518(InstanceStateMachine_c
									.getOneSM_ISMOnR517(v_superSm));

				}

				if (((v_superClass != null))) {

					if ((!v_superClass.Issupertypeof(v_clazz.getObj_id()))) {

						v_remove = true;

					}

					else {

						if ((!Util_c.Isproxy(v_evt.Converttoinstance()))) {

							return;

						}

						ModelClass_c v_originalClass = ModelClass_c
								.getOneO_OBJOnR518(InstanceStateMachine_c
										.getOneSM_ISMOnR517(StateMachine_c
												.getOneSM_SMOnR502(v_evt)));

						java.util.UUID v_iobjID = v_clazz
								.Findimportedsupertypeclass(v_originalClass
										.getObj_id());

						if ((!v_iobjID.equals(Gd_c.Null_unique_id()))) {

							ImportedClass_c v_iobj = (ImportedClass_c) modelRoot
									.getInstanceList(ImportedClass_c.class)
									.getGlobal(null, v_iobjID);

							Subsystem_c v_iobjSS = Subsystem_c
									.getOneS_SSOnR3(v_iobj);

							Subsystem_c v_clazzSS = Subsystem_c
									.getOneS_SSOnR2(v_clazz);

							if ((v_iobjSS != v_clazzSS)) {

								if (v_iobj != null) {
									v_iobj.unrelateAcrossR3From(v_iobjSS);
								} else {
									Throwable t = new Throwable();
									t.fillInStackTrace();
									CorePlugin
											.logError(
													"Unrelate attempted on null left hand instance.",
													t);
								}

								if (v_iobj != null) {
									v_iobj.relateAcrossR3To(v_clazzSS);
								} else {
									Throwable t = new Throwable();
									t.fillInStackTrace();
									CorePlugin
											.logError(
													"Relate attempted on null left hand instance.",
													t);
								}

							}

							if (v_iobj != null) {
								v_iobj.Resolvemodelclass();
							} else {
								Throwable t = new Throwable();
								t.fillInStackTrace();
								CorePlugin
										.logError(
												"Attempted to call an operation on a null instance.",
												t);
							}

							ModelClass_c v_resolvedClass = ModelClass_c
									.getOneO_OBJOnR101(v_iobj);

							if (((v_resolvedClass == null))) {

								v_remove = true;

							}

							else {

								if ((v_originalClass != v_resolvedClass)) {

									NonLocalEvent_c[] v_otherNLevts = NonLocalEvent_c
											.getManySM_NLEVTsOnR526(SemEvent_c
													.getManySM_SEVTsOnR525(StateMachineEvent_c
															.getManySM_EVTsOnR502(v_sm)));

									NonLocalEvent_c v_otherNLevt = null;
									for (int i37212 = 0; i37212 < v_otherNLevts.length; i37212++) {
										v_otherNLevt = v_otherNLevts[i37212];

										StateMachine_c v_otherSuperSM = StateMachine_c
												.getOneSM_SMOnR502(StateMachineEvent_c
														.getOneSM_EVTOnR525(PolymorphicEvent_c
																.getOneSM_PEVTOnR527(v_otherNLevt)));

										if ((v_superSm == v_otherSuperSM)) {

											StateMachineEvent_c v_otherEvt = StateMachineEvent_c
													.getOneSM_EVTOnR525(SemEvent_c
															.getOneSM_SEVTOnR526(v_otherNLevt));

											Transition_c v_transition = Transition_c
													.getOneSM_TXNOnR507(NewStateTransition_c
															.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c
																	.getManySM_SEMEsOnR503(SemEvent_c
																			.getManySM_SEVTsOnR525(v_otherEvt))));

											java.util.UUID v_id = v_transition
													.Locatematchingpolymorphicevent(v_otherEvt
															.getSmevt_id());

											if ((!v_id.equals(Gd_c
													.Null_unique_id()))) {

												StateMachineEvent_c v_resolvedEvent = (StateMachineEvent_c) modelRoot
														.getInstanceList(
																StateMachineEvent_c.class)
														.getGlobal(null, v_id);

												if (((v_resolvedEvent != null))) {

													PolymorphicEvent_c v_polyEvt = PolymorphicEvent_c
															.getOneSM_PEVTOnR525(v_resolvedEvent);

													if (((v_polyEvt == null))) {

														v_polyEvt = new PolymorphicEvent_c(
																modelRoot);
														Ooaofooa.getDefaultInstance()
																.fireModelElementCreated(
																		new BaseModelDelta(
																				Modeleventnotification_c.DELTA_NEW,
																				v_polyEvt));

														SemEvent_c v_matrixEvent = SemEvent_c
																.getOneSM_SEVTOnR525(v_resolvedEvent);

														if (v_matrixEvent != null) {
															v_matrixEvent
																	.Dispose();
														} else {
															Throwable t = new Throwable();
															t.fillInStackTrace();
															CorePlugin
																	.logError(
																			"Attempted to call an operation on a null instance.",
																			t);
														}

														if (v_polyEvt != null) {
															v_polyEvt
																	.relateAcrossR525To(v_resolvedEvent);
														} else {
															Throwable t = new Throwable();
															t.fillInStackTrace();
															CorePlugin
																	.logError(
																			"Relate attempted on null left hand instance.",
																			t);
														}

													}

													if (v_poly != null) {
														v_poly.unrelateAcrossR527From(v_otherNLevt);
													} else {
														Throwable t = new Throwable();
														t.fillInStackTrace();
														CorePlugin
																.logError(
																		"Unrelate attempted on null left hand instance.",
																		t);
													}

													if (v_polyEvt != null) {
														v_polyEvt
																.relateAcrossR527To(v_otherNLevt);
													} else {
														Throwable t = new Throwable();
														t.fillInStackTrace();
														CorePlugin
																.logError(
																		"Relate attempted on null left hand instance.",
																		t);
													}

												}

												else {

													String v_message = Ooaofooa
															.Getmissinginheritedeventmessage(
																	modelRoot,
																	true);

													Util_c.Addpastedelementtoproblemlist(
															v_evt.Get_name(),
															v_message);

													if (v_otherNLevt != null) {
														v_otherNLevt.Dispose();
													} else {
														Throwable t = new Throwable();
														t.fillInStackTrace();
														CorePlugin
																.logError(
																		"Attempted to call an operation on a null instance.",
																		t);
													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

				else {

					v_remove = true;

				}

			}

			else {

				v_remove = true;

			}

			if ((v_remove)) {

				String v_message = Ooaofooa.Getmissinginheritedeventmessage(
						modelRoot, true);

				String v_evtName = v_nlevt.Get_name();

				if (((v_evt != null))) {

					v_evtName = v_evt.Get_name();

				}

				Util_c.Addpastedelementtoproblemlist(v_evtName, v_message);

				if (v_nlevt != null) {
					v_nlevt.Dispose();
				} else {
					Throwable t = new Throwable();
					t.fillInStackTrace();
					CorePlugin
							.logError(
									"Attempted to call an operation on a null instance.",
									t);
				}

			}

		}

	} // End resolveInheritedEvent
	public Object Converttoinstance() {
		Ooaofooa.log.println(ILogger.OPERATION, "Non Local Event",
				" Operation entered: NonLocalEvent::Converttoinstance");
		return this;
	} // End convertToInstance

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Non Local Event
