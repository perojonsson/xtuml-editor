package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.BodyInComponent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_BODY_IN_COMPONENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class BodyInComponent_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public BodyInComponent_c(ModelRoot modelRoot,
			java.util.UUID p_m_component_id, java.util.UUID p_m_action_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_component_id = IdAssigner.preprocessUUID(p_m_component_id);

		Object[] key = {m_action_id, m_component_id};
		addInstanceToMap(key);
	}
	static public BodyInComponent_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_component_id, java.util.UUID p_m_action_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);
		BodyInComponent_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_action_id, p_m_component_id};
			new_inst = (BodyInComponent_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_component_id = IdAssigner
						.preprocessUUID(p_m_component_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new BodyInComponent_c(modelRoot, p_m_component_id,
					p_m_action_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public BodyInComponent_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_component_id, java.util.UUID p_m_action_id) {
		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);
		BodyInComponent_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_action_id, p_m_component_id};
			source = (BodyInComponent_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_action_id = IdAssigner.preprocessUUID(p_m_action_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_component_id = IdAssigner
						.preprocessUUID(p_m_component_id);

				return source;
			}
		}
		// there is no instance matching the id
		BodyInComponent_c new_inst = new BodyInComponent_c(modelRoot,
				p_m_component_id, p_m_action_id);
		return new_inst;
	}
	public BodyInComponent_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_action_id = IdAssigner.NULL_UUID;
		m_component_id = IdAssigner.NULL_UUID;
		Object[] key = {m_action_id, m_component_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_action_id, m_component_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_action_id != p_newKey) {

			m_action_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof BodyInComponent_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof BodyInComponent_c)) {
			return false;
		}

		BodyInComponent_c me = (BodyInComponent_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getAction_id()) || IdAssigner.NULL_UUID
						.equals(((BodyInComponent_c) elem).getAction_id())) && this != elem)) {
			return false;
		}
		if (!getAction_id().equals(((BodyInComponent_c) elem).getAction_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getComponent_id()) || IdAssigner.NULL_UUID
						.equals(((BodyInComponent_c) elem).getComponent_id())) && this != elem)) {
			return false;
		}
		if (!getComponent_id().equals(
				((BodyInComponent_c) elem).getComponent_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof BodyInComponent_c)) {
			return false;
		}

		BodyInComponent_c me = (BodyInComponent_c) elem;
		if (!getAction_idCachedValue().equals(
				((BodyInComponent_c) elem).getAction_idCachedValue()))
			return false;
		if (!getComponent_idCachedValue().equals(
				((BodyInComponent_c) elem).getComponent_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_action_id;
	private java.util.UUID m_component_id;

	// declare association references from this class

	// referring navigation

	Body_c HasDeclaredBody;
	public void relateAcrossR694To(Body_c target) {
		relateAcrossR694To(target, true);
	}
	public void relateAcrossR694To(Body_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == HasDeclaredBody)
			return; // already related

		if (HasDeclaredBody != target) {

			Object oldKey = getInstanceKey();

			if (HasDeclaredBody != null) {

				HasDeclaredBody.clearBackPointerR694To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"BodyInComponent_c.relateAcrossR694To(Body_c target)",
									"Relate performed across R694 from Body in Component to Body without unrelate of prior instance.");
				}
			}

			HasDeclaredBody = target;
			m_action_id = target.getAction_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR694To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR694From(Body_c target) {
		unrelateAcrossR694From(target, true);
	}
	public void unrelateAcrossR694From(Body_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (HasDeclaredBody == null)
			return; // already unrelated

		if (target != HasDeclaredBody) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R694",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR694To(this);
		}

		if (HasDeclaredBody != null) {

			m_action_id = HasDeclaredBody.getAction_id();
			HasDeclaredBody = null;
			target.removeRef();
		}
	}

	// referring navigation

	Component_c IsDeclaredInComponent;
	public void relateAcrossR694To(Component_c target) {
		relateAcrossR694To(target, true);
	}
	public void relateAcrossR694To(Component_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsDeclaredInComponent)
			return; // already related

		if (IsDeclaredInComponent != target) {

			Object oldKey = getInstanceKey();

			if (IsDeclaredInComponent != null) {

				IsDeclaredInComponent.clearBackPointerR694To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"BodyInComponent_c.relateAcrossR694To(Component_c target)",
									"Relate performed across R694 from Body in Component to Component without unrelate of prior instance.");
				}
			}

			IsDeclaredInComponent = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_component_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR694To(this);
			target.addRef();
		}
	}
	public void unrelateAcrossR694From(Component_c target) {
		unrelateAcrossR694From(target, true);
	}
	public void unrelateAcrossR694From(Component_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (IsDeclaredInComponent == null)
			return; // already unrelated

		if (target != IsDeclaredInComponent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R694",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR694To(this);
		}

		if (IsDeclaredInComponent != null) {

			m_component_id = IsDeclaredInComponent.getId();
			if (IdAssigner.NULL_UUID.equals(m_component_id)) {
				m_component_id = IsDeclaredInComponent.getIdCachedValue();
			}
			IsDeclaredInComponent = null;
			target.removeRef();
		}
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Body_c[] targets) {
		return getOneACT_BICOnR694(targets, null);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Body_c[] targets,
			ClassQueryInterface_c test) {
		BodyInComponent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_BICOnR694(targets[i], test);
			}
		}

		return ret_val;
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Body_c target) {
		return getOneACT_BICOnR694(target, null);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Body_c target,
			boolean loadComponent) {
		return getOneACT_BICOnR694(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Body_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_BICOnR694(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static BodyInComponent_c getOneACT_BICOnR694(ModelRoot modelRoot,
			Body_c target, ClassQueryInterface_c test) {
		return getOneACT_BICOnR694(modelRoot, target, test, true);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(ModelRoot modelRoot,
			Body_c target, ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneACT_BICOnR694(modelRoot, target, test);
	}
	private static BodyInComponent_c find_getOneACT_BICOnR694(
			ModelRoot modelRoot, Body_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694) {
				for (int i = 0; i < target.backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694
						.size(); ++i) {
					BodyInComponent_c source = (BodyInComponent_c) target.backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c[] targets) {
		return getManyACT_BICsOnR694(targets, null);
	}
	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c[] targets,
			boolean loadComponent) {
		return getManyACT_BICsOnR694(targets, null, loadComponent);
	}
	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c[] targets,
			ClassQueryInterface_c test) {
		return getManyACT_BICsOnR694(targets, test, true);
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new BodyInComponent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694) {
				for (int j = 0; j < targets[i].backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694
						.size(); ++j) {
					BodyInComponent_c source = (BodyInComponent_c) targets[i].backPointer_IsDeclaredInBodyInComponentIsDeclaredIn_R694
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			BodyInComponent_c[] ret_set = new BodyInComponent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BodyInComponent_c[0];
		}
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c target) {
		if (target != null) {
			Body_c[] targetArray = new Body_c[1];
			targetArray[0] = target;
			return getManyACT_BICsOnR694(targetArray);
		} else {
			BodyInComponent_c[] result = new BodyInComponent_c[0];
			return result;
		}
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Body_c target,
			boolean loadComponent) {
		if (target != null) {
			Body_c[] targetArray = new Body_c[1];
			targetArray[0] = target;
			return getManyACT_BICsOnR694(targetArray, loadComponent);
		} else {
			BodyInComponent_c[] result = new BodyInComponent_c[0];
			return result;
		}
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Component_c[] targets) {
		return getOneACT_BICOnR694(targets, null);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Component_c[] targets,
			ClassQueryInterface_c test) {
		BodyInComponent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneACT_BICOnR694(targets[i], test);
			}
		}

		return ret_val;
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Component_c target) {
		return getOneACT_BICOnR694(target, null);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Component_c target,
			boolean loadComponent) {
		return getOneACT_BICOnR694(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(Component_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneACT_BICOnR694(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static BodyInComponent_c getOneACT_BICOnR694(ModelRoot modelRoot,
			Component_c target, ClassQueryInterface_c test) {
		return getOneACT_BICOnR694(modelRoot, target, test, true);
	}

	public static BodyInComponent_c getOneACT_BICOnR694(ModelRoot modelRoot,
			Component_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneACT_BICOnR694(modelRoot, target, test);
	}
	private static BodyInComponent_c find_getOneACT_BICOnR694(
			ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694) {
				for (int i = 0; i < target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694
						.size(); ++i) {
					BodyInComponent_c source = (BodyInComponent_c) target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(
			Component_c[] targets) {
		return getManyACT_BICsOnR694(targets, null);
	}
	public static BodyInComponent_c[] getManyACT_BICsOnR694(
			Component_c[] targets, boolean loadComponent) {
		return getManyACT_BICsOnR694(targets, null, loadComponent);
	}
	public static BodyInComponent_c[] getManyACT_BICsOnR694(
			Component_c[] targets, ClassQueryInterface_c test) {
		return getManyACT_BICsOnR694(targets, test, true);
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(
			Component_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new BodyInComponent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_HasDeclaredBodyInComponentHasDeclared_R694) {
				for (int j = 0; j < targets[i].backPointer_HasDeclaredBodyInComponentHasDeclared_R694
						.size(); ++j) {
					BodyInComponent_c source = (BodyInComponent_c) targets[i].backPointer_HasDeclaredBodyInComponentHasDeclared_R694
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			BodyInComponent_c[] ret_set = new BodyInComponent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BodyInComponent_c[0];
		}
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Component_c target) {
		return getManyACT_BICsOnR694(target, null);
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Component_c target,
			boolean loadComponent) {
		return getManyACT_BICsOnR694(target, null, loadComponent);
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Component_c target,
			ClassQueryInterface_c test) {
		return getManyACT_BICsOnR694(target, test, true);
	}

	public static BodyInComponent_c[] getManyACT_BICsOnR694(Component_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new BodyInComponent_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694) {
			for (int i = 0; i < target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694
					.size(); ++i) {
				BodyInComponent_c source = (BodyInComponent_c) target.backPointer_HasDeclaredBodyInComponentHasDeclared_R694
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			BodyInComponent_c[] ret_set = new BodyInComponent_c[matches.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new BodyInComponent_c[0];
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R694
		Component_c relInst58011 = (Component_c) baseRoot.getInstanceList(
				Component_c.class).get(new Object[]{m_component_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58011 == null) {
			relInst58011 = (Component_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Component_c.class)
					.get(new Object[]{m_component_id});
		}
		if (relInst58011 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58011 = (Component_c) roots[i].getInstanceList(
						Component_c.class).get(new Object[]{m_component_id});
				if (relInst58011 != null)
					break;
			}
		}
		//synchronized
		if (relInst58011 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58011) && !isProxy())) {
				relInst58011.relateAcrossR694To(this, notifyChanges);
			}
		}

		Body_c relInst58012 = (Body_c) baseRoot.getInstanceList(Body_c.class)
				.get(new Object[]{m_action_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58012 == null) {
			relInst58012 = (Body_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(Body_c.class)
					.get(new Object[]{m_action_id});
		}
		if (relInst58012 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58012 = (Body_c) roots[i].getInstanceList(Body_c.class)
						.get(new Object[]{m_action_id});
				if (relInst58012 != null)
					break;
			}
		}
		//synchronized
		if (relInst58012 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58012) && !isProxy())) {
				relInst58012.relateAcrossR694To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R694
		// C_C
		inst = IsDeclaredInComponent;
		unrelateAcrossR694From(IsDeclaredInComponent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// ACT_ACT
		inst = HasDeclaredBody;
		unrelateAcrossR694From(HasDeclaredBody, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(BodyInComponent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final BodyInComponent_c inst = (BodyInComponent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static BodyInComponent_c BodyInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		BodyInComponent_c result = findBodyInComponentInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static BodyInComponent_c findBodyInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				BodyInComponent_c x = (BodyInComponent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static BodyInComponent_c BodyInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return BodyInComponentInstance(modelRoot, test, true);
	}

	public static BodyInComponent_c BodyInComponentInstance(ModelRoot modelRoot) {
		return BodyInComponentInstance(modelRoot, null, true);
	}

	public static BodyInComponent_c[] BodyInComponentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(BodyInComponent_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				BodyInComponent_c x = (BodyInComponent_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				BodyInComponent_c[] ret_set = new BodyInComponent_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new BodyInComponent_c[0];
			}
		}
	}
	public static BodyInComponent_c[] BodyInComponentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return BodyInComponentInstances(modelRoot, test, true);
	}
	public static BodyInComponent_c[] BodyInComponentInstances(
			ModelRoot modelRoot) {
		return BodyInComponentInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Body in Component.dispose call: ";
		Component_c testR694Inst = Component_c.getOneC_COnR694(this, false);

		if (testR694Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "694 ";
		}

		Body_c testR694InstOth = Body_c.getOneACT_ACTOnR694(this, false);

		if (testR694InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "694 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Body in Component",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("action_id")) {
			return true;
		}
		if (attributeName.equals("component_id")) {
			return true;
		}
		return false;
	}
	// declare attribute accessors
	public long getAction_idLongBased() {
		if (HasDeclaredBody != null) {
			return HasDeclaredBody.getAction_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getAction_id() {
		if (HasDeclaredBody != null) {
			return HasDeclaredBody.getAction_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getAction_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_action_id))
			return m_action_id;
		else
			return getAction_id();
	}

	public void setAction_id(java.util.UUID newValue) {
		m_action_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getComponent_idLongBased() {
		if (IsDeclaredInComponent != null) {
			return IsDeclaredInComponent.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getComponent_id() {
		if (IsDeclaredInComponent != null) {
			return IsDeclaredInComponent.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getComponent_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_component_id))
			return m_component_id;
		else
			return getComponent_id();
	}

	public void setComponent_id(java.util.UUID newValue) {
		m_component_id = IdAssigner.preprocessUUID(newValue);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "Body in Component", //$NON-NLS-1$
				" Operation entered: Body in Component::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		BodyInComponent_c[] objs = BodyInComponent_c.BodyInComponentInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Body in Component", //$NON-NLS-1$
				" Operation entered: Body in Component::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class BodyInComponent_c_test58014_c implements ClassQueryInterface_c {
			BodyInComponent_c_test58014_c(java.util.UUID p58015,
					java.util.UUID p58016) {
				m_p58015 = p58015;
				m_p58016 = p58016;
			}
			private java.util.UUID m_p58015;
			private java.util.UUID m_p58016;
			public boolean evaluate(Object candidate) {
				BodyInComponent_c selected = (BodyInComponent_c) candidate;
				boolean retval = false;
				retval = (selected.getAction_id().equals(m_p58015))
						& (selected.getComponent_id().equals(m_p58016));
				return retval;
			}
		}

		BodyInComponent_c[] objs58013 = BodyInComponent_c
				.BodyInComponentInstances(modelRoot,
						new BodyInComponent_c_test58014_c(getAction_id(),
								getComponent_id()));

		if (((objs58013.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Body in Component", //$NON-NLS-1$
								"Consistency: Object: Body in Component: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58013.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Body in Component: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58013.length), e);
			}
			retval = false;

		}

		if (((objs58013.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Body in Component", //$NON-NLS-1$
								"Consistency: Object: Body in Component: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58013.length)
										+ " Action_ID: " + "Not Printable" + " Component_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Body in Component: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58013.length)
										+ " Action_ID: " + "Not Printable" + " Component_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Body in Component is a link class in association: rel.Numb = 694
		// The one side class in the association is: Component
		class Component_c_test58020_c implements ClassQueryInterface_c {
			Component_c_test58020_c(java.util.UUID p58021) {
				m_p58021 = p58021;
			}
			private java.util.UUID m_p58021;
			public boolean evaluate(Object candidate) {
				Component_c selected = (Component_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p58021));
				return retval;
			}
		}

		Component_c[] objs58019 = Component_c.ComponentInstances(modelRoot,
				new Component_c_test58020_c(getComponent_id()));

		if (((objs58019.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Body in Component", //$NON-NLS-1$
								"Consistency: Object: Body in Component: Association: 694: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58019.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Body in Component: Association: 694: Cardinality of one side of link is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58019.length), e);
			}
			retval = false;

		}

		// Other side
		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Body in Component
