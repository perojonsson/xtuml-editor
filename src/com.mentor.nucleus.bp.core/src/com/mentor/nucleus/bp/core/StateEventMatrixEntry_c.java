package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.StateEventMatrixEntry_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_STATE_EVENT_MATRIX_ENTRY extends genericEvent_c {
	public abstract int getEvtcode();
}

public class StateEventMatrixEntry_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public StateEventMatrixEntry_c(ModelRoot modelRoot,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

		Object[] key = {m_smspd_id, m_smevt_id, m_sm_id, m_smstt_id};
		addInstanceToMap(key);
	}
	static public StateEventMatrixEntry_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);
		StateEventMatrixEntry_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_smspd_id, p_m_smevt_id, p_m_sm_id, p_m_smstt_id};
			new_inst = (StateEventMatrixEntry_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new StateEventMatrixEntry_c(modelRoot, p_m_smstt_id,
					p_m_smevt_id, p_m_sm_id, p_m_smspd_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public StateEventMatrixEntry_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_smstt_id, java.util.UUID p_m_smevt_id,
			java.util.UUID p_m_sm_id, java.util.UUID p_m_smspd_id) {
		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);
		StateEventMatrixEntry_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_smspd_id, p_m_smevt_id, p_m_sm_id, p_m_smstt_id};
			source = (StateEventMatrixEntry_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smstt_id = IdAssigner.preprocessUUID(p_m_smstt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smevt_id = IdAssigner.preprocessUUID(p_m_smevt_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_sm_id = IdAssigner.preprocessUUID(p_m_sm_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_smspd_id = IdAssigner.preprocessUUID(p_m_smspd_id);

				return source;
			}
		}
		// there is no instance matching the id
		StateEventMatrixEntry_c new_inst = new StateEventMatrixEntry_c(
				modelRoot, p_m_smstt_id, p_m_smevt_id, p_m_sm_id, p_m_smspd_id);
		return new_inst;
	}
	public StateEventMatrixEntry_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_smstt_id = IdAssigner.NULL_UUID;
		m_smevt_id = IdAssigner.NULL_UUID;
		m_sm_id = IdAssigner.NULL_UUID;
		m_smspd_id = IdAssigner.NULL_UUID;
		Object[] key = {m_smspd_id, m_smevt_id, m_sm_id, m_smstt_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_smspd_id, m_smevt_id, m_sm_id, m_smstt_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_smspd_id != p_newKey) {

			m_smspd_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof StateEventMatrixEntry_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof StateEventMatrixEntry_c)) {
			return false;
		}

		StateEventMatrixEntry_c me = (StateEventMatrixEntry_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmspd_id()) || IdAssigner.NULL_UUID
						.equals(((StateEventMatrixEntry_c) elem).getSmspd_id())) && this != elem)) {
			return false;
		}
		if (!getSmspd_id().equals(
				((StateEventMatrixEntry_c) elem).getSmspd_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmevt_id()) || IdAssigner.NULL_UUID
						.equals(((StateEventMatrixEntry_c) elem).getSmevt_id())) && this != elem)) {
			return false;
		}
		if (!getSmevt_id().equals(
				((StateEventMatrixEntry_c) elem).getSmevt_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSm_id()) || IdAssigner.NULL_UUID
						.equals(((StateEventMatrixEntry_c) elem).getSm_id())) && this != elem)) {
			return false;
		}
		if (!getSm_id().equals(((StateEventMatrixEntry_c) elem).getSm_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getSmstt_id()) || IdAssigner.NULL_UUID
						.equals(((StateEventMatrixEntry_c) elem).getSmstt_id())) && this != elem)) {
			return false;
		}
		if (!getSmstt_id().equals(
				((StateEventMatrixEntry_c) elem).getSmstt_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof StateEventMatrixEntry_c)) {
			return false;
		}

		StateEventMatrixEntry_c me = (StateEventMatrixEntry_c) elem;
		if (!getSmspd_idCachedValue().equals(
				((StateEventMatrixEntry_c) elem).getSmspd_idCachedValue()))
			return false;
		if (!getSmevt_idCachedValue().equals(
				((StateEventMatrixEntry_c) elem).getSmevt_idCachedValue()))
			return false;
		if (!getSm_idCachedValue().equals(
				((StateEventMatrixEntry_c) elem).getSm_idCachedValue()))
			return false;
		if (!getSmstt_idCachedValue().equals(
				((StateEventMatrixEntry_c) elem).getSmstt_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_smstt_id;
	private java.util.UUID m_smevt_id;
	private java.util.UUID m_sm_id;
	private java.util.UUID m_smspd_id;

	// declare association references from this class

	// referring navigation

	SemEvent_c ReceivesSemEvent;
	public void relateAcrossR503To(SemEvent_c target) {
		relateAcrossR503To(target, true);
	}
	public void relateAcrossR503To(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == ReceivesSemEvent)
			return; // already related

		if (ReceivesSemEvent != target) {

			Object oldKey = getInstanceKey();

			if (ReceivesSemEvent != null) {

				ReceivesSemEvent.clearBackPointerR503To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"StateEventMatrixEntry_c.relateAcrossR503To(SemEvent_c target)",
									"Relate performed across R503 from State Event Matrix Entry to SEM Event without unrelate of prior instance.");
				}
			}

			ReceivesSemEvent = target;
			if (IdAssigner.NULL_UUID.equals(target.getSmevt_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smevt_id = target.getSmevt_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getSmspd_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_smspd_id = target.getSmspd_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR503To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR503From(SemEvent_c target) {
		unrelateAcrossR503From(target, true);
	}
	public void unrelateAcrossR503From(SemEvent_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (ReceivesSemEvent == null)
			return; // already unrelated

		if (target != ReceivesSemEvent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R503",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR503To(this);
		}

		if (ReceivesSemEvent != null) {

			m_smevt_id = ReceivesSemEvent.getSmevt_id();
			if (IdAssigner.NULL_UUID.equals(m_smevt_id)) {
				m_smevt_id = ReceivesSemEvent.getSmevt_idCachedValue();
			}
			m_sm_id = ReceivesSemEvent.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = ReceivesSemEvent.getSm_idCachedValue();
			}
			m_smspd_id = ReceivesSemEvent.getSmspd_id();
			if (IdAssigner.NULL_UUID.equals(m_smspd_id)) {
				m_smspd_id = ReceivesSemEvent.getSmspd_idCachedValue();
			}
			ReceivesSemEvent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	// referring navigation

	StateMachineState_c IsReceivedByStateMachineState;
	public void relateAcrossR503To(StateMachineState_c target) {
		relateAcrossR503To(target, true);
	}
	public void relateAcrossR503To(StateMachineState_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsReceivedByStateMachineState)
			return; // already related

		if (IsReceivedByStateMachineState != target) {

			Object oldKey = getInstanceKey();

			if (IsReceivedByStateMachineState != null) {

				IsReceivedByStateMachineState.clearBackPointerR503To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"StateEventMatrixEntry_c.relateAcrossR503To(StateMachineState_c target)",
									"Relate performed across R503 from State Event Matrix Entry to State Machine State without unrelate of prior instance.");
				}
			}

			IsReceivedByStateMachineState = target;
			m_smstt_id = target.getSmstt_id();
			if (IdAssigner.NULL_UUID.equals(target.getSm_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_sm_id = target.getSm_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR503To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR503From(StateMachineState_c target) {
		unrelateAcrossR503From(target, true);
	}
	public void unrelateAcrossR503From(StateMachineState_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsReceivedByStateMachineState == null)
			return; // already unrelated

		if (target != IsReceivedByStateMachineState) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R503",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR503To(this);
		}

		if (IsReceivedByStateMachineState != null) {

			m_smstt_id = IsReceivedByStateMachineState.getSmstt_id();
			m_sm_id = IsReceivedByStateMachineState.getSm_id();
			if (IdAssigner.NULL_UUID.equals(m_sm_id)) {
				m_sm_id = IsReceivedByStateMachineState.getSm_idCachedValue();
			}
			IsReceivedByStateMachineState = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "503", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			SemEvent_c[] targets) {
		return getOneSM_SEMEOnR503(targets, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			SemEvent_c[] targets, ClassQueryInterface_c test) {
		StateEventMatrixEntry_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SEMEOnR503(targets[i], test);
			}
		}

		return ret_val;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(SemEvent_c target) {
		return getOneSM_SEMEOnR503(target, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			SemEvent_c target, boolean loadComponent) {
		return getOneSM_SEMEOnR503(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			SemEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SEMEOnR503(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			ModelRoot modelRoot, SemEvent_c target, ClassQueryInterface_c test) {
		return getOneSM_SEMEOnR503(modelRoot, target, test, true);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			ModelRoot modelRoot, SemEvent_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneSM_SEMEOnR503(modelRoot, target, test);
	}
	private static StateEventMatrixEntry_c find_getOneSM_SEMEOnR503(
			ModelRoot modelRoot, SemEvent_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503) {
				for (int i = 0; i < target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
						.size(); ++i) {
					StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c[] targets) {
		return getManySM_SEMEsOnR503(targets, null);
	}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c[] targets, boolean loadComponent) {
		return getManySM_SEMEsOnR503(targets, null, loadComponent);
	}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR503(targets, test, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new StateEventMatrixEntry_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503) {
				for (int j = 0; j < targets[i].backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
						.size(); ++j) {
					StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) targets[i].backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			StateEventMatrixEntry_c[] ret_set = new StateEventMatrixEntry_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new StateEventMatrixEntry_c[0];
		}
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c target) {
		return getManySM_SEMEsOnR503(target, null);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c target, boolean loadComponent) {
		return getManySM_SEMEsOnR503(target, null, loadComponent);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c target, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR503(target, test, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			SemEvent_c target, ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new StateEventMatrixEntry_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503) {
			for (int i = 0; i < target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
					.size(); ++i) {
				StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) target.backPointer_IsReceivedByStateEventMatrixEntryIsReceivedBy_R503
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			StateEventMatrixEntry_c[] ret_set = new StateEventMatrixEntry_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new StateEventMatrixEntry_c[0];
		}
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			StateMachineState_c[] targets) {
		return getOneSM_SEMEOnR503(targets, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			StateMachineState_c[] targets, ClassQueryInterface_c test) {
		StateEventMatrixEntry_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneSM_SEMEOnR503(targets[i], test);
			}
		}

		return ret_val;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			StateMachineState_c target) {
		return getOneSM_SEMEOnR503(target, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			StateMachineState_c target, boolean loadComponent) {
		return getOneSM_SEMEOnR503(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			StateMachineState_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneSM_SEMEOnR503(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			ModelRoot modelRoot, StateMachineState_c target,
			ClassQueryInterface_c test) {
		return getOneSM_SEMEOnR503(modelRoot, target, test, true);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR503(
			ModelRoot modelRoot, StateMachineState_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneSM_SEMEOnR503(modelRoot, target, test);
	}
	private static StateEventMatrixEntry_c find_getOneSM_SEMEOnR503(
			ModelRoot modelRoot, StateMachineState_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ReceivesStateEventMatrixEntryReceives_R503) {
				for (int i = 0; i < target.backPointer_ReceivesStateEventMatrixEntryReceives_R503
						.size(); ++i) {
					StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) target.backPointer_ReceivesStateEventMatrixEntryReceives_R503
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c[] targets) {
		return getManySM_SEMEsOnR503(targets, null);
	}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c[] targets, boolean loadComponent) {
		return getManySM_SEMEsOnR503(targets, null, loadComponent);
	}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR503(targets, test, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new StateEventMatrixEntry_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ReceivesStateEventMatrixEntryReceives_R503) {
				for (int j = 0; j < targets[i].backPointer_ReceivesStateEventMatrixEntryReceives_R503
						.size(); ++j) {
					StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) targets[i].backPointer_ReceivesStateEventMatrixEntryReceives_R503
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			StateEventMatrixEntry_c[] ret_set = new StateEventMatrixEntry_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new StateEventMatrixEntry_c[0];
		}
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c target) {
		return getManySM_SEMEsOnR503(target, null);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c target, boolean loadComponent) {
		return getManySM_SEMEsOnR503(target, null, loadComponent);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c target, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR503(target, test, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR503(
			StateMachineState_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new StateEventMatrixEntry_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ReceivesStateEventMatrixEntryReceives_R503) {
			for (int i = 0; i < target.backPointer_ReceivesStateEventMatrixEntryReceives_R503
					.size(); ++i) {
				StateEventMatrixEntry_c source = (StateEventMatrixEntry_c) target.backPointer_ReceivesStateEventMatrixEntryReceives_R503
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			StateEventMatrixEntry_c[] ret_set = new StateEventMatrixEntry_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new StateEventMatrixEntry_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	EventIgnored_c backPointer_IsSubtypeEventIgnoredIsSubtype_R504;

	public void setEventIgnoredOrderInChildListR504(EventIgnored_c target,
			int index) {
		unrelateAcrossR504From(target);
		EventIgnored_c[] elements = EventIgnored_c.getManySM_EIGNsOnR504(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR504From((EventIgnored_c) elements[i]);
			}
			count++;
		}
		relateAcrossR504To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR504To((EventIgnored_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR504To(EventIgnored_c target) {
		if (target != null) {
			target.relateAcrossR504To(this, true);
		}
	}

	public void relateAcrossR504To(EventIgnored_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR504To(this, notifyChanges);
		}
	}

	public void setBackPointerR504To(EventIgnored_c target) {
		backPointer_IsSubtypeEventIgnoredIsSubtype_R504 = target;
	}

	public void unrelateAcrossR504From(EventIgnored_c target) {
		if (target != null) {
			target.unrelateAcrossR504From(this, true);
		}
	}

	public void unrelateAcrossR504From(EventIgnored_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR504From(this, notifyChanges);
		}
	}

	public void clearBackPointerR504To(EventIgnored_c target) {
		if (target == backPointer_IsSubtypeEventIgnoredIsSubtype_R504) {
			backPointer_IsSubtypeEventIgnoredIsSubtype_R504 = null;
		}
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			EventIgnored_c[] targets) {
		return getOneSM_SEMEOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			EventIgnored_c[] targets, ClassQueryInterface_c test) {
		return getOneSM_SEMEOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			EventIgnored_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		StateEventMatrixEntry_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					StateEventMatrixEntry_c candidate_val = getOneSM_SEMEOnR504(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_SEMEOnR504(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			EventIgnored_c target) {
		return getOneSM_SEMEOnR504(target, true);
	}
	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			EventIgnored_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeStateEventMatrixEntry;
		} else {
			return null;
		}
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c [] getManySM_SEMEsOnR504(EventIgnored_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateEventMatrixEntry_c[0];
  
  
  LinkedHashSet<StateEventMatrixEntry_c> elementsSet = new LinkedHashSet<StateEventMatrixEntry_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateEventMatrixEntry == null)
	  targets[i].loadProxy();
    StateEventMatrixEntry_c associate = targets[i].IsSupertypeStateEventMatrixEntry;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c[] targets) {
		return getManySM_SEMEsOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			EventIgnored_c[] targetArray = new EventIgnored_c[1];
			targetArray[0] = target;
			return getManySM_SEMEsOnR504(targetArray, test, loadComponent);
		} else {
			StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[0];
			return result;
		}

	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c target, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c target) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			EventIgnored_c target, boolean loadComponent) {
		return getManySM_SEMEsOnR504(target, null, loadComponent);
	}

	// referred to navigation

	CantHappen_c backPointer_IsSubtypeCantHappenIsSubtype_R504;

	public void setCantHappenOrderInChildListR504(CantHappen_c target, int index) {
		unrelateAcrossR504From(target);
		CantHappen_c[] elements = CantHappen_c.getManySM_CHsOnR504(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR504From((CantHappen_c) elements[i]);
			}
			count++;
		}
		relateAcrossR504To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR504To((CantHappen_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR504To(CantHappen_c target) {
		if (target != null) {
			target.relateAcrossR504To(this, true);
		}
	}

	public void relateAcrossR504To(CantHappen_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR504To(this, notifyChanges);
		}
	}

	public void setBackPointerR504To(CantHappen_c target) {
		backPointer_IsSubtypeCantHappenIsSubtype_R504 = target;
	}

	public void unrelateAcrossR504From(CantHappen_c target) {
		if (target != null) {
			target.unrelateAcrossR504From(this, true);
		}
	}

	public void unrelateAcrossR504From(CantHappen_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR504From(this, notifyChanges);
		}
	}

	public void clearBackPointerR504To(CantHappen_c target) {
		if (target == backPointer_IsSubtypeCantHappenIsSubtype_R504) {
			backPointer_IsSubtypeCantHappenIsSubtype_R504 = null;
		}
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			CantHappen_c[] targets) {
		return getOneSM_SEMEOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			CantHappen_c[] targets, ClassQueryInterface_c test) {
		return getOneSM_SEMEOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			CantHappen_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		StateEventMatrixEntry_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					StateEventMatrixEntry_c candidate_val = getOneSM_SEMEOnR504(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_SEMEOnR504(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			CantHappen_c target) {
		return getOneSM_SEMEOnR504(target, true);
	}
	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			CantHappen_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeStateEventMatrixEntry;
		} else {
			return null;
		}
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c [] getManySM_SEMEsOnR504(CantHappen_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateEventMatrixEntry_c[0];
  
  
  LinkedHashSet<StateEventMatrixEntry_c> elementsSet = new LinkedHashSet<StateEventMatrixEntry_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateEventMatrixEntry == null)
	  targets[i].loadProxy();
    StateEventMatrixEntry_c associate = targets[i].IsSupertypeStateEventMatrixEntry;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c[] targets) {
		return getManySM_SEMEsOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			CantHappen_c[] targetArray = new CantHappen_c[1];
			targetArray[0] = target;
			return getManySM_SEMEsOnR504(targetArray, test, loadComponent);
		} else {
			StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[0];
			return result;
		}

	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c target, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c target) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			CantHappen_c target, boolean loadComponent) {
		return getManySM_SEMEsOnR504(target, null, loadComponent);
	}

	// referred to navigation

	NewStateTransition_c backPointer_IsSubtypeNewStateTransitionIsSubtype_R504;

	public void setNewStateTransitionOrderInChildListR504(
			NewStateTransition_c target, int index) {
		unrelateAcrossR504From(target);
		NewStateTransition_c[] elements = NewStateTransition_c
				.getManySM_NSTXNsOnR504(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR504From((NewStateTransition_c) elements[i]);
			}
			count++;
		}
		relateAcrossR504To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR504To((NewStateTransition_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR504To(NewStateTransition_c target) {
		if (target != null) {
			target.relateAcrossR504To(this, true);
		}
	}

	public void relateAcrossR504To(NewStateTransition_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR504To(this, notifyChanges);
		}
	}

	public void setBackPointerR504To(NewStateTransition_c target) {
		backPointer_IsSubtypeNewStateTransitionIsSubtype_R504 = target;
	}

	public void unrelateAcrossR504From(NewStateTransition_c target) {
		if (target != null) {
			target.unrelateAcrossR504From(this, true);
		}
	}

	public void unrelateAcrossR504From(NewStateTransition_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR504From(this, notifyChanges);
		}
	}

	public void clearBackPointerR504To(NewStateTransition_c target) {
		if (target == backPointer_IsSubtypeNewStateTransitionIsSubtype_R504) {
			backPointer_IsSubtypeNewStateTransitionIsSubtype_R504 = null;
		}
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			NewStateTransition_c[] targets) {
		return getOneSM_SEMEOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			NewStateTransition_c[] targets, ClassQueryInterface_c test) {
		return getOneSM_SEMEOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			NewStateTransition_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		StateEventMatrixEntry_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					StateEventMatrixEntry_c candidate_val = getOneSM_SEMEOnR504(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneSM_SEMEOnR504(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			NewStateTransition_c target) {
		return getOneSM_SEMEOnR504(target, true);
	}
	public static StateEventMatrixEntry_c getOneSM_SEMEOnR504(
			NewStateTransition_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeStateEventMatrixEntry;
		} else {
			return null;
		}
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c[] targets, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(targets, test, true);
	}

	public static StateEventMatrixEntry_c [] getManySM_SEMEsOnR504(NewStateTransition_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new StateEventMatrixEntry_c[0];
  
  
  LinkedHashSet<StateEventMatrixEntry_c> elementsSet = new LinkedHashSet<StateEventMatrixEntry_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeStateEventMatrixEntry == null)
	  targets[i].loadProxy();
    StateEventMatrixEntry_c associate = targets[i].IsSupertypeStateEventMatrixEntry;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c[] targets) {
		return getManySM_SEMEsOnR504(targets, null);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			NewStateTransition_c[] targetArray = new NewStateTransition_c[1];
			targetArray[0] = target;
			return getManySM_SEMEsOnR504(targetArray, test, loadComponent);
		} else {
			StateEventMatrixEntry_c[] result = new StateEventMatrixEntry_c[0];
			return result;
		}

	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c target, ClassQueryInterface_c test) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c target) {
		return getManySM_SEMEsOnR504(target, null, true);
	}

	public static StateEventMatrixEntry_c[] getManySM_SEMEsOnR504(
			NewStateTransition_c target, boolean loadComponent) {
		return getManySM_SEMEsOnR504(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		// R503
		StateMachineState_c relInst38976 = (StateMachineState_c) baseRoot
				.getInstanceList(StateMachineState_c.class).get(
						new Object[]{m_sm_id, m_smstt_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38976 == null) {
			relInst38976 = (StateMachineState_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(StateMachineState_c.class)
					.get(new Object[]{m_sm_id, m_smstt_id});
		}
		if (relInst38976 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38976 = (StateMachineState_c) roots[i].getInstanceList(
						StateMachineState_c.class).get(
						new Object[]{m_sm_id, m_smstt_id});
				if (relInst38976 != null)
					break;
			}
		}
		//synchronized
		if (relInst38976 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38976) && !isProxy())) {
				relInst38976.relateAcrossR503To(this, notifyChanges);
			}
		}

		SemEvent_c relInst38977 = (SemEvent_c) baseRoot.getInstanceList(
				SemEvent_c.class).get(
				new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst38977 == null) {
			relInst38977 = (SemEvent_c) Ooaofooa.getDefaultInstance()
					.getInstanceList(SemEvent_c.class)
					.get(new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
		}
		if (relInst38977 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst38977 = (SemEvent_c) roots[i].getInstanceList(
						SemEvent_c.class).get(
						new Object[]{m_smevt_id, m_sm_id, m_smspd_id});
				if (relInst38977 != null)
					break;
			}
		}
		//synchronized
		if (relInst38977 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst38977) && !isProxy())) {
				relInst38977.relateAcrossR503To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R503
		// SM_STATE
		inst = IsReceivedByStateMachineState;
		unrelateAcrossR503From(IsReceivedByStateMachineState, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// SM_SEVT
		inst = ReceivesSemEvent;
		unrelateAcrossR503From(ReceivesSemEvent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(StateEventMatrixEntry_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final StateEventMatrixEntry_c inst = (StateEventMatrixEntry_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static StateEventMatrixEntry_c StateEventMatrixEntryInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		StateEventMatrixEntry_c result = findStateEventMatrixEntryInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					StateEventMatrixEntry_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findStateEventMatrixEntryInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static StateEventMatrixEntry_c findStateEventMatrixEntryInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				StateEventMatrixEntry_c x = (StateEventMatrixEntry_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static StateEventMatrixEntry_c StateEventMatrixEntryInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return StateEventMatrixEntryInstance(modelRoot, test, true);
	}

	public static StateEventMatrixEntry_c StateEventMatrixEntryInstance(
			ModelRoot modelRoot) {
		return StateEventMatrixEntryInstance(modelRoot, null, true);
	}

	public static StateEventMatrixEntry_c[] StateEventMatrixEntryInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					StateEventMatrixEntry_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(StateEventMatrixEntry_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				StateEventMatrixEntry_c x = (StateEventMatrixEntry_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				StateEventMatrixEntry_c[] ret_set = new StateEventMatrixEntry_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new StateEventMatrixEntry_c[0];
			}
		}
	}
	public static StateEventMatrixEntry_c[] StateEventMatrixEntryInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return StateEventMatrixEntryInstances(modelRoot, test, true);
	}
	public static StateEventMatrixEntry_c[] StateEventMatrixEntryInstances(
			ModelRoot modelRoot) {
		return StateEventMatrixEntryInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the State Event Matrix Entry.dispose call: ";
		StateMachineState_c testR503Inst = StateMachineState_c
				.getOneSM_STATEOnR503(this, false);

		if (testR503Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "503 ";
		}

		SemEvent_c testR503InstOth = SemEvent_c
				.getOneSM_SEVTOnR503(this, false);

		if (testR503InstOth != null) {
			delete_error = true;
			errorMsg = errorMsg + "503 ";
		}
		EventIgnored_c testR504Inst1 = EventIgnored_c.getOneSM_EIGNOnR504(this,
				false);

		if (testR504Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "504 ";
		}
		CantHappen_c testR504Inst2 = CantHappen_c
				.getOneSM_CHOnR504(this, false);

		if (testR504Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "504 ";
		}
		NewStateTransition_c testR504Inst3 = NewStateTransition_c
				.getOneSM_NSTXNOnR504(this, false);

		if (testR504Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "504 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"State Event Matrix Entry", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("smstt_id")) {
			return true;
		}
		if (attributeName.equals("smevt_id")) {
			return true;
		}
		if (attributeName.equals("sm_id")) {
			return true;
		}
		if (attributeName.equals("smspd_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getSmspd_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmspd_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmevt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmevt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSm_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSm_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getSmstt_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getSmstt_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getSmstt_idLongBased() {
		if (IsReceivedByStateMachineState != null) {
			return IsReceivedByStateMachineState.getSmstt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmstt_id() {
		if (IsReceivedByStateMachineState != null) {
			return IsReceivedByStateMachineState.getSmstt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmstt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smstt_id))
			return m_smstt_id;
		else
			return getSmstt_id();
	}

	public void setSmstt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smstt_id)) {
				return;
			}
		} else if (m_smstt_id != null) {
			if (m_smstt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smstt_id", m_smstt_id, newValue, true);
		m_smstt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSmevt_idLongBased() {
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSmevt_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmevt_id() {
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSmevt_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmevt_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smevt_id))
			return m_smevt_id;
		else
			return getSmevt_id();
	}

	public void setSmevt_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smevt_id)) {
				return;
			}
		} else if (m_smevt_id != null) {
			if (m_smevt_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smevt_id", m_smevt_id, newValue, true);
		m_smevt_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getSm_idLongBased() {
		if (IsReceivedByStateMachineState != null) {
			return IsReceivedByStateMachineState.getSm_idLongBased();
		}
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSm_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSm_id() {
		if (IsReceivedByStateMachineState != null) {
			return IsReceivedByStateMachineState.getSm_id();
		}
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSm_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSm_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_sm_id))
			return m_sm_id;
		else
			return getSm_id();
	}

	public long getSmspd_idLongBased() {
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSmspd_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSmspd_id() {
		if (ReceivesSemEvent != null) {
			return ReceivesSemEvent.getSmspd_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSmspd_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_smspd_id))
			return m_smspd_id;
		else
			return getSmspd_id();
	}

	public void setSmspd_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_smspd_id)) {
				return;
			}
		} else if (m_smspd_id != null) {
			if (m_smspd_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Smspd_id", m_smspd_id, newValue, true);
		m_smspd_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "State Event Matrix Entry", //$NON-NLS-1$
						" Operation entered: State Event Matrix Entry::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		StateEventMatrixEntry_c[] objs = StateEventMatrixEntry_c
				.StateEventMatrixEntryInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "State Event Matrix Entry", //$NON-NLS-1$
						" Operation entered: State Event Matrix Entry::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class StateEventMatrixEntry_c_test38979_c
				implements
					ClassQueryInterface_c {
			StateEventMatrixEntry_c_test38979_c(java.util.UUID p38980,
					java.util.UUID p38981, java.util.UUID p38982,
					java.util.UUID p38983) {
				m_p38980 = p38980;
				m_p38981 = p38981;
				m_p38982 = p38982;
				m_p38983 = p38983;
			}
			private java.util.UUID m_p38980;
			private java.util.UUID m_p38981;
			private java.util.UUID m_p38982;
			private java.util.UUID m_p38983;
			public boolean evaluate(Object candidate) {
				StateEventMatrixEntry_c selected = (StateEventMatrixEntry_c) candidate;
				boolean retval = false;
				retval = (selected.getSmspd_id().equals(m_p38980))
						& (selected.getSmevt_id().equals(m_p38981))
						& (selected.getSm_id().equals(m_p38982))
						& (selected.getSmstt_id().equals(m_p38983));
				return retval;
			}
		}

		StateEventMatrixEntry_c[] objs38978 = StateEventMatrixEntry_c
				.StateEventMatrixEntryInstances(modelRoot,
						new StateEventMatrixEntry_c_test38979_c(getSmspd_id(),
								getSmevt_id(), getSm_id(), getSmstt_id()));

		if (((objs38978.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"State Event Matrix Entry", //$NON-NLS-1$
								"Consistency: Object: State Event Matrix Entry: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38978.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: State Event Matrix Entry: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38978.length), e);
			}
			retval = false;

		}

		if (((objs38978.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"State Event Matrix Entry", //$NON-NLS-1$
								"Consistency: Object: State Event Matrix Entry: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs38978.length)
										+ " SMspd_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: State Event Matrix Entry: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38978.length)
										+ " SMspd_ID: " + "Not Printable" + " SMevt_ID: " + "Not Printable" + " SM_ID: " + "Not Printable" + " SMstt_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// State Event Matrix Entry is a link class in association: rel.Numb = 503
		// Other side
		// Supertype: rel.Numb = 504
		int objs38986 = 0;
		// Subtype Object: Event Ignored
		class EventIgnored_c_test38987_c implements ClassQueryInterface_c {
			EventIgnored_c_test38987_c(java.util.UUID p38988,
					java.util.UUID p38989, java.util.UUID p38990,
					java.util.UUID p38991) {
				m_p38988 = p38988;
				m_p38989 = p38989;
				m_p38990 = p38990;
				m_p38991 = p38991;
			}
			private java.util.UUID m_p38988;
			private java.util.UUID m_p38989;
			private java.util.UUID m_p38990;
			private java.util.UUID m_p38991;
			public boolean evaluate(Object candidate) {
				EventIgnored_c selected = (EventIgnored_c) candidate;
				boolean retval = false;
				retval = (selected.getSmstt_id().equals(m_p38988))
						& (selected.getSmevt_id().equals(m_p38989))
						& (selected.getSm_id().equals(m_p38990))
						& (selected.getSmspd_id().equals(m_p38991));
				return retval;
			}
		}

		EventIgnored_c[] objs38992 = EventIgnored_c.EventIgnoredInstances(
				modelRoot, new EventIgnored_c_test38987_c(getSmstt_id(),
						getSmevt_id(), getSm_id(), getSmspd_id()));

		objs38986 = objs38986 + objs38992.length;
		// Subtype Object: Cant Happen
		class CantHappen_c_test38993_c implements ClassQueryInterface_c {
			CantHappen_c_test38993_c(java.util.UUID p38994,
					java.util.UUID p38995, java.util.UUID p38996,
					java.util.UUID p38997) {
				m_p38994 = p38994;
				m_p38995 = p38995;
				m_p38996 = p38996;
				m_p38997 = p38997;
			}
			private java.util.UUID m_p38994;
			private java.util.UUID m_p38995;
			private java.util.UUID m_p38996;
			private java.util.UUID m_p38997;
			public boolean evaluate(Object candidate) {
				CantHappen_c selected = (CantHappen_c) candidate;
				boolean retval = false;
				retval = (selected.getSmstt_id().equals(m_p38994))
						& (selected.getSmevt_id().equals(m_p38995))
						& (selected.getSm_id().equals(m_p38996))
						& (selected.getSmspd_id().equals(m_p38997));
				return retval;
			}
		}

		CantHappen_c[] objs38998 = CantHappen_c.CantHappenInstances(modelRoot,
				new CantHappen_c_test38993_c(getSmstt_id(), getSmevt_id(),
						getSm_id(), getSmspd_id()));

		objs38986 = objs38986 + objs38998.length;
		// Subtype Object: New State Transition
		class NewStateTransition_c_test38999_c implements ClassQueryInterface_c {
			NewStateTransition_c_test38999_c(java.util.UUID p39000,
					java.util.UUID p39001, java.util.UUID p39002,
					java.util.UUID p39003) {
				m_p39000 = p39000;
				m_p39001 = p39001;
				m_p39002 = p39002;
				m_p39003 = p39003;
			}
			private java.util.UUID m_p39000;
			private java.util.UUID m_p39001;
			private java.util.UUID m_p39002;
			private java.util.UUID m_p39003;
			public boolean evaluate(Object candidate) {
				NewStateTransition_c selected = (NewStateTransition_c) candidate;
				boolean retval = false;
				retval = (selected.getSm_id().equals(m_p39000))
						& (selected.getSmstt_id().equals(m_p39001))
						& (selected.getSmevt_id().equals(m_p39002))
						& (selected.getSmspd_id().equals(m_p39003));
				return retval;
			}
		}

		NewStateTransition_c[] objs39004 = NewStateTransition_c
				.NewStateTransitionInstances(modelRoot,
						new NewStateTransition_c_test38999_c(getSm_id(),
								getSmstt_id(), getSmevt_id(), getSmspd_id()));

		objs38986 = objs38986 + objs39004.length;
		if (objs38986 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"State Event Matrix Entry", //$NON-NLS-1$
								"Consistency: Object: State Event Matrix Entry: Association: 504: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs38986)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: State Event Matrix Entry: Association: 504: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs38986), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineEvent_c v_evt = StateMachineEvent_c
				.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR503(this));

		if (((v_evt == null))) {

			return "State Event Matrix Entry ("
					+ Ooaofooa.Getorphanedelementname(modelRoot) + ")";

		}

		return "State Event Matrix Entry (" + v_evt.Get_name() + ")";

	} // End get_name
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineState_c v_fromState = StateMachineState_c
				.getOneSM_STATEOnR503(this);

		SemEvent_c v_event = SemEvent_c.getOneSM_SEVTOnR503(this);

		unrelateAcrossR503From(v_fromState);
		unrelateAcrossR503From(v_event);

		Disposechorei();

		NewStateTransition_c v_nstxn = NewStateTransition_c
				.getOneSM_NSTXNOnR504(this);

		if (((v_nstxn != null))) {

			this.unrelateAcrossR504From(v_nstxn);

			Transition_c v_txn = Transition_c.getOneSM_TXNOnR507(v_nstxn);

			NoEventTransition_c v_netxn = new NoEventTransition_c(modelRoot);
			Ooaofooa.getDefaultInstance().fireModelElementCreated(
					new BaseModelDelta(Modeleventnotification_c.DELTA_NEW,
							v_netxn));

			if (v_nstxn != null) {
				v_nstxn.unrelateAcrossR507From(v_txn);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Unrelate attempted on null left hand instance.", t);
			}

			if (v_txn != null) {
				v_txn.relateAcrossR507To(v_netxn);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			if (v_fromState != null) {
				v_fromState.relateAcrossR508To(v_netxn);
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError(
						"Relate attempted on null left hand instance.", t);
			}

			if (v_nstxn != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_nstxn.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_nstxn));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public void Migratechtoei() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Migratechtoei");
		final ModelRoot modelRoot = getModelRoot();
		CantHappen_c v_ch = CantHappen_c.getOneSM_CHOnR504(this);

		if (((v_ch != null))) {

			EventIgnored_c v_ei = new EventIgnored_c(modelRoot);
			Ooaofooa.getDefaultInstance()
					.fireModelElementCreated(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_NEW, v_ei));

			this.unrelateAcrossR504From(v_ch);

			this.relateAcrossR504To(v_ei);

			if (v_ch != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_ch.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_ch));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

	} // End migrateChToEi
	public void Migrateeitoch() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Migrateeitoch");
		final ModelRoot modelRoot = getModelRoot();
		EventIgnored_c v_ei = EventIgnored_c.getOneSM_EIGNOnR504(this);

		if (((v_ei != null))) {

			CantHappen_c v_ch = new CantHappen_c(modelRoot);
			Ooaofooa.getDefaultInstance()
					.fireModelElementCreated(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_NEW, v_ch));

			this.unrelateAcrossR504From(v_ei);

			this.relateAcrossR504To(v_ch);

			if (v_ei != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_ei.delete()) {
					Ooaofooa.getDefaultInstance()
							.fireModelElementDeleted(
									new BaseModelDelta(
											Modeleventnotification_c.DELTA_DELETE,
											v_ei));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

	} // End migrateEiToCh
	public void Disposechorei() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Disposechorei");
		final ModelRoot modelRoot = getModelRoot();
		CantHappen_c v_chevt = CantHappen_c.getOneSM_CHOnR504(this);

		if (((v_chevt != null))) {

			this.unrelateAcrossR504From(v_chevt);

			if (v_chevt != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_chevt.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_chevt));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

		EventIgnored_c v_igevt = EventIgnored_c.getOneSM_EIGNOnR504(this);

		if (((v_igevt != null))) {

			this.unrelateAcrossR504From(v_igevt);

			if (v_igevt != null) {
				// get the location of this element in the instance list
				// before deleting
				if (v_igevt.delete()) {
					Ooaofooa.getDefaultInstance().fireModelElementDeleted(
							new BaseModelDelta(
									Modeleventnotification_c.DELTA_DELETE,
									v_igevt));
				}
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin.logError("Delete attempted on null instance.", t);
			}

		}

	} // End disposeChOrEi
	public void Mergedispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "State Event Matrix Entry",
				" Operation entered: StateEventMatrixEntry::Mergedispose");
		final ModelRoot modelRoot = getModelRoot();
		StateMachineState_c v_fromState = StateMachineState_c
				.getOneSM_STATEOnR503(this);

		SemEvent_c v_event = SemEvent_c.getOneSM_SEVTOnR503(this);

		unrelateAcrossR503From(v_fromState);
		unrelateAcrossR503From(v_event);

		Disposechorei();

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End mergeDispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end State Event Matrix Entry
