package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ComponentPackageInPackage_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_COMPONENT_PACKAGE_IN_PACKAGE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ComponentPackageInPackage_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ComponentPackageInPackage_c(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_parent_package_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_parent_package_id = IdAssigner.preprocessUUID(p_m_parent_package_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ComponentPackageInPackage_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_parent_package_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);
		ComponentPackageInPackage_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ComponentPackageInPackage_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_parent_package_id = IdAssigner
						.preprocessUUID(p_m_parent_package_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ComponentPackageInPackage_c(modelRoot, p_m_id,
					p_m_parent_package_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ComponentPackageInPackage_c resolveInstance(
			ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_parent_package_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);
		ComponentPackageInPackage_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ComponentPackageInPackage_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_parent_package_id = IdAssigner
						.preprocessUUID(p_m_parent_package_id);

				return source;
			}
		}
		// there is no instance matching the id
		ComponentPackageInPackage_c new_inst = new ComponentPackageInPackage_c(
				modelRoot, p_m_id, p_m_parent_package_id);
		return new_inst;
	}
	public ComponentPackageInPackage_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = idAssigner.createUUID();
		m_parent_package_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ComponentPackageInPackage_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ComponentPackageInPackage_c)) {
			return false;
		}

		ComponentPackageInPackage_c me = (ComponentPackageInPackage_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ComponentPackageInPackage_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ComponentPackageInPackage_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ComponentPackageInPackage_c)) {
			return false;
		}

		ComponentPackageInPackage_c me = (ComponentPackageInPackage_c) elem;
		if (!getId().equals(((ComponentPackageInPackage_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private long m_idLongBased;
	private java.util.UUID m_parent_package_id;

	// declare association references from this class

	// referring navigation

	ComponentPackage_c MayBeNestedInComponentPackage;
	public void relateAcrossR4600To(ComponentPackage_c target) {
		relateAcrossR4600To(target, true);
	}
	public void relateAcrossR4600To(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == MayBeNestedInComponentPackage)
			return; // already related

		if (MayBeNestedInComponentPackage != target) {

			Object oldKey = getInstanceKey();

			if (MayBeNestedInComponentPackage != null) {
				UmlProblem.removeXtUMLProblem(this,
						MayBeNestedInComponentPackage);

				MayBeNestedInComponentPackage.clearBackPointerR4600To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ComponentPackageInPackage_c.relateAcrossR4600To(ComponentPackage_c target)",
									"Relate performed across R4600 from Component Package in Package to Component Package without unrelate of prior instance.");
				}
			}

			MayBeNestedInComponentPackage = target;
			if (IdAssigner.NULL_UUID.equals(target.getPackage_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_parent_package_id = target.getPackage_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4600To(this);
			target.addRef();
			UmlProblem.handleDanglingReference(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4600", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4600From(ComponentPackage_c target) {
		unrelateAcrossR4600From(target, true);
	}
	public void unrelateAcrossR4600From(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (MayBeNestedInComponentPackage == null)
			return; // already unrelated

		if (target != MayBeNestedInComponentPackage) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4600",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4600To(this);
		}

		if (MayBeNestedInComponentPackage != null) {

			m_parent_package_id = MayBeNestedInComponentPackage.getPackage_id();
			if (IdAssigner.NULL_UUID.equals(m_parent_package_id)) {
				m_parent_package_id = MayBeNestedInComponentPackage
						.getPackage_idCachedValue();
			}
			MayBeNestedInComponentPackage = null;
			target.removeRef();
			UmlProblem.removeXtUMLProblem(this, target);
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4600", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ComponentPackage_c[] targets) {
		return getOneCP_CPINPOnR4600(targets, null);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		ComponentPackageInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCP_CPINPOnR4600(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ComponentPackage_c target) {
		return getOneCP_CPINPOnR4600(target, null);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ComponentPackage_c target, boolean loadComponent) {
		return getOneCP_CPINPOnR4600(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ComponentPackage_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCP_CPINPOnR4600(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test) {
		return getOneCP_CPINPOnR4600(modelRoot, target, test, true);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4600(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		ComponentPackageInPackage_c result = null;

		result = find_getOneCP_CPINPOnR4600(modelRoot, target, test);
		if (result == null && (loadComponent)) {
			// Containment Relation
			List comps = PersistenceManager.findAllChildComponents(
					target.getPersistableComponent(), modelRoot,
					ComponentPackageInPackage_c.class);
			for (int i = 0; i < comps.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) comps
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = find_getOneCP_CPINPOnR4600(modelRoot, target,
								test);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}

		return result;
	}
	private static ComponentPackageInPackage_c find_getOneCP_CPINPOnR4600(
			ModelRoot modelRoot, ComponentPackage_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_MayNestComponentPackageInPackageMayNest_R4600) {
				for (int i = 0; i < target.backPointer_MayNestComponentPackageInPackageMayNest_R4600
						.size(); ++i) {
					ComponentPackageInPackage_c source = (ComponentPackageInPackage_c) target.backPointer_MayNestComponentPackageInPackageMayNest_R4600
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c[] targets) {
		return getManyCP_CPINPsOnR4600(targets, null);
	}
	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c[] targets, boolean loadComponent) {
		return getManyCP_CPINPsOnR4600(targets, null, loadComponent);
	}
	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		return getManyCP_CPINPsOnR4600(targets, test, true);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ComponentPackageInPackage_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistableModelComponent[] pmcs = new PersistableModelComponent[targets.length];
			for (int i = 0; i < targets.length; i++) {
				pmcs[i] = targets[i].getPersistableComponent();
			}
			PersistenceManager.ensureAllChildInstancesLoaded(pmcs, modelRoot,
					ComponentPackageInPackage_c.class);

		}

		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_MayNestComponentPackageInPackageMayNest_R4600) {
				for (int j = 0; j < targets[i].backPointer_MayNestComponentPackageInPackageMayNest_R4600
						.size(); ++j) {
					ComponentPackageInPackage_c source = (ComponentPackageInPackage_c) targets[i].backPointer_MayNestComponentPackageInPackageMayNest_R4600
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ComponentPackageInPackage_c[] ret_set = new ComponentPackageInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentPackageInPackage_c[0];
		}
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c target) {
		return getManyCP_CPINPsOnR4600(target, null);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c target, boolean loadComponent) {
		return getManyCP_CPINPsOnR4600(target, null, loadComponent);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c target, ClassQueryInterface_c test) {
		return getManyCP_CPINPsOnR4600(target, test, true);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4600(
			ComponentPackage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ComponentPackageInPackage_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		if (loadComponent) {
			//Containment Relation
			PersistenceManager.ensureAllChildInstancesLoaded(
					target.getPersistableComponent(), modelRoot,
					ComponentPackageInPackage_c.class);
		}
		Vector matches = new Vector();
		synchronized (target.backPointer_MayNestComponentPackageInPackageMayNest_R4600) {
			for (int i = 0; i < target.backPointer_MayNestComponentPackageInPackageMayNest_R4600
					.size(); ++i) {
				ComponentPackageInPackage_c source = (ComponentPackageInPackage_c) target.backPointer_MayNestComponentPackageInPackageMayNest_R4600
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ComponentPackageInPackage_c[] ret_set = new ComponentPackageInPackage_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentPackageInPackage_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	ComponentPackage_c backPointer_ProvidesNestingComponentPackageProvidesNesting_R4601;

	public void setComponentPackageOrderInChildListR4601(
			ComponentPackage_c target, int index) {
		unrelateAcrossR4601From(target);
		ComponentPackage_c[] elements = ComponentPackage_c
				.getManyCP_CPsOnR4601(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR4601From((ComponentPackage_c) elements[i]);
			}
			count++;
		}
		relateAcrossR4601To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR4601To((ComponentPackage_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR4601To(ComponentPackage_c target) {
		if (target != null) {
			target.relateAcrossR4601To(this, true);
		}
	}

	public void relateAcrossR4601To(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR4601To(this, notifyChanges);
		}
	}

	public void setBackPointerR4601To(ComponentPackage_c target) {
		backPointer_ProvidesNestingComponentPackageProvidesNesting_R4601 = target;
	}

	public void unrelateAcrossR4601From(ComponentPackage_c target) {
		if (target != null) {
			target.unrelateAcrossR4601From(this, true);
		}
	}

	public void unrelateAcrossR4601From(ComponentPackage_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR4601From(this, notifyChanges);
		}
	}

	public void clearBackPointerR4601To(ComponentPackage_c target) {
		if (target == backPointer_ProvidesNestingComponentPackageProvidesNesting_R4601) {
			backPointer_ProvidesNestingComponentPackageProvidesNesting_R4601 = null;
		}
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4601(
			ComponentPackage_c[] targets) {
		return getOneCP_CPINPOnR4601(targets, null);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4601(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		return getOneCP_CPINPOnR4601(targets, test, true);
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4601(
			ComponentPackage_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ComponentPackageInPackage_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ComponentPackageInPackage_c candidate_val = getOneCP_CPINPOnR4601(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCP_CPINPOnR4601(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4601(
			ComponentPackage_c target) {
		return getOneCP_CPINPOnR4601(target, true);
	}
	public static ComponentPackageInPackage_c getOneCP_CPINPOnR4601(
			ComponentPackage_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsNestedThroughComponentPackageInPackage;
		} else {
			return null;
		}
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c[] targets, ClassQueryInterface_c test) {
		return getManyCP_CPINPsOnR4601(targets, test, true);
	}

	public static ComponentPackageInPackage_c [] getManyCP_CPINPsOnR4601(ComponentPackage_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ComponentPackageInPackage_c[0];
  
  
  LinkedHashSet<ComponentPackageInPackage_c> elementsSet = new LinkedHashSet<ComponentPackageInPackage_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsNestedThroughComponentPackageInPackage == null)
	  targets[i].loadProxy();
    ComponentPackageInPackage_c associate = targets[i].IsNestedThroughComponentPackageInPackage;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  ComponentPackageInPackage_c[] result = new ComponentPackageInPackage_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c[] targets) {
		return getManyCP_CPINPsOnR4601(targets, null);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			ComponentPackage_c[] targetArray = new ComponentPackage_c[1];
			targetArray[0] = target;
			return getManyCP_CPINPsOnR4601(targetArray, test, loadComponent);
		} else {
			ComponentPackageInPackage_c[] result = new ComponentPackageInPackage_c[0];
			return result;
		}

	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c target, ClassQueryInterface_c test) {
		return getManyCP_CPINPsOnR4601(target, null, true);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c target) {
		return getManyCP_CPINPsOnR4601(target, null, true);
	}

	public static ComponentPackageInPackage_c[] getManyCP_CPINPsOnR4601(
			ComponentPackage_c target, boolean loadComponent) {
		return getManyCP_CPINPsOnR4601(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (MayBeNestedInComponentPackage == null) {
			// R4600
			ComponentPackage_c relInst57177 = (ComponentPackage_c) baseRoot
					.getInstanceList(ComponentPackage_c.class).get(
							new Object[]{m_parent_package_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57177 == null) {
				relInst57177 = (ComponentPackage_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(ComponentPackage_c.class)
						.get(new Object[]{m_parent_package_id});
			}
			if (relInst57177 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57177 = (ComponentPackage_c) roots[i]
							.getInstanceList(ComponentPackage_c.class).get(
									new Object[]{m_parent_package_id});
					if (relInst57177 != null)
						break;
				}
			}
			//synchronized
			if (relInst57177 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57177) && !isProxy())) {
					relInst57177.relateAcrossR4600To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4600
		// CP_CP
		inst = MayBeNestedInComponentPackage;
		unrelateAcrossR4600From(MayBeNestedInComponentPackage, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ComponentPackageInPackage_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ComponentPackageInPackage_c inst = (ComponentPackageInPackage_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ComponentPackageInPackage_c ComponentPackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ComponentPackageInPackage_c result = findComponentPackageInPackageInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ComponentPackageInPackage_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findComponentPackageInPackageInstance(
								modelRoot, test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ComponentPackageInPackage_c findComponentPackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentPackageInPackage_c x = (ComponentPackageInPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ComponentPackageInPackage_c ComponentPackageInPackageInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentPackageInPackageInstance(modelRoot, test, true);
	}

	public static ComponentPackageInPackage_c ComponentPackageInPackageInstance(
			ModelRoot modelRoot) {
		return ComponentPackageInPackageInstance(modelRoot, null, true);
	}

	public static ComponentPackageInPackage_c[] ComponentPackageInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ComponentPackageInPackage_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ComponentPackageInPackage_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentPackageInPackage_c x = (ComponentPackageInPackage_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ComponentPackageInPackage_c[] ret_set = new ComponentPackageInPackage_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ComponentPackageInPackage_c[0];
			}
		}
	}
	public static ComponentPackageInPackage_c[] ComponentPackageInPackageInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentPackageInPackageInstances(modelRoot, test, true);
	}
	public static ComponentPackageInPackage_c[] ComponentPackageInPackageInstances(
			ModelRoot modelRoot) {
		return ComponentPackageInPackageInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Component Package in Package.dispose call: ";
		ComponentPackage_c testR4600Inst = ComponentPackage_c
				.getOneCP_CPOnR4600(this, false);

		if (testR4600Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4600 ";
		}
		ComponentPackage_c testR4601Inst = ComponentPackage_c
				.getOneCP_CPOnR4601(this, false);

		if (testR4601Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4601 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE,
						"Component Package in Package", errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("parent_package_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getParent_package_idLongBased() {
		if (MayBeNestedInComponentPackage != null) {
			return MayBeNestedInComponentPackage.getPackage_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getParent_package_id() {
		if (MayBeNestedInComponentPackage != null) {
			return MayBeNestedInComponentPackage.getPackage_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParent_package_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_parent_package_id))
			return m_parent_package_id;
		else
			return getParent_package_id();
	}

	public void setParent_package_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_parent_package_id)) {
				return;
			}
		} else if (m_parent_package_id != null) {
			if (m_parent_package_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Parent_package_id", m_parent_package_id, newValue, true);
		m_parent_package_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Component Package in Package", //$NON-NLS-1$
						" Operation entered: Component Package in Package::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ComponentPackageInPackage_c[] objs = ComponentPackageInPackage_c
				.ComponentPackageInPackageInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Component Package in Package", //$NON-NLS-1$
						" Operation entered: Component Package in Package::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ComponentPackageInPackage_c_test57179_c
				implements
					ClassQueryInterface_c {
			ComponentPackageInPackage_c_test57179_c(java.util.UUID p57180) {
				m_p57180 = p57180;
			}
			private java.util.UUID m_p57180;
			public boolean evaluate(Object candidate) {
				ComponentPackageInPackage_c selected = (ComponentPackageInPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57180));
				return retval;
			}
		}

		ComponentPackageInPackage_c[] objs57178 = ComponentPackageInPackage_c
				.ComponentPackageInPackageInstances(modelRoot,
						new ComponentPackageInPackage_c_test57179_c(getId()));

		if (((objs57178.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Component Package in Package", //$NON-NLS-1$
								"Consistency: Object: Component Package in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57178.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Package in Package: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57178.length), e);
			}
			retval = false;

		}

		if (((objs57178.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Component Package in Package", //$NON-NLS-1$
								"Consistency: Object: Component Package in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57178.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Package in Package: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57178.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Component Package in Package is a referring class in association: rel.Numb = 4600
		// The participating class is: Component Package
		class ComponentPackage_c_test57184_c implements ClassQueryInterface_c {
			ComponentPackage_c_test57184_c(java.util.UUID p57185) {
				m_p57185 = p57185;
			}
			private java.util.UUID m_p57185;
			public boolean evaluate(Object candidate) {
				ComponentPackage_c selected = (ComponentPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getPackage_id().equals(m_p57185));
				return retval;
			}
		}

		ComponentPackage_c[] objs57183 = ComponentPackage_c
				.ComponentPackageInstances(modelRoot,
						new ComponentPackage_c_test57184_c(
								getParent_package_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57183.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Component Package in Package", //$NON-NLS-1$
								"Consistency: Object: Component Package in Package: Association: 4600: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57183.length)
										+ " Parent_Package_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Package in Package: Association: 4600: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57183.length)
										+ " Parent_Package_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Component Package in Package is a participating class in association: rel.Numb = 4601
		// Object: Component Package
		class ComponentPackage_c_test57187_c implements ClassQueryInterface_c {
			ComponentPackage_c_test57187_c(java.util.UUID p57188) {
				m_p57188 = p57188;
			}
			private java.util.UUID m_p57188;
			public boolean evaluate(Object candidate) {
				ComponentPackage_c selected = (ComponentPackage_c) candidate;
				boolean retval = false;
				retval = (selected.getParentlink_id().equals(m_p57188));
				return retval;
			}
		}

		ComponentPackage_c[] objs57186 = ComponentPackage_c
				.ComponentPackageInstances(modelRoot,
						new ComponentPackage_c_test57187_c(getId()));

		if (((objs57186.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(
								ILogger.CONSISTENCY,
								"Component Package in Package", //$NON-NLS-1$
								"Consistency: Object: Component Package in Package: Association: 4601: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57186.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component Package in Package: Association: 4601: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57186.length), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Component Package in Package",
				" Operation entered: ComponentPackageInPackage::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		ComponentPackage_c v_componentPackage = ComponentPackage_c
				.getOneCP_CPOnR4601(this);

		if (((v_componentPackage != null))) {

			this.unrelateAcrossR4601From(v_componentPackage);

			if (v_componentPackage != null) {
				v_componentPackage.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		v_componentPackage = ComponentPackage_c.getOneCP_CPOnR4600(this);

		if (((v_componentPackage != null))) {

			this.unrelateAcrossR4600From(v_componentPackage);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Component Package in Package
