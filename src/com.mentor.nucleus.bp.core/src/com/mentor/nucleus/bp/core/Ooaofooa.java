//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Ooaofooa.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

package com.mentor.nucleus.bp.core;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

import com.mentor.nucleus.bp.core.util.UIUtil;
import org.eclipse.core.runtime.IProgressMonitor;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.*;
/**
 * The model-root of the domain.  
 */
public class Ooaofooa 
	extends EclipseOoaofooa
{
  // To modify these counters the caller must first acquire
	// the appropriate semaphore.  These should not be directly 
	// manipulated, use the helper functions defined below.
	// These are used to prevent verifier execution during save operations
	// while allowing multiple saves or multiple verifier threads to run
  // concurrently.  In order to prevent multiple threads running against
  // the same Execution Engine at the same time, we keep a map of
  // currently running I_EXEs. Subsequent threads running against an 
  // already running I_EXE must wait until the former is finished.
	public static volatile int verifiersRunning = 0;
	public static Object verifiersRunningSemaphore = new Object();
	public static volatile int threadsSaving = 0;
	public static Object threadsSavingSemaphore = new Object();
  public static Map<UUID,Integer> verifiersRunningMap = new ConcurrentHashMap<UUID,Integer>();

	public static void beginSaveOperation() {
		synchronized (threadsSavingSemaphore) {
			if (threadsSaving == 0) {
				while (verifiersRunning > 0) {
					try {
						synchronized (verifiersRunningSemaphore) {
							verifiersRunningSemaphore.wait();
						}
					} catch (InterruptedException e) {

					}
				}
			}

			threadsSaving++;
		}
	}

	public static void endSaveOperation() {
		synchronized (threadsSavingSemaphore) {
			threadsSaving--;
			if (threadsSaving == 0) {
				threadsSavingSemaphore.notify();
			}
		}
	}

    public static void beginVerifierExecution(UUID engineID) {
        try {
		synchronized (verifiersRunningSemaphore) {
			if (verifiersRunning == 0) {
				while (threadsSaving > 0) {
						synchronized (threadsSavingSemaphore) {
							threadsSavingSemaphore.wait();
                        }
                    }
                }

                verifiersRunning++;
						}

            synchronized (engineID) {
                if ( !verifiersRunningMap.containsKey(engineID) ) {
                    verifiersRunningMap.put(engineID, 0);
                } else {
                    if ( verifiersRunningMap.containsKey(engineID) ) {
                        engineID.wait();
                        verifiersRunningMap.put(engineID, 0);
					}
				}
			}
        } catch (InterruptedException e) {
        }
    }

    public static void endVerifierExecution(UUID engineID) {
        synchronized (engineID) {
            verifiersRunningMap.remove(engineID);
            engineID.notify();
		}

		synchronized (verifiersRunningSemaphore) {
			verifiersRunning--;
			if (verifiersRunning == 0) {
				verifiersRunningSemaphore.notifyAll();
			}
		}
	}

    protected Ooaofooa(String aRootId)
    {
    	super(aRootId);
    }

  public void clearDatabase(IProgressMonitor pm)  
  {
	pm.beginTask("Clearing database...", 347);
  	setRoot( null );
    AutomaticWiring_c.clearInstances(this);
    pm.worked(1);
    VariableLocation_c.clearInstances(this);
    pm.worked(1);
    Variable_c.clearInstances(this);
    pm.worked(1);
    Value_c.clearInstances(this);
    pm.worked(1);
    UnaryOperation_c.clearInstances(this);
    pm.worked(1);
    TransientVar_c.clearInstances(this);
    pm.worked(1);
    TransientValueReference_c.clearInstances(this);
    pm.worked(1);
    SymbolicConstantValue_c.clearInstances(this);
    pm.worked(1);
    SelectedReference_c.clearInstances(this);
    pm.worked(1);
    ParameterValue_c.clearInstances(this);
    pm.worked(1);
    OperationValue_c.clearInstances(this);
    pm.worked(1);
    MessageValue_c.clearInstances(this);
    pm.worked(1);
    MemberValueReference_c.clearInstances(this);
    pm.worked(1);
    LiteralString_c.clearInstances(this);
    pm.worked(1);
    LiteralReal_c.clearInstances(this);
    pm.worked(1);
    LiteralInteger_c.clearInstances(this);
    pm.worked(1);
    LiteralEnumerator_c.clearInstances(this);
    pm.worked(1);
    LiteralBoolean_c.clearInstances(this);
    pm.worked(1);
    InstanceSetReference_c.clearInstances(this);
    pm.worked(1);
    InstanceSet_c.clearInstances(this);
    pm.worked(1);
    InstanceReference_c.clearInstances(this);
    pm.worked(1);
    InstanceHandle_c.clearInstances(this);
    pm.worked(1);
    FunctionValue_c.clearInstances(this);
    pm.worked(1);
    EventParameterReference_c.clearInstances(this);
    pm.worked(1);
    EventDatumValue_c.clearInstances(this);
    pm.worked(1);
    BridgeValue_c.clearInstances(this);
    pm.worked(1);
    BinaryOperation_c.clearInstances(this);
    pm.worked(1);
    AttributeValueReference_c.clearInstances(this);
    pm.worked(1);
    ArrayLengthValue_c.clearInstances(this);
    pm.worked(1);
    ArrayElementReference_c.clearInstances(this);
    pm.worked(1);
    ActualParameter_c.clearInstances(this);
    pm.worked(1);
    UseCaseInUseCase_c.clearInstances(this);
    pm.worked(1);
    UseCaseDiagram_c.clearInstances(this);
    pm.worked(1);
    UseCaseAssociation_c.clearInstances(this);
    pm.worked(1);
    ParticipantInUseCase_c.clearInstances(this);
    pm.worked(1);
    Include_c.clearInstances(this);
    pm.worked(1);
    Generalization_c.clearInstances(this);
    pm.worked(1);
    Extend_c.clearInstances(this);
    pm.worked(1);
    BinaryAssociation_c.clearInstances(this);
    pm.worked(1);
    AssociationInUseCase_c.clearInstances(this);
    pm.worked(1);
    SystemDatatypePackage_c.clearInstances(this);
    pm.worked(1);
    SystemDatatypeInPackage_c.clearInstances(this);
    pm.worked(1);
    SystemConstantInPackage_c.clearInstances(this);
    pm.worked(1);
    ReferredToIdentifierAttribute_c.clearInstances(this);
    pm.worked(1);
    ReferentialAttributeVisitedRecorder_c.clearInstances(this);
    pm.worked(1);
    ReferentialAttribute_c.clearInstances(this);
    pm.worked(1);
    OperationParameter_c.clearInstances(this);
    pm.worked(1);
    Operation_c.clearInstances(this);
    pm.worked(1);
    NewBaseAttribute_c.clearInstances(this);
    pm.worked(1);
    ModelClass_c.clearInstances(this);
    pm.worked(1);
    ImportedClass_c.clearInstances(this);
    pm.worked(1);
    DerivedBaseAttribute_c.clearInstances(this);
    pm.worked(1);
    ClassIdentifierAttribute_c.clearInstances(this);
    pm.worked(1);
    ClassIdentifier_c.clearInstances(this);
    pm.worked(1);
    BaseAttribute_c.clearInstances(this);
    pm.worked(1);
    AttributeReferenceInClass_c.clearInstances(this);
    pm.worked(1);
    Attribute_c.clearInstances(this);
    pm.worked(1);
    TransitionActionHome_c.clearInstances(this);
    pm.worked(1);
    Transition_c.clearInstances(this);
    pm.worked(1);
    SupplementalDataItems_c.clearInstances(this);
    pm.worked(1);
    StateMachineState_c.clearInstances(this);
    pm.worked(1);
    StateMachineEventDataItem_c.clearInstances(this);
    pm.worked(1);
    StateMachineEvent_c.clearInstances(this);
    pm.worked(1);
    StateMachine_c.clearInstances(this);
    pm.worked(1);
    StateEventMatrixEntry_c.clearInstances(this);
    pm.worked(1);
    SignalEvent_c.clearInstances(this);
    pm.worked(1);
    SemEvent_c.clearInstances(this);
    pm.worked(1);
    PolymorphicEvent_c.clearInstances(this);
    pm.worked(1);
    NonLocalEvent_c.clearInstances(this);
    pm.worked(1);
    NoEventTransition_c.clearInstances(this);
    pm.worked(1);
    NewStateTransition_c.clearInstances(this);
    pm.worked(1);
    MooreStateMachine_c.clearInstances(this);
    pm.worked(1);
    MooreActionHome_c.clearInstances(this);
    pm.worked(1);
    MealyStateMachine_c.clearInstances(this);
    pm.worked(1);
    MealyActionHome_c.clearInstances(this);
    pm.worked(1);
    LocalEvent_c.clearInstances(this);
    pm.worked(1);
    InstanceStateMachine_c.clearInstances(this);
    pm.worked(1);
    EventSupplementalData_c.clearInstances(this);
    pm.worked(1);
    EventIgnored_c.clearInstances(this);
    pm.worked(1);
    CreationTransition_c.clearInstances(this);
    pm.worked(1);
    ClassStateMachine_c.clearInstances(this);
    pm.worked(1);
    CantHappen_c.clearInstances(this);
    pm.worked(1);
    ActionHome_c.clearInstances(this);
    pm.worked(1);
    Action_c.clearInstances(this);
    pm.worked(1);
    SequenceInSequence_c.clearInstances(this);
    pm.worked(1);
    Sequence_c.clearInstances(this);
    pm.worked(1);
    MessageInSequence_c.clearInstances(this);
    pm.worked(1);
    SelectRelatedWhere_c.clearInstances(this);
    pm.worked(1);
    SelectRelatedBy_c.clearInstances(this);
    pm.worked(1);
    SelectFromInstancesWhere_c.clearInstances(this);
    pm.worked(1);
    SelectFromInstances_c.clearInstances(this);
    pm.worked(1);
    Select_c.clearInstances(this);
    pm.worked(1);
    ChainLink_c.clearInstances(this);
    pm.worked(1);
    SearchResult_c.clearInstances(this);
    pm.worked(1);
    NameMatch_c.clearInstances(this);
    pm.worked(1);
    Match_c.clearInstances(this);
    pm.worked(1);
    ContentMatchResult_c.clearInstances(this);
    pm.worked(1);
    ContentMatch_c.clearInstances(this);
    pm.worked(1);
    ReferencesQuery_c.clearInstances(this);
    pm.worked(1);
    Query_c.clearInstances(this);
    pm.worked(1);
    DescriptionQuery_c.clearInstances(this);
    pm.worked(1);
    DeclarationQuery_c.clearInstances(this);
    pm.worked(1);
    ActionLanguageQuery_c.clearInstances(this);
    pm.worked(1);
    SearchableElement_c.clearInstances(this);
    pm.worked(1);
    SearchParticipant_c.clearInstances(this);
    pm.worked(1);
    NamedSearchable_c.clearInstances(this);
    pm.worked(1);
    DescriptionSearchable_c.clearInstances(this);
    pm.worked(1);
    ActionLanguageSearchable_c.clearInstances(this);
    pm.worked(1);
    SearchEngine_c.clearInstances(this);
    pm.worked(1);
    ReferencesEngine_c.clearInstances(this);
    pm.worked(1);
    DescriptionEngine_c.clearInstances(this);
    pm.worked(1);
    DeclarationsEngine_c.clearInstances(this);
    pm.worked(1);
    ActionLanguageEngine_c.clearInstances(this);
    pm.worked(1);
    UnrelateUsing_c.clearInstances(this);
    pm.worked(1);
    Unrelate_c.clearInstances(this);
    pm.worked(1);
    RelateUsing_c.clearInstances(this);
    pm.worked(1);
    Relate_c.clearInstances(this);
    pm.worked(1);
    SatisfactionInComponentPackage_c.clearInstances(this);
    pm.worked(1);
    SatisfactionInComponent_c.clearInstances(this);
    pm.worked(1);
    DelegationInComponent_c.clearInstances(this);
    pm.worked(1);
    SearchResultSet_c.clearInstances(this);
    pm.worked(1);
    PackageableElement_c.clearInstances(this);
    pm.worked(1);
    ElementVisibility_c.clearInstances(this);
    pm.worked(1);
    ComponentVisibility_c.clearInstances(this);
    pm.worked(1);
    ComponentResultSet_c.clearInstances(this);
    pm.worked(1);
    IntegrityManager_c.clearInstances(this);
    pm.worked(1);
    IntegrityIssue_c.clearInstances(this);
    pm.worked(1);
    SynchronousMessage_c.clearInstances(this);
    pm.worked(1);
    SignalMessage_c.clearInstances(this);
    pm.worked(1);
    ReturnMessage_c.clearInstances(this);
    pm.worked(1);
    OperationMessage_c.clearInstances(this);
    pm.worked(1);
    OperationArgument_c.clearInstances(this);
    pm.worked(1);
    MessageArgument_c.clearInstances(this);
    pm.worked(1);
    Message_c.clearInstances(this);
    pm.worked(1);
    InterfaceOperationMessage_c.clearInstances(this);
    pm.worked(1);
    InformalSynchronousMessage_c.clearInstances(this);
    pm.worked(1);
    InformalAsynchronousMessage_c.clearInstances(this);
    pm.worked(1);
    InformalArgument_c.clearInstances(this);
    pm.worked(1);
    FunctionMessage_c.clearInstances(this);
    pm.worked(1);
    FunctionArgument_c.clearInstances(this);
    pm.worked(1);
    ExecutablePropertyArgument_c.clearInstances(this);
    pm.worked(1);
    EventMessage_c.clearInstances(this);
    pm.worked(1);
    EventArgument_c.clearInstances(this);
    pm.worked(1);
    BridgeMessage_c.clearInstances(this);
    pm.worked(1);
    BridgeArgument_c.clearInstances(this);
    pm.worked(1);
    AsynchronousMessage_c.clearInstances(this);
    pm.worked(1);
    SignalInvocation_c.clearInstances(this);
    pm.worked(1);
    ReturnStmt_c.clearInstances(this);
    pm.worked(1);
    OperationInvocation_c.clearInstances(this);
    pm.worked(1);
    InterfaceOperationInvocation_c.clearInstances(this);
    pm.worked(1);
    FunctionInvocation_c.clearInstances(this);
    pm.worked(1);
    BridgeInvocation_c.clearInstances(this);
    pm.worked(1);
    InterfacePackageInInterfacePackage_c.clearInstances(this);
    pm.worked(1);
    InterfacePackage_c.clearInstances(this);
    pm.worked(1);
    UseCaseParticipant_c.clearInstances(this);
    pm.worked(1);
    TimingMark_c.clearInstances(this);
    pm.worked(1);
    TimeSpan_c.clearInstances(this);
    pm.worked(1);
    PackageParticipant_c.clearInstances(this);
    pm.worked(1);
    Lifespan_c.clearInstances(this);
    pm.worked(1);
    InteractionParticipant_c.clearInstances(this);
    pm.worked(1);
    InstanceAttributeValue_c.clearInstances(this);
    pm.worked(1);
    InformalAttributeValue_c.clearInstances(this);
    pm.worked(1);
    InformalAttribute_c.clearInstances(this);
    pm.worked(1);
    FunctionPackageParticipant_c.clearInstances(this);
    pm.worked(1);
    FormalAttributeValue_c.clearInstances(this);
    pm.worked(1);
    FormalAttribute_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityParticipant_c.clearInstances(this);
    pm.worked(1);
    ComponentParticipant_c.clearInstances(this);
    pm.worked(1);
    ClassParticipantAttribute_c.clearInstances(this);
    pm.worked(1);
    ClassParticipant_c.clearInstances(this);
    pm.worked(1);
    ClassInstanceParticipant_c.clearInstances(this);
    pm.worked(1);
    ActorParticipant_c.clearInstances(this);
    pm.worked(1);
    Delete_c.clearInstances(this);
    pm.worked(1);
    CreateNoVariable_c.clearInstances(this);
    pm.worked(1);
    Create_c.clearInstances(this);
    pm.worked(1);
    AssignToMember_c.clearInstances(this);
    pm.worked(1);
    Timer_c.clearInstances(this);
    pm.worked(1);
    PendingEvent_c.clearInstances(this);
    pm.worked(1);
    LinkParticipation_c.clearInstances(this);
    pm.worked(1);
    Link_c.clearInstances(this);
    pm.worked(1);
    Instance_c.clearInstances(this);
    pm.worked(1);
    DataItemValue_c.clearInstances(this);
    pm.worked(1);
    ComponentInstanceContainer_c.clearInstances(this);
    pm.worked(1);
    ComponentInstance_c.clearInstances(this);
    pm.worked(1);
    AttributeValue_c.clearInstances(this);
    pm.worked(1);
    GlobalElementInSystem_c.clearInstances(this);
    pm.worked(1);
    GenerateToExternalEntity_c.clearInstances(this);
    pm.worked(1);
    GenerateToCreator_c.clearInstances(this);
    pm.worked(1);
    GenerateToClass_c.clearInstances(this);
    pm.worked(1);
    GenerateSmEventStatement_c.clearInstances(this);
    pm.worked(1);
    GeneratePreexistingEvent_c.clearInstances(this);
    pm.worked(1);
    GenerateEventStatement_c.clearInstances(this);
    pm.worked(1);
    Generate_c.clearInstances(this);
    pm.worked(1);
    EventSpecificationStatement_c.clearInstances(this);
    pm.worked(1);
    CreateSmEventStatement_c.clearInstances(this);
    pm.worked(1);
    CreateEventToInstance_c.clearInstances(this);
    pm.worked(1);
    CreateEventToExternalEntity_c.clearInstances(this);
    pm.worked(1);
    CreateEventToCreator_c.clearInstances(this);
    pm.worked(1);
    CreateEventToClass_c.clearInstances(this);
    pm.worked(1);
    CreateEventStatement_c.clearInstances(this);
    pm.worked(1);
    SpecificationPackage_c.clearInstances(this);
    pm.worked(1);
    PackageInPackage_c.clearInstances(this);
    pm.worked(1);
    Package_c.clearInstances(this);
    pm.worked(1);
    UserDataType_c.clearInstances(this);
    pm.worked(1);
    SubsystemInSubsystem_c.clearInstances(this);
    pm.worked(1);
    SubsystemInDomain_c.clearInstances(this);
    pm.worked(1);
    Subsystem_c.clearInstances(this);
    pm.worked(1);
    StructuredDataType_c.clearInstances(this);
    pm.worked(1);
    StructureMember_c.clearInstances(this);
    pm.worked(1);
    FunctionPackageInDomain_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityPackageInDomain_c.clearInstances(this);
    pm.worked(1);
    InstanceReferenceDataType_c.clearInstances(this);
    pm.worked(1);
    FunctionParameter_c.clearInstances(this);
    pm.worked(1);
    FunctionPackageInPackage_c.clearInstances(this);
    pm.worked(1);
    FunctionPackage_c.clearInstances(this);
    pm.worked(1);
    FunctionInPackage_c.clearInstances(this);
    pm.worked(1);
    Function_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityPackage_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityInPackage_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityInModel_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityEventDataItem_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityEventData_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityEvent_c.clearInstances(this);
    pm.worked(1);
    ExternalEntityDataItem_c.clearInstances(this);
    pm.worked(1);
    ExternalEntity_c.clearInstances(this);
    pm.worked(1);
    Enumerator_c.clearInstances(this);
    pm.worked(1);
    EnumerationDataType_c.clearInstances(this);
    pm.worked(1);
    EePackageInPackage_c.clearInstances(this);
    pm.worked(1);
    Domain_c.clearInstances(this);
    pm.worked(1);
    Dimensions_c.clearInstances(this);
    pm.worked(1);
    DatatypeInSuppression_c.clearInstances(this);
    pm.worked(1);
    DataTypePackageInPackage_c.clearInstances(this);
    pm.worked(1);
    DataTypePackage_c.clearInstances(this);
    pm.worked(1);
    DataTypeInPackage_c.clearInstances(this);
    pm.worked(1);
    DataType_c.clearInstances(this);
    pm.worked(1);
    CoreDataType_c.clearInstances(this);
    pm.worked(1);
    BridgeParameter_c.clearInstances(this);
    pm.worked(1);
    Bridge_c.clearInstances(this);
    pm.worked(1);
    SymbolicConstant_c.clearInstances(this);
    pm.worked(1);
    LiteralSymbolicConstant_c.clearInstances(this);
    pm.worked(1);
    LeafSymbolicConstant_c.clearInstances(this);
    pm.worked(1);
    ConstantSpecification_c.clearInstances(this);
    pm.worked(1);
    ConstantInPackage_c.clearInstances(this);
    pm.worked(1);
    RequiredSignal_c.clearInstances(this);
    pm.worked(1);
    RequiredOperation_c.clearInstances(this);
    pm.worked(1);
    RequiredExecutableProperty_c.clearInstances(this);
    pm.worked(1);
    ProvidedSignal_c.clearInstances(this);
    pm.worked(1);
    ProvidedOperation_c.clearInstances(this);
    pm.worked(1);
    ProvidedExecutableProperty_c.clearInstances(this);
    pm.worked(1);
    Satisfaction_c.clearInstances(this);
    pm.worked(1);
    Requirement_c.clearInstances(this);
    pm.worked(1);
    Provision_c.clearInstances(this);
    pm.worked(1);
    PropertyParameter_c.clearInstances(this);
    pm.worked(1);
    Port_c.clearInstances(this);
    pm.worked(1);
    InterfaceSignal_c.clearInstances(this);
    pm.worked(1);
    InterfaceReferenceInDelegation_c.clearInstances(this);
    pm.worked(1);
    InterfaceReference_c.clearInstances(this);
    pm.worked(1);
    InterfaceOperation_c.clearInstances(this);
    pm.worked(1);
    Interface_c.clearInstances(this);
    pm.worked(1);
    ExecutableProperty_c.clearInstances(this);
    pm.worked(1);
    Delegation_c.clearInstances(this);
    pm.worked(1);
    ComponentPackageInPackage_c.clearInstances(this);
    pm.worked(1);
    ComponentPackage_c.clearInstances(this);
    pm.worked(1);
    DomainAsComponent_c.clearInstances(this);
    pm.worked(1);
    ComponentInComponent_c.clearInstances(this);
    pm.worked(1);
    ImportedRequirement_c.clearInstances(this);
    pm.worked(1);
    ImportedReference_c.clearInstances(this);
    pm.worked(1);
    ImportedProvisionInSatisfaction_c.clearInstances(this);
    pm.worked(1);
    ImportedProvision_c.clearInstances(this);
    pm.worked(1);
    ComponentReference_c.clearInstances(this);
    pm.worked(1);
    Component_c.clearInstances(this);
    pm.worked(1);
    SmToSmEventComm_c.clearInstances(this);
    pm.worked(1);
    SmToSmCommPath_c.clearInstances(this);
    pm.worked(1);
    SmToObjAttributeAccess_c.clearInstances(this);
    pm.worked(1);
    SmToObjAccessPath_c.clearInstances(this);
    pm.worked(1);
    SmToEeEventComm_c.clearInstances(this);
    pm.worked(1);
    SmToEeDataItemAccess_c.clearInstances(this);
    pm.worked(1);
    SmToEeCommPath_c.clearInstances(this);
    pm.worked(1);
    SmToEeAccessPath_c.clearInstances(this);
    pm.worked(1);
    EeToSmEventComm_c.clearInstances(this);
    pm.worked(1);
    EeToSmCommPath_c.clearInstances(this);
    pm.worked(1);
    CommunicationPath_c.clearInstances(this);
    pm.worked(1);
    AccessPath_c.clearInstances(this);
    pm.worked(1);
    ParticipantInCommunication_c.clearInstances(this);
    pm.worked(1);
    MessageInCommunication_c.clearInstances(this);
    pm.worked(1);
    CommunicationLink_c.clearInstances(this);
    pm.worked(1);
    CommunicationInCommunication_c.clearInstances(this);
    pm.worked(1);
    Communication_c.clearInstances(this);
    pm.worked(1);
    WhileStmt_c.clearInstances(this);
    pm.worked(1);
    TransitionActionBody_c.clearInstances(this);
    pm.worked(1);
    Statement_c.clearInstances(this);
    pm.worked(1);
    StateActionBody_c.clearInstances(this);
    pm.worked(1);
    RequiredSignalBody_c.clearInstances(this);
    pm.worked(1);
    RequiredOperationBody_c.clearInstances(this);
    pm.worked(1);
    ProvidedSignalBody_c.clearInstances(this);
    pm.worked(1);
    ProvidedOperationBody_c.clearInstances(this);
    pm.worked(1);
    OperationBody_c.clearInstances(this);
    pm.worked(1);
    IfStmt_c.clearInstances(this);
    pm.worked(1);
    FunctionBody_c.clearInstances(this);
    pm.worked(1);
    ForStmt_c.clearInstances(this);
    pm.worked(1);
    ElseifStmt_c.clearInstances(this);
    pm.worked(1);
    ElseStmt_c.clearInstances(this);
    pm.worked(1);
    DerivedAttributeBody_c.clearInstances(this);
    pm.worked(1);
    Control_c.clearInstances(this);
    pm.worked(1);
    Continue_c.clearInstances(this);
    pm.worked(1);
    BridgeBody_c.clearInstances(this);
    pm.worked(1);
    Break_c.clearInstances(this);
    pm.worked(1);
    BodyInElement_c.clearInstances(this);
    pm.worked(1);
    BodyInComponent_c.clearInstances(this);
    pm.worked(1);
    Body_c.clearInstances(this);
    pm.worked(1);
    Block_c.clearInstances(this);
    pm.worked(1);
    SubtypeSupertypeAssociation_c.clearInstances(this);
    pm.worked(1);
    SimpleAssociation_c.clearInstances(this);
    pm.worked(1);
    ReferringClassInAssoc_c.clearInstances(this);
    pm.worked(1);
    ReferredToClassInAssoc_c.clearInstances(this);
    pm.worked(1);
    LinkedAssociation_c.clearInstances(this);
    pm.worked(1);
    DerivedAssociation_c.clearInstances(this);
    pm.worked(1);
    ClassInAssociation_c.clearInstances(this);
    pm.worked(1);
    ClassAsSupertype_c.clearInstances(this);
    pm.worked(1);
    ClassAsSubtype_c.clearInstances(this);
    pm.worked(1);
    ClassAsSimpleParticipant_c.clearInstances(this);
    pm.worked(1);
    ClassAsSimpleFormalizer_c.clearInstances(this);
    pm.worked(1);
    ClassAsLink_c.clearInstances(this);
    pm.worked(1);
    ClassAsDerivedOtherSide_c.clearInstances(this);
    pm.worked(1);
    ClassAsDerivedOneSide_c.clearInstances(this);
    pm.worked(1);
    ClassAsAssociatedOtherSide_c.clearInstances(this);
    pm.worked(1);
    ClassAsAssociatedOneSide_c.clearInstances(this);
    pm.worked(1);
    Association_c.clearInstances(this);
    pm.worked(1);
    SendSignal_c.clearInstances(this);
    pm.worked(1);
    ObjectNode_c.clearInstances(this);
    pm.worked(1);
    InitialNode_c.clearInstances(this);
    pm.worked(1);
    ForkJoinNode_c.clearInstances(this);
    pm.worked(1);
    FlowFinalNode_c.clearInstances(this);
    pm.worked(1);
    DecisionMergeNode_c.clearInstances(this);
    pm.worked(1);
    ControlNode_c.clearInstances(this);
    pm.worked(1);
    ActivityPartition_c.clearInstances(this);
    pm.worked(1);
    ActivityNode_c.clearInstances(this);
    pm.worked(1);
    ActivityInActivity_c.clearInstances(this);
    pm.worked(1);
    ActivityFinalNode_c.clearInstances(this);
    pm.worked(1);
    ActivityEdge_c.clearInstances(this);
    pm.worked(1);
    ActivityDiagramAction_c.clearInstances(this);
    pm.worked(1);
    Activity_c.clearInstances(this);
    pm.worked(1);
    ActionNode_c.clearInstances(this);
    pm.worked(1);
    AcceptTimeEventAction_c.clearInstances(this);
    pm.worked(1);
    AcceptEventAction_c.clearInstances(this);
    pm.worked(1);
    AcceptEvent_c.clearInstances(this);
    pm.worked(1);
    
	 	super.clearDatabase(pm);  
  }
  //
  //
  public void checkDomainConsistency()  
  {
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return;
    }
  	setRoot( null );
    AutomaticWiring_c.checkClassConsistency(this);
    VariableLocation_c.checkClassConsistency(this);
    Variable_c.checkClassConsistency(this);
    Value_c.checkClassConsistency(this);
    UnaryOperation_c.checkClassConsistency(this);
    TransientVar_c.checkClassConsistency(this);
    TransientValueReference_c.checkClassConsistency(this);
    SymbolicConstantValue_c.checkClassConsistency(this);
    SelectedReference_c.checkClassConsistency(this);
    ParameterValue_c.checkClassConsistency(this);
    OperationValue_c.checkClassConsistency(this);
    MessageValue_c.checkClassConsistency(this);
    MemberValueReference_c.checkClassConsistency(this);
    LiteralString_c.checkClassConsistency(this);
    LiteralReal_c.checkClassConsistency(this);
    LiteralInteger_c.checkClassConsistency(this);
    LiteralEnumerator_c.checkClassConsistency(this);
    LiteralBoolean_c.checkClassConsistency(this);
    InstanceSetReference_c.checkClassConsistency(this);
    InstanceSet_c.checkClassConsistency(this);
    InstanceReference_c.checkClassConsistency(this);
    InstanceHandle_c.checkClassConsistency(this);
    FunctionValue_c.checkClassConsistency(this);
    EventParameterReference_c.checkClassConsistency(this);
    EventDatumValue_c.checkClassConsistency(this);
    BridgeValue_c.checkClassConsistency(this);
    BinaryOperation_c.checkClassConsistency(this);
    AttributeValueReference_c.checkClassConsistency(this);
    ArrayLengthValue_c.checkClassConsistency(this);
    ArrayElementReference_c.checkClassConsistency(this);
    ActualParameter_c.checkClassConsistency(this);
    UseCaseInUseCase_c.checkClassConsistency(this);
    UseCaseDiagram_c.checkClassConsistency(this);
    UseCaseAssociation_c.checkClassConsistency(this);
    ParticipantInUseCase_c.checkClassConsistency(this);
    Include_c.checkClassConsistency(this);
    Generalization_c.checkClassConsistency(this);
    Extend_c.checkClassConsistency(this);
    BinaryAssociation_c.checkClassConsistency(this);
    AssociationInUseCase_c.checkClassConsistency(this);
    SystemDatatypePackage_c.checkClassConsistency(this);
    SystemDatatypeInPackage_c.checkClassConsistency(this);
    SystemConstantInPackage_c.checkClassConsistency(this);
    ReferredToIdentifierAttribute_c.checkClassConsistency(this);
    ReferentialAttributeVisitedRecorder_c.checkClassConsistency(this);
    ReferentialAttribute_c.checkClassConsistency(this);
    OperationParameter_c.checkClassConsistency(this);
    Operation_c.checkClassConsistency(this);
    NewBaseAttribute_c.checkClassConsistency(this);
    ModelClass_c.checkClassConsistency(this);
    ImportedClass_c.checkClassConsistency(this);
    DerivedBaseAttribute_c.checkClassConsistency(this);
    ClassIdentifierAttribute_c.checkClassConsistency(this);
    ClassIdentifier_c.checkClassConsistency(this);
    BaseAttribute_c.checkClassConsistency(this);
    AttributeReferenceInClass_c.checkClassConsistency(this);
    Attribute_c.checkClassConsistency(this);
    TransitionActionHome_c.checkClassConsistency(this);
    Transition_c.checkClassConsistency(this);
    SupplementalDataItems_c.checkClassConsistency(this);
    StateMachineState_c.checkClassConsistency(this);
    StateMachineEventDataItem_c.checkClassConsistency(this);
    StateMachineEvent_c.checkClassConsistency(this);
    StateMachine_c.checkClassConsistency(this);
    StateEventMatrixEntry_c.checkClassConsistency(this);
    SignalEvent_c.checkClassConsistency(this);
    SemEvent_c.checkClassConsistency(this);
    PolymorphicEvent_c.checkClassConsistency(this);
    NonLocalEvent_c.checkClassConsistency(this);
    NoEventTransition_c.checkClassConsistency(this);
    NewStateTransition_c.checkClassConsistency(this);
    MooreStateMachine_c.checkClassConsistency(this);
    MooreActionHome_c.checkClassConsistency(this);
    MealyStateMachine_c.checkClassConsistency(this);
    MealyActionHome_c.checkClassConsistency(this);
    LocalEvent_c.checkClassConsistency(this);
    InstanceStateMachine_c.checkClassConsistency(this);
    EventSupplementalData_c.checkClassConsistency(this);
    EventIgnored_c.checkClassConsistency(this);
    CreationTransition_c.checkClassConsistency(this);
    ClassStateMachine_c.checkClassConsistency(this);
    CantHappen_c.checkClassConsistency(this);
    ActionHome_c.checkClassConsistency(this);
    Action_c.checkClassConsistency(this);
    SequenceInSequence_c.checkClassConsistency(this);
    Sequence_c.checkClassConsistency(this);
    MessageInSequence_c.checkClassConsistency(this);
    SelectRelatedWhere_c.checkClassConsistency(this);
    SelectRelatedBy_c.checkClassConsistency(this);
    SelectFromInstancesWhere_c.checkClassConsistency(this);
    SelectFromInstances_c.checkClassConsistency(this);
    Select_c.checkClassConsistency(this);
    ChainLink_c.checkClassConsistency(this);
    SearchResult_c.checkClassConsistency(this);
    NameMatch_c.checkClassConsistency(this);
    Match_c.checkClassConsistency(this);
    ContentMatchResult_c.checkClassConsistency(this);
    ContentMatch_c.checkClassConsistency(this);
    ReferencesQuery_c.checkClassConsistency(this);
    Query_c.checkClassConsistency(this);
    DescriptionQuery_c.checkClassConsistency(this);
    DeclarationQuery_c.checkClassConsistency(this);
    ActionLanguageQuery_c.checkClassConsistency(this);
    SearchableElement_c.checkClassConsistency(this);
    SearchParticipant_c.checkClassConsistency(this);
    NamedSearchable_c.checkClassConsistency(this);
    DescriptionSearchable_c.checkClassConsistency(this);
    ActionLanguageSearchable_c.checkClassConsistency(this);
    SearchEngine_c.checkClassConsistency(this);
    ReferencesEngine_c.checkClassConsistency(this);
    DescriptionEngine_c.checkClassConsistency(this);
    DeclarationsEngine_c.checkClassConsistency(this);
    ActionLanguageEngine_c.checkClassConsistency(this);
    UnrelateUsing_c.checkClassConsistency(this);
    Unrelate_c.checkClassConsistency(this);
    RelateUsing_c.checkClassConsistency(this);
    Relate_c.checkClassConsistency(this);
    SatisfactionInComponentPackage_c.checkClassConsistency(this);
    SatisfactionInComponent_c.checkClassConsistency(this);
    DelegationInComponent_c.checkClassConsistency(this);
    SearchResultSet_c.checkClassConsistency(this);
    PackageableElement_c.checkClassConsistency(this);
    ElementVisibility_c.checkClassConsistency(this);
    ComponentVisibility_c.checkClassConsistency(this);
    ComponentResultSet_c.checkClassConsistency(this);
    IntegrityManager_c.checkClassConsistency(this);
    IntegrityIssue_c.checkClassConsistency(this);
    SynchronousMessage_c.checkClassConsistency(this);
    SignalMessage_c.checkClassConsistency(this);
    ReturnMessage_c.checkClassConsistency(this);
    OperationMessage_c.checkClassConsistency(this);
    OperationArgument_c.checkClassConsistency(this);
    MessageArgument_c.checkClassConsistency(this);
    Message_c.checkClassConsistency(this);
    InterfaceOperationMessage_c.checkClassConsistency(this);
    InformalSynchronousMessage_c.checkClassConsistency(this);
    InformalAsynchronousMessage_c.checkClassConsistency(this);
    InformalArgument_c.checkClassConsistency(this);
    FunctionMessage_c.checkClassConsistency(this);
    FunctionArgument_c.checkClassConsistency(this);
    ExecutablePropertyArgument_c.checkClassConsistency(this);
    EventMessage_c.checkClassConsistency(this);
    EventArgument_c.checkClassConsistency(this);
    BridgeMessage_c.checkClassConsistency(this);
    BridgeArgument_c.checkClassConsistency(this);
    AsynchronousMessage_c.checkClassConsistency(this);
    SignalInvocation_c.checkClassConsistency(this);
    ReturnStmt_c.checkClassConsistency(this);
    OperationInvocation_c.checkClassConsistency(this);
    InterfaceOperationInvocation_c.checkClassConsistency(this);
    FunctionInvocation_c.checkClassConsistency(this);
    BridgeInvocation_c.checkClassConsistency(this);
    InterfacePackageInInterfacePackage_c.checkClassConsistency(this);
    InterfacePackage_c.checkClassConsistency(this);
    UseCaseParticipant_c.checkClassConsistency(this);
    TimingMark_c.checkClassConsistency(this);
    TimeSpan_c.checkClassConsistency(this);
    PackageParticipant_c.checkClassConsistency(this);
    Lifespan_c.checkClassConsistency(this);
    InteractionParticipant_c.checkClassConsistency(this);
    InstanceAttributeValue_c.checkClassConsistency(this);
    InformalAttributeValue_c.checkClassConsistency(this);
    InformalAttribute_c.checkClassConsistency(this);
    FunctionPackageParticipant_c.checkClassConsistency(this);
    FormalAttributeValue_c.checkClassConsistency(this);
    FormalAttribute_c.checkClassConsistency(this);
    ExternalEntityParticipant_c.checkClassConsistency(this);
    ComponentParticipant_c.checkClassConsistency(this);
    ClassParticipantAttribute_c.checkClassConsistency(this);
    ClassParticipant_c.checkClassConsistency(this);
    ClassInstanceParticipant_c.checkClassConsistency(this);
    ActorParticipant_c.checkClassConsistency(this);
    Delete_c.checkClassConsistency(this);
    CreateNoVariable_c.checkClassConsistency(this);
    Create_c.checkClassConsistency(this);
    AssignToMember_c.checkClassConsistency(this);
    Timer_c.checkClassConsistency(this);
    PendingEvent_c.checkClassConsistency(this);
    LinkParticipation_c.checkClassConsistency(this);
    Link_c.checkClassConsistency(this);
    Instance_c.checkClassConsistency(this);
    DataItemValue_c.checkClassConsistency(this);
    ComponentInstanceContainer_c.checkClassConsistency(this);
    ComponentInstance_c.checkClassConsistency(this);
    AttributeValue_c.checkClassConsistency(this);
    GlobalElementInSystem_c.checkClassConsistency(this);
    GenerateToExternalEntity_c.checkClassConsistency(this);
    GenerateToCreator_c.checkClassConsistency(this);
    GenerateToClass_c.checkClassConsistency(this);
    GenerateSmEventStatement_c.checkClassConsistency(this);
    GeneratePreexistingEvent_c.checkClassConsistency(this);
    GenerateEventStatement_c.checkClassConsistency(this);
    Generate_c.checkClassConsistency(this);
    EventSpecificationStatement_c.checkClassConsistency(this);
    CreateSmEventStatement_c.checkClassConsistency(this);
    CreateEventToInstance_c.checkClassConsistency(this);
    CreateEventToExternalEntity_c.checkClassConsistency(this);
    CreateEventToCreator_c.checkClassConsistency(this);
    CreateEventToClass_c.checkClassConsistency(this);
    CreateEventStatement_c.checkClassConsistency(this);
    SpecificationPackage_c.checkClassConsistency(this);
    PackageInPackage_c.checkClassConsistency(this);
    Package_c.checkClassConsistency(this);
    UserDataType_c.checkClassConsistency(this);
    SubsystemInSubsystem_c.checkClassConsistency(this);
    SubsystemInDomain_c.checkClassConsistency(this);
    Subsystem_c.checkClassConsistency(this);
    StructuredDataType_c.checkClassConsistency(this);
    StructureMember_c.checkClassConsistency(this);
    FunctionPackageInDomain_c.checkClassConsistency(this);
    ExternalEntityPackageInDomain_c.checkClassConsistency(this);
    InstanceReferenceDataType_c.checkClassConsistency(this);
    FunctionParameter_c.checkClassConsistency(this);
    FunctionPackageInPackage_c.checkClassConsistency(this);
    FunctionPackage_c.checkClassConsistency(this);
    FunctionInPackage_c.checkClassConsistency(this);
    Function_c.checkClassConsistency(this);
    ExternalEntityPackage_c.checkClassConsistency(this);
    ExternalEntityInPackage_c.checkClassConsistency(this);
    ExternalEntityInModel_c.checkClassConsistency(this);
    ExternalEntityEventDataItem_c.checkClassConsistency(this);
    ExternalEntityEventData_c.checkClassConsistency(this);
    ExternalEntityEvent_c.checkClassConsistency(this);
    ExternalEntityDataItem_c.checkClassConsistency(this);
    ExternalEntity_c.checkClassConsistency(this);
    Enumerator_c.checkClassConsistency(this);
    EnumerationDataType_c.checkClassConsistency(this);
    EePackageInPackage_c.checkClassConsistency(this);
    Domain_c.checkClassConsistency(this);
    Dimensions_c.checkClassConsistency(this);
    DatatypeInSuppression_c.checkClassConsistency(this);
    DataTypePackageInPackage_c.checkClassConsistency(this);
    DataTypePackage_c.checkClassConsistency(this);
    DataTypeInPackage_c.checkClassConsistency(this);
    DataType_c.checkClassConsistency(this);
    CoreDataType_c.checkClassConsistency(this);
    BridgeParameter_c.checkClassConsistency(this);
    Bridge_c.checkClassConsistency(this);
    SymbolicConstant_c.checkClassConsistency(this);
    LiteralSymbolicConstant_c.checkClassConsistency(this);
    LeafSymbolicConstant_c.checkClassConsistency(this);
    ConstantSpecification_c.checkClassConsistency(this);
    ConstantInPackage_c.checkClassConsistency(this);
    RequiredSignal_c.checkClassConsistency(this);
    RequiredOperation_c.checkClassConsistency(this);
    RequiredExecutableProperty_c.checkClassConsistency(this);
    ProvidedSignal_c.checkClassConsistency(this);
    ProvidedOperation_c.checkClassConsistency(this);
    ProvidedExecutableProperty_c.checkClassConsistency(this);
    Satisfaction_c.checkClassConsistency(this);
    Requirement_c.checkClassConsistency(this);
    Provision_c.checkClassConsistency(this);
    PropertyParameter_c.checkClassConsistency(this);
    Port_c.checkClassConsistency(this);
    InterfaceSignal_c.checkClassConsistency(this);
    InterfaceReferenceInDelegation_c.checkClassConsistency(this);
    InterfaceReference_c.checkClassConsistency(this);
    InterfaceOperation_c.checkClassConsistency(this);
    Interface_c.checkClassConsistency(this);
    ExecutableProperty_c.checkClassConsistency(this);
    Delegation_c.checkClassConsistency(this);
    ComponentPackageInPackage_c.checkClassConsistency(this);
    ComponentPackage_c.checkClassConsistency(this);
    DomainAsComponent_c.checkClassConsistency(this);
    ComponentInComponent_c.checkClassConsistency(this);
    ImportedRequirement_c.checkClassConsistency(this);
    ImportedReference_c.checkClassConsistency(this);
    ImportedProvisionInSatisfaction_c.checkClassConsistency(this);
    ImportedProvision_c.checkClassConsistency(this);
    ComponentReference_c.checkClassConsistency(this);
    Component_c.checkClassConsistency(this);
    SmToSmEventComm_c.checkClassConsistency(this);
    SmToSmCommPath_c.checkClassConsistency(this);
    SmToObjAttributeAccess_c.checkClassConsistency(this);
    SmToObjAccessPath_c.checkClassConsistency(this);
    SmToEeEventComm_c.checkClassConsistency(this);
    SmToEeDataItemAccess_c.checkClassConsistency(this);
    SmToEeCommPath_c.checkClassConsistency(this);
    SmToEeAccessPath_c.checkClassConsistency(this);
    EeToSmEventComm_c.checkClassConsistency(this);
    EeToSmCommPath_c.checkClassConsistency(this);
    CommunicationPath_c.checkClassConsistency(this);
    AccessPath_c.checkClassConsistency(this);
    ParticipantInCommunication_c.checkClassConsistency(this);
    MessageInCommunication_c.checkClassConsistency(this);
    CommunicationLink_c.checkClassConsistency(this);
    CommunicationInCommunication_c.checkClassConsistency(this);
    Communication_c.checkClassConsistency(this);
    WhileStmt_c.checkClassConsistency(this);
    TransitionActionBody_c.checkClassConsistency(this);
    Statement_c.checkClassConsistency(this);
    StateActionBody_c.checkClassConsistency(this);
    RequiredSignalBody_c.checkClassConsistency(this);
    RequiredOperationBody_c.checkClassConsistency(this);
    ProvidedSignalBody_c.checkClassConsistency(this);
    ProvidedOperationBody_c.checkClassConsistency(this);
    OperationBody_c.checkClassConsistency(this);
    IfStmt_c.checkClassConsistency(this);
    FunctionBody_c.checkClassConsistency(this);
    ForStmt_c.checkClassConsistency(this);
    ElseifStmt_c.checkClassConsistency(this);
    ElseStmt_c.checkClassConsistency(this);
    DerivedAttributeBody_c.checkClassConsistency(this);
    Control_c.checkClassConsistency(this);
    Continue_c.checkClassConsistency(this);
    BridgeBody_c.checkClassConsistency(this);
    Break_c.checkClassConsistency(this);
    BodyInElement_c.checkClassConsistency(this);
    BodyInComponent_c.checkClassConsistency(this);
    Body_c.checkClassConsistency(this);
    Block_c.checkClassConsistency(this);
    SubtypeSupertypeAssociation_c.checkClassConsistency(this);
    SimpleAssociation_c.checkClassConsistency(this);
    ReferringClassInAssoc_c.checkClassConsistency(this);
    ReferredToClassInAssoc_c.checkClassConsistency(this);
    LinkedAssociation_c.checkClassConsistency(this);
    DerivedAssociation_c.checkClassConsistency(this);
    ClassInAssociation_c.checkClassConsistency(this);
    ClassAsSupertype_c.checkClassConsistency(this);
    ClassAsSubtype_c.checkClassConsistency(this);
    ClassAsSimpleParticipant_c.checkClassConsistency(this);
    ClassAsSimpleFormalizer_c.checkClassConsistency(this);
    ClassAsLink_c.checkClassConsistency(this);
    ClassAsDerivedOtherSide_c.checkClassConsistency(this);
    ClassAsDerivedOneSide_c.checkClassConsistency(this);
    ClassAsAssociatedOtherSide_c.checkClassConsistency(this);
    ClassAsAssociatedOneSide_c.checkClassConsistency(this);
    Association_c.checkClassConsistency(this);
    SendSignal_c.checkClassConsistency(this);
    ObjectNode_c.checkClassConsistency(this);
    InitialNode_c.checkClassConsistency(this);
    ForkJoinNode_c.checkClassConsistency(this);
    FlowFinalNode_c.checkClassConsistency(this);
    DecisionMergeNode_c.checkClassConsistency(this);
    ControlNode_c.checkClassConsistency(this);
    ActivityPartition_c.checkClassConsistency(this);
    ActivityNode_c.checkClassConsistency(this);
    ActivityInActivity_c.checkClassConsistency(this);
    ActivityFinalNode_c.checkClassConsistency(this);
    ActivityEdge_c.checkClassConsistency(this);
    ActivityDiagramAction_c.checkClassConsistency(this);
    Activity_c.checkClassConsistency(this);
    ActionNode_c.checkClassConsistency(this);
    AcceptTimeEventAction_c.checkClassConsistency(this);
    AcceptEventAction_c.checkClassConsistency(this);
    AcceptEvent_c.checkClassConsistency(this);
  }

  //
  // Domain level functions

  static public int  Enablemodelchangelistenersfor(ModelRoot modelRoot, final int  p_Deltamask, final int  p_Eventmask)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "enableModelChangeListenersFor", " Function entered: Enablemodelchangelistenersfor") ;  
int ret_val = enabledEventsMask | enabledDeltaMask;
if ((p_Eventmask & Modeleventnotification_c.MODEL_ELEMENT_CHANGED) != 0) {
   	enabledDeltaMask = (p_Deltamask & Modeleventnotification_c.MASK_ALL_DELTAS);
}
enabledEventsMask = (p_Eventmask & Modeleventnotification_c.MASK_ALL_EVENTS);		
return ret_val;
   }  // End enableModelChangeListenersFor

  static public String       Getorphanedelementname(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getOrphanedElementName", " Function entered: Getorphanedelementname") ;  
return "Orphaned";



   }  // End getOrphanedElementName

  static public String       Getorphanedelementkl(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getOrphanedElementKL", " Function entered: Getorphanedelementkl") ;  
return "ORPH";



   }  // End getOrphanedElementKL

  static public boolean      Canstateignoreorsayeventcanthappen(ModelRoot modelRoot, final boolean      p_Considercanthappen, final java.util.UUID         p_Eventid, final java.util.UUID         p_Eventstatemachineid, final java.util.UUID         p_Stateid, final java.util.UUID         p_Statestatemachineid)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "canStateIgnoreOrSayEventCantHappen", " Function entered: Canstateignoreorsayeventcanthappen") ;  
  class StateMachineState_test55575_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		StateMachineState_c selected = (StateMachineState_c)candidate;
		return selected.getSmstt_id().equals(p_Stateid) && selected.getSm_id().equals(p_Statestatemachineid) ;
	}
  }
StateMachineState_c v_state = StateMachineState_c.StateMachineStateInstance(modelRoot, new StateMachineState_test55575_c()) ;


return v_state.Canignoreorsayeventcanthappen(			    
p_Considercanthappen			    
,p_Eventid			    
,p_Eventstatemachineid);



   }  // End canStateIgnoreOrSayEventCantHappen

  static public String       Convertrelocatabletags(ModelRoot modelRoot, final String       p_In)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "convertRelocatableTags", " Function entered: Convertrelocatabletags") ;  
return com.mentor.nucleus.bp.core.relocatables.RelocatableTagConversionUtil.convertRelocatableTags(modelRoot, p_In);

   }  // End convertRelocatableTags

  static public String       Getuniqueinitialname(ModelRoot modelRoot, final String       p_Candidatename, final Object p_Instance)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getUniqueInitialName", " Function entered: Getuniqueinitialname") ;  
return PersistenceManager.getDefaultInstance().getUniqueNameForComponent(
	(NonRootModelElement)p_Instance, p_Candidatename);
   }  // End getUniqueInitialName

  static public String       Getcoredatatypespackagename(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getCoreDatatypesPackageName", " Function entered: Getcoredatatypespackagename") ;  
return "Datatypes";



   }  // End getCoreDatatypesPackageName

  static public String       Getuniqueinitialnameinparent(ModelRoot modelRoot, final Object p_Instance, final String       p_Name, final Object p_Parent)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getUniqueInitialNameInParent", " Function entered: Getuniqueinitialnameinparent") ;  
return PersistenceManager.getDefaultInstance().getUniqueNameForComponent(
	(NonRootModelElement)p_Instance, (NonRootModelElement) p_Parent, p_Name);
   }  // End getUniqueInitialNameInParent

  static public String       Getmissinginheritedeventmessage(ModelRoot modelRoot, final boolean      p_Missinginheritedevent)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getMissingInheritedEventMessage", " Function entered: Getmissinginheritedeventmessage") ;  
if ( (  !p_Missinginheritedevent) )
{

return "Some transitions that were pasted rely on inherited events that are not available in the destination state model.  Resulting transitions will have no events assigned.";



}

else
{

return "Pasted state models rely on inherited events that are not included on the clipboard.  Resulting state models will be incomplete.";



}


   }  // End getMissingInheritedEventMessage

  static public void Removeinconsistentnonlocalevents(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "removeInconsistentNonLocalEvents", " Function entered: Removeinconsistentnonlocalevents") ;  
NonLocalEvent_c [] v_nlevts = NonLocalEvent_c.NonLocalEventInstances(modelRoot) ;


NonLocalEvent_c  v_nlevt = null;
for ( int i55460 = 0; i55460 < v_nlevts.length; i55460++)
{
  v_nlevt = v_nlevts[i55460] ;

PolymorphicEvent_c v_poly = PolymorphicEvent_c.getOneSM_PEVTOnR527(v_nlevt);


if ( (  (v_poly == null)) )
{

continue;



}

StateMachineEvent_c v_evt = StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(v_nlevt));


StateMachine_c v_thisMachine = StateMachine_c.getOneSM_SMOnR502(StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(v_nlevt)));


NewStateTransition_c [] v_transitions = NewStateTransition_c.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(SemEvent_c.getManySM_SEVTsOnR526(v_nlevt)));


EventIgnored_c v_ignored = EventIgnored_c.getOneSM_EIGNOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(SemEvent_c.getManySM_SEVTsOnR526(v_nlevt)));


CantHappen_c v_ch = CantHappen_c.getOneSM_CHOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(SemEvent_c.getManySM_SEVTsOnR526(v_nlevt)));


if ( (  (v_transitions.length == 0) &&   (v_ignored == null) &&   (v_ch == null) &&   (v_evt != null)) )
{

if (v_evt != null) {
v_evt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


continue;



}

if ( (  (v_transitions.length != 0)) )
{

NonLocalEvent_c [] v_otherNLEs = NonLocalEvent_c.getManySM_NLEVTsOnR527(v_poly);


NonLocalEvent_c  v_otherNLE = null;
for ( int i55461 = 0; i55461 < v_otherNLEs.length; i55461++)
{
  v_otherNLE = v_otherNLEs[i55461] ;

StateMachineEvent_c v_nleEvt = StateMachineEvent_c.getOneSM_EVTOnR525(SemEvent_c.getOneSM_SEVTOnR526(v_otherNLE));


StateMachine_c v_machine = StateMachine_c.getOneSM_SMOnR502(v_nleEvt);


ModelClass_c v_thisClass = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(v_thisMachine));


ModelClass_c v_nleClass = ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(v_machine));


if ( (v_machine != v_thisMachine) && ((v_thisClass.Issupertypeof(			    
v_nleClass.getObj_id())) || (v_nleClass.Issupertypeof(			    
v_thisClass.getObj_id()))) )
{

if (v_nleEvt != null) {
v_nleEvt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

else
{

if ( (  (v_ignored == null) &&   (v_ch != null)) )
{

if (v_evt != null) {
v_evt.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


}


}

ModelClass_c [] v_clazzes = ModelClass_c.ModelClassInstances(modelRoot) ;


ModelClass_c  v_clazz = null;
for ( int i55462 = 0; i55462 < v_clazzes.length; i55462++)
{
  v_clazz = v_clazzes[i55462] ;

if (v_clazz != null) {
v_clazz.Removeinconsistentsubtypeignores() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   }  // End removeInconsistentNonLocalEvents

  static public void Changenotificationenablement(ModelRoot modelRoot, final boolean      p_Enabled)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "changeNotificationEnablement", " Function entered: Changenotificationenablement") ;  

   }  // End changeNotificationEnablement

  static public String       Getnewelementname(ModelRoot modelRoot, final Object p_Instance, final String       p_Name, final boolean      p_Validatename)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getNewElementName", " Function entered: Getnewelementname") ;  
  return p_Name;

   }  // End getNewElementName

  static public String       Getmissingclassmessage(ModelRoot modelRoot)
  {
      Ooaofooa.log.println(ILogger.FUNCTION, "getMissingClassMessage", " Function entered: Getmissingclassmessage") ;  
return "Pasted imported classes could not have their classes resolved.";



   }  // End getMissingClassMessage

  // End Domain functions

	/**
     * The single model-root that used to be accessed by most of the code
     * back when only one domain could be loaded into the product at a time.
     * 
     * @deprecated  Since issue 684, all code should specifically identify 
     *              which instance of this class it seeks to retrieve, by 
     *              calling other access methods of this class like 
     *              getInstance(id).
     */
    protected static Ooaofooa m_default_instance = null;

	public static Ooaofooa getDefaultInstance() 
	{
        if (m_default_instance == null) {
            m_default_instance = getInstance(DEFAULT_WORKING_MODELSPACE);
        }
        return m_default_instance;
    }
	
	public static Ooaofooa getInstance(String id) 
	{
		Ooaofooa modelRoot = (Ooaofooa) rootInstanceMap.get(id);
		if (modelRoot == null) {
			modelRoot = new Ooaofooa(id);
			if (DEFAULT_WORKING_MODELSPACE.equals(id)) {
				m_default_instance = modelRoot;
				init();
			}
		}
				
		return modelRoot;
	}

	static private masterTimer_c m_myMasterTimer;
  protected static void init()
  {

    if(m_myMasterTimer != null){
        m_myMasterTimer = new masterTimer_c() ;
        m_myMasterTimer.start() ;
    }


  } /****** end init() ******/

  public static void shutdown()
  {
   if (m_myMasterTimer != null) {
       m_myMasterTimer.halt() ;
   }
  }

}

