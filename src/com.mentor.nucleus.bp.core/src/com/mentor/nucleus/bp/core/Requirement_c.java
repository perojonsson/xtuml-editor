      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Requirement_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import org.eclipse.ui.IActionFilter;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_REQUIREMENT extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Requirement_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Requirement_c(ModelRoot modelRoot,
       java.util.UUID         p_m_requirement_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_informalname,
       String       p_m_reversepathfromcomponent)
  {
    super(modelRoot);
       m_name = p_m_name;
       m_descrip = p_m_descrip;
       m_informalname = p_m_informalname;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       m_reversepathfromcomponent = p_m_reversepathfromcomponent;
        
    Object [] key = {m_requirement_id};
    addInstanceToMap(key);
  }
  static public Requirement_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_requirement_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_informalname,
       String       p_m_reversepathfromcomponent, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
      Requirement_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_requirement_id};
          new_inst = (Requirement_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_name = p_m_name;
       new_inst.m_descrip = p_m_descrip;
       new_inst.m_informalname = p_m_informalname;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       new_inst.m_reversepathfromcomponent = p_m_reversepathfromcomponent;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Requirement_c(modelRoot,
p_m_requirement_id,
p_m_name,
p_m_descrip,
p_m_informalname,
p_m_reversepathfromcomponent
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Requirement_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_requirement_id,
       String       p_m_name,
       String       p_m_descrip,
       String       p_m_informalname,
       String       p_m_reversepathfromcomponent){
    InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
    Requirement_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_requirement_id
            };
        source = (Requirement_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_name = p_m_name;
       source.m_descrip = p_m_descrip;
       source.m_informalname = p_m_informalname;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_requirement_id = IdAssigner.preprocessUUID(p_m_requirement_id);
       source.m_reversepathfromcomponent = p_m_reversepathfromcomponent;
        
           return source ;
        }
      }
      // there is no instance matching the id
    Requirement_c new_inst = new Requirement_c(modelRoot,
p_m_requirement_id,
p_m_name,
p_m_descrip,
p_m_informalname,
p_m_reversepathfromcomponent
);
    return new_inst;
  }
  public Requirement_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_name = "";   
     m_descrip = "";   
     m_informalname = "";   
     m_requirement_id = IdAssigner.NULL_UUID;   
     m_reversepathfromcomponent = "";   
    Object [] key = {m_requirement_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_requirement_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_requirement_id !=  p_newKey ){
	
		m_requirement_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Requirement_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Requirement_c)) {
           return false;
       }
       
       Requirement_c me = (Requirement_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getRequirement_id()) || IdAssigner.NULL_UUID.equals(((Requirement_c)elem).getRequirement_id())) && this != elem)) {
      	return false;
      }
      if (!getRequirement_id().equals(((Requirement_c)elem).getRequirement_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Requirement_c)) {
           return false;
       }
       
       Requirement_c me = (Requirement_c)elem;
      if (!getRequirement_idCachedValue().equals(((Requirement_c)elem).getRequirement_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private String       m_name ;
  private String       m_descrip ;
  private String       m_informalname ;
  private java.util.UUID         m_requirement_id ;
  private String       m_reversepathfromcomponent ;
      
// declare association references from this class
  
  
    
// referring navigation

InterfaceReference_c IsSupertypeInterfaceReference ;
public void relateAcrossR4009To(InterfaceReference_c target)
{
	relateAcrossR4009To(target, true);
}
public void relateAcrossR4009To(InterfaceReference_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeInterfaceReference) return;  // already related

    if ( IsSupertypeInterfaceReference != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeInterfaceReference != null) {
    
        IsSupertypeInterfaceReference.clearBackPointerR4009To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Requirement_c.relateAcrossR4009To(InterfaceReference_c target)", 
			"Relate performed across R4009 from Requirement to Interface Reference without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeInterfaceReference = target ;
        m_requirement_id = target.getId();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR4009To(this);
        target.addRef();
      if(notifyChanges) {
	    	RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_RELATED, this, target, "4009", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}
public void unrelateAcrossR4009From(InterfaceReference_c target)
{
	unrelateAcrossR4009From(target, true);
}
public void unrelateAcrossR4009From(InterfaceReference_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeInterfaceReference == null) return;  // already unrelated
	
	if (target != IsSupertypeInterfaceReference) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R4009", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR4009To(this);
    }
    

      if(IsSupertypeInterfaceReference != null) {
      
        m_requirement_id = IsSupertypeInterfaceReference.getId();
        IsSupertypeInterfaceReference = null ;
        target.removeRef();
      if(notifyChanges) { 
        RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this, target, "4009", "");
        Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(change);
      }
    }
}

  
    
      
public static Requirement_c getOneC_ROnR4009(InterfaceReference_c [] targets)
{
    return getOneC_ROnR4009(targets, null);
}

public static Requirement_c getOneC_ROnR4009(InterfaceReference_c [] targets, ClassQueryInterface_c test)
{
    Requirement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneC_ROnR4009(targets[i], test);
        }
    }

    return ret_val;
}

public static Requirement_c getOneC_ROnR4009(InterfaceReference_c target)
{
  return getOneC_ROnR4009(target, null);
}

public static Requirement_c getOneC_ROnR4009(InterfaceReference_c target, boolean loadComponent)
{
    return getOneC_ROnR4009(target.getModelRoot(), target, null, loadComponent);
}

public static Requirement_c getOneC_ROnR4009(InterfaceReference_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneC_ROnR4009(target.getModelRoot(), target, test);
  }
  return null;
}

public static Requirement_c getOneC_ROnR4009(ModelRoot modelRoot, InterfaceReference_c target, ClassQueryInterface_c test)
{
	return getOneC_ROnR4009(modelRoot, target, test, true);
}

public static Requirement_c getOneC_ROnR4009(ModelRoot modelRoot, InterfaceReference_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneC_ROnR4009(modelRoot,target,test);
}
private static Requirement_c find_getOneC_ROnR4009(ModelRoot modelRoot, InterfaceReference_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    Requirement_c source = (Requirement_c)target.backPointer_IsSubtypeRequirementIsSubtype_R4009;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c [] targets)
{
  return getManyC_RsOnR4009(targets, null);
}
public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c [] targets, boolean loadComponent)
{
  return getManyC_RsOnR4009(targets, null, loadComponent);
}
public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c [] targets, ClassQueryInterface_c test)
{
	return getManyC_RsOnR4009(targets, test, true);
}

public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Requirement_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      Requirement_c source = (Requirement_c)targets[i].backPointer_IsSubtypeRequirementIsSubtype_R4009;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	Requirement_c[] ret_set = new Requirement_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Requirement_c[0];
  }
  }

public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c target)
{
  if (target != null) {
    InterfaceReference_c [] targetArray = new InterfaceReference_c[1];
    targetArray[0] = target;
    return getManyC_RsOnR4009(targetArray);
  } else {
    Requirement_c [] result = new Requirement_c [0] ;
  return result ;
}
}

public static Requirement_c [] getManyC_RsOnR4009(InterfaceReference_c target, boolean loadComponent)
{
  if (target != null) {
    InterfaceReference_c [] targetArray = new InterfaceReference_c[1];
    targetArray[0] = target;
    return getManyC_RsOnR4009(targetArray, loadComponent);
  } else {
    Requirement_c [] result = new Requirement_c [0] ;
  return result ;
}
}




// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Satisfaction_c> backPointer_SatisfiesSatisfactionSatisfies_R4002 = new ArrayList<Satisfaction_c>();

public void setSatisfactionOrderInChildListR4002(Satisfaction_c target, int index) {
	unrelateAcrossR4002From(target);
	Satisfaction_c[] elements = Satisfaction_c.getManyC_SFsOnR4002(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4002From((Satisfaction_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4002To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4002To((Satisfaction_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4002To(Satisfaction_c target)
{
  if (target != null) {
    target.relateAcrossR4002To(this, true) ;
  }
}

public void relateAcrossR4002To(Satisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4002To(this, notifyChanges) ;
  }
}

public void setBackPointerR4002To(Satisfaction_c target)
{
  	synchronized (backPointer_SatisfiesSatisfactionSatisfies_R4002) {
		backPointer_SatisfiesSatisfactionSatisfies_R4002.add(target);
	}
}

public void unrelateAcrossR4002From(Satisfaction_c target)
{
  if (target != null) {
    target.unrelateAcrossR4002From(this, true) ;
  }
}

public void unrelateAcrossR4002From(Satisfaction_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4002From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4002To(Satisfaction_c target)
{
  synchronized (backPointer_SatisfiesSatisfactionSatisfies_R4002) {
	    backPointer_SatisfiesSatisfactionSatisfies_R4002.remove(target);
	}
}

public static Requirement_c getOneC_ROnR4002(Satisfaction_c [] targets)
{
    return getOneC_ROnR4002(targets, null);
}

public static Requirement_c getOneC_ROnR4002(Satisfaction_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_ROnR4002(targets, test, true);
}

public static Requirement_c getOneC_ROnR4002(Satisfaction_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Requirement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Requirement_c candidate_val = getOneC_ROnR4002(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_ROnR4002(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Requirement_c getOneC_ROnR4002(Satisfaction_c target)
{
	return getOneC_ROnR4002(target, true);
}
public static Requirement_c getOneC_ROnR4002(Satisfaction_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.DefinesRequiredSatisficationRequirement != null){
		target.DefinesRequiredSatisficationRequirement.loadProxy();
	}
	}
    return target.DefinesRequiredSatisficationRequirement ;
  } else {
    return null;
  }
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_RsOnR4002(targets, test, true);
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Requirement_c[0];
  
  
  LinkedHashSet<Requirement_c> elementsSet = new LinkedHashSet<Requirement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].DefinesRequiredSatisficationRequirement == null)
	  targets[i].loadProxy();
    Requirement_c associate = targets[i].DefinesRequiredSatisficationRequirement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Requirement_c[] result = new Requirement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c [] targets)
{
  return getManyC_RsOnR4002(targets, null);
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Satisfaction_c [] targetArray = new Satisfaction_c[1];
    targetArray[0] = target;
    return getManyC_RsOnR4002(targetArray, test, loadComponent);
  } else {
    Requirement_c [] result = new Requirement_c [0] ;
    return result ;
  }
  
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c target,
    ClassQueryInterface_c test)
{
    return getManyC_RsOnR4002(target, null, true);
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c target)
{
    return getManyC_RsOnR4002(target, null, true);
}

public static Requirement_c [] getManyC_RsOnR4002(Satisfaction_c target, boolean loadComponent)
{
    return getManyC_RsOnR4002(target, null, loadComponent);
}

public static Requirement_c getOneC_ROnR4002(Provision_c target)
{
  return Requirement_c.getOneC_ROnR4002(Satisfaction_c.getOneC_SFOnR4002(target)) ;
}

public static Requirement_c getOneC_ROnR4002(Provision_c target,
    ClassQueryInterface_c test)
{
  return Requirement_c.getOneC_ROnR4002(Satisfaction_c.getManyC_SFsOnR4002(target), test) ;
}

public static Requirement_c [] getManyC_RsOnR4002(Provision_c target,
    ClassQueryInterface_c test)
{
	return getManyC_RsOnR4002(target, test, true);
}
public static Requirement_c [] getManyC_RsOnR4002(Provision_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  Satisfaction_c [] associators = Satisfaction_c.getManyC_SFsOnR4002(target, loadComponent) ;
    return Requirement_c.getManyC_RsOnR4002(associators, test, loadComponent) ;
}
public static Requirement_c [] getManyC_RsOnR4002(Provision_c target)
{
    return getManyC_RsOnR4002(target, null, true);
}
public static Requirement_c [] getManyC_RsOnR4002(Provision_c target, boolean loadComponent)
{
    return getManyC_RsOnR4002(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<RequiredExecutableProperty_c> backPointer_ImplementsRequiredExecutablePropertyImplements_R4500 = new ArrayList<RequiredExecutableProperty_c>();

public void setRequiredExecutablePropertyOrderInChildListR4500(RequiredExecutableProperty_c target, int index) {
	unrelateAcrossR4500From(target);
	RequiredExecutableProperty_c[] elements = RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR4500From((RequiredExecutableProperty_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR4500To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR4500To((RequiredExecutableProperty_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR4500To(RequiredExecutableProperty_c target)
{
  if (target != null) {
    target.relateAcrossR4500To(this, true) ;
  }
}

public void relateAcrossR4500To(RequiredExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR4500To(this, notifyChanges) ;
  }
}

public void setBackPointerR4500To(RequiredExecutableProperty_c target)
{
  	synchronized (backPointer_ImplementsRequiredExecutablePropertyImplements_R4500) {
		backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.add(target);
	}
}

public void unrelateAcrossR4500From(RequiredExecutableProperty_c target)
{
  if (target != null) {
    target.unrelateAcrossR4500From(this, true) ;
  }
}

public void unrelateAcrossR4500From(RequiredExecutableProperty_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR4500From(this, notifyChanges) ;
  }
}

public void clearBackPointerR4500To(RequiredExecutableProperty_c target)
{
  synchronized (backPointer_ImplementsRequiredExecutablePropertyImplements_R4500) {
	    backPointer_ImplementsRequiredExecutablePropertyImplements_R4500.remove(target);
	}
}

public static Requirement_c getOneC_ROnR4500(RequiredExecutableProperty_c [] targets)
{
    return getOneC_ROnR4500(targets, null);
}

public static Requirement_c getOneC_ROnR4500(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test)
{
    return getOneC_ROnR4500(targets, test, true);
}

public static Requirement_c getOneC_ROnR4500(RequiredExecutableProperty_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Requirement_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Requirement_c candidate_val = getOneC_ROnR4500(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneC_ROnR4500(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Requirement_c getOneC_ROnR4500(RequiredExecutableProperty_c target)
{
	return getOneC_ROnR4500(target, true);
}
public static Requirement_c getOneC_ROnR4500(RequiredExecutableProperty_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	    if(target.IsImplementedByRequirement != null){
		target.IsImplementedByRequirement.loadProxy();
	}
	}
    return target.IsImplementedByRequirement ;
  } else {
    return null;
  }
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyC_RsOnR4500(targets, test, true);
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Requirement_c[0];
  
  
  LinkedHashSet<Requirement_c> elementsSet = new LinkedHashSet<Requirement_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsImplementedByRequirement == null)
	  targets[i].loadProxy();
    Requirement_c associate = targets[i].IsImplementedByRequirement;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  Requirement_c[] result = new Requirement_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c [] targets)
{
  return getManyC_RsOnR4500(targets, null);
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    RequiredExecutableProperty_c [] targetArray = new RequiredExecutableProperty_c[1];
    targetArray[0] = target;
    return getManyC_RsOnR4500(targetArray, test, loadComponent);
  } else {
    Requirement_c [] result = new Requirement_c [0] ;
    return result ;
  }
  
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c target,
    ClassQueryInterface_c test)
{
    return getManyC_RsOnR4500(target, null, true);
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c target)
{
    return getManyC_RsOnR4500(target, null, true);
}

public static Requirement_c [] getManyC_RsOnR4500(RequiredExecutableProperty_c target, boolean loadComponent)
{
    return getManyC_RsOnR4500(target, null, loadComponent);
}

public static Requirement_c getOneC_ROnR4500(ExecutableProperty_c target)
{
  return Requirement_c.getOneC_ROnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR4500(target)) ;
}

public static Requirement_c getOneC_ROnR4500(ExecutableProperty_c target,
    ClassQueryInterface_c test)
{
  return Requirement_c.getOneC_ROnR4500(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(target), test) ;
}

public static Requirement_c [] getManyC_RsOnR4500(ExecutableProperty_c target,
    ClassQueryInterface_c test)
{
	return getManyC_RsOnR4500(target, test, true);
}
public static Requirement_c [] getManyC_RsOnR4500(ExecutableProperty_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{

  RequiredExecutableProperty_c [] associators = RequiredExecutableProperty_c.getManySPR_REPsOnR4500(target, loadComponent) ;
    return Requirement_c.getManyC_RsOnR4500(associators, test, loadComponent) ;
}
public static Requirement_c [] getManyC_RsOnR4500(ExecutableProperty_c target)
{
    return getManyC_RsOnR4500(target, null, true);
}
public static Requirement_c [] getManyC_RsOnR4500(ExecutableProperty_c target, boolean loadComponent)
{
    return getManyC_RsOnR4500(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R4009
      InterfaceReference_c relInst56915 = (InterfaceReference_c) baseRoot.getInstanceList(InterfaceReference_c.class).get(new Object[] {m_requirement_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst56915 == null) {
      			relInst56915 = (InterfaceReference_c) Ooaofooa.getDefaultInstance().getInstanceList(InterfaceReference_c.class).get(new Object[] {m_requirement_id});
      		}
			if (relInst56915 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst56915 = (InterfaceReference_c) roots[i].getInstanceList(InterfaceReference_c.class).get(new Object[] {m_requirement_id});
					if (relInst56915 != null)
						break;
				}
			}
			//synchronized
      if ( relInst56915 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst56915) && !isProxy())) {
	      relInst56915.relateAcrossR4009To(this, notifyChanges);
	  }
	  }
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R4009
      // C_IR
		  inst=IsSupertypeInterfaceReference;
			unrelateAcrossR4009From(IsSupertypeInterfaceReference, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Requirement_c inst = (Requirement_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Requirement_c RequirementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Requirement_c result=findRequirementInstance(modelRoot,test,loadComponent);
  		if(result==null && loadComponent){
     List pmcs =  PersistenceManager.findAllComponents(modelRoot,Requirement_c.class);
		for (int i = 0; i < pmcs.size(); i++) {
			PersistableModelComponent component = (PersistableModelComponent) pmcs
				.get(i);
			if (!component.isLoaded()) {
				try {
					component.load(new NullProgressMonitor());
					 result=findRequirementInstance(modelRoot,test,loadComponent);
					 if(result!=null) return result;
				} catch (Exception e) {
					CorePlugin.logError("Error Loading component", e);
				}
			}
		}
	    }
	    if(result!=null && loadComponent){
    	    result.loadProxy();
	    }
	  return result;  
  }
private static Requirement_c findRequirementInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Requirement_c x = (Requirement_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					if(x.ensureLoaded(loadComponent))
					return x;
			}
		}
		}
			return null;
}
  public static Requirement_c RequirementInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return RequirementInstance(modelRoot,test,true);
  }
  
  public static Requirement_c RequirementInstance(ModelRoot modelRoot)
  {
	 return RequirementInstance(modelRoot,null,true);
  }

  public static Requirement_c [] RequirementInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
            if(loadComponent){
  			   PersistenceManager.ensureAllInstancesLoaded(modelRoot, Requirement_c.class);
  			}
		    InstanceList instances = modelRoot.getInstanceList(Requirement_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Requirement_c x = (Requirement_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						if(x.ensureLoaded(loadComponent))
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Requirement_c[] ret_set = new Requirement_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Requirement_c[0];
			}		
		} 
  }
  public static Requirement_c [] RequirementInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  RequirementInstances(modelRoot,test,true);
  }
  public static Requirement_c [] RequirementInstances(ModelRoot modelRoot)
  {
	return RequirementInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Requirement.dispose call: ";
	Satisfaction_c testR4002Inst = Satisfaction_c.getOneC_SFOnR4002(this, false);

	if ( testR4002Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "4002 ";
	}
	InterfaceReference_c testR4009Inst1 = InterfaceReference_c.getOneC_IROnR4009(this, false);

	if ( testR4009Inst1 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "4009 ";
	}
 	RequiredExecutableProperty_c testR4500Inst = RequiredExecutableProperty_c.getOneSPR_REPOnR4500(this, false);

 	if ( testR4500Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "4500 ";
 	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Requirement", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("requirement_id")){
         return true;
      }
      return false;      
  }      
 public String getCompUniqueID(){
    UUID tempID=null;
    long longID=0L;
    StringBuffer result= new StringBuffer();
    
    tempID= getRequirement_id();
    
        if(IdAssigner.NULL_UUID.equals(tempID))
	      tempID=getRequirement_idCachedValue(); 
	      result.append(Long.toHexString(tempID.getMostSignificantBits()));
          result.append(Long.toHexString(tempID.getLeastSignificantBits()));
    return result.toString();
 }
  // declare attribute accessors
  public String getName()
  {
ModelRoot modelRoot = getModelRoot();
String       v_result = "" ;


InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


v_result = getInformalname() ;


if ( (Isformal()) )
{

v_result = v_ir.Interfacename() ;


Setcachedname(			    
v_result ) ;



}

if ( (  (v_ir == null)) )
{

v_result = Getcachedname() ;



}

return v_result;



  }


  public String getDescrip()
  {
    return m_descrip ;
  }


  public void setDescrip(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_descrip)){
	        return;
	    }
	}else if(m_descrip != null){
	    if(m_descrip.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Descrip", m_descrip, newValue,true); 
   m_descrip = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getInformalname()
  {
    return m_informalname ;
  }


  public void setInformalname(String newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_informalname)){
	        return;
	    }
	}else if(m_informalname != null){
	    if(m_informalname.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Informalname", m_informalname, newValue,true); 
   m_informalname = newValue ;
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public long getRequirement_idLongBased()
  {
    if ( IsSupertypeInterfaceReference != null )
    {
      return IsSupertypeInterfaceReference.getIdLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getRequirement_id()
  {
    if ( IsSupertypeInterfaceReference != null )
    {
      return IsSupertypeInterfaceReference.getId();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeInterfaceReference != null );
 
 }                  

  public java.util.UUID getRequirement_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_requirement_id) )
      return m_requirement_id;
    else
      return getRequirement_id();
  }
  
  public void setRequirement_id(java.util.UUID newValue)
  {
	if(newValue != null){
	    if(newValue.equals(m_requirement_id)){
	        return;
	    }
	}else if(m_requirement_id != null){
	    if(m_requirement_id.equals(newValue)){
	        return;
	    }
	}else{
	    return;
	}
	AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Requirement_id", m_requirement_id, newValue,true); 
   m_requirement_id = IdAssigner.preprocessUUID(newValue);
    Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  public String getReversepathfromcomponent()
  {
ModelRoot modelRoot = getModelRoot();
Port_c v_port = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this));


Component_c v_component = Component_c.getOneC_COnR4010(v_port);


if ( (  (v_component == null) ||   (v_port == null)) )
{

String       v_result = Getcachedreversepathfromcomponent() ;


if ( (v_result.equals("")) )
{

v_result = getName() ;



}

return v_result;



}

else
{

v_component = Component_c.getOneC_COnR4010(v_port);


String       v_result = v_component.getName() + "::" + v_port.getName() + "::" + getName() ;


Setcachedreversepathfromcomponent(			    
v_result ) ;


return v_result;



}


  }


  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Requirement", //$NON-NLS-1$
	  " Operation entered: Requirement::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Requirement_c [] objs = Requirement_c.RequirementInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Requirement", //$NON-NLS-1$
	  " Operation entered: Requirement::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Requirement_c_test56917_c implements ClassQueryInterface_c
    {
	  Requirement_c_test56917_c( java.util.UUID            p56918 ) {
	  m_p56918 = p56918;
	  }
	  private java.util.UUID             m_p56918; 
	  public boolean evaluate (Object candidate)
	  {
	      Requirement_c selected = (Requirement_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRequirement_id().equals(m_p56918));
	      return retval;
	  }
    }

    Requirement_c [] objs56916 = 
    Requirement_c.RequirementInstances(modelRoot, new Requirement_c_test56917_c(getRequirement_id())) ;

    if ( (  (objs56916.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Requirement", //$NON-NLS-1$
           "Consistency: Object: Requirement: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56916.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Requirement: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56916.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs56916.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Requirement", //$NON-NLS-1$
           "Consistency: Object: Requirement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs56916.length )  + " Requirement_Id: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Requirement: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56916.length )  + " Requirement_Id: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Requirement is a subtype in association: rel.Numb = 4009
          // The supertype class is: Interface Reference
    class InterfaceReference_c_test56922_c implements ClassQueryInterface_c
    {
	  InterfaceReference_c_test56922_c( java.util.UUID            p56923 ) {
	  m_p56923 = p56923;
	  }
	  private java.util.UUID             m_p56923; 
	  public boolean evaluate (Object candidate)
	  {
	      InterfaceReference_c selected = (InterfaceReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getId().equals(m_p56923));
	      return retval;
	  }
    }

    InterfaceReference_c [] objs56921 = 
    InterfaceReference_c.InterfaceReferenceInstances(modelRoot, new InterfaceReference_c_test56922_c(getRequirement_id())) ;

    if ( (  (objs56921.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Requirement", //$NON-NLS-1$
           "Consistency: Object: Requirement: Association: 4009: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs56921.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Requirement: Association: 4009: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs56921.length )  , e); 
      }
      retval = false;

    }

          // Associated One Side: rel.Numb = 4002
            // Link Object: Satisfaction
            // Other Side Class: Provision
          // Associated Other Side: rel.Numb = 4500
            // Link Object: Required Executable Property
    return retval;
  }


  // declare transform functions
  public  String       Get_connector_text(final java.util.UUID         p_Obj_id,final boolean      p_Obj_typeisimported,final int  p_At,final boolean      p_Connected_disabled,final java.util.UUID         p_Parent_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Get_connector_text") ; 
               final ModelRoot modelRoot = getModelRoot();
String       v_name = "" ;


if ( (p_At == End_c.Middle) )
{

Component_c v_comp = Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this)));


ComponentPackage_c v_parentCP = ComponentPackage_c.getOneCP_CPOnR4604(v_comp);


if ( (  (v_parentCP == null)) )
{

Component_c v_parentComp = Component_c.getOneC_COnR4202(ComponentInComponent_c.getOneCN_CICOnR4203(v_comp));


if ( (  (v_parentComp != null)) )
{

while ( (  (v_parentCP == null)) )
{

v_parentCP = ComponentPackage_c.getOneCP_CPOnR4604(v_parentComp);


v_parentComp = Component_c.getOneC_COnR4202(ComponentInComponent_c.getOneCN_CICOnR4203(v_parentComp));



}


}


}

PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(v_comp);


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage = ((  (v_package != null) ||   (v_component != null)) && (  (v_parentCP == null))) ;


if ( (  (v_parentCP != null) || v_isInGenericPackage) )
{

if ( (v_isInGenericPackage) )
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR1405(v_package);


if ( (  (v_system == null)) )
{

java.util.UUID         v_rootCompIdInPkg = v_component.Getrootcomponentid() ;


Component_c v_rootComponent = (Component_c) modelRoot.getInstanceList(Component_c.class).getGlobal(null, v_rootCompIdInPkg);


v_system = SystemModel_c.getOneS_SYSOnR1405(Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(v_rootComponent)));



}

  class Package_test55817_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Package_c selected = (Package_c)candidate;
		return (selected.getPackage_id().equals(p_Parent_id)) ;
	}
  }
Package_c v_parentPackage = Package_c.getOneEP_PKGOnR1405(v_system, new Package_test55817_c());


if ( (  (v_parentPackage == null)) )
{

Component_c v_nestingComp = Component_c.getOneC_COnR8003(PackageableElement_c.getOnePE_PEOnR8001(v_comp));


if ( (  (v_nestingComp == null) || ! v_nestingComp.getId().equals(p_Parent_id)) )
{

if ( (p_At == End_c.Middle) )
{

return getName();



}


}


}


}

else
{

SystemModel_c v_system = SystemModel_c.getOneS_SYSOnR4606(v_parentCP);


  class ComponentPackage_test55818_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ComponentPackage_c selected = (ComponentPackage_c)candidate;
		return (selected.getPackage_id().equals(p_Parent_id)) ;
	}
  }
ComponentPackage_c v_parentPackage = ComponentPackage_c.getOneCP_CPOnR4606(v_system, new ComponentPackage_test55818_c());


if ( (  (v_parentPackage == null)) )
{

Component_c v_nestingComp = Component_c.getOneC_COnR4202(ComponentInComponent_c.getOneCN_CICOnR4203(v_comp));


if ( (  (v_nestingComp == null) || ! v_nestingComp.getId().equals(p_Parent_id)) )
{

if ( (p_At == End_c.Middle) )
{

return getName();



}


}


}


}


}

Satisfaction_c [] v_satisfactions = Satisfaction_c.getManyC_SFsOnR4002(this);


boolean      v_satisfactionWithoutImportedRef = false ;


Provision_c v_provision = (Provision_c) modelRoot.getInstanceList(Provision_c.class).getGlobal(null, Gd_c.Null_unique_id());


Satisfaction_c  v_satisfaction = null;
for ( int i55162 = 0; i55162 < v_satisfactions.length; i55162++)
{
  v_satisfaction = v_satisfactions[i55162] ;

ImportedRequirement_c v_importedRef = ImportedRequirement_c.getOneCL_IROnR4706(v_satisfaction);


if ( (  (v_importedRef == null)) )
{

v_provision = Provision_c.getOneC_POnR4002(v_satisfaction);


v_satisfactionWithoutImportedRef = true ;


break;



}


}

if ( (v_satisfactionWithoutImportedRef) )
{

if ( (Isformal() &&   !p_Connected_disabled) )
{

return "";



}

else
{

if ( (v_provision.getName().equals(getName()) &&   !p_Connected_disabled) )
{

return "";



}

else
{

return getName();



}


}


}

else
{

return getName();



}


}

else if ( (p_At == End_c.Start_Fixed) )
{

Port_c v_port = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_port != null)) )
{

if ( (  !v_port.getDonotshowportoncanvas()) )
{

return v_port.Getporttext();



}


}


}

return "";



   } // End get_connector_text
  public  int  Get_style(final int  p_At)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Get_style") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_At == End_c.End) )
{

return Style_c.SemiCircle;



}

else if ( (p_At == End_c.Start) )
{

Port_c v_port = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_port != null)) )
{

if ( (  !v_port.getDonotshowportoncanvas()) )
{

Interface_c v_interface = Interface_c.getOneC_IOnR4012(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_interface != null)) )
{

boolean      v_clientServer = v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ClientServer) ;


boolean      v_serverClient = v_interface.Hasepwithdirection(			    
Ifdirectiontype_c.ServerClient) ;


if ( (v_clientServer && v_serverClient) )
{

return Style_c.BoxArrowInOut;



}

if ( (v_clientServer) )
{

return Style_c.BoxArrowOut;



}

if ( (v_serverClient) )
{

return Style_c.BoxArrowIn;



}


}

return Style_c.FilledSquare;



}


}


}

return Style_c.None;



   } // End get_style
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();
Dissatisfy() ;


InterfaceReference_c v_iref = InterfaceReference_c.getOneC_IROnR4009(this);


if ( (  (v_iref != null)) )
{

this.unrelateAcrossR4009From(v_iref);


if (v_iref != null) {
v_iref.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

RequiredExecutableProperty_c [] v_reps = RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this);


RequiredExecutableProperty_c  v_rep = null;
for ( int i55163 = 0; i55163 < v_reps.length; i55163++)
{
  v_rep = v_reps[i55163] ;

ExecutableProperty_c v_ep = ExecutableProperty_c.getOneC_EPOnR4500(v_rep);


if (v_rep != null) {
v_rep.unrelateAcrossR4500From( this ) ; v_rep.unrelateAcrossR4500From( v_ep ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_rep != null) {
v_rep.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}

if ( delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, this));
}



   } // End dispose
  public  boolean      Actionfilter(final String       p_Name,final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Actionfilter") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_Name.equals("can")) )
{

boolean      v_satisfiesWithImportedComponent = false ;


Satisfaction_c [] v_satisfactions = Satisfaction_c.getManyC_SFsOnR4002(this);


Satisfaction_c  v_satisfaction = null;
for ( int i55164 = 0; i55164 < v_satisfactions.length; i55164++)
{
  v_satisfaction = v_satisfactions[i55164] ;

if ( (  !v_satisfaction.Satisfieswithimportedreq()) )
{

if ( (v_satisfaction.Satisfieswithimportedpro()) )
{

v_satisfiesWithImportedComponent = true ;


break;



}

else
{

Satisfaction_c [] v_proSatisfactions = Satisfaction_c.getManyC_SFsOnR4002(Provision_c.getManyC_PsOnR4002(v_satisfaction));


Satisfaction_c  v_proSat = null;
for ( int i55165 = 0; i55165 < v_proSatisfactions.length; i55165++)
{
  v_proSat = v_proSatisfactions[i55165] ;

if ( (  !v_proSat.Satisfieswithimportedpro()) )
{

if ( (v_proSat.Satisfieswithimportedreq()) )
{

v_satisfiesWithImportedComponent = true ;


break;



}


}


}

if ( (v_satisfiesWithImportedComponent) )
{

break;



}


}

break;



}


}

InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


PackageableElement_c v_packageableElem = PackageableElement_c.getOnePE_PEOnR8001(Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(v_ir)));


Package_c v_package = Package_c.getOneEP_PKGOnR8000(v_packageableElem);


Component_c v_component = Component_c.getOneC_COnR8003(v_packageableElem);


boolean      v_isInGenericPackage =   (v_package != null) ||   (v_component != null) ;


if ( ((p_Value.equals("formalize spec pkg")) || (p_Value.equals("formalize generic pkg"))) )
{

if ( ((p_Value.equals("formalize spec pkg")) && (v_isInGenericPackage)) )
{

return false;



}

if ( ((p_Value.equals("formalize generic pkg")) && (  !v_isInGenericPackage)) )
{

return false;



}

if ( (v_satisfiesWithImportedComponent) )
{

return false;



}

return v_ir.Canformalizeagainstanyinterface();



}

else if ( (p_Value.equals("unformalize")) )
{

if ( (v_satisfiesWithImportedComponent) )
{

return false;



}

Interface_c v_interface = Interface_c.getOneC_IOnR4012(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_interface != null)) )
{

return true;



}


}

else if ( (p_Value.equals("dissatisfy")) )
{

v_satisfaction = Satisfaction_c.getOneC_SFOnR4002(this);


if (   (v_satisfaction != null) )
{

return true;



}


}


}

return false;



   } // End actionFilter
  public  void Formalize(final java.util.UUID         p_Id,final boolean      p_Formalizepro)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Formalize") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


if (v_ir != null) {
v_ir.Formalize(			    
p_Formalizepro			    
,p_Id ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End formalize
  public  void Unformalize(final boolean      p_Unformalizepro)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Unformalize") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


if (v_ir != null) {
v_ir.Unformalize(			    
p_Unformalizepro ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



   } // End unformalize
  public  boolean      Isformal()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Isformal") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


if ( (  (v_ir != null)) )
{

return v_ir.Isformal();



}

return false;



   } // End isFormal
  public  boolean      Canrename()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Canrename") ; 
               final ModelRoot modelRoot = getModelRoot();
return   !Isformal();



   } // End canRename
  public  void Initialize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Initialize") ; 
               final ModelRoot modelRoot = getModelRoot();
setInformalname( "Unnamed Interface") ;



   } // End initialize
  public  java.util.UUID         Get_ooa_id()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Get_ooa_id") ; 
               final ModelRoot modelRoot = getModelRoot();
return getRequirement_id();



   } // End get_ooa_id
  public  boolean      Canuseinterfacesinpackage(final java.util.UUID         p_Id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Canuseinterfacesinpackage") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_ir = InterfaceReference_c.getOneC_IROnR4009(this);


return v_ir.Canuseinterfacesinpackage(			    
p_Id);



   } // End canUseInterfacesInPackage
  public  boolean      Hasavailablesignalsfor(final java.util.UUID         p_Transition_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Hasavailablesignalsfor") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredSignal_c [] v_signals = RequiredSignal_c.getManySPR_RSsOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this));


RequiredSignal_c  v_signal = null;
for ( int i55166 = 0; i55166 < v_signals.length; i55166++)
{
  v_signal = v_signals[i55166] ;

if ( v_signal.Isavailableforallocationto(			    
p_Transition_id) )
{

return true;



}


}

return false;



   } // End hasAvailableSignalsFor
  public  boolean      Linkconnector(final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Linkconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (Canlinkconnector(			    
p_To)) )
{

boolean      v_isLinked = false ;


Component_c v_component = Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this)));


if ( (! p_To.equals(Gd_c.Null_unique_id())) )
{

Provision_c v_provision = (Provision_c) modelRoot.getInstanceList(Provision_c.class).getGlobal(null, p_To);


if ( (  (v_provision != null)) )
{

v_isLinked = v_component.Initializerequirement(			    
true			    
,v_provision.getProvision_id()			    
,getRequirement_id()) ;



}

else
{

ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot.getInstanceList(ImportedReference_c.class).getGlobal(null, p_To);


if ( (  (v_importedRef != null)) )
{

v_isLinked = v_component.Initializerequirement(			    
true			    
,v_importedRef.getId()			    
,getRequirement_id()) ;



}


}


}

return v_isLinked;



}

return false;



   } // End linkConnector
  public  java.util.UUID         Getcomponentid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Getcomponentid") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_interfaceRef = InterfaceReference_c.getOneC_IROnR4009(this);


return v_interfaceRef.Getcomponentid();



   } // End getComponentId
  public  void Dissatisfy()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Dissatisfy") ; 
               final ModelRoot modelRoot = getModelRoot();
Satisfaction_c [] v_sats = Satisfaction_c.getManyC_SFsOnR4002(this);


Satisfaction_c  v_sat = null;
for ( int i55167 = 0; i55167 < v_sats.length; i55167++)
{
  v_sat = v_sats[i55167] ;

Provision_c v_provision = Provision_c.getOneC_POnR4002(v_sat);


if (v_sat != null) {
v_sat.unrelateAcrossR4002From( this ) ; v_sat.unrelateAcrossR4002From( v_provision ) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate using attempted on null link class instance.", t);
}


if (v_sat != null) {
v_sat.Dispose() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End dissatisfy
  public  int          Getsatisfactioncount(final boolean      p_Filterdelegations)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Getsatisfactioncount") ; 
               final ModelRoot modelRoot = getModelRoot();
Satisfaction_c [] v_satisfactions = Satisfaction_c.getManyC_SFsOnR4002(this);


return   (v_satisfactions.length);



   } // End getSatisfactionCount
  public  boolean      Canlinkconnector(final java.util.UUID         p_To)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Canlinkconnector") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_isLinked = false ;


Component_c v_component = Component_c.getOneC_COnR4010(Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this)));


if ( (! p_To.equals(Gd_c.Null_unique_id())) )
{

Provision_c v_provision = (Provision_c) modelRoot.getInstanceList(Provision_c.class).getGlobal(null, p_To);


if ( (  (v_provision != null)) )
{

v_isLinked = v_component.Initializerequirement(			    
false			    
,v_provision.getProvision_id()			    
,getRequirement_id()) ;



}

else
{

ImportedReference_c v_importedRef = (ImportedReference_c) modelRoot.getInstanceList(ImportedReference_c.class).getGlobal(null, p_To);


if ( (  (v_importedRef != null)) )
{

v_isLinked = v_component.Initializerequirement(			    
false			    
,v_importedRef.getId()			    
,getRequirement_id()) ;



}


}


}

return v_isLinked;



   } // End canLinkConnector
  public  String       Get_connector_tooltip(final int  p_End)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Get_connector_tooltip") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (p_End == End_c.Start) )
{

Port_c v_port = Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_port != null)) )
{

return v_port.getName();



}


}

return "";



   } // End get_connector_tooltip
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  Object Getconfigurationinheritanceelementid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Getconfigurationinheritanceelementid") ; 
               final ModelRoot modelRoot = getModelRoot();
Interface_c v_interface = Interface_c.getOneC_IOnR4012(InterfaceReference_c.getOneC_IROnR4009(this));


if ( (  (v_interface != null)) )
{

return v_interface.Converttoinstance();



}

return Converttoinstance();



   } // End getConfigurationInheritanceElementId
  public  boolean      Issynchronized()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Issynchronized") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_iface = InterfaceReference_c.getOneC_IROnR4009(this);


if ( (  (v_iface != null)) )
{

return v_iface.Issynchronized();



}

return true;



   } // End isSynchronized
  public  void Collectreferencesforsynchronization(final Object p_Referencelist,final int  p_Synctype)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Collectreferencesforsynchronization") ; 
               final ModelRoot modelRoot = getModelRoot();
RequiredOperation_c [] v_ros = RequiredOperation_c.getManySPR_ROsOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this));


RequiredOperation_c  v_ro = null;
for ( int i55168 = 0; i55168 < v_ros.length; i55168++)
{
  v_ro = v_ros[i55168] ;

Util_c.Addelementtolist(			    
v_ro.Converttoinstance()			    
,p_Referencelist ) ;



}

RequiredSignal_c [] v_rss = RequiredSignal_c.getManySPR_RSsOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(this));


RequiredSignal_c  v_rs = null;
for ( int i55169 = 0; i55169 < v_rss.length; i55169++)
{
  v_rs = v_rss[i55169] ;

Util_c.Addelementtolist(			    
v_rs.Converttoinstance()			    
,p_Referencelist ) ;



}


   } // End collectReferencesForSynchronization
  public  void Synchronize()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Synchronize") ; 
               final ModelRoot modelRoot = getModelRoot();
InterfaceReference_c v_interfaceRef = InterfaceReference_c.getOneC_IROnR4009(this);


if ( (  (v_interfaceRef != null)) )
{

if (v_interfaceRef != null) {
v_interfaceRef.Synchronize() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}



}


   } // End synchronize
  public  void Collectchanges(final Object p_Changelist)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Collectchanges") ; 
               final ModelRoot modelRoot = getModelRoot();
if ( (  !Issynchronized()) )
{

Interface_c v_interface = Interface_c.getOneC_IOnR4012(InterfaceReference_c.getOneC_IROnR4009(this));


boolean      v_isTornDown = Util_c.Isproxy(			    
v_interface.Converttoinstance()) ;


if ( (  !v_isTornDown) )
{

InterfacePackage_c v_pkg = InterfacePackage_c.getOneIP_IPOnR4303(v_interface);


PackageableElement_c v_pe = PackageableElement_c.getOnePE_PEOnR8001(v_interface);


if ( (  (v_pkg == null) &&   (v_pe == null)) )
{

v_isTornDown = true ;



}


}

if ( (v_isTornDown) )
{

Util_c.Createelementchange(			    
"unformalized"			    
,p_Changelist			    
,Converttoinstance()			    
,true ) ;



}

else
{

ExecutableProperty_c [] v_eps = ExecutableProperty_c.getManyC_EPsOnR4003(v_interface);


ExecutableProperty_c  v_ep = null;
for ( int i55170 = 0; i55170 < v_eps.length; i55170++)
{
  v_ep = v_eps[i55170] ;

  class RequiredExecutableProperty_test55819_c implements ClassQueryInterface_c
  {
	RequiredExecutableProperty_test55819_c( java.util.UUID         p55820 ) {
		m_p55820 = p55820;
	}
	private java.util.UUID         m_p55820;
	public boolean evaluate (Object candidate)
	{
		RequiredExecutableProperty_c selected = (RequiredExecutableProperty_c)candidate;
		return (selected.getExecutableproperty_id().equals(m_p55820)) ;
	}
  }
RequiredExecutableProperty_c v_rep = RequiredExecutableProperty_c.getOneSPR_REPOnR4500(this, new RequiredExecutableProperty_test55819_c(v_ep.getId()));


if ( (  (v_rep == null)) )
{

Util_c.Createelementchange(			    
v_ep.getName() + " added"			    
,p_Changelist			    
,Converttoinstance()			    
,false ) ;



}


}


}


}


   } // End collectChanges
  public  String       Getcachedreversepathfromcomponent()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Getcachedreversepathfromcomponent") ; 
	return m_reversepathfromcomponent;
   } // End getCachedReversePathFromComponent
  public  void Setcachedreversepathfromcomponent(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Setcachedreversepathfromcomponent") ; 
	m_reversepathfromcomponent = p_Value;
   } // End setCachedReversePathFromComponent
  public  String       Getcachedname()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Getcachedname") ; 
	return m_name;
   } // End getCachedName
  public  void Setcachedname(final String       p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Requirement", " Operation entered: Requirement::Setcachedname") ; 
	m_name = p_Value;
   } // End setCachedName

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
    if (adapter == IActionFilter.class)
    {
        return RequirementActionFilter.getSingleton();
    }
	  return null;
  }
} // end Requirement
