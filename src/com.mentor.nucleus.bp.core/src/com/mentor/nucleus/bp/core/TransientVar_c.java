      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.TransientVar_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_TRANSIENT_VAR extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class TransientVar_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public TransientVar_c(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_dimensions)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       m_dimensions = p_m_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    Object [] key = {m_var_id};
    addInstanceToMap(key);
  }
  static public TransientVar_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_dimensions, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
      TransientVar_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_var_id};
          new_inst = (TransientVar_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       new_inst.m_dimensions = p_m_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new TransientVar_c(modelRoot,
p_m_var_id,
p_m_dt_id,
p_m_dimensions
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public TransientVar_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_var_id,
       java.util.UUID         p_m_dt_id,
       String       p_m_dimensions){
    InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
    TransientVar_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_var_id
            };
        source = (TransientVar_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_var_id = IdAssigner.preprocessUUID(p_m_var_id);
       source.m_dimensions = p_m_dimensions;
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    TransientVar_c new_inst = new TransientVar_c(modelRoot,
p_m_var_id,
p_m_dt_id,
p_m_dimensions
);
    return new_inst;
  }
  public TransientVar_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_var_id = IdAssigner.NULL_UUID;   
     m_dimensions = "";   
     m_dt_id = IdAssigner.NULL_UUID;   
    Object [] key = {m_var_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_var_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p4
			// round p5
	if (m_var_id !=  p_newKey ){
	
		m_var_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof TransientVar_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof TransientVar_c)) {
           return false;
       }
       
       TransientVar_c me = (TransientVar_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getVar_id()) || IdAssigner.NULL_UUID.equals(((TransientVar_c)elem).getVar_id())) && this != elem)) {
      	return false;
      }
      if (!getVar_id().equals(((TransientVar_c)elem).getVar_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof TransientVar_c)) {
           return false;
       }
       
       TransientVar_c me = (TransientVar_c)elem;
      if (!getVar_idCachedValue().equals(((TransientVar_c)elem).getVar_idCachedValue())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_var_id ;
  private String       m_dimensions ;
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

Variable_c IsSupertypeVariable ;
public void relateAcrossR814To(Variable_c target)
{
	relateAcrossR814To(target, true);
}
public void relateAcrossR814To(Variable_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == IsSupertypeVariable) return;  // already related

    if ( IsSupertypeVariable != target ) {
    
    Object oldKey = getInstanceKey();

    if (IsSupertypeVariable != null) {
    
        IsSupertypeVariable.clearBackPointerR814To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"TransientVar_c.relateAcrossR814To(Variable_c target)", 
			"Relate performed across R814 from Transient Var to Variable without unrelate of prior instance.");  
		}
    }
                
    	IsSupertypeVariable = target ;
        m_var_id = target.getVar_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR814To(this);
        target.addRef();
    }
}
public void unrelateAcrossR814From(Variable_c target)
{
	unrelateAcrossR814From(target, true);
}
public void unrelateAcrossR814From(Variable_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (IsSupertypeVariable == null) return;  // already unrelated
	
	if (target != IsSupertypeVariable) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R814", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR814To(this);
    }
    

      if(IsSupertypeVariable != null) {
      
        m_var_id = IsSupertypeVariable.getVar_id();
        IsSupertypeVariable = null ;
        target.removeRef();
    }
}

  
    
      
public static TransientVar_c getOneV_TRNOnR814(Variable_c [] targets)
{
    return getOneV_TRNOnR814(targets, null);
}

public static TransientVar_c getOneV_TRNOnR814(Variable_c [] targets, ClassQueryInterface_c test)
{
    TransientVar_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_TRNOnR814(targets[i], test);
        }
    }

    return ret_val;
}

public static TransientVar_c getOneV_TRNOnR814(Variable_c target)
{
  return getOneV_TRNOnR814(target, null);
}

public static TransientVar_c getOneV_TRNOnR814(Variable_c target, boolean loadComponent)
{
    return getOneV_TRNOnR814(target.getModelRoot(), target, null, loadComponent);
}

public static TransientVar_c getOneV_TRNOnR814(Variable_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_TRNOnR814(target.getModelRoot(), target, test);
  }
  return null;
}

public static TransientVar_c getOneV_TRNOnR814(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test)
{
	return getOneV_TRNOnR814(modelRoot, target, test, true);
}

public static TransientVar_c getOneV_TRNOnR814(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_TRNOnR814(modelRoot,target,test);
}
private static TransientVar_c find_getOneV_TRNOnR814(ModelRoot modelRoot, Variable_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    TransientVar_c source = (TransientVar_c)target.backPointer_IsSubtypeTransientVarIsSubtype_R814;
    if (source != null && (test == null || test.evaluate(source))) {
      return source;
    }
  }
  // not found
  return null ;
}

public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c [] targets)
{
  return getManyV_TRNsOnR814(targets, null);
}
public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c [] targets, boolean loadComponent)
{
  return getManyV_TRNsOnR814(targets, null, loadComponent);
}
public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_TRNsOnR814(targets, test, true);
}

public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new TransientVar_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
      TransientVar_c source = (TransientVar_c)targets[i].backPointer_IsSubtypeTransientVarIsSubtype_R814;
      if (source != null && (test == null || test.evaluate(source))) {
        matches.add(source);
      }
  }
  if (matches.size() > 0) {
	TransientVar_c[] ret_set = new TransientVar_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new TransientVar_c[0];
  }
  }

public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c target)
{
  if (target != null) {
    Variable_c [] targetArray = new Variable_c[1];
    targetArray[0] = target;
    return getManyV_TRNsOnR814(targetArray);
  } else {
    TransientVar_c [] result = new TransientVar_c [0] ;
  return result ;
}
}

public static TransientVar_c [] getManyV_TRNsOnR814(Variable_c target, boolean loadComponent)
{
  if (target != null) {
    Variable_c [] targetArray = new Variable_c[1];
    targetArray[0] = target;
    return getManyV_TRNsOnR814(targetArray, loadComponent);
  } else {
    TransientVar_c [] result = new TransientVar_c [0] ;
  return result ;
}
}



  
    
// referring navigation

DataType_c HasDataType ;
public void relateAcrossR821To(DataType_c target)
{
	relateAcrossR821To(target, true);
}
public void relateAcrossR821To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasDataType) return;  // already related

    if ( HasDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasDataType != null) {
    
        HasDataType.clearBackPointerR821To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"TransientVar_c.relateAcrossR821To(DataType_c target)", 
			"Relate performed across R821 from Transient Var to Data Type without unrelate of prior instance.");  
		}
    }
                
    	HasDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR821To(this);
        target.addRef();
    }
}
public void unrelateAcrossR821From(DataType_c target)
{
	unrelateAcrossR821From(target, true);
}
public void unrelateAcrossR821From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasDataType == null) return;  // already unrelated
	
	if (target != HasDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R821", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR821To(this);
    }
    

      if(HasDataType != null) {
      
        m_dt_id = HasDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = HasDataType.getDt_idCachedValue();
        }       
        HasDataType = null ;
        target.removeRef();
    }
}

  
    
      
public static TransientVar_c getOneV_TRNOnR821(DataType_c [] targets)
{
    return getOneV_TRNOnR821(targets, null);
}

public static TransientVar_c getOneV_TRNOnR821(DataType_c [] targets, ClassQueryInterface_c test)
{
    TransientVar_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_TRNOnR821(targets[i], test);
        }
    }

    return ret_val;
}

public static TransientVar_c getOneV_TRNOnR821(DataType_c target)
{
  return getOneV_TRNOnR821(target, null);
}

public static TransientVar_c getOneV_TRNOnR821(DataType_c target, boolean loadComponent)
{
    return getOneV_TRNOnR821(target.getModelRoot(), target, null, loadComponent);
}

public static TransientVar_c getOneV_TRNOnR821(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_TRNOnR821(target.getModelRoot(), target, test);
  }
  return null;
}

public static TransientVar_c getOneV_TRNOnR821(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneV_TRNOnR821(modelRoot, target, test, true);
}

public static TransientVar_c getOneV_TRNOnR821(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_TRNOnR821(modelRoot,target,test);
}
private static TransientVar_c find_getOneV_TRNOnR821(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTypeOfTransientVarIsTypeOf_R821) {
	    for ( int i = 0; i < target.backPointer_IsTypeOfTransientVarIsTypeOf_R821.size(); ++i ) {
	      TransientVar_c source = (TransientVar_c)target.backPointer_IsTypeOfTransientVarIsTypeOf_R821.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c [] targets)
{
  return getManyV_TRNsOnR821(targets, null);
}
public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c [] targets, boolean loadComponent)
{
  return getManyV_TRNsOnR821(targets, null, loadComponent);
}
public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_TRNsOnR821(targets, test, true);
}

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new TransientVar_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTypeOfTransientVarIsTypeOf_R821) {
	    for (int j = 0; j < targets[i].backPointer_IsTypeOfTransientVarIsTypeOf_R821.size(); ++j) {
	      TransientVar_c source = (TransientVar_c)targets[i].backPointer_IsTypeOfTransientVarIsTypeOf_R821.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	TransientVar_c[] ret_set = new TransientVar_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new TransientVar_c[0];
  }
  }

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c target)
{
  return getManyV_TRNsOnR821(target, null);
}

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c target, boolean loadComponent)
{
  return getManyV_TRNsOnR821(target, null, loadComponent);
}

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c target, ClassQueryInterface_c test)
{
	return getManyV_TRNsOnR821(target, test, true);
}

public static TransientVar_c [] getManyV_TRNsOnR821(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new TransientVar_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTypeOfTransientVarIsTypeOf_R821) {
    for (int i = 0; i < target.backPointer_IsTypeOfTransientVarIsTypeOf_R821.size(); ++i) {
      TransientVar_c source = (TransientVar_c)target.backPointer_IsTypeOfTransientVarIsTypeOf_R821.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		TransientVar_c[] ret_set = new TransientVar_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new TransientVar_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Dimensions_c> backPointer_MayHaveDimensionsMayHave_R844 = new ArrayList<Dimensions_c>();

public void setDimensionsOrderInChildListR844(Dimensions_c target, int index) {
	unrelateAcrossR844From(target);
	Dimensions_c[] elements = Dimensions_c.getManyS_DIMsOnR844(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR844From((Dimensions_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR844To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR844To((Dimensions_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR844To(Dimensions_c target)
{
  if (target != null) {
    target.relateAcrossR844To(this, true) ;
  }
}

public void relateAcrossR844To(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR844To(this, notifyChanges) ;
  }
}

public void setBackPointerR844To(Dimensions_c target)
{
  	synchronized (backPointer_MayHaveDimensionsMayHave_R844) {
		backPointer_MayHaveDimensionsMayHave_R844.add(target);
	}
}

public void unrelateAcrossR844From(Dimensions_c target)
{
  if (target != null) {
    target.unrelateAcrossR844From(this, true) ;
  }
}

public void unrelateAcrossR844From(Dimensions_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR844From(this, notifyChanges) ;
  }
}

public void clearBackPointerR844To(Dimensions_c target)
{
  synchronized (backPointer_MayHaveDimensionsMayHave_R844) {
	    backPointer_MayHaveDimensionsMayHave_R844.remove(target);
	}
}

public static TransientVar_c getOneV_TRNOnR844(Dimensions_c [] targets)
{
    return getOneV_TRNOnR844(targets, null);
}

public static TransientVar_c getOneV_TRNOnR844(Dimensions_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_TRNOnR844(targets, test, true);
}

public static TransientVar_c getOneV_TRNOnR844(Dimensions_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    TransientVar_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             TransientVar_c candidate_val = getOneV_TRNOnR844(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_TRNOnR844(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static TransientVar_c getOneV_TRNOnR844(Dimensions_c target)
{
	return getOneV_TRNOnR844(target, true);
}
public static TransientVar_c getOneV_TRNOnR844(Dimensions_c target, boolean loadComponent)
{
  if (target != null) {
    return target.SpecifiesOccurrencesOfTransientVar ;
  } else {
    return null;
  }
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_TRNsOnR844(targets, test, true);
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new TransientVar_c[0];
  
  
  LinkedHashSet<TransientVar_c> elementsSet = new LinkedHashSet<TransientVar_c>();
  for (int i = 0; i < targets.length; i++) {
    TransientVar_c associate = targets[i].SpecifiesOccurrencesOfTransientVar;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  TransientVar_c[] result = new TransientVar_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c [] targets)
{
  return getManyV_TRNsOnR844(targets, null);
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Dimensions_c [] targetArray = new Dimensions_c[1];
    targetArray[0] = target;
    return getManyV_TRNsOnR844(targetArray, test, loadComponent);
  } else {
    TransientVar_c [] result = new TransientVar_c [0] ;
    return result ;
  }
  
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c target,
    ClassQueryInterface_c test)
{
    return getManyV_TRNsOnR844(target, null, true);
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c target)
{
    return getManyV_TRNsOnR844(target, null, true);
}

public static TransientVar_c [] getManyV_TRNsOnR844(Dimensions_c target, boolean loadComponent)
{
    return getManyV_TRNsOnR844(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

      // R814
      Variable_c relInst37985 = (Variable_c) baseRoot.getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37985 == null) {
      			relInst37985 = (Variable_c) Ooaofooa.getDefaultInstance().getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
      		}
			if (relInst37985 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37985 = (Variable_c) roots[i].getInstanceList(Variable_c.class).get(new Object[] {m_var_id});
					if (relInst37985 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37985 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37985) && !isProxy())) {
	      relInst37985.relateAcrossR814To(this, notifyChanges);
	  }
	  }
	          

	if (HasDataType == null) {          
      // R821
      DataType_c relInst37986 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37986 == null) {
      			relInst37986 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst37986 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37986 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst37986 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37986 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37986) && !isProxy())) {
	      relInst37986.relateAcrossR821To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R814
      // V_VAR
		  inst=IsSupertypeVariable;
			unrelateAcrossR814From(IsSupertypeVariable, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R821
      // S_DT
		  inst=HasDataType;
			unrelateAcrossR821From(HasDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final TransientVar_c inst = (TransientVar_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static TransientVar_c TransientVarInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		TransientVar_c result=findTransientVarInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static TransientVar_c findTransientVarInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				TransientVar_c x = (TransientVar_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static TransientVar_c TransientVarInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return TransientVarInstance(modelRoot,test,true);
  }
  
  public static TransientVar_c TransientVarInstance(ModelRoot modelRoot)
  {
	 return TransientVarInstance(modelRoot,null,true);
  }

  public static TransientVar_c [] TransientVarInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(TransientVar_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					TransientVar_c x = (TransientVar_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				TransientVar_c[] ret_set = new TransientVar_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new TransientVar_c[0];
			}		
		} 
  }
  public static TransientVar_c [] TransientVarInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  TransientVarInstances(modelRoot,test,true);
  }
  public static TransientVar_c [] TransientVarInstances(ModelRoot modelRoot)
  {
	return TransientVarInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Transient Var.dispose call: ";
	Variable_c testR814Inst3 = Variable_c.getOneV_VAROnR814(this, false);

	if ( testR814Inst3 != null )
	{
	delete_error = true;	        
	errorMsg = errorMsg + "814 ";
	}
	DataType_c testR821Inst = DataType_c.getOneS_DTOnR821(this, false);

	if ( testR821Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "821 ";
	}
	Dimensions_c testR844Inst = Dimensions_c.getOneS_DIMOnR844(this, false);

	if ( testR844Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "844 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Transient Var", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("var_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getVar_idLongBased()
  {
    if ( IsSupertypeVariable != null )
    {
      return IsSupertypeVariable.getVar_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getVar_id()
  {
    if ( IsSupertypeVariable != null )
    {
      return IsSupertypeVariable.getVar_id();
    }
    return IdAssigner.NULL_UUID;
  }

 public boolean hasSuperType(){
 	return  ( IsSupertypeVariable != null );
 
 }                  

  public java.util.UUID getVar_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_var_id) )
      return m_var_id;
    else
      return getVar_id();
  }
  
  public void setVar_id(java.util.UUID newValue)
  {
   m_var_id = IdAssigner.preprocessUUID(newValue);
  }
  public String getDimensions()
  {
    return m_dimensions ;
  }


  public void setDimensions(String newValue)
  {
   m_dimensions = newValue ;
  }
  public long getDt_idLongBased()
  {
    if ( HasDataType != null )
    {
      return HasDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( HasDataType != null )
    {
      return HasDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
   m_dt_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Transient Var", //$NON-NLS-1$
	  " Operation entered: Transient Var::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     TransientVar_c [] objs = TransientVar_c.TransientVarInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Transient Var", //$NON-NLS-1$
	  " Operation entered: Transient Var::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class TransientVar_c_test37988_c implements ClassQueryInterface_c
    {
	  TransientVar_c_test37988_c( java.util.UUID            p37989 ) {
	  m_p37989 = p37989;
	  }
	  private java.util.UUID             m_p37989; 
	  public boolean evaluate (Object candidate)
	  {
	      TransientVar_c selected = (TransientVar_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37989));
	      return retval;
	  }
    }

    TransientVar_c [] objs37987 = 
    TransientVar_c.TransientVarInstances(modelRoot, new TransientVar_c_test37988_c(getVar_id())) ;

    if ( (  (objs37987.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Transient Var", //$NON-NLS-1$
           "Consistency: Object: Transient Var: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37987.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Transient Var: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37987.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs37987.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Transient Var", //$NON-NLS-1$
           "Consistency: Object: Transient Var: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37987.length )  + " Var_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Transient Var: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37987.length )  + " Var_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Transient Var is a subtype in association: rel.Numb = 814
          // The supertype class is: Variable
    class Variable_c_test37993_c implements ClassQueryInterface_c
    {
	  Variable_c_test37993_c( java.util.UUID            p37994 ) {
	  m_p37994 = p37994;
	  }
	  private java.util.UUID             m_p37994; 
	  public boolean evaluate (Object candidate)
	  {
	      Variable_c selected = (Variable_c) candidate;
	      boolean retval = false;
	      retval = (selected.getVar_id().equals(m_p37994));
	      return retval;
	  }
    }

    Variable_c [] objs37992 = 
    Variable_c.VariableInstances(modelRoot, new Variable_c_test37993_c(getVar_id())) ;

    if ( (  (objs37992.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Transient Var", //$NON-NLS-1$
           "Consistency: Object: Transient Var: Association: 814: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37992.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Transient Var: Association: 814: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37992.length )  , e); 
      }
      retval = false;

    }

          // Transient Var is a referring class in association: rel.Numb = 821
          // The participating class is: Data Type
    class DataType_c_test37996_c implements ClassQueryInterface_c
    {
	  DataType_c_test37996_c( java.util.UUID            p37997 ) {
	  m_p37997 = p37997;
	  }
	  private java.util.UUID             m_p37997; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p37997));
	      return retval;
	  }
    }

    DataType_c [] objs37995 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test37996_c(getDt_id())) ;

    if ( (  (objs37995.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Transient Var", //$NON-NLS-1$
           "Consistency: Object: Transient Var: Association: 821: Cardinality of a participant is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37995.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Transient Var: Association: 821: Cardinality of a participant is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37995.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }
                
          // Transient Var is a participating class in association: rel.Numb = 844
             // Object: Dimensions
    return retval;
  }


  // declare transform functions
  public  int          Getdimensionscnt()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Transient Var", " Operation entered: TransientVar::Getdimensionscnt") ; 
               final ModelRoot modelRoot = getModelRoot();
Dimensions_c [] v_dims = Dimensions_c.getManyS_DIMsOnR844(this);


int          v_dimensions =   (v_dims.length) ;


return v_dimensions;



   } // End getDimensionsCnt
  public  void Resizedimensions(final int          p_Dimension,final int          p_Elementcount,final int          p_Numdimensions)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Transient Var", " Operation entered: TransientVar::Resizedimensions") ; 
               final ModelRoot modelRoot = getModelRoot();
while ( (p_Numdimensions > Getdimensionscnt()) )
{

Dimensions_c v_dim = new Dimensions_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_dim));


if (v_dim != null) {
  v_dim.setDimensioncount( Getdimensionscnt()) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_dim != null) {
  v_dim.relateAcrossR844To(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}

while ( (p_Numdimensions < Getdimensionscnt()) )
{

  class Dimensions_test37430_c implements ClassQueryInterface_c
  {
	Dimensions_test37430_c( int          p37431 ) {
		m_p37431 = p37431;
	}
	private int          m_p37431;
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == (m_p37431 - 1)) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR844(this, new Dimensions_test37430_c(Getdimensionscnt()));


if (v_dim != null) {
v_dim.unrelateAcrossR844From(this);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Unrelate attempted on null left hand instance.", t);
}


if (v_dim != null) {
// get the location of this element in the instance list
// before deleting
if ( v_dim.delete() ) {
    Ooaofooa.getDefaultInstance().fireModelElementDeleted(new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE, v_dim));
}
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Delete attempted on null instance.", t);
}



}

if ( (p_Numdimensions > 0) )
{

  class Dimensions_test37432_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
Dimensions_c v_dim = Dimensions_c.getOneS_DIMOnR844(this, new Dimensions_test37432_c());


if ( (v_dim.getElementcount() != p_Elementcount) )
{

if (v_dim != null) {
  v_dim.setElementcount( p_Elementcount) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}



}


}


   } // End resizeDimensions
  public  boolean      Isreferringtodefaultdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Transient Var", " Operation entered: TransientVar::Isreferringtodefaultdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR821(this);


String       v_elementType = Util_c.Getsimpleclassname(			    
Converttoinstance()) ;


if ( (v_dt.getName().equals(DataType_c.Getdefaultdatatypename(modelRoot			    
,v_elementType))) )
{

return true;



}

return false;



   } // End isReferringToDefaultDataType
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Transient Var", " Operation entered: TransientVar::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  boolean      Canrefertodatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Transient Var", " Operation entered: TransientVar::Canrefertodatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c.getOneACT_BLKOnR823(Variable_c.getOneV_VAROnR814(this)));


boolean      v_isInGenericPackage = v_body.Associatewithcontainer() ;


if ( v_isInGenericPackage )
{

DataType_c v_dt = DataType_c.getOneS_DTOnR821(this);


if ( (  (v_dt != null)) )
{

PackageableElement_c v_containingElem = PackageableElement_c.getOnePE_PEOnR640(BodyInElement_c.getOneACT_BIEOnR640(v_body));


return v_containingElem.Canrefertodatatype(			    
v_dt.getDt_id()			    
,v_dt.getName());



}

return false;



}

else
{

DataType_c v_dt = DataType_c.getOneS_DTOnR821(this);


if ( (  (v_dt != null)) )
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if (v_body != null) {
v_body.Associatewithowningcomponent() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


Component_c v_component = Component_c.getOneC_COnR694(BodyInComponent_c.getOneACT_BICOnR694(v_body));


if ( (  (v_component != null)) )
{

RequiredSignalBody_c v_reqSig = RequiredSignalBody_c.getOneACT_RSBOnR698(v_body);


RequiredOperationBody_c v_reqOp = RequiredOperationBody_c.getOneACT_ROBOnR698(v_body);


ProvidedSignalBody_c v_proSig = ProvidedSignalBody_c.getOneACT_PSBOnR698(v_body);


ProvidedOperationBody_c v_proOp = ProvidedOperationBody_c.getOneACT_POBOnR698(v_body);


if ( (  (v_reqSig != null)) )
{

if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_reqOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proSig != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (  !v_dtPkg.Isdomainlevel()) )
{

return true;



}

else
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_dtDomain == v_domain) )
{

return true;



}


}


}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (v_dtPkg.Isdomainlevel()) )
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_domain == v_dtDomain) )
{

return true;



}


}

else
{

return true;



}


}


}

return false;



}


   } // End canReferToDataType

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Transient Var
