package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.CommunicationPath_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_COMMUNICATION_PATH extends genericEvent_c {
	public abstract int getEvtcode();
}

public class CommunicationPath_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public CommunicationPath_c(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_ss_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
		//extract 28 bit value only            
		m_cpath_idLongBased = 0xfffffff & p_m_cpath_id
				.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

		setUniqueId(m_cpath_id);
		Object[] key = {m_cpath_id};
		addInstanceToMap(key);
	}
	static public CommunicationPath_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_ss_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);
		CommunicationPath_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_cpath_id};
			new_inst = (CommunicationPath_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//extract 28 bit value only            
				new_inst.m_cpath_idLongBased = 0xfffffff & p_m_cpath_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new CommunicationPath_c(modelRoot, p_m_cpath_id,
					p_m_ss_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public CommunicationPath_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_cpath_id, java.util.UUID p_m_ss_id) {
		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);
		CommunicationPath_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_cpath_id};
			source = (CommunicationPath_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_cpath_id = IdAssigner.preprocessUUID(p_m_cpath_id);
				//extract 28 bit value only            
				source.m_cpath_idLongBased = 0xfffffff & p_m_cpath_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_ss_id = IdAssigner.preprocessUUID(p_m_ss_id);

				return source;
			}
		}
		// there is no instance matching the id
		CommunicationPath_c new_inst = new CommunicationPath_c(modelRoot,
				p_m_cpath_id, p_m_ss_id);
		return new_inst;
	}
	public CommunicationPath_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_cpath_id = idAssigner.createUUID();
		m_ss_id = IdAssigner.NULL_UUID;
		setUniqueId(m_cpath_id);
		Object[] key = {m_cpath_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_cpath_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_cpath_id != p_newKey) {

			m_cpath_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof CommunicationPath_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof CommunicationPath_c)) {
			return false;
		}

		CommunicationPath_c me = (CommunicationPath_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getCpath_id()) || IdAssigner.NULL_UUID
						.equals(((CommunicationPath_c) elem).getCpath_id())) && this != elem)) {
			return false;
		}
		if (!getCpath_id().equals(((CommunicationPath_c) elem).getCpath_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof CommunicationPath_c)) {
			return false;
		}

		CommunicationPath_c me = (CommunicationPath_c) elem;
		if (!getCpath_id().equals(((CommunicationPath_c) elem).getCpath_id()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_cpath_id;
	private long m_cpath_idLongBased;
	private java.util.UUID m_ss_id;

	// declare association references from this class

	// referring navigation

	Subsystem_c AbstractsAsynchronousCommunicationBetweenClassesInSubsystem;
	public void relateAcrossR5To(Subsystem_c target) {
		relateAcrossR5To(target, true);
	}
	public void relateAcrossR5To(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == AbstractsAsynchronousCommunicationBetweenClassesInSubsystem)
			return; // already related

		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem != target) {

			Object oldKey = getInstanceKey();

			if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem != null) {

				AbstractsAsynchronousCommunicationBetweenClassesInSubsystem
						.clearBackPointerR5To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"CommunicationPath_c.relateAcrossR5To(Subsystem_c target)",
									"Relate performed across R5 from Communication Path to Subsystem without unrelate of prior instance.");
				}
			}

			AbstractsAsynchronousCommunicationBetweenClassesInSubsystem = target;
			m_ss_id = target.getSs_id();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR5To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "5", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR5From(Subsystem_c target) {
		unrelateAcrossR5From(target, true);
	}
	public void unrelateAcrossR5From(Subsystem_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem == null)
			return; // already unrelated

		if (target != AbstractsAsynchronousCommunicationBetweenClassesInSubsystem) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R5", e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR5To(this);
		}

		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem != null) {

			m_ss_id = AbstractsAsynchronousCommunicationBetweenClassesInSubsystem
					.getSs_id();
			AbstractsAsynchronousCommunicationBetweenClassesInSubsystem = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "5", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(Subsystem_c[] targets) {
		return getOneCA_COMMOnR5(targets, null);
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(Subsystem_c[] targets,
			ClassQueryInterface_c test) {
		CommunicationPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCA_COMMOnR5(targets[i], test);
			}
		}

		return ret_val;
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(Subsystem_c target) {
		return getOneCA_COMMOnR5(target, null);
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(Subsystem_c target,
			boolean loadComponent) {
		return getOneCA_COMMOnR5(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(Subsystem_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCA_COMMOnR5(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test) {
		return getOneCA_COMMOnR5(modelRoot, target, test, true);
	}

	public static CommunicationPath_c getOneCA_COMMOnR5(ModelRoot modelRoot,
			Subsystem_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCA_COMMOnR5(modelRoot, target, test);
	}
	private static CommunicationPath_c find_getOneCA_COMMOnR5(
			ModelRoot modelRoot, Subsystem_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_ContainsCommunicationPathContains_R5) {
				for (int i = 0; i < target.backPointer_ContainsCommunicationPathContains_R5
						.size(); ++i) {
					CommunicationPath_c source = (CommunicationPath_c) target.backPointer_ContainsCommunicationPathContains_R5
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(
			Subsystem_c[] targets) {
		return getManyCA_COMMsOnR5(targets, null);
	}
	public static CommunicationPath_c[] getManyCA_COMMsOnR5(
			Subsystem_c[] targets, boolean loadComponent) {
		return getManyCA_COMMsOnR5(targets, null, loadComponent);
	}
	public static CommunicationPath_c[] getManyCA_COMMsOnR5(
			Subsystem_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR5(targets, test, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(
			Subsystem_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new CommunicationPath_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_ContainsCommunicationPathContains_R5) {
				for (int j = 0; j < targets[i].backPointer_ContainsCommunicationPathContains_R5
						.size(); ++j) {
					CommunicationPath_c source = (CommunicationPath_c) targets[i].backPointer_ContainsCommunicationPathContains_R5
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			CommunicationPath_c[] ret_set = new CommunicationPath_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CommunicationPath_c[0];
		}
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(Subsystem_c target) {
		return getManyCA_COMMsOnR5(target, null);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(Subsystem_c target,
			boolean loadComponent) {
		return getManyCA_COMMsOnR5(target, null, loadComponent);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(Subsystem_c target,
			ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR5(target, test, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR5(Subsystem_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		if (target == null)
			return new CommunicationPath_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_ContainsCommunicationPathContains_R5) {
			for (int i = 0; i < target.backPointer_ContainsCommunicationPathContains_R5
					.size(); ++i) {
				CommunicationPath_c source = (CommunicationPath_c) target.backPointer_ContainsCommunicationPathContains_R5
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			CommunicationPath_c[] ret_set = new CommunicationPath_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new CommunicationPath_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	SmToSmCommPath_c backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401;

	public void setSmToSmCommPathOrderInChildListR401(SmToSmCommPath_c target,
			int index) {
		unrelateAcrossR401From(target);
		SmToSmCommPath_c[] elements = SmToSmCommPath_c
				.getManyCA_SMSMCsOnR401(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR401From((SmToSmCommPath_c) elements[i]);
			}
			count++;
		}
		relateAcrossR401To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR401To((SmToSmCommPath_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR401To(SmToSmCommPath_c target) {
		if (target != null) {
			target.relateAcrossR401To(this, true);
		}
	}

	public void relateAcrossR401To(SmToSmCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR401To(this, notifyChanges);
		}
	}

	public void setBackPointerR401To(SmToSmCommPath_c target) {
		backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401 = target;
	}

	public void unrelateAcrossR401From(SmToSmCommPath_c target) {
		if (target != null) {
			target.unrelateAcrossR401From(this, true);
		}
	}

	public void unrelateAcrossR401From(SmToSmCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR401From(this, notifyChanges);
		}
	}

	public void clearBackPointerR401To(SmToSmCommPath_c target) {
		if (target == backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401) {
			backPointer_IsSubtypeSmToSmCommPathIsSubtype_R401 = null;
		}
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToSmCommPath_c[] targets) {
		return getOneCA_COMMOnR401(targets, null);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		return getOneCA_COMMOnR401(targets, test, true);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		CommunicationPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					CommunicationPath_c candidate_val = getOneCA_COMMOnR401(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCA_COMMOnR401(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToSmCommPath_c target) {
		return getOneCA_COMMOnR401(target, true);
	}
	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToSmCommPath_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeCommunicationPath;
		} else {
			return null;
		}
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(targets, test, true);
	}

	public static CommunicationPath_c [] getManyCA_COMMsOnR401(SmToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new CommunicationPath_c[0];
  
  
  LinkedHashSet<CommunicationPath_c> elementsSet = new LinkedHashSet<CommunicationPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeCommunicationPath == null)
	  targets[i].loadProxy();
    CommunicationPath_c associate = targets[i].IsSupertypeCommunicationPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  CommunicationPath_c[] result = new CommunicationPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c[] targets) {
		return getManyCA_COMMsOnR401(targets, null);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SmToSmCommPath_c[] targetArray = new SmToSmCommPath_c[1];
			targetArray[0] = target;
			return getManyCA_COMMsOnR401(targetArray, test, loadComponent);
		} else {
			CommunicationPath_c[] result = new CommunicationPath_c[0];
			return result;
		}

	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c target, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c target) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToSmCommPath_c target, boolean loadComponent) {
		return getManyCA_COMMsOnR401(target, null, loadComponent);
	}

	// referred to navigation

	EeToSmCommPath_c backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401;

	public void setEeToSmCommPathOrderInChildListR401(EeToSmCommPath_c target,
			int index) {
		unrelateAcrossR401From(target);
		EeToSmCommPath_c[] elements = EeToSmCommPath_c
				.getManyCA_EESMCsOnR401(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR401From((EeToSmCommPath_c) elements[i]);
			}
			count++;
		}
		relateAcrossR401To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR401To((EeToSmCommPath_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR401To(EeToSmCommPath_c target) {
		if (target != null) {
			target.relateAcrossR401To(this, true);
		}
	}

	public void relateAcrossR401To(EeToSmCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR401To(this, notifyChanges);
		}
	}

	public void setBackPointerR401To(EeToSmCommPath_c target) {
		backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401 = target;
	}

	public void unrelateAcrossR401From(EeToSmCommPath_c target) {
		if (target != null) {
			target.unrelateAcrossR401From(this, true);
		}
	}

	public void unrelateAcrossR401From(EeToSmCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR401From(this, notifyChanges);
		}
	}

	public void clearBackPointerR401To(EeToSmCommPath_c target) {
		if (target == backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401) {
			backPointer_IsSubtypeEeToSmCommPathIsSubtype_R401 = null;
		}
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			EeToSmCommPath_c[] targets) {
		return getOneCA_COMMOnR401(targets, null);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			EeToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		return getOneCA_COMMOnR401(targets, test, true);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			EeToSmCommPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		CommunicationPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					CommunicationPath_c candidate_val = getOneCA_COMMOnR401(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCA_COMMOnR401(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			EeToSmCommPath_c target) {
		return getOneCA_COMMOnR401(target, true);
	}
	public static CommunicationPath_c getOneCA_COMMOnR401(
			EeToSmCommPath_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeCommunicationPath;
		} else {
			return null;
		}
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(targets, test, true);
	}

	public static CommunicationPath_c [] getManyCA_COMMsOnR401(EeToSmCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new CommunicationPath_c[0];
  
  
  LinkedHashSet<CommunicationPath_c> elementsSet = new LinkedHashSet<CommunicationPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeCommunicationPath == null)
	  targets[i].loadProxy();
    CommunicationPath_c associate = targets[i].IsSupertypeCommunicationPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  CommunicationPath_c[] result = new CommunicationPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c[] targets) {
		return getManyCA_COMMsOnR401(targets, null);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			EeToSmCommPath_c[] targetArray = new EeToSmCommPath_c[1];
			targetArray[0] = target;
			return getManyCA_COMMsOnR401(targetArray, test, loadComponent);
		} else {
			CommunicationPath_c[] result = new CommunicationPath_c[0];
			return result;
		}

	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c target, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c target) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			EeToSmCommPath_c target, boolean loadComponent) {
		return getManyCA_COMMsOnR401(target, null, loadComponent);
	}

	// referred to navigation

	SmToEeCommPath_c backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401;

	public void setSmToEeCommPathOrderInChildListR401(SmToEeCommPath_c target,
			int index) {
		unrelateAcrossR401From(target);
		SmToEeCommPath_c[] elements = SmToEeCommPath_c
				.getManyCA_SMEECsOnR401(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR401From((SmToEeCommPath_c) elements[i]);
			}
			count++;
		}
		relateAcrossR401To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR401To((SmToEeCommPath_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR401To(SmToEeCommPath_c target) {
		if (target != null) {
			target.relateAcrossR401To(this, true);
		}
	}

	public void relateAcrossR401To(SmToEeCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR401To(this, notifyChanges);
		}
	}

	public void setBackPointerR401To(SmToEeCommPath_c target) {
		backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401 = target;
	}

	public void unrelateAcrossR401From(SmToEeCommPath_c target) {
		if (target != null) {
			target.unrelateAcrossR401From(this, true);
		}
	}

	public void unrelateAcrossR401From(SmToEeCommPath_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR401From(this, notifyChanges);
		}
	}

	public void clearBackPointerR401To(SmToEeCommPath_c target) {
		if (target == backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401) {
			backPointer_IsSubtypeSmToEeCommPathIsSubtype_R401 = null;
		}
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToEeCommPath_c[] targets) {
		return getOneCA_COMMOnR401(targets, null);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test) {
		return getOneCA_COMMOnR401(targets, test, true);
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		CommunicationPath_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					CommunicationPath_c candidate_val = getOneCA_COMMOnR401(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCA_COMMOnR401(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToEeCommPath_c target) {
		return getOneCA_COMMOnR401(target, true);
	}
	public static CommunicationPath_c getOneCA_COMMOnR401(
			SmToEeCommPath_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
			}
			return target.IsSupertypeCommunicationPath;
		} else {
			return null;
		}
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c[] targets, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(targets, test, true);
	}

	public static CommunicationPath_c [] getManyCA_COMMsOnR401(SmToEeCommPath_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new CommunicationPath_c[0];
  
  
  LinkedHashSet<CommunicationPath_c> elementsSet = new LinkedHashSet<CommunicationPath_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsSupertypeCommunicationPath == null)
	  targets[i].loadProxy();
    CommunicationPath_c associate = targets[i].IsSupertypeCommunicationPath;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  CommunicationPath_c[] result = new CommunicationPath_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c[] targets) {
		return getManyCA_COMMsOnR401(targets, null);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			SmToEeCommPath_c[] targetArray = new SmToEeCommPath_c[1];
			targetArray[0] = target;
			return getManyCA_COMMsOnR401(targetArray, test, loadComponent);
		} else {
			CommunicationPath_c[] result = new CommunicationPath_c[0];
			return result;
		}

	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c target, ClassQueryInterface_c test) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c target) {
		return getManyCA_COMMsOnR401(target, null, true);
	}

	public static CommunicationPath_c[] getManyCA_COMMsOnR401(
			SmToEeCommPath_c target, boolean loadComponent) {
		return getManyCA_COMMsOnR401(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem == null) {
			// R5
			Subsystem_c relInst57496 = (Subsystem_c) baseRoot.getInstanceList(
					Subsystem_c.class).get(new Object[]{m_ss_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57496 == null) {
				relInst57496 = (Subsystem_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Subsystem_c.class)
						.get(new Object[]{m_ss_id});
			}
			if (relInst57496 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57496 = (Subsystem_c) roots[i].getInstanceList(
							Subsystem_c.class).get(new Object[]{m_ss_id});
					if (relInst57496 != null)
						break;
				}
			}
			//synchronized
			if (relInst57496 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57496) && !isProxy())) {
					relInst57496.relateAcrossR5To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R5
		// S_SS
		inst = AbstractsAsynchronousCommunicationBetweenClassesInSubsystem;
		unrelateAcrossR5From(
				AbstractsAsynchronousCommunicationBetweenClassesInSubsystem,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(CommunicationPath_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final CommunicationPath_c inst = (CommunicationPath_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static CommunicationPath_c CommunicationPathInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		CommunicationPath_c result = findCommunicationPathInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					CommunicationPath_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findCommunicationPathInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static CommunicationPath_c findCommunicationPathInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CommunicationPath_c x = (CommunicationPath_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static CommunicationPath_c CommunicationPathInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CommunicationPathInstance(modelRoot, test, true);
	}

	public static CommunicationPath_c CommunicationPathInstance(
			ModelRoot modelRoot) {
		return CommunicationPathInstance(modelRoot, null, true);
	}

	public static CommunicationPath_c[] CommunicationPathInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					CommunicationPath_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(CommunicationPath_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				CommunicationPath_c x = (CommunicationPath_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				CommunicationPath_c[] ret_set = new CommunicationPath_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new CommunicationPath_c[0];
			}
		}
	}
	public static CommunicationPath_c[] CommunicationPathInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return CommunicationPathInstances(modelRoot, test, true);
	}
	public static CommunicationPath_c[] CommunicationPathInstances(
			ModelRoot modelRoot) {
		return CommunicationPathInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Communication Path.dispose call: ";
		Subsystem_c testR5Inst = Subsystem_c.getOneS_SSOnR5(this, false);

		if (testR5Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "5 ";
		}
		SmToSmCommPath_c testR401Inst1 = SmToSmCommPath_c.getOneCA_SMSMCOnR401(
				this, false);

		if (testR401Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "401 ";
		}
		EeToSmCommPath_c testR401Inst2 = EeToSmCommPath_c.getOneCA_EESMCOnR401(
				this, false);

		if (testR401Inst2 != null) {
			delete_error = true;
			errorMsg = errorMsg + "401 ";
		}
		SmToEeCommPath_c testR401Inst3 = SmToEeCommPath_c.getOneCA_SMEECOnR401(
				this, false);

		if (testR401Inst3 != null) {
			delete_error = true;
			errorMsg = errorMsg + "401 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Communication Path",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("cpath_id")) {
			return true;
		}
		if (attributeName.equals("ss_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getCpath_id();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getCpath_idLongBased() {
		if (m_cpath_idLongBased == 0
				&& !IdAssigner.NULL_UUID.equals(m_cpath_id)) {
			return 0xfffffff & m_cpath_id.getLeastSignificantBits();
		}
		return m_cpath_idLongBased;
	}
	public java.util.UUID getCpath_id() {
		return m_cpath_id;
	}

	public void setCpath_id(java.util.UUID newValue) {
		m_cpath_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getSs_idLongBased() {
		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem != null) {
			return AbstractsAsynchronousCommunicationBetweenClassesInSubsystem
					.getSs_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getSs_id() {
		if (AbstractsAsynchronousCommunicationBetweenClassesInSubsystem != null) {
			return AbstractsAsynchronousCommunicationBetweenClassesInSubsystem
					.getSs_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getSs_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_ss_id))
			return m_ss_id;
		else
			return getSs_id();
	}

	public void setSs_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_ss_id)) {
				return;
			}
		} else if (m_ss_id != null) {
			if (m_ss_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Ss_id",
				m_ss_id, newValue, true);
		m_ss_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Communication Path", //$NON-NLS-1$
						" Operation entered: Communication Path::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		CommunicationPath_c[] objs = CommunicationPath_c
				.CommunicationPathInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Communication Path", //$NON-NLS-1$
				" Operation entered: Communication Path::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class CommunicationPath_c_test57498_c implements ClassQueryInterface_c {
			CommunicationPath_c_test57498_c(java.util.UUID p57499) {
				m_p57499 = p57499;
			}
			private java.util.UUID m_p57499;
			public boolean evaluate(Object candidate) {
				CommunicationPath_c selected = (CommunicationPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57499));
				return retval;
			}
		}

		CommunicationPath_c[] objs57497 = CommunicationPath_c
				.CommunicationPathInstances(modelRoot,
						new CommunicationPath_c_test57498_c(getCpath_id()));

		if (((objs57497.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Communication Path", //$NON-NLS-1$
								"Consistency: Object: Communication Path: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57497.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Communication Path: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57497.length), e);
			}
			retval = false;

		}

		if (((objs57497.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Communication Path", //$NON-NLS-1$
								"Consistency: Object: Communication Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57497.length)
										+ " CPath_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Communication Path: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57497.length)
										+ " CPath_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Communication Path is a referring class in association: rel.Numb = 5
		// The participating class is: Subsystem
		class Subsystem_c_test57503_c implements ClassQueryInterface_c {
			Subsystem_c_test57503_c(java.util.UUID p57504) {
				m_p57504 = p57504;
			}
			private java.util.UUID m_p57504;
			public boolean evaluate(Object candidate) {
				Subsystem_c selected = (Subsystem_c) candidate;
				boolean retval = false;
				retval = (selected.getSs_id().equals(m_p57504));
				return retval;
			}
		}

		Subsystem_c[] objs57502 = Subsystem_c.SubsystemInstances(modelRoot,
				new Subsystem_c_test57503_c(getSs_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57502.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Communication Path", //$NON-NLS-1$
								"Consistency: Object: Communication Path: Association: 5: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57502.length)
										+ " SS_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Communication Path: Association: 5: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57502.length)
										+ " SS_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Supertype: rel.Numb = 401
		int objs57505 = 0;
		// Subtype Object: SM to SM Comm Path
		class SmToSmCommPath_c_test57506_c implements ClassQueryInterface_c {
			SmToSmCommPath_c_test57506_c(java.util.UUID p57507) {
				m_p57507 = p57507;
			}
			private java.util.UUID m_p57507;
			public boolean evaluate(Object candidate) {
				SmToSmCommPath_c selected = (SmToSmCommPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57507));
				return retval;
			}
		}

		SmToSmCommPath_c[] objs57508 = SmToSmCommPath_c
				.SmToSmCommPathInstances(modelRoot,
						new SmToSmCommPath_c_test57506_c(getCpath_id()));

		objs57505 = objs57505 + objs57508.length;
		// Subtype Object: EE to SM Comm Path
		class EeToSmCommPath_c_test57509_c implements ClassQueryInterface_c {
			EeToSmCommPath_c_test57509_c(java.util.UUID p57510) {
				m_p57510 = p57510;
			}
			private java.util.UUID m_p57510;
			public boolean evaluate(Object candidate) {
				EeToSmCommPath_c selected = (EeToSmCommPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57510));
				return retval;
			}
		}

		EeToSmCommPath_c[] objs57511 = EeToSmCommPath_c
				.EeToSmCommPathInstances(modelRoot,
						new EeToSmCommPath_c_test57509_c(getCpath_id()));

		objs57505 = objs57505 + objs57511.length;
		// Subtype Object: SM to EE Comm Path
		class SmToEeCommPath_c_test57512_c implements ClassQueryInterface_c {
			SmToEeCommPath_c_test57512_c(java.util.UUID p57513) {
				m_p57513 = p57513;
			}
			private java.util.UUID m_p57513;
			public boolean evaluate(Object candidate) {
				SmToEeCommPath_c selected = (SmToEeCommPath_c) candidate;
				boolean retval = false;
				retval = (selected.getCpath_id().equals(m_p57513));
				return retval;
			}
		}

		SmToEeCommPath_c[] objs57514 = SmToEeCommPath_c
				.SmToEeCommPathInstances(modelRoot,
						new SmToEeCommPath_c_test57512_c(getCpath_id()));

		objs57505 = objs57505 + objs57514.length;
		if (objs57505 != 1) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Communication Path", //$NON-NLS-1$
								"Consistency: Object: Communication Path: Association: 401: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57505)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Communication Path: Association: 401: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57505), e);
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Communication Path",
				" Operation entered: CommunicationPath::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SmToEeCommPath_c v_smeec = SmToEeCommPath_c.getOneCA_SMEECOnR401(this);

		if (((v_smeec != null))) {

			if (v_smeec != null) {
				v_smeec.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		SmToSmCommPath_c v_smsmc = SmToSmCommPath_c.getOneCA_SMSMCOnR401(this);

		if (((v_smsmc != null))) {

			if (v_smsmc != null) {
				v_smsmc.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		EeToSmCommPath_c v_eesmc = EeToSmCommPath_c.getOneCA_EESMCOnR401(this);

		if ((v_eesmc != null)) {

			if (v_eesmc != null) {
				v_eesmc.Dispose();
			} else {
				Throwable t = new Throwable();
				t.fillInStackTrace();
				CorePlugin
						.logError(
								"Attempted to call an operation on a null instance.",
								t);
			}

		}

		Subsystem_c v_ss = Subsystem_c.getOneS_SSOnR5(this);

		if (((v_ss != null))) {

			this.unrelateAcrossR5From(v_ss);

		}

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public java.util.UUID Get_oaa_id() {
		Ooaofooa.log.println(ILogger.OPERATION, "Communication Path",
				" Operation entered: CommunicationPath::Get_oaa_id");
		final ModelRoot modelRoot = getModelRoot();
		return getCpath_id();

	} // End get_oaa_id

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Communication Path
