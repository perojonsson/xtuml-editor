package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ComponentInComponent_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_COMPONENT_IN_COMPONENT extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ComponentInComponent_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ComponentInComponent_c(ModelRoot modelRoot, java.util.UUID p_m_id,
			java.util.UUID p_m_parent_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_id = IdAssigner.preprocessUUID(p_m_id);
		//extract 28 bit value only            
		m_idLongBased = 0xfffffff & p_m_id.getLeastSignificantBits();
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_parent_id = IdAssigner.preprocessUUID(p_m_parent_id);

		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}
	static public ComponentInComponent_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_parent_id,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);
		ComponentInComponent_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			new_inst = (ComponentInComponent_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				new_inst.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_parent_id = IdAssigner.preprocessUUID(p_m_parent_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ComponentInComponent_c(modelRoot, p_m_id,
					p_m_parent_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ComponentInComponent_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_id, java.util.UUID p_m_parent_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);
		ComponentInComponent_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_id};
			source = (ComponentInComponent_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_id = IdAssigner.preprocessUUID(p_m_id);
				//extract 28 bit value only            
				source.m_idLongBased = 0xfffffff & p_m_id
						.getLeastSignificantBits();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_parent_id = IdAssigner.preprocessUUID(p_m_parent_id);

				return source;
			}
		}
		// there is no instance matching the id
		ComponentInComponent_c new_inst = new ComponentInComponent_c(modelRoot,
				p_m_id, p_m_parent_id);
		return new_inst;
	}
	public ComponentInComponent_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_id = idAssigner.createUUID();
		m_parent_id = IdAssigner.NULL_UUID;
		setUniqueId(m_id);
		Object[] key = {m_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p5
		if (m_id != p_newKey) {

			m_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ComponentInComponent_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ComponentInComponent_c)) {
			return false;
		}

		ComponentInComponent_c me = (ComponentInComponent_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getId()) || IdAssigner.NULL_UUID
						.equals(((ComponentInComponent_c) elem).getId())) && this != elem)) {
			return false;
		}
		if (!getId().equals(((ComponentInComponent_c) elem).getId()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ComponentInComponent_c)) {
			return false;
		}

		ComponentInComponent_c me = (ComponentInComponent_c) elem;
		if (!getId().equals(((ComponentInComponent_c) elem).getId()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_id;
	private long m_idLongBased;
	private java.util.UUID m_parent_id;

	// declare association references from this class

	// referring navigation

	Component_c CanBeNestedInComponent;
	public void relateAcrossR4202To(Component_c target) {
		relateAcrossR4202To(target, true);
	}
	public void relateAcrossR4202To(Component_c target, boolean notifyChanges) {
		if (target == null)
			return;

		if (target == CanBeNestedInComponent)
			return; // already related

		if (CanBeNestedInComponent != target) {

			Object oldKey = getInstanceKey();

			if (CanBeNestedInComponent != null) {

				CanBeNestedInComponent.clearBackPointerR4202To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ComponentInComponent_c.relateAcrossR4202To(Component_c target)",
									"Relate performed across R4202 from Component in Component to Component without unrelate of prior instance.");
				}
			}

			CanBeNestedInComponent = target;
			if (IdAssigner.NULL_UUID.equals(target.getId())) {
				// do not update cached value
			} else {
				// update cached value
				m_parent_id = target.getIdCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR4202To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "4202", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR4202From(Component_c target) {
		unrelateAcrossR4202From(target, true);
	}
	public void unrelateAcrossR4202From(Component_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (CanBeNestedInComponent == null)
			return; // already unrelated

		if (target != CanBeNestedInComponent) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R4202",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR4202To(this);
		}

		if (CanBeNestedInComponent != null) {

			m_parent_id = CanBeNestedInComponent.getId();
			if (IdAssigner.NULL_UUID.equals(m_parent_id)) {
				m_parent_id = CanBeNestedInComponent.getIdCachedValue();
			}
			CanBeNestedInComponent = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "4202", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			Component_c[] targets) {
		return getOneCN_CICOnR4202(targets, null);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			Component_c[] targets, ClassQueryInterface_c test) {
		ComponentInComponent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCN_CICOnR4202(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(Component_c target) {
		return getOneCN_CICOnR4202(target, null);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			Component_c target, boolean loadComponent) {
		return getOneCN_CICOnR4202(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			Component_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCN_CICOnR4202(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test) {
		return getOneCN_CICOnR4202(modelRoot, target, test, true);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4202(
			ModelRoot modelRoot, Component_c target,
			ClassQueryInterface_c test, boolean loadComponent) {
		return find_getOneCN_CICOnR4202(modelRoot, target, test);
	}
	private static ComponentInComponent_c find_getOneCN_CICOnR4202(
			ModelRoot modelRoot, Component_c target, ClassQueryInterface_c test) {
		if (target != null) {
			synchronized (target.backPointer_CanNestComponentInComponentCanNest_R4202) {
				for (int i = 0; i < target.backPointer_CanNestComponentInComponentCanNest_R4202
						.size(); ++i) {
					ComponentInComponent_c source = (ComponentInComponent_c) target.backPointer_CanNestComponentInComponentCanNest_R4202
							.get(i);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						return source;
					}
				}
			}
		}
		// not found
		return null;
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c[] targets) {
		return getManyCN_CICsOnR4202(targets, null);
	}
	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c[] targets, boolean loadComponent) {
		return getManyCN_CICsOnR4202(targets, null, loadComponent);
	}
	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c[] targets, ClassQueryInterface_c test) {
		return getManyCN_CICsOnR4202(targets, test, true);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ComponentInComponent_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			synchronized (targets[i].backPointer_CanNestComponentInComponentCanNest_R4202) {
				for (int j = 0; j < targets[i].backPointer_CanNestComponentInComponentCanNest_R4202
						.size(); ++j) {
					ComponentInComponent_c source = (ComponentInComponent_c) targets[i].backPointer_CanNestComponentInComponentCanNest_R4202
							.get(j);
					if (source != null
							&& (test == null || test.evaluate(source))) {
						matches.add(source);
					}
				}
			}
		}
		if (matches.size() > 0) {
			ComponentInComponent_c[] ret_set = new ComponentInComponent_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentInComponent_c[0];
		}
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c target) {
		return getManyCN_CICsOnR4202(target, null);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c target, boolean loadComponent) {
		return getManyCN_CICsOnR4202(target, null, loadComponent);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c target, ClassQueryInterface_c test) {
		return getManyCN_CICsOnR4202(target, test, true);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4202(
			Component_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target == null)
			return new ComponentInComponent_c[0];

		ModelRoot modelRoot = target.getModelRoot();
		Vector matches = new Vector();
		synchronized (target.backPointer_CanNestComponentInComponentCanNest_R4202) {
			for (int i = 0; i < target.backPointer_CanNestComponentInComponentCanNest_R4202
					.size(); ++i) {
				ComponentInComponent_c source = (ComponentInComponent_c) target.backPointer_CanNestComponentInComponentCanNest_R4202
						.get(i);
				if (source != null && (test == null || test.evaluate(source))) {

					matches.add(source);
				}
			}
		}

		if (matches.size() > 0) {
			ComponentInComponent_c[] ret_set = new ComponentInComponent_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ComponentInComponent_c[0];
		}
	}

	// declare associations referring to this class

	// referred to navigation

	Component_c backPointer_NestsComponentNests_R4203;

	public void setComponentOrderInChildListR4203(Component_c target, int index) {
		unrelateAcrossR4203From(target);
		Component_c[] elements = Component_c.getManyC_CsOnR4203(this);
		int count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				unrelateAcrossR4203From((Component_c) elements[i]);
			}
			count++;
		}
		relateAcrossR4203To(target);
		count = 0;
		for (int i = 0; i < elements.length; i++) {
			if (count >= index) {
				relateAcrossR4203To((Component_c) elements[i]);
			}
			count++;
		}
	}

	public void relateAcrossR4203To(Component_c target) {
		if (target != null) {
			target.relateAcrossR4203To(this, true);
		}
	}

	public void relateAcrossR4203To(Component_c target, boolean notifyChanges) {
		if (target != null) {
			target.relateAcrossR4203To(this, notifyChanges);
		}
	}

	public void setBackPointerR4203To(Component_c target) {
		backPointer_NestsComponentNests_R4203 = target;
	}

	public void unrelateAcrossR4203From(Component_c target) {
		if (target != null) {
			target.unrelateAcrossR4203From(this, true);
		}
	}

	public void unrelateAcrossR4203From(Component_c target,
			boolean notifyChanges) {
		if (target != null) {
			target.unrelateAcrossR4203From(this, notifyChanges);
		}
	}

	public void clearBackPointerR4203To(Component_c target) {
		if (target == backPointer_NestsComponentNests_R4203) {
			backPointer_NestsComponentNests_R4203 = null;
		}
	}

	public static ComponentInComponent_c getOneCN_CICOnR4203(
			Component_c[] targets) {
		return getOneCN_CICOnR4203(targets, null);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4203(
			Component_c[] targets, ClassQueryInterface_c test) {
		return getOneCN_CICOnR4203(targets, test, true);
	}

	public static ComponentInComponent_c getOneCN_CICOnR4203(
			Component_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {
		ComponentInComponent_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				if (test != null) {
					ComponentInComponent_c candidate_val = getOneCN_CICOnR4203(
							targets[i], true);
					if (candidate_val != null && test.evaluate(candidate_val)) {
						ret_val = candidate_val;
						break;
					}
				} else {
					ret_val = getOneCN_CICOnR4203(targets[i], loadComponent);
					if (ret_val != null) {
						break;
					}
				}
			}
		}
		return ret_val;
	}

	public static ComponentInComponent_c getOneCN_CICOnR4203(Component_c target) {
		return getOneCN_CICOnR4203(target, true);
	}
	public static ComponentInComponent_c getOneCN_CICOnR4203(
			Component_c target, boolean loadComponent) {
		if (target != null) {
			if (loadComponent) {
				target.loadProxy();
				if (target.IsNestedThroughComponentInComponent != null) {
					target.IsNestedThroughComponentInComponent.loadProxy();
				}
			}
			return target.IsNestedThroughComponentInComponent;
		} else {
			return null;
		}
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c[] targets, ClassQueryInterface_c test) {
		return getManyCN_CICsOnR4203(targets, test, true);
	}

	public static ComponentInComponent_c [] getManyCN_CICsOnR4203(Component_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new ComponentInComponent_c[0];
  
  
  LinkedHashSet<ComponentInComponent_c> elementsSet = new LinkedHashSet<ComponentInComponent_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].IsNestedThroughComponentInComponent == null)
	  targets[i].loadProxy();
    ComponentInComponent_c associate = targets[i].IsNestedThroughComponentInComponent;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
                if(loadComponent){
                   associate.loadProxy();
                }
            }
    }
  }

  ComponentInComponent_c[] result = new ComponentInComponent_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}
	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c[] targets) {
		return getManyCN_CICsOnR4203(targets, null);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (target != null) {
			Component_c[] targetArray = new Component_c[1];
			targetArray[0] = target;
			return getManyCN_CICsOnR4203(targetArray, test, loadComponent);
		} else {
			ComponentInComponent_c[] result = new ComponentInComponent_c[0];
			return result;
		}

	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c target, ClassQueryInterface_c test) {
		return getManyCN_CICsOnR4203(target, null, true);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c target) {
		return getManyCN_CICsOnR4203(target, null, true);
	}

	public static ComponentInComponent_c[] getManyCN_CICsOnR4203(
			Component_c target, boolean loadComponent) {
		return getManyCN_CICsOnR4203(target, null, loadComponent);
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (CanBeNestedInComponent == null) {
			// R4202
			Component_c relInst57224 = (Component_c) baseRoot.getInstanceList(
					Component_c.class).get(new Object[]{m_parent_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst57224 == null) {
				relInst57224 = (Component_c) Ooaofooa.getDefaultInstance()
						.getInstanceList(Component_c.class)
						.get(new Object[]{m_parent_id});
			}
			if (relInst57224 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst57224 = (Component_c) roots[i].getInstanceList(
							Component_c.class).get(new Object[]{m_parent_id});
					if (relInst57224 != null)
						break;
				}
			}
			//synchronized
			if (relInst57224 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst57224) && !isProxy())) {
					relInst57224.relateAcrossR4202To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R4202
		// C_C
		inst = CanBeNestedInComponent;
		unrelateAcrossR4202From(CanBeNestedInComponent, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ComponentInComponent_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ComponentInComponent_c inst = (ComponentInComponent_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ComponentInComponent_c ComponentInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ComponentInComponent_c result = findComponentInComponentInstance(
				modelRoot, test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ComponentInComponent_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findComponentInComponentInstance(modelRoot,
								test, loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ComponentInComponent_c findComponentInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentInComponent_c x = (ComponentInComponent_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ComponentInComponent_c ComponentInComponentInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentInComponentInstance(modelRoot, test, true);
	}

	public static ComponentInComponent_c ComponentInComponentInstance(
			ModelRoot modelRoot) {
		return ComponentInComponentInstance(modelRoot, null, true);
	}

	public static ComponentInComponent_c[] ComponentInComponentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ComponentInComponent_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ComponentInComponent_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ComponentInComponent_c x = (ComponentInComponent_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ComponentInComponent_c[] ret_set = new ComponentInComponent_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ComponentInComponent_c[0];
			}
		}
	}
	public static ComponentInComponent_c[] ComponentInComponentInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ComponentInComponentInstances(modelRoot, test, true);
	}
	public static ComponentInComponent_c[] ComponentInComponentInstances(
			ModelRoot modelRoot) {
		return ComponentInComponentInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Component in Component.dispose call: ";
		Component_c testR4202Inst = Component_c.getOneC_COnR4202(this, false);

		if (testR4202Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4202 ";
		}
		Component_c testR4203Inst = Component_c.getOneC_COnR4203(this, false);

		if (testR4203Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "4203 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Component in Component",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	/**
	 * Assigns IDs to instances of this class.
	 */
	private static IdAssigner idAssigner = new IdAssigner();

	/**
	 * See field.
	 */
	public IdAssigner getIdAssigner() {
		return idAssigner;
	}

	/**
	 * See field.
	 */
	public static IdAssigner getIdAssigner_() {
		return idAssigner;
	}
	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("id")) {
			return true;
		}
		if (attributeName.equals("parent_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getId();

		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getIdLongBased() {
		if (m_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_id)) {
			return 0xfffffff & m_id.getLeastSignificantBits();
		}
		return m_idLongBased;
	}
	public java.util.UUID getId() {
		return m_id;
	}

	public void setId(java.util.UUID newValue) {
		m_id = IdAssigner.preprocessUUID(newValue);
	}
	public long getParent_idLongBased() {
		if (CanBeNestedInComponent != null) {
			return CanBeNestedInComponent.getIdLongBased();
		}
		return 0;
	}
	public java.util.UUID getParent_id() {
		if (CanBeNestedInComponent != null) {
			return CanBeNestedInComponent.getId();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getParent_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_parent_id))
			return m_parent_id;
		else
			return getParent_id();
	}

	public void setParent_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_parent_id)) {
				return;
			}
		} else if (m_parent_id != null) {
			if (m_parent_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Parent_id", m_parent_id, newValue, true);
		m_parent_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Component in Component", //$NON-NLS-1$
						" Operation entered: Component in Component::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ComponentInComponent_c[] objs = ComponentInComponent_c
				.ComponentInComponentInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Component in Component", //$NON-NLS-1$
				" Operation entered: Component in Component::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ComponentInComponent_c_test57226_c
				implements
					ClassQueryInterface_c {
			ComponentInComponent_c_test57226_c(java.util.UUID p57227) {
				m_p57227 = p57227;
			}
			private java.util.UUID m_p57227;
			public boolean evaluate(Object candidate) {
				ComponentInComponent_c selected = (ComponentInComponent_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57227));
				return retval;
			}
		}

		ComponentInComponent_c[] objs57225 = ComponentInComponent_c
				.ComponentInComponentInstances(modelRoot,
						new ComponentInComponent_c_test57226_c(getId()));

		if (((objs57225.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component in Component", //$NON-NLS-1$
								"Consistency: Object: Component in Component: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57225.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component in Component: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57225.length), e);
			}
			retval = false;

		}

		if (((objs57225.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component in Component", //$NON-NLS-1$
								"Consistency: Object: Component in Component: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57225.length)
										+ " Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component in Component: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57225.length)
										+ " Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Component in Component is a referring class in association: rel.Numb = 4202
		// The participating class is: Component
		class Component_c_test57231_c implements ClassQueryInterface_c {
			Component_c_test57231_c(java.util.UUID p57232) {
				m_p57232 = p57232;
			}
			private java.util.UUID m_p57232;
			public boolean evaluate(Object candidate) {
				Component_c selected = (Component_c) candidate;
				boolean retval = false;
				retval = (selected.getId().equals(m_p57232));
				return retval;
			}
		}

		Component_c[] objs57230 = Component_c.ComponentInstances(modelRoot,
				new Component_c_test57231_c(getParent_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs57230.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component in Component", //$NON-NLS-1$
								"Consistency: Object: Component in Component: Association: 4202: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs57230.length)
										+ " Parent_Id: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component in Component: Association: 4202: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57230.length)
										+ " Parent_Id: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Component in Component is a participating class in association: rel.Numb = 4203
		// Object: Component
		class Component_c_test57234_c implements ClassQueryInterface_c {
			Component_c_test57234_c(java.util.UUID p57235) {
				m_p57235 = p57235;
			}
			private java.util.UUID m_p57235;
			public boolean evaluate(Object candidate) {
				Component_c selected = (Component_c) candidate;
				boolean retval = false;
				retval = (selected.getNestedcomponent_id().equals(m_p57235));
				return retval;
			}
		}

		Component_c[] objs57233 = Component_c.ComponentInstances(modelRoot,
				new Component_c_test57234_c(getId()));

		if (((objs57233.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Component in Component", //$NON-NLS-1$
								"Consistency: Object: Component in Component: Association: 4203: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs57233.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Component in Component: Association: 4203: Cardinality of a formalizer is not equal to one. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs57233.length), e);
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Component in Component
