package com.mentor.nucleus.bp.core;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.ClassAsSupertype_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_CLASS_AS_SUPERTYPE extends genericEvent_c {
	public abstract int getEvtcode();
}

public class ClassAsSupertype_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public ClassAsSupertype_c(ModelRoot modelRoot, java.util.UUID p_m_obj_id,
			java.util.UUID p_m_rel_id, java.util.UUID p_m_oir_id) {
		super(modelRoot);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
		//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
		m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}
	static public ClassAsSupertype_c createProxy(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id, String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);
		ClassAsSupertype_c new_inst = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			new_inst = (ClassAsSupertype_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				new_inst.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new ClassAsSupertype_c(modelRoot, p_m_obj_id,
					p_m_rel_id, p_m_oir_id);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public ClassAsSupertype_c resolveInstance(ModelRoot modelRoot,
			java.util.UUID p_m_obj_id, java.util.UUID p_m_rel_id,
			java.util.UUID p_m_oir_id) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);
		ClassAsSupertype_c source = null;
		synchronized (instances) {
			Object[] key = {p_m_oir_id, p_m_obj_id, p_m_rel_id};
			source = (ClassAsSupertype_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_oir_id = IdAssigner.preprocessUUID(p_m_oir_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_obj_id = IdAssigner.preprocessUUID(p_m_obj_id);
				//pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
				source.m_rel_id = IdAssigner.preprocessUUID(p_m_rel_id);

				return source;
			}
		}
		// there is no instance matching the id
		ClassAsSupertype_c new_inst = new ClassAsSupertype_c(modelRoot,
				p_m_obj_id, p_m_rel_id, p_m_oir_id);
		return new_inst;
	}
	public ClassAsSupertype_c(ModelRoot modelRoot) {
		super(modelRoot);
		m_oir_id = IdAssigner.NULL_UUID;
		m_obj_id = IdAssigner.NULL_UUID;
		m_rel_id = IdAssigner.NULL_UUID;
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {m_oir_id, m_obj_id, m_rel_id};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p4
		// round p5
		if (m_oir_id != p_newKey) {

			m_oir_id = p_newKey;
			changed = true;
		}
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof ClassAsSupertype_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof ClassAsSupertype_c)) {
			return false;
		}

		ClassAsSupertype_c me = (ClassAsSupertype_c) elem;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getOir_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSupertype_c) elem).getOir_id())) && this != elem)) {
			return false;
		}
		if (!getOir_id().equals(((ClassAsSupertype_c) elem).getOir_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getObj_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSupertype_c) elem).getObj_id())) && this != elem)) {
			return false;
		}
		if (!getObj_id().equals(((ClassAsSupertype_c) elem).getObj_id()))
			return false;
		// don't allow an empty id-value to produce a false positive result;
		// in this case, use whether the two instances are actually the same 
		// one in memory, instead
		if (!getModelRoot().isCompareRoot()
				&& ((IdAssigner.NULL_UUID.equals(getRel_id()) || IdAssigner.NULL_UUID
						.equals(((ClassAsSupertype_c) elem).getRel_id())) && this != elem)) {
			return false;
		}
		if (!getRel_id().equals(((ClassAsSupertype_c) elem).getRel_id()))
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof ClassAsSupertype_c)) {
			return false;
		}

		ClassAsSupertype_c me = (ClassAsSupertype_c) elem;
		if (!getOir_idCachedValue().equals(
				((ClassAsSupertype_c) elem).getOir_idCachedValue()))
			return false;
		if (!getObj_idCachedValue().equals(
				((ClassAsSupertype_c) elem).getObj_idCachedValue()))
			return false;
		if (!getRel_idCachedValue().equals(
				((ClassAsSupertype_c) elem).getRel_idCachedValue()))
			return false;
		return true;
	}

	// Attributes
	private java.util.UUID m_oir_id;
	private java.util.UUID m_obj_id;
	private java.util.UUID m_rel_id;

	// declare association references from this class

	// referring navigation

	SubtypeSupertypeAssociation_c IsRelatedToSubtypesViaSubtypeSupertypeAssociation;
	public void relateAcrossR212To(SubtypeSupertypeAssociation_c target) {
		relateAcrossR212To(target, true);
	}
	public void relateAcrossR212To(SubtypeSupertypeAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsRelatedToSubtypesViaSubtypeSupertypeAssociation)
			return; // already related

		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation != target) {

			Object oldKey = getInstanceKey();

			if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation != null) {

				IsRelatedToSubtypesViaSubtypeSupertypeAssociation
						.clearBackPointerR212To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSupertype_c.relateAcrossR212To(SubtypeSupertypeAssociation_c target)",
									"Relate performed across R212 from Class As Supertype to Subtype Supertype Association without unrelate of prior instance.");
				}
			}

			IsRelatedToSubtypesViaSubtypeSupertypeAssociation = target;
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR212To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "212", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR212From(SubtypeSupertypeAssociation_c target) {
		unrelateAcrossR212From(target, true);
	}
	public void unrelateAcrossR212From(SubtypeSupertypeAssociation_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation == null)
			return; // already unrelated

		if (target != IsRelatedToSubtypesViaSubtypeSupertypeAssociation) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R212",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR212To(this);
		}

		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation != null) {

			m_rel_id = IsRelatedToSubtypesViaSubtypeSupertypeAssociation
					.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsRelatedToSubtypesViaSubtypeSupertypeAssociation
						.getRel_idCachedValue();
			}
			IsRelatedToSubtypesViaSubtypeSupertypeAssociation = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "212", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(
			SubtypeSupertypeAssociation_c[] targets) {
		return getOneR_SUPEROnR212(targets, null);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(
			SubtypeSupertypeAssociation_c[] targets, ClassQueryInterface_c test) {
		ClassAsSupertype_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_SUPEROnR212(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(
			SubtypeSupertypeAssociation_c target) {
		return getOneR_SUPEROnR212(target, null);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(
			SubtypeSupertypeAssociation_c target, boolean loadComponent) {
		return getOneR_SUPEROnR212(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_SUPEROnR212(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(ModelRoot modelRoot,
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test) {
		return getOneR_SUPEROnR212(modelRoot, target, test, true);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR212(ModelRoot modelRoot,
			SubtypeSupertypeAssociation_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_SUPEROnR212(modelRoot, target, test);
	}
	private static ClassAsSupertype_c find_getOneR_SUPEROnR212(
			ModelRoot modelRoot, SubtypeSupertypeAssociation_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ClassAsSupertype_c source = (ClassAsSupertype_c) target.backPointer_RelatesClassAsSupertypeRelates_R212;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c[] targets) {
		return getManyR_SUPERsOnR212(targets, null);
	}
	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c[] targets, boolean loadComponent) {
		return getManyR_SUPERsOnR212(targets, null, loadComponent);
	}
	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c[] targets, ClassQueryInterface_c test) {
		return getManyR_SUPERsOnR212(targets, test, true);
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c[] targets,
			ClassQueryInterface_c test, boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSupertype_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassAsSupertype_c source = (ClassAsSupertype_c) targets[i].backPointer_RelatesClassAsSupertypeRelates_R212;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassAsSupertype_c[] ret_set = new ClassAsSupertype_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSupertype_c[0];
		}
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c target) {
		if (target != null) {
			SubtypeSupertypeAssociation_c[] targetArray = new SubtypeSupertypeAssociation_c[1];
			targetArray[0] = target;
			return getManyR_SUPERsOnR212(targetArray);
		} else {
			ClassAsSupertype_c[] result = new ClassAsSupertype_c[0];
			return result;
		}
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR212(
			SubtypeSupertypeAssociation_c target, boolean loadComponent) {
		if (target != null) {
			SubtypeSupertypeAssociation_c[] targetArray = new SubtypeSupertypeAssociation_c[1];
			targetArray[0] = target;
			return getManyR_SUPERsOnR212(targetArray, loadComponent);
		} else {
			ClassAsSupertype_c[] result = new ClassAsSupertype_c[0];
			return result;
		}
	}

	// referring navigation

	ReferredToClassInAssoc_c IsSupertypeReferredToClassInAssoc;
	public void relateAcrossR204To(ReferredToClassInAssoc_c target) {
		relateAcrossR204To(target, true);
	}
	public void relateAcrossR204To(ReferredToClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == IsSupertypeReferredToClassInAssoc)
			return; // already related

		if (IsSupertypeReferredToClassInAssoc != target) {

			Object oldKey = getInstanceKey();

			if (IsSupertypeReferredToClassInAssoc != null) {

				IsSupertypeReferredToClassInAssoc.clearBackPointerR204To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Ooaofooa.log
							.println(
									ILogger.CONSISTENCY,
									"ClassAsSupertype_c.relateAcrossR204To(ReferredToClassInAssoc_c target)",
									"Relate performed across R204 from Class As Supertype to Referred To Class in Assoc without unrelate of prior instance.");
				}
			}

			IsSupertypeReferredToClassInAssoc = target;
			if (IdAssigner.NULL_UUID.equals(target.getOir_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_oir_id = target.getOir_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getObj_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_obj_id = target.getObj_idCachedValue();
			}
			if (IdAssigner.NULL_UUID.equals(target.getRel_id())) {
				// do not update cached value
			} else {
				// update cached value
				m_rel_id = target.getRel_idCachedValue();
			}
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR204To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "204", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}
	public void unrelateAcrossR204From(ReferredToClassInAssoc_c target) {
		unrelateAcrossR204From(target, true);
	}
	public void unrelateAcrossR204From(ReferredToClassInAssoc_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (IsSupertypeReferredToClassInAssoc == null)
			return; // already unrelated

		if (target != IsSupertypeReferredToClassInAssoc) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CorePlugin.logError(
					"Tried to unrelate from non-related instance across R204",
					e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR204To(this);
		}

		if (IsSupertypeReferredToClassInAssoc != null) {

			m_oir_id = IsSupertypeReferredToClassInAssoc.getOir_id();
			if (IdAssigner.NULL_UUID.equals(m_oir_id)) {
				m_oir_id = IsSupertypeReferredToClassInAssoc
						.getOir_idCachedValue();
			}
			m_obj_id = IsSupertypeReferredToClassInAssoc.getObj_id();
			if (IdAssigner.NULL_UUID.equals(m_obj_id)) {
				m_obj_id = IsSupertypeReferredToClassInAssoc
						.getObj_idCachedValue();
			}
			m_rel_id = IsSupertypeReferredToClassInAssoc.getRel_id();
			if (IdAssigner.NULL_UUID.equals(m_rel_id)) {
				m_rel_id = IsSupertypeReferredToClassInAssoc
						.getRel_idCachedValue();
			}
			IsSupertypeReferredToClassInAssoc = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "204", "");
				Ooaofooa.getDefaultInstance().fireModelElementRelationChanged(
						change);
			}
		}
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(
			ReferredToClassInAssoc_c[] targets) {
		return getOneR_SUPEROnR204(targets, null);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		ClassAsSupertype_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneR_SUPEROnR204(targets[i], test);
			}
		}

		return ret_val;
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(
			ReferredToClassInAssoc_c target) {
		return getOneR_SUPEROnR204(target, null);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(
			ReferredToClassInAssoc_c target, boolean loadComponent) {
		return getOneR_SUPEROnR204(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(
			ReferredToClassInAssoc_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneR_SUPEROnR204(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(ModelRoot modelRoot,
			ReferredToClassInAssoc_c target, ClassQueryInterface_c test) {
		return getOneR_SUPEROnR204(modelRoot, target, test, true);
	}

	public static ClassAsSupertype_c getOneR_SUPEROnR204(ModelRoot modelRoot,
			ReferredToClassInAssoc_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneR_SUPEROnR204(modelRoot, target, test);
	}
	private static ClassAsSupertype_c find_getOneR_SUPEROnR204(
			ModelRoot modelRoot, ReferredToClassInAssoc_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			ClassAsSupertype_c source = (ClassAsSupertype_c) target.backPointer_IsSubtypeClassAsSupertypeIsSubtype_R204;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c[] targets) {
		return getManyR_SUPERsOnR204(targets, null);
	}
	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c[] targets, boolean loadComponent) {
		return getManyR_SUPERsOnR204(targets, null, loadComponent);
	}
	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test) {
		return getManyR_SUPERsOnR204(targets, test, true);
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new ClassAsSupertype_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			ClassAsSupertype_c source = (ClassAsSupertype_c) targets[i].backPointer_IsSubtypeClassAsSupertypeIsSubtype_R204;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			ClassAsSupertype_c[] ret_set = new ClassAsSupertype_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new ClassAsSupertype_c[0];
		}
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c target) {
		if (target != null) {
			ReferredToClassInAssoc_c[] targetArray = new ReferredToClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_SUPERsOnR204(targetArray);
		} else {
			ClassAsSupertype_c[] result = new ClassAsSupertype_c[0];
			return result;
		}
	}

	public static ClassAsSupertype_c[] getManyR_SUPERsOnR204(
			ReferredToClassInAssoc_c target, boolean loadComponent) {
		if (target != null) {
			ReferredToClassInAssoc_c[] targetArray = new ReferredToClassInAssoc_c[1];
			targetArray[0] = target;
			return getManyR_SUPERsOnR204(targetArray, loadComponent);
		} else {
			ClassAsSupertype_c[] result = new ClassAsSupertype_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation == null) {
			// R212
			SubtypeSupertypeAssociation_c relInst58277 = (SubtypeSupertypeAssociation_c) baseRoot
					.getInstanceList(SubtypeSupertypeAssociation_c.class).get(
							new Object[]{m_rel_id});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst58277 == null) {
				relInst58277 = (SubtypeSupertypeAssociation_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(SubtypeSupertypeAssociation_c.class)
						.get(new Object[]{m_rel_id});
			}
			if (relInst58277 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst58277 = (SubtypeSupertypeAssociation_c) roots[i]
							.getInstanceList(
									SubtypeSupertypeAssociation_c.class).get(
									new Object[]{m_rel_id});
					if (relInst58277 != null)
						break;
				}
			}
			//synchronized
			if (relInst58277 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst58277) && !isProxy())) {
					relInst58277.relateAcrossR212To(this, notifyChanges);
				}
			}
		}

		// R204
		ReferredToClassInAssoc_c relInst58278 = (ReferredToClassInAssoc_c) baseRoot
				.getInstanceList(ReferredToClassInAssoc_c.class).get(
						new Object[]{m_oir_id, m_obj_id, m_rel_id});
		// if there was no local element, check for any global elements
		// failing that proceed to check other model roots
		if (relInst58278 == null) {
			relInst58278 = (ReferredToClassInAssoc_c) Ooaofooa
					.getDefaultInstance()
					.getInstanceList(ReferredToClassInAssoc_c.class)
					.get(new Object[]{m_oir_id, m_obj_id, m_rel_id});
		}
		if (relInst58278 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
			Ooaofooa[] roots = Ooaofooa.getInstances();
			for (int i = 0; i < roots.length; i++) {
				if (roots[i].isCompareRoot()) {
					// never use elements from any compare root
					continue;
				}
				relInst58278 = (ReferredToClassInAssoc_c) roots[i]
						.getInstanceList(ReferredToClassInAssoc_c.class).get(
								new Object[]{m_oir_id, m_obj_id, m_rel_id});
				if (relInst58278 != null)
					break;
			}
		}
		//synchronized
		if (relInst58278 != null) {
			if (relateProxies || !isProxy()
					|| (inSameComponent(this, relInst58278) && !isProxy())) {
				relInst58278.relateAcrossR204To(this, notifyChanges);
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R212
		// R_SUBSUP
		inst = IsRelatedToSubtypesViaSubtypeSupertypeAssociation;
		unrelateAcrossR212From(
				IsRelatedToSubtypesViaSubtypeSupertypeAssociation,
				notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
		// R204
		// R_RTO
		inst = IsSupertypeReferredToClassInAssoc;
		unrelateAcrossR204From(IsSupertypeReferredToClassInAssoc, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(ClassAsSupertype_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final ClassAsSupertype_c inst = (ClassAsSupertype_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static ClassAsSupertype_c ClassAsSupertypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		ClassAsSupertype_c result = findClassAsSupertypeInstance(modelRoot,
				test, loadComponent);
		if (result == null && loadComponent) {
			List pmcs = PersistenceManager.findAllComponents(modelRoot,
					ClassAsSupertype_c.class);
			for (int i = 0; i < pmcs.size(); i++) {
				PersistableModelComponent component = (PersistableModelComponent) pmcs
						.get(i);
				if (!component.isLoaded()) {
					try {
						component.load(new NullProgressMonitor());
						result = findClassAsSupertypeInstance(modelRoot, test,
								loadComponent);
						if (result != null)
							return result;
					} catch (Exception e) {
						CorePlugin.logError("Error Loading component", e);
					}
				}
			}
		}
		if (result != null && loadComponent) {
			result.loadProxy();
		}
		return result;
	}
	private static ClassAsSupertype_c findClassAsSupertypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSupertype_c x = (ClassAsSupertype_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						return x;
				}
			}
		}
		return null;
	}
	public static ClassAsSupertype_c ClassAsSupertypeInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassAsSupertypeInstance(modelRoot, test, true);
	}

	public static ClassAsSupertype_c ClassAsSupertypeInstance(
			ModelRoot modelRoot) {
		return ClassAsSupertypeInstance(modelRoot, null, true);
	}

	public static ClassAsSupertype_c[] ClassAsSupertypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		if (loadComponent) {
			PersistenceManager.ensureAllInstancesLoaded(modelRoot,
					ClassAsSupertype_c.class);
		}
		InstanceList instances = modelRoot
				.getInstanceList(ClassAsSupertype_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				ClassAsSupertype_c x = (ClassAsSupertype_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					if (x.ensureLoaded(loadComponent))
						matches.add(x);
				}
			}
			if (matches.size() > 0) {
				ClassAsSupertype_c[] ret_set = new ClassAsSupertype_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new ClassAsSupertype_c[0];
			}
		}
	}
	public static ClassAsSupertype_c[] ClassAsSupertypeInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return ClassAsSupertypeInstances(modelRoot, test, true);
	}
	public static ClassAsSupertype_c[] ClassAsSupertypeInstances(
			ModelRoot modelRoot) {
		return ClassAsSupertypeInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the Class As Supertype.dispose call: ";
		SubtypeSupertypeAssociation_c testR212Inst = SubtypeSupertypeAssociation_c
				.getOneR_SUBSUPOnR212(this, false);

		if (testR212Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "212 ";
		}
		ReferredToClassInAssoc_c testR204Inst1 = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(this, false);

		if (testR204Inst1 != null) {
			delete_error = true;
			errorMsg = errorMsg + "204 ";
		}
		if (delete_error == true) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log.println(ILogger.DELETE, "Class As Supertype",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CorePlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		if (attributeName.equals("oir_id")) {
			return true;
		}
		if (attributeName.equals("obj_id")) {
			return true;
		}
		if (attributeName.equals("rel_id")) {
			return true;
		}
		return false;
	}
	public String getCompUniqueID() {
		UUID tempID = null;
		long longID = 0L;
		StringBuffer result = new StringBuffer();

		tempID = getOir_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getOir_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getObj_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getObj_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		tempID = getRel_id();

		if (IdAssigner.NULL_UUID.equals(tempID))
			tempID = getRel_idCachedValue();
		result.append(Long.toHexString(tempID.getMostSignificantBits()));
		result.append(Long.toHexString(tempID.getLeastSignificantBits()));
		return result.toString();
	}
	// declare attribute accessors
	public long getOir_idLongBased() {
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getOir_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getOir_id() {
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getOir_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public boolean hasSuperType() {
		return (IsSupertypeReferredToClassInAssoc != null);

	}

	public java.util.UUID getOir_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_oir_id))
			return m_oir_id;
		else
			return getOir_id();
	}

	public void setOir_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_oir_id)) {
				return;
			}
		} else if (m_oir_id != null) {
			if (m_oir_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Oir_id", m_oir_id, newValue, true);
		m_oir_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getObj_idLongBased() {
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getObj_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getObj_id() {
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getObj_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getObj_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_obj_id))
			return m_obj_id;
		else
			return getObj_id();
	}

	public void setObj_id(java.util.UUID newValue) {
		if (newValue != null) {
			if (newValue.equals(m_obj_id)) {
				return;
			}
		} else if (m_obj_id != null) {
			if (m_obj_id.equals(newValue)) {
				return;
			}
		} else {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Obj_id", m_obj_id, newValue, true);
		m_obj_id = IdAssigner.preprocessUUID(newValue);
		Ooaofooa.getDefaultInstance().fireModelElementAttributeChanged(change);
	}
	public long getRel_idLongBased() {
		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation != null) {
			return IsRelatedToSubtypesViaSubtypeSupertypeAssociation
					.getRel_idLongBased();
		}
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getRel_idLongBased();
		}
		return 0;
	}
	public java.util.UUID getRel_id() {
		if (IsRelatedToSubtypesViaSubtypeSupertypeAssociation != null) {
			return IsRelatedToSubtypesViaSubtypeSupertypeAssociation
					.getRel_id();
		}
		if (IsSupertypeReferredToClassInAssoc != null) {
			return IsSupertypeReferredToClassInAssoc.getRel_id();
		}
		return IdAssigner.NULL_UUID;
	}

	public java.util.UUID getRel_idCachedValue() {
		if (!IdAssigner.NULL_UUID.equals(m_rel_id))
			return m_rel_id;
		else
			return getRel_id();
	}

	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "Class As Supertype", //$NON-NLS-1$
						" Operation entered: Class As Supertype::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		ClassAsSupertype_c[] objs = ClassAsSupertype_c
				.ClassAsSupertypeInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Supertype", //$NON-NLS-1$
				" Operation entered: Class As Supertype::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class ClassAsSupertype_c_test58280_c implements ClassQueryInterface_c {
			ClassAsSupertype_c_test58280_c(java.util.UUID p58281,
					java.util.UUID p58282, java.util.UUID p58283) {
				m_p58281 = p58281;
				m_p58282 = p58282;
				m_p58283 = p58283;
			}
			private java.util.UUID m_p58281;
			private java.util.UUID m_p58282;
			private java.util.UUID m_p58283;
			public boolean evaluate(Object candidate) {
				ClassAsSupertype_c selected = (ClassAsSupertype_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58281))
						& (selected.getObj_id().equals(m_p58282))
						& (selected.getRel_id().equals(m_p58283));
				return retval;
			}
		}

		ClassAsSupertype_c[] objs58279 = ClassAsSupertype_c
				.ClassAsSupertypeInstances(modelRoot,
						new ClassAsSupertype_c_test58280_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58279.length) == 0)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Supertype", //$NON-NLS-1$
								"Consistency: Object: Class As Supertype: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58279.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Supertype: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58279.length), e);
			}
			retval = false;

		}

		if (((objs58279.length) > 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Supertype", //$NON-NLS-1$
								"Consistency: Object: Class As Supertype: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58279.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Supertype: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58279.length)
										+ " OIR_ID: " + "Not Printable" + " Obj_ID: " + "Not Printable" + " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		// Class As Supertype is a subtype in association: rel.Numb = 204
		// The supertype class is: Referred To Class in Assoc
		class ReferredToClassInAssoc_c_test58287_c
				implements
					ClassQueryInterface_c {
			ReferredToClassInAssoc_c_test58287_c(java.util.UUID p58288,
					java.util.UUID p58289, java.util.UUID p58290) {
				m_p58288 = p58288;
				m_p58289 = p58289;
				m_p58290 = p58290;
			}
			private java.util.UUID m_p58288;
			private java.util.UUID m_p58289;
			private java.util.UUID m_p58290;
			public boolean evaluate(Object candidate) {
				ReferredToClassInAssoc_c selected = (ReferredToClassInAssoc_c) candidate;
				boolean retval = false;
				retval = (selected.getOir_id().equals(m_p58288))
						& (selected.getObj_id().equals(m_p58289))
						& (selected.getRel_id().equals(m_p58290));
				return retval;
			}
		}

		ReferredToClassInAssoc_c[] objs58286 = ReferredToClassInAssoc_c
				.ReferredToClassInAssocInstances(modelRoot,
						new ReferredToClassInAssoc_c_test58287_c(getOir_id(),
								getObj_id(), getRel_id()));

		if (((objs58286.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Supertype", //$NON-NLS-1$
								"Consistency: Object: Class As Supertype: Association: 204: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs58286.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Supertype: Association: 204: Cardinality of a supertype is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58286.length), e);
			}
			retval = false;

		}

		// Class As Supertype is a referring class in association: rel.Numb = 212
		// The participating class is: Subtype Supertype Association
		class SubtypeSupertypeAssociation_c_test58292_c
				implements
					ClassQueryInterface_c {
			SubtypeSupertypeAssociation_c_test58292_c(java.util.UUID p58293) {
				m_p58293 = p58293;
			}
			private java.util.UUID m_p58293;
			public boolean evaluate(Object candidate) {
				SubtypeSupertypeAssociation_c selected = (SubtypeSupertypeAssociation_c) candidate;
				boolean retval = false;
				retval = (selected.getRel_id().equals(m_p58293));
				return retval;
			}
		}

		SubtypeSupertypeAssociation_c[] objs58291 = SubtypeSupertypeAssociation_c
				.SubtypeSupertypeAssociationInstances(modelRoot,
						new SubtypeSupertypeAssociation_c_test58292_c(
								getRel_id()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs58291.length) != 1)) {

			if (CorePlugin.getDefault().isDebugging()) {
				Ooaofooa.log
						.println(ILogger.CONSISTENCY,
								"Class As Supertype", //$NON-NLS-1$
								"Consistency: Object: Class As Supertype: Association: 212: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs58291.length)
										+ " Rel_ID: " + "Not Printable"); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CorePlugin
						.logError(
								"Consistency: Object: Class As Supertype: Association: 212: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs58291.length)
										+ " Rel_ID: " + "Not Printable", e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	// declare transform functions
	public String Get_connector_text(final int p_At) {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Supertype",
				" Operation entered: ClassAsSupertype::Get_connector_text");
		final ModelRoot modelRoot = getModelRoot();
		String v_result = "";

		if ((p_At == End_c.Start)) {

			v_result = "";

		}

		else if ((p_At == End_c.End)) {

			Association_c v_rel = Association_c
					.getOneR_RELOnR206(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR212(this));

			if (((v_rel != null))) {

				v_result = "R" + Gd_c.Int_to_string(v_rel.getNumb());

			}

			else {

				v_result = "R???";

			}

		}

		return v_result;

	} // End get_connector_text
	public void Dispose() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Supertype",
				" Operation entered: ClassAsSupertype::Dispose");
		final ModelRoot modelRoot = getModelRoot();
		SubtypeSupertypeAssociation_c v_rsubsup = SubtypeSupertypeAssociation_c
				.getOneR_SUBSUPOnR212(this);

		this.unrelateAcrossR212From(v_rsubsup);

		ReferredToClassInAssoc_c v_rto = ReferredToClassInAssoc_c
				.getOneR_RTOOnR204(this);

		this.unrelateAcrossR204From(v_rto);

		if (delete()) {
			Ooaofooa.getDefaultInstance().fireModelElementDeleted(
					new BaseModelDelta(Modeleventnotification_c.DELTA_DELETE,
							this));
		}

	} // End dispose
	public String Get_name() {
		Ooaofooa.log.println(ILogger.OPERATION, "Class As Supertype",
				" Operation entered: ClassAsSupertype::Get_name");
		final ModelRoot modelRoot = getModelRoot();
		ModelClass_c v_obj = ModelClass_c
				.getOneO_OBJOnR201(ClassInAssociation_c
						.getOneR_OIROnR203(ReferredToClassInAssoc_c
								.getOneR_RTOOnR204(this)));

		return v_obj.getName();

	} // End get_name

	// end transform functions

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end Class As Supertype
