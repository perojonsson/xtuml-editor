      
package com.mentor.nucleus.bp.core ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.Value_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

// No special imports
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_VALUE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Value_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Value_c(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       boolean      p_m_islvalue,
       boolean      p_m_isimplicit,
       int          p_m_linenumber,
       int          p_m_startposition,
       int          p_m_endposition,
       int          p_m_firstparameterlabellinenumber,
       int          p_m_firstparameterlabelcolumn,
       int          p_m_currentlaterparameterlabellinenumber,
       int          p_m_currentlaterparameterlabelcolumn,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_block_id)
  {
    super(modelRoot);
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //extract 28 bit value only            
       m_value_idLongBased = 0xfffffff & p_m_value_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       m_linenumber = p_m_linenumber;
       m_startposition = p_m_startposition;
       m_endposition = p_m_endposition;
       m_firstparameterlabellinenumber = p_m_firstparameterlabellinenumber;
       m_firstparameterlabelcolumn = p_m_firstparameterlabelcolumn;
       m_currentlaterparameterlabellinenumber = p_m_currentlaterparameterlabellinenumber;
       m_currentlaterparameterlabelcolumn = p_m_currentlaterparameterlabelcolumn;
       m_islvalue = p_m_islvalue;
       m_isimplicit = p_m_isimplicit;
       // default value for m_text
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
    setUniqueId(m_value_id);
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }
  static public Value_c createProxy(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       boolean      p_m_islvalue,
       boolean      p_m_isimplicit,
       int          p_m_linenumber,
       int          p_m_startposition,
       int          p_m_endposition,
       int          p_m_firstparameterlabellinenumber,
       int          p_m_firstparameterlabelcolumn,
       int          p_m_currentlaterparameterlabellinenumber,
       int          p_m_currentlaterparameterlabelcolumn,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_block_id, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Value_c.class);
      Value_c new_inst = null;
      synchronized(instances) {
          Object[] key = {p_m_value_id};
          new_inst = (Value_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //extract 28 bit value only            
       new_inst.m_value_idLongBased = 0xfffffff & p_m_value_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       new_inst.m_linenumber = p_m_linenumber;
       new_inst.m_startposition = p_m_startposition;
       new_inst.m_endposition = p_m_endposition;
       new_inst.m_firstparameterlabellinenumber = p_m_firstparameterlabellinenumber;
       new_inst.m_firstparameterlabelcolumn = p_m_firstparameterlabelcolumn;
       new_inst.m_currentlaterparameterlabellinenumber = p_m_currentlaterparameterlabellinenumber;
       new_inst.m_currentlaterparameterlabelcolumn = p_m_currentlaterparameterlabelcolumn;
       new_inst.m_islvalue = p_m_islvalue;
       new_inst.m_isimplicit = p_m_isimplicit;
       // default value for m_text
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       new_inst.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Value_c(modelRoot,
p_m_value_id,
p_m_islvalue,
p_m_isimplicit,
p_m_linenumber,
p_m_startposition,
p_m_endposition,
p_m_firstparameterlabellinenumber,
p_m_firstparameterlabelcolumn,
p_m_currentlaterparameterlabellinenumber,
p_m_currentlaterparameterlabelcolumn,
p_m_dt_id,
p_m_block_id
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Value_c resolveInstance(ModelRoot modelRoot,
       java.util.UUID         p_m_value_id,
       boolean      p_m_islvalue,
       boolean      p_m_isimplicit,
       int          p_m_linenumber,
       int          p_m_startposition,
       int          p_m_endposition,
       int          p_m_firstparameterlabellinenumber,
       int          p_m_firstparameterlabelcolumn,
       int          p_m_currentlaterparameterlabellinenumber,
       int          p_m_currentlaterparameterlabelcolumn,
       java.util.UUID         p_m_dt_id,
       java.util.UUID         p_m_block_id){
    InstanceList instances = modelRoot.getInstanceList(Value_c.class);
    Value_c source = null;
    synchronized(instances) {
        Object [] key = {
        p_m_value_id
            };
        source = (Value_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_value_id = IdAssigner.preprocessUUID(p_m_value_id);
       //extract 28 bit value only            
       source.m_value_idLongBased = 0xfffffff & p_m_value_id.getLeastSignificantBits();
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_block_id = IdAssigner.preprocessUUID(p_m_block_id);
       source.m_linenumber = p_m_linenumber;
       source.m_startposition = p_m_startposition;
       source.m_endposition = p_m_endposition;
       source.m_firstparameterlabellinenumber = p_m_firstparameterlabellinenumber;
       source.m_firstparameterlabelcolumn = p_m_firstparameterlabelcolumn;
       source.m_currentlaterparameterlabellinenumber = p_m_currentlaterparameterlabellinenumber;
       source.m_currentlaterparameterlabelcolumn = p_m_currentlaterparameterlabelcolumn;
       source.m_islvalue = p_m_islvalue;
       source.m_isimplicit = p_m_isimplicit;
       // default value for m_text
       //pre-process the uuid so that we re-use null uuid instance rather then creating a new one.           
       source.m_dt_id = IdAssigner.preprocessUUID(p_m_dt_id);
        
           return source ;
        }
      }
      // there is no instance matching the id
    Value_c new_inst = new Value_c(modelRoot,
p_m_value_id,
p_m_islvalue,
p_m_isimplicit,
p_m_linenumber,
p_m_startposition,
p_m_endposition,
p_m_firstparameterlabellinenumber,
p_m_firstparameterlabelcolumn,
p_m_currentlaterparameterlabellinenumber,
p_m_currentlaterparameterlabelcolumn,
p_m_dt_id,
p_m_block_id
);
    return new_inst;
  }
  public Value_c(ModelRoot modelRoot)
  {
    super(modelRoot);
     m_value_id = idAssigner.createUUID();
     m_block_id = IdAssigner.NULL_UUID;   
     m_linenumber = -1;   
     m_startposition = -1;   
     m_endposition = -1;   
     m_text = "";   
     m_dt_id = IdAssigner.NULL_UUID;   
    setUniqueId(m_value_id);
    Object [] key = {m_value_id};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {m_value_id};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p5
	if (m_value_id !=  p_newKey ){
	
		m_value_id = p_newKey; 	
		changed = true;
	}
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Value_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Value_c)) {
           return false;
       }
       
       Value_c me = (Value_c)elem;
      // don't allow an empty id-value to produce a false positive result;
      // in this case, use whether the two instances are actually the same 
      // one in memory, instead
      if (!getModelRoot().isCompareRoot() && ((IdAssigner.NULL_UUID.equals(getValue_id()) || IdAssigner.NULL_UUID.equals(((Value_c)elem).getValue_id())) && this != elem)) {
      	return false;
      }
      if (!getValue_id().equals(((Value_c)elem).getValue_id())) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Value_c)) {
           return false;
       }
       
       Value_c me = (Value_c)elem;
      if (!getValue_id().equals(((Value_c)elem).getValue_id())) return false;
      return true;
    }


  // Attributes
  private java.util.UUID         m_value_id ;
  private long m_value_idLongBased ;
  private java.util.UUID         m_block_id ;
  private int          m_linenumber ;
  private int          m_startposition ;
  private int          m_endposition ;
  private int          m_firstparameterlabellinenumber ;
  private int          m_firstparameterlabelcolumn ;
  private int          m_currentlaterparameterlabellinenumber ;
  private int          m_currentlaterparameterlabelcolumn ;
  private boolean      m_islvalue ;
  private boolean      m_isimplicit ;
  private String       m_text ;
  private java.util.UUID         m_dt_id ;
      
// declare association references from this class
  
  
    
// referring navigation

DataType_c HasTypeDataType ;
public void relateAcrossR820To(DataType_c target)
{
	relateAcrossR820To(target, true);
}
public void relateAcrossR820To(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasTypeDataType) return;  // already related

    if ( HasTypeDataType != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasTypeDataType != null) {
    
        HasTypeDataType.clearBackPointerR820To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Value_c.relateAcrossR820To(DataType_c target)", 
			"Relate performed across R820 from Value to Data Type without unrelate of prior instance.");  
		}
    }
                
    	HasTypeDataType = target ;
        if(IdAssigner.NULL_UUID.equals(target.getDt_id()))
        {
            // do not update cached value
        } else {
          // update cached value
          m_dt_id = target.getDt_idCachedValue();
        }
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR820To(this);
        target.addRef();
    }
}
public void unrelateAcrossR820From(DataType_c target)
{
	unrelateAcrossR820From(target, true);
}
public void unrelateAcrossR820From(DataType_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasTypeDataType == null) return;  // already unrelated
	
	if (target != HasTypeDataType) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R820", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR820To(this);
    }
    

      if(HasTypeDataType != null) {
      
        m_dt_id = HasTypeDataType.getDt_id();
        if(IdAssigner.NULL_UUID.equals(m_dt_id))
        {
          m_dt_id = HasTypeDataType.getDt_idCachedValue();
        }       
        HasTypeDataType = null ;
        target.removeRef();
    }
}

  
    
      
public static Value_c getOneV_VALOnR820(DataType_c [] targets)
{
    return getOneV_VALOnR820(targets, null);
}

public static Value_c getOneV_VALOnR820(DataType_c [] targets, ClassQueryInterface_c test)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_VALOnR820(targets[i], test);
        }
    }

    return ret_val;
}

public static Value_c getOneV_VALOnR820(DataType_c target)
{
  return getOneV_VALOnR820(target, null);
}

public static Value_c getOneV_VALOnR820(DataType_c target, boolean loadComponent)
{
    return getOneV_VALOnR820(target.getModelRoot(), target, null, loadComponent);
}

public static Value_c getOneV_VALOnR820(DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_VALOnR820(target.getModelRoot(), target, test);
  }
  return null;
}

public static Value_c getOneV_VALOnR820(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
	return getOneV_VALOnR820(modelRoot, target, test, true);
}

public static Value_c getOneV_VALOnR820(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_VALOnR820(modelRoot,target,test);
}
private static Value_c find_getOneV_VALOnR820(ModelRoot modelRoot, DataType_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_IsTypeOfValueIsTypeOf_R820) {
	    for ( int i = 0; i < target.backPointer_IsTypeOfValueIsTypeOf_R820.size(); ++i ) {
	      Value_c source = (Value_c)target.backPointer_IsTypeOfValueIsTypeOf_R820.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Value_c [] getManyV_VALsOnR820(DataType_c [] targets)
{
  return getManyV_VALsOnR820(targets, null);
}
public static Value_c [] getManyV_VALsOnR820(DataType_c [] targets, boolean loadComponent)
{
  return getManyV_VALsOnR820(targets, null, loadComponent);
}
public static Value_c [] getManyV_VALsOnR820(DataType_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_VALsOnR820(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR820(DataType_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Value_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Value_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_IsTypeOfValueIsTypeOf_R820) {
	    for (int j = 0; j < targets[i].backPointer_IsTypeOfValueIsTypeOf_R820.size(); ++j) {
	      Value_c source = (Value_c)targets[i].backPointer_IsTypeOfValueIsTypeOf_R820.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Value_c[] ret_set = new Value_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Value_c[0];
  }
  }

public static Value_c [] getManyV_VALsOnR820(DataType_c target)
{
  return getManyV_VALsOnR820(target, null);
}

public static Value_c [] getManyV_VALsOnR820(DataType_c target, boolean loadComponent)
{
  return getManyV_VALsOnR820(target, null, loadComponent);
}

public static Value_c [] getManyV_VALsOnR820(DataType_c target, ClassQueryInterface_c test)
{
	return getManyV_VALsOnR820(target, test, true);
}

public static Value_c [] getManyV_VALsOnR820(DataType_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Value_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_IsTypeOfValueIsTypeOf_R820) {
    for (int i = 0; i < target.backPointer_IsTypeOfValueIsTypeOf_R820.size(); ++i) {
      Value_c source = (Value_c)target.backPointer_IsTypeOfValueIsTypeOf_R820.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Value_c[] ret_set = new Value_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Value_c[0];
	}
  }


  
    
// referring navigation

Block_c HasScopeBlock ;
public void relateAcrossR826To(Block_c target)
{
	relateAcrossR826To(target, true);
}
public void relateAcrossR826To(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (target == HasScopeBlock) return;  // already related

    if ( HasScopeBlock != target ) {
    
    Object oldKey = getInstanceKey();

    if (HasScopeBlock != null) {
    
        HasScopeBlock.clearBackPointerR826To(this);
        
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) {   //$NON-NLS-1$
		Ooaofooa.log.println(ILogger.CONSISTENCY, 
			"Value_c.relateAcrossR826To(Block_c target)", 
			"Relate performed across R826 from Value to Block without unrelate of prior instance.");  
		}
    }
                
    	HasScopeBlock = target ;
        m_block_id = target.getBlock_id();
      updateInstanceKey(oldKey, getInstanceKey());
	    target.setBackPointerR826To(this);
        target.addRef();
    }
}
public void unrelateAcrossR826From(Block_c target)
{
	unrelateAcrossR826From(target, true);
}
public void unrelateAcrossR826From(Block_c target, boolean notifyChanges)
{
	if (target == null) return;
	
	if (HasScopeBlock == null) return;  // already unrelated
	
	if (target != HasScopeBlock) {
		Exception e = new Exception();
		e.fillInStackTrace();
		CorePlugin.logError("Tried to unrelate from non-related instance across R826", e);
		return;
	}

    if (target != null) {
        target.clearBackPointerR826To(this);
    }
    

      if(HasScopeBlock != null) {
      
        m_block_id = HasScopeBlock.getBlock_id();
        HasScopeBlock = null ;
        target.removeRef();
    }
}

  
    
      
public static Value_c getOneV_VALOnR826(Block_c [] targets)
{
    return getOneV_VALOnR826(targets, null);
}

public static Value_c getOneV_VALOnR826(Block_c [] targets, ClassQueryInterface_c test)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           ret_val = getOneV_VALOnR826(targets[i], test);
        }
    }

    return ret_val;
}

public static Value_c getOneV_VALOnR826(Block_c target)
{
  return getOneV_VALOnR826(target, null);
}

public static Value_c getOneV_VALOnR826(Block_c target, boolean loadComponent)
{
    return getOneV_VALOnR826(target.getModelRoot(), target, null, loadComponent);
}

public static Value_c getOneV_VALOnR826(Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    return getOneV_VALOnR826(target.getModelRoot(), target, test);
  }
  return null;
}

public static Value_c getOneV_VALOnR826(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
	return getOneV_VALOnR826(modelRoot, target, test, true);
}

public static Value_c getOneV_VALOnR826(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test, boolean loadComponent)
{
   return find_getOneV_VALOnR826(modelRoot,target,test);
}
private static Value_c find_getOneV_VALOnR826(ModelRoot modelRoot, Block_c target, ClassQueryInterface_c test)
{
  if (target != null) {
    synchronized(target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826) {
	    for ( int i = 0; i < target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826.size(); ++i ) {
	      Value_c source = (Value_c)target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826.get(i) ;
	      if (source != null && (test == null || test.evaluate(source))) {
	        return source ;
      }
    }
  }
  }
  // not found
  return null ;
}

public static Value_c [] getManyV_VALsOnR826(Block_c [] targets)
{
  return getManyV_VALsOnR826(targets, null);
}
public static Value_c [] getManyV_VALsOnR826(Block_c [] targets, boolean loadComponent)
{
  return getManyV_VALsOnR826(targets, null, loadComponent);
}
public static Value_c [] getManyV_VALsOnR826(Block_c [] targets, ClassQueryInterface_c test)
{
	return getManyV_VALsOnR826(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR826(Block_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{

  if(targets == null || targets.length == 0 || targets[0] == null)
  	return new Value_c[0];

  ModelRoot modelRoot = targets[0].getModelRoot();
 
   InstanceList instances = modelRoot.getInstanceList(Value_c.class);

  Vector matches = new Vector();
  for (int i = 0 ; i < targets.length ; i++) {
    synchronized(targets[i].backPointer_DefinesScopeOfValueDefinesScopeOf_R826) {
	    for (int j = 0; j < targets[i].backPointer_DefinesScopeOfValueDefinesScopeOf_R826.size(); ++j) {
	      Value_c source = (Value_c)targets[i].backPointer_DefinesScopeOfValueDefinesScopeOf_R826.get(j) ;
          if (source != null && (test == null || test.evaluate(source))) {
	        matches.add(source);
    }
  }
    }
  }
  if (matches.size() > 0) {
	Value_c[] ret_set = new Value_c[matches.size()];
	matches.copyInto(ret_set);
	return ret_set;
  } else {
	return new Value_c[0];
  }
  }

public static Value_c [] getManyV_VALsOnR826(Block_c target)
{
  return getManyV_VALsOnR826(target, null);
}

public static Value_c [] getManyV_VALsOnR826(Block_c target, boolean loadComponent)
{
  return getManyV_VALsOnR826(target, null, loadComponent);
}

public static Value_c [] getManyV_VALsOnR826(Block_c target, ClassQueryInterface_c test)
{
	return getManyV_VALsOnR826(target, test, true);
}

public static Value_c [] getManyV_VALsOnR826(Block_c target, ClassQueryInterface_c test, boolean loadComponent)
{
  if(target == null)
    return new Value_c[0];    

  ModelRoot modelRoot = target.getModelRoot();
  Vector matches = new Vector();
  synchronized(target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826) {
    for (int i = 0; i < target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826.size(); ++i) {
      Value_c source = (Value_c)target.backPointer_DefinesScopeOfValueDefinesScopeOf_R826.get(i);
      if (source != null && (test == null || test.evaluate(source))) {

        matches.add(source);
	  }
	}
  }
  
	if (matches.size() > 0) {
		Value_c[] ret_set = new Value_c[matches.size()];
		matches.copyInto(ret_set);
		return ret_set;
	} else {
		return new Value_c[0];
	}
  }



// declare associations referring to this class

    
  
  
// referred to navigation

ActualParameter_c backPointer_IsValueOfActualParameterIsValueOf_R800;

public void setActualParameterOrderInChildListR800(ActualParameter_c target, int index) {
	unrelateAcrossR800From(target);
	ActualParameter_c[] elements = ActualParameter_c.getManyV_PARsOnR800(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR800From((ActualParameter_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR800To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR800To((ActualParameter_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR800To(ActualParameter_c target)
{
  if (target != null) {
    target.relateAcrossR800To(this, true) ;
  }
}

public void relateAcrossR800To(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR800To(this, notifyChanges) ;
  }
}

public void setBackPointerR800To(ActualParameter_c target)
{
    backPointer_IsValueOfActualParameterIsValueOf_R800 = target;
}

public void unrelateAcrossR800From(ActualParameter_c target)
{
  if (target != null) {
    target.unrelateAcrossR800From(this, true) ;
  }
}

public void unrelateAcrossR800From(ActualParameter_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR800From(this, notifyChanges) ;
  }
}

public void clearBackPointerR800To(ActualParameter_c target)
{
	if (target == backPointer_IsValueOfActualParameterIsValueOf_R800) {
		backPointer_IsValueOfActualParameterIsValueOf_R800 = null;
	}
}

public static Value_c getOneV_VALOnR800(ActualParameter_c [] targets)
{
    return getOneV_VALOnR800(targets, null);
}

public static Value_c getOneV_VALOnR800(ActualParameter_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR800(targets, test, true);
}

public static Value_c getOneV_VALOnR800(ActualParameter_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR800(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR800(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR800(ActualParameter_c target)
{
	return getOneV_VALOnR800(target, true);
}
public static Value_c getOneV_VALOnR800(ActualParameter_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR800(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c [] targets)
{
  return getManyV_VALsOnR800(targets, null);
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ActualParameter_c [] targetArray = new ActualParameter_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR800(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR800(target, null, true);
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c target)
{
    return getManyV_VALsOnR800(target, null, true);
}

public static Value_c [] getManyV_VALsOnR800(ActualParameter_c target, boolean loadComponent)
{
    return getManyV_VALsOnR800(target, null, loadComponent);
}


    
  
  
// referred to navigation

UnaryOperation_c backPointer_IsOperandToUnaryOperationIsOperandTo_R804;

public void setUnaryOperationOrderInChildListR804(UnaryOperation_c target, int index) {
	unrelateAcrossR804From(target);
	UnaryOperation_c[] elements = UnaryOperation_c.getManyV_UNYsOnR804(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR804From((UnaryOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR804To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR804To((UnaryOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR804To(UnaryOperation_c target)
{
  if (target != null) {
    target.relateAcrossR804To(this, true) ;
  }
}

public void relateAcrossR804To(UnaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR804To(this, notifyChanges) ;
  }
}

public void setBackPointerR804To(UnaryOperation_c target)
{
    backPointer_IsOperandToUnaryOperationIsOperandTo_R804 = target;
}

public void unrelateAcrossR804From(UnaryOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR804From(this, true) ;
  }
}

public void unrelateAcrossR804From(UnaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR804From(this, notifyChanges) ;
  }
}

public void clearBackPointerR804To(UnaryOperation_c target)
{
	if (target == backPointer_IsOperandToUnaryOperationIsOperandTo_R804) {
		backPointer_IsOperandToUnaryOperationIsOperandTo_R804 = null;
	}
}

public static Value_c getOneV_VALOnR804(UnaryOperation_c [] targets)
{
    return getOneV_VALOnR804(targets, null);
}

public static Value_c getOneV_VALOnR804(UnaryOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR804(targets, test, true);
}

public static Value_c getOneV_VALOnR804(UnaryOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR804(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR804(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR804(UnaryOperation_c target)
{
	return getOneV_VALOnR804(target, true);
}
public static Value_c getOneV_VALOnR804(UnaryOperation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasOperandValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR804(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasOperandValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c [] targets)
{
  return getManyV_VALsOnR804(targets, null);
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UnaryOperation_c [] targetArray = new UnaryOperation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR804(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR804(target, null, true);
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c target)
{
    return getManyV_VALsOnR804(target, null, true);
}

public static Value_c [] getManyV_VALsOnR804(UnaryOperation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR804(target, null, loadComponent);
}


    
  
  
// referred to navigation

BinaryOperation_c backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803;

public void setBinaryOperationOrderInChildListR803(BinaryOperation_c target, int index) {
	unrelateAcrossR803From(target);
	BinaryOperation_c[] elements = BinaryOperation_c.getManyV_BINsOnR803(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR803From((BinaryOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR803To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR803To((BinaryOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR803To(BinaryOperation_c target)
{
  if (target != null) {
    target.relateAcrossR803To(this, true) ;
  }
}

public void relateAcrossR803To(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR803To(this, notifyChanges) ;
  }
}

public void setBackPointerR803To(BinaryOperation_c target)
{
    backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803 = target;
}

public void unrelateAcrossR803From(BinaryOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR803From(this, true) ;
  }
}

public void unrelateAcrossR803From(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR803From(this, notifyChanges) ;
  }
}

public void clearBackPointerR803To(BinaryOperation_c target)
{
	if (target == backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803) {
		backPointer_IsRightOperandToBinaryOperationIsRightOperandTo_R803 = null;
	}
}

public static Value_c getOneV_VALOnR803(BinaryOperation_c [] targets)
{
    return getOneV_VALOnR803(targets, null);
}

public static Value_c getOneV_VALOnR803(BinaryOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR803(targets, test, true);
}

public static Value_c getOneV_VALOnR803(BinaryOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR803(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR803(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR803(BinaryOperation_c target)
{
	return getOneV_VALOnR803(target, true);
}
public static Value_c getOneV_VALOnR803(BinaryOperation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasRightValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR803(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasRightValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c [] targets)
{
  return getManyV_VALsOnR803(targets, null);
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    BinaryOperation_c [] targetArray = new BinaryOperation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR803(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR803(target, null, true);
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c target)
{
    return getManyV_VALsOnR803(target, null, true);
}

public static Value_c [] getManyV_VALsOnR803(BinaryOperation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR803(target, null, loadComponent);
}


    
  
  
// referred to navigation

BinaryOperation_c backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802;

public void setBinaryOperationOrderInChildListR802(BinaryOperation_c target, int index) {
	unrelateAcrossR802From(target);
	BinaryOperation_c[] elements = BinaryOperation_c.getManyV_BINsOnR802(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR802From((BinaryOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR802To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR802To((BinaryOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR802To(BinaryOperation_c target)
{
  if (target != null) {
    target.relateAcrossR802To(this, true) ;
  }
}

public void relateAcrossR802To(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR802To(this, notifyChanges) ;
  }
}

public void setBackPointerR802To(BinaryOperation_c target)
{
    backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802 = target;
}

public void unrelateAcrossR802From(BinaryOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR802From(this, true) ;
  }
}

public void unrelateAcrossR802From(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR802From(this, notifyChanges) ;
  }
}

public void clearBackPointerR802To(BinaryOperation_c target)
{
	if (target == backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802) {
		backPointer_IsLeftOperandToBinaryOperationIsLeftOperandTo_R802 = null;
	}
}

public static Value_c getOneV_VALOnR802(BinaryOperation_c [] targets)
{
    return getOneV_VALOnR802(targets, null);
}

public static Value_c getOneV_VALOnR802(BinaryOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR802(targets, test, true);
}

public static Value_c getOneV_VALOnR802(BinaryOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR802(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR802(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR802(BinaryOperation_c target)
{
	return getOneV_VALOnR802(target, true);
}
public static Value_c getOneV_VALOnR802(BinaryOperation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasLeftValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR802(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasLeftValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c [] targets)
{
  return getManyV_VALsOnR802(targets, null);
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    BinaryOperation_c [] targetArray = new BinaryOperation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR802(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR802(target, null, true);
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c target)
{
    return getManyV_VALsOnR802(target, null, true);
}

public static Value_c [] getManyV_VALsOnR802(BinaryOperation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR802(target, null, loadComponent);
}


    
  
  
// referred to navigation

FunctionValue_c backPointer_IsSubtypeFunctionValueIsSubtype_R801;

public void setFunctionValueOrderInChildListR801(FunctionValue_c target, int index) {
	unrelateAcrossR801From(target);
	FunctionValue_c[] elements = FunctionValue_c.getManyV_FNVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((FunctionValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((FunctionValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(FunctionValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(FunctionValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(FunctionValue_c target)
{
    backPointer_IsSubtypeFunctionValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(FunctionValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(FunctionValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(FunctionValue_c target)
{
	if (target == backPointer_IsSubtypeFunctionValueIsSubtype_R801) {
		backPointer_IsSubtypeFunctionValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(FunctionValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(FunctionValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(FunctionValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(FunctionValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(FunctionValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    FunctionValue_c [] targetArray = new FunctionValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(FunctionValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

ParameterValue_c backPointer_IsSubtypeParameterValueIsSubtype_R801;

public void setParameterValueOrderInChildListR801(ParameterValue_c target, int index) {
	unrelateAcrossR801From(target);
	ParameterValue_c[] elements = ParameterValue_c.getManyV_PVLsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((ParameterValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((ParameterValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(ParameterValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(ParameterValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(ParameterValue_c target)
{
    backPointer_IsSubtypeParameterValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(ParameterValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(ParameterValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(ParameterValue_c target)
{
	if (target == backPointer_IsSubtypeParameterValueIsSubtype_R801) {
		backPointer_IsSubtypeParameterValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(ParameterValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(ParameterValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(ParameterValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(ParameterValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(ParameterValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ParameterValue_c [] targetArray = new ParameterValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ParameterValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

SelectedReference_c backPointer_IsSubtypeSelectedReferenceIsSubtype_R801;

public void setSelectedReferenceOrderInChildListR801(SelectedReference_c target, int index) {
	unrelateAcrossR801From(target);
	SelectedReference_c[] elements = SelectedReference_c.getManyV_SLRsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((SelectedReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((SelectedReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(SelectedReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(SelectedReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(SelectedReference_c target)
{
    backPointer_IsSubtypeSelectedReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(SelectedReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(SelectedReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(SelectedReference_c target)
{
	if (target == backPointer_IsSubtypeSelectedReferenceIsSubtype_R801) {
		backPointer_IsSubtypeSelectedReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(SelectedReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(SelectedReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(SelectedReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(SelectedReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(SelectedReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectedReference_c [] targetArray = new SelectedReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(SelectedReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

BridgeValue_c backPointer_IsSubtypeBridgeValueIsSubtype_R801;

public void setBridgeValueOrderInChildListR801(BridgeValue_c target, int index) {
	unrelateAcrossR801From(target);
	BridgeValue_c[] elements = BridgeValue_c.getManyV_BRVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((BridgeValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((BridgeValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(BridgeValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(BridgeValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(BridgeValue_c target)
{
    backPointer_IsSubtypeBridgeValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(BridgeValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(BridgeValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(BridgeValue_c target)
{
	if (target == backPointer_IsSubtypeBridgeValueIsSubtype_R801) {
		backPointer_IsSubtypeBridgeValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(BridgeValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(BridgeValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(BridgeValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(BridgeValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(BridgeValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    BridgeValue_c [] targetArray = new BridgeValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(BridgeValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

InstanceReference_c backPointer_IsSubtypeInstanceReferenceIsSubtype_R801;

public void setInstanceReferenceOrderInChildListR801(InstanceReference_c target, int index) {
	unrelateAcrossR801From(target);
	InstanceReference_c[] elements = InstanceReference_c.getManyV_IRFsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((InstanceReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((InstanceReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(InstanceReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(InstanceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(InstanceReference_c target)
{
    backPointer_IsSubtypeInstanceReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(InstanceReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(InstanceReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(InstanceReference_c target)
{
	if (target == backPointer_IsSubtypeInstanceReferenceIsSubtype_R801) {
		backPointer_IsSubtypeInstanceReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(InstanceReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(InstanceReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(InstanceReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(InstanceReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(InstanceReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceReference_c [] targetArray = new InstanceReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

AttributeValueReference_c backPointer_IsSubtypeAttributeValueReferenceIsSubtype_R801;

public void setAttributeValueReferenceOrderInChildListR801(AttributeValueReference_c target, int index) {
	unrelateAcrossR801From(target);
	AttributeValueReference_c[] elements = AttributeValueReference_c.getManyV_AVLsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((AttributeValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((AttributeValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(AttributeValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(AttributeValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(AttributeValueReference_c target)
{
    backPointer_IsSubtypeAttributeValueReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(AttributeValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(AttributeValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(AttributeValueReference_c target)
{
	if (target == backPointer_IsSubtypeAttributeValueReferenceIsSubtype_R801) {
		backPointer_IsSubtypeAttributeValueReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(AttributeValueReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(AttributeValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(AttributeValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(AttributeValueReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(AttributeValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AttributeValueReference_c [] targetArray = new AttributeValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(AttributeValueReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

LiteralInteger_c backPointer_IsSubtypeLiteralIntegerIsSubtype_R801;

public void setLiteralIntegerOrderInChildListR801(LiteralInteger_c target, int index) {
	unrelateAcrossR801From(target);
	LiteralInteger_c[] elements = LiteralInteger_c.getManyV_LINsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((LiteralInteger_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((LiteralInteger_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(LiteralInteger_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(LiteralInteger_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(LiteralInteger_c target)
{
    backPointer_IsSubtypeLiteralIntegerIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(LiteralInteger_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(LiteralInteger_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(LiteralInteger_c target)
{
	if (target == backPointer_IsSubtypeLiteralIntegerIsSubtype_R801) {
		backPointer_IsSubtypeLiteralIntegerIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(LiteralInteger_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(LiteralInteger_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(LiteralInteger_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(LiteralInteger_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(LiteralInteger_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralInteger_c [] targetArray = new LiteralInteger_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralInteger_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

LiteralString_c backPointer_IsSubtypeLiteralStringIsSubtype_R801;

public void setLiteralStringOrderInChildListR801(LiteralString_c target, int index) {
	unrelateAcrossR801From(target);
	LiteralString_c[] elements = LiteralString_c.getManyV_LSTsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((LiteralString_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((LiteralString_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(LiteralString_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(LiteralString_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(LiteralString_c target)
{
    backPointer_IsSubtypeLiteralStringIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(LiteralString_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(LiteralString_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(LiteralString_c target)
{
	if (target == backPointer_IsSubtypeLiteralStringIsSubtype_R801) {
		backPointer_IsSubtypeLiteralStringIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(LiteralString_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(LiteralString_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(LiteralString_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(LiteralString_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(LiteralString_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralString_c [] targetArray = new LiteralString_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralString_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

UnaryOperation_c backPointer_IsSubtypeUnaryOperationIsSubtype_R801;

public void setUnaryOperationOrderInChildListR801(UnaryOperation_c target, int index) {
	unrelateAcrossR801From(target);
	UnaryOperation_c[] elements = UnaryOperation_c.getManyV_UNYsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((UnaryOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((UnaryOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(UnaryOperation_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(UnaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(UnaryOperation_c target)
{
    backPointer_IsSubtypeUnaryOperationIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(UnaryOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(UnaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(UnaryOperation_c target)
{
	if (target == backPointer_IsSubtypeUnaryOperationIsSubtype_R801) {
		backPointer_IsSubtypeUnaryOperationIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(UnaryOperation_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(UnaryOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(UnaryOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(UnaryOperation_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(UnaryOperation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    UnaryOperation_c [] targetArray = new UnaryOperation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(UnaryOperation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

OperationValue_c backPointer_IsSubtypeOperationValueIsSubtype_R801;

public void setOperationValueOrderInChildListR801(OperationValue_c target, int index) {
	unrelateAcrossR801From(target);
	OperationValue_c[] elements = OperationValue_c.getManyV_TRVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((OperationValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((OperationValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(OperationValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(OperationValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(OperationValue_c target)
{
    backPointer_IsSubtypeOperationValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(OperationValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(OperationValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(OperationValue_c target)
{
	if (target == backPointer_IsSubtypeOperationValueIsSubtype_R801) {
		backPointer_IsSubtypeOperationValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(OperationValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(OperationValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(OperationValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(OperationValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(OperationValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    OperationValue_c [] targetArray = new OperationValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(OperationValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

InstanceSetReference_c backPointer_IsSubtypeInstanceSetReferenceIsSubtype_R801;

public void setInstanceSetReferenceOrderInChildListR801(InstanceSetReference_c target, int index) {
	unrelateAcrossR801From(target);
	InstanceSetReference_c[] elements = InstanceSetReference_c.getManyV_ISRsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((InstanceSetReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((InstanceSetReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(InstanceSetReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(InstanceSetReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(InstanceSetReference_c target)
{
    backPointer_IsSubtypeInstanceSetReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(InstanceSetReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(InstanceSetReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(InstanceSetReference_c target)
{
	if (target == backPointer_IsSubtypeInstanceSetReferenceIsSubtype_R801) {
		backPointer_IsSubtypeInstanceSetReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(InstanceSetReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(InstanceSetReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(InstanceSetReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(InstanceSetReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(InstanceSetReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InstanceSetReference_c [] targetArray = new InstanceSetReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(InstanceSetReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

EventDatumValue_c backPointer_IsSubtypeEventDatumValueIsSubtype_R801;

public void setEventDatumValueOrderInChildListR801(EventDatumValue_c target, int index) {
	unrelateAcrossR801From(target);
	EventDatumValue_c[] elements = EventDatumValue_c.getManyV_EDVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((EventDatumValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((EventDatumValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(EventDatumValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(EventDatumValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(EventDatumValue_c target)
{
    backPointer_IsSubtypeEventDatumValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(EventDatumValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(EventDatumValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(EventDatumValue_c target)
{
	if (target == backPointer_IsSubtypeEventDatumValueIsSubtype_R801) {
		backPointer_IsSubtypeEventDatumValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(EventDatumValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(EventDatumValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(EventDatumValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(EventDatumValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(EventDatumValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    EventDatumValue_c [] targetArray = new EventDatumValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(EventDatumValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

TransientValueReference_c backPointer_IsSubtypeTransientValueReferenceIsSubtype_R801;

public void setTransientValueReferenceOrderInChildListR801(TransientValueReference_c target, int index) {
	unrelateAcrossR801From(target);
	TransientValueReference_c[] elements = TransientValueReference_c.getManyV_TVLsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((TransientValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((TransientValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(TransientValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(TransientValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(TransientValueReference_c target)
{
    backPointer_IsSubtypeTransientValueReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(TransientValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(TransientValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(TransientValueReference_c target)
{
	if (target == backPointer_IsSubtypeTransientValueReferenceIsSubtype_R801) {
		backPointer_IsSubtypeTransientValueReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(TransientValueReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(TransientValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(TransientValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(TransientValueReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(TransientValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    TransientValueReference_c [] targetArray = new TransientValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(TransientValueReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

LiteralReal_c backPointer_IsSubtypeLiteralRealIsSubtype_R801;

public void setLiteralRealOrderInChildListR801(LiteralReal_c target, int index) {
	unrelateAcrossR801From(target);
	LiteralReal_c[] elements = LiteralReal_c.getManyV_LRLsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((LiteralReal_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((LiteralReal_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(LiteralReal_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(LiteralReal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(LiteralReal_c target)
{
    backPointer_IsSubtypeLiteralRealIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(LiteralReal_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(LiteralReal_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(LiteralReal_c target)
{
	if (target == backPointer_IsSubtypeLiteralRealIsSubtype_R801) {
		backPointer_IsSubtypeLiteralRealIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(LiteralReal_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(LiteralReal_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(LiteralReal_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(LiteralReal_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(LiteralReal_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralReal_c [] targetArray = new LiteralReal_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralReal_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

LiteralBoolean_c backPointer_IsSubtypeLiteralBooleanIsSubtype_R801;

public void setLiteralBooleanOrderInChildListR801(LiteralBoolean_c target, int index) {
	unrelateAcrossR801From(target);
	LiteralBoolean_c[] elements = LiteralBoolean_c.getManyV_LBOsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((LiteralBoolean_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((LiteralBoolean_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(LiteralBoolean_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(LiteralBoolean_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(LiteralBoolean_c target)
{
    backPointer_IsSubtypeLiteralBooleanIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(LiteralBoolean_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(LiteralBoolean_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(LiteralBoolean_c target)
{
	if (target == backPointer_IsSubtypeLiteralBooleanIsSubtype_R801) {
		backPointer_IsSubtypeLiteralBooleanIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(LiteralBoolean_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(LiteralBoolean_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(LiteralBoolean_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(LiteralBoolean_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(LiteralBoolean_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralBoolean_c [] targetArray = new LiteralBoolean_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralBoolean_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

BinaryOperation_c backPointer_IsSubtypeBinaryOperationIsSubtype_R801;

public void setBinaryOperationOrderInChildListR801(BinaryOperation_c target, int index) {
	unrelateAcrossR801From(target);
	BinaryOperation_c[] elements = BinaryOperation_c.getManyV_BINsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((BinaryOperation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((BinaryOperation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(BinaryOperation_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(BinaryOperation_c target)
{
    backPointer_IsSubtypeBinaryOperationIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(BinaryOperation_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(BinaryOperation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(BinaryOperation_c target)
{
	if (target == backPointer_IsSubtypeBinaryOperationIsSubtype_R801) {
		backPointer_IsSubtypeBinaryOperationIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(BinaryOperation_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(BinaryOperation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(BinaryOperation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(BinaryOperation_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(BinaryOperation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    BinaryOperation_c [] targetArray = new BinaryOperation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(BinaryOperation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

LiteralEnumerator_c backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801;

public void setLiteralEnumeratorOrderInChildListR801(LiteralEnumerator_c target, int index) {
	unrelateAcrossR801From(target);
	LiteralEnumerator_c[] elements = LiteralEnumerator_c.getManyV_LENsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((LiteralEnumerator_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((LiteralEnumerator_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(LiteralEnumerator_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(LiteralEnumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(LiteralEnumerator_c target)
{
    backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(LiteralEnumerator_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(LiteralEnumerator_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(LiteralEnumerator_c target)
{
	if (target == backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801) {
		backPointer_IsSubtypeLiteralEnumeratorIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(LiteralEnumerator_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(LiteralEnumerator_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(LiteralEnumerator_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(LiteralEnumerator_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(LiteralEnumerator_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    LiteralEnumerator_c [] targetArray = new LiteralEnumerator_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(LiteralEnumerator_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

MemberValueReference_c backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801;

public void setMemberValueReferenceOrderInChildListR801(MemberValueReference_c target, int index) {
	unrelateAcrossR801From(target);
	MemberValueReference_c[] elements = MemberValueReference_c.getManyV_MVLsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((MemberValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((MemberValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(MemberValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(MemberValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(MemberValueReference_c target)
{
    backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(MemberValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(MemberValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(MemberValueReference_c target)
{
	if (target == backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801) {
		backPointer_IsSubtypeMemberValueReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(MemberValueReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(MemberValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(MemberValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(MemberValueReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(MemberValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MemberValueReference_c [] targetArray = new MemberValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(MemberValueReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

ArrayElementReference_c backPointer_IsSubtypeArrayElementReferenceIsSubtype_R801;

public void setArrayElementReferenceOrderInChildListR801(ArrayElementReference_c target, int index) {
	unrelateAcrossR801From(target);
	ArrayElementReference_c[] elements = ArrayElementReference_c.getManyV_AERsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((ArrayElementReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((ArrayElementReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(ArrayElementReference_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(ArrayElementReference_c target)
{
    backPointer_IsSubtypeArrayElementReferenceIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(ArrayElementReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(ArrayElementReference_c target)
{
	if (target == backPointer_IsSubtypeArrayElementReferenceIsSubtype_R801) {
		backPointer_IsSubtypeArrayElementReferenceIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(ArrayElementReference_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(ArrayElementReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(ArrayElementReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(ArrayElementReference_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(ArrayElementReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ArrayElementReference_c [] targetArray = new ArrayElementReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayElementReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

ArrayLengthValue_c backPointer_IsSubtypeArrayLengthValueIsSubtype_R801;

public void setArrayLengthValueOrderInChildListR801(ArrayLengthValue_c target, int index) {
	unrelateAcrossR801From(target);
	ArrayLengthValue_c[] elements = ArrayLengthValue_c.getManyV_ALVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((ArrayLengthValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((ArrayLengthValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(ArrayLengthValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(ArrayLengthValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(ArrayLengthValue_c target)
{
    backPointer_IsSubtypeArrayLengthValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(ArrayLengthValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(ArrayLengthValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(ArrayLengthValue_c target)
{
	if (target == backPointer_IsSubtypeArrayLengthValueIsSubtype_R801) {
		backPointer_IsSubtypeArrayLengthValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(ArrayLengthValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(ArrayLengthValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(ArrayLengthValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(ArrayLengthValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(ArrayLengthValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ArrayLengthValue_c [] targetArray = new ArrayLengthValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(ArrayLengthValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

MessageValue_c backPointer_IsSubtypeMessageValueIsSubtype_R801;

public void setMessageValueOrderInChildListR801(MessageValue_c target, int index) {
	unrelateAcrossR801From(target);
	MessageValue_c[] elements = MessageValue_c.getManyV_MSVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((MessageValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((MessageValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(MessageValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(MessageValue_c target)
{
    backPointer_IsSubtypeMessageValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(MessageValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(MessageValue_c target)
{
	if (target == backPointer_IsSubtypeMessageValueIsSubtype_R801) {
		backPointer_IsSubtypeMessageValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(MessageValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(MessageValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(MessageValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(MessageValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(MessageValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MessageValue_c [] targetArray = new MessageValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(MessageValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}

  
  
  
// referred to navigation

SymbolicConstantValue_c backPointer_IsSubtypeSymbolicConstantValueIsSubtype_R801;

public void setSymbolicConstantValueOrderInChildListR801(SymbolicConstantValue_c target, int index) {
	unrelateAcrossR801From(target);
	SymbolicConstantValue_c[] elements = SymbolicConstantValue_c.getManyV_SCVsOnR801(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR801From((SymbolicConstantValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR801To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR801To((SymbolicConstantValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR801To(SymbolicConstantValue_c target)
{
  if (target != null) {
    target.relateAcrossR801To(this, true) ;
  }
}

public void relateAcrossR801To(SymbolicConstantValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR801To(this, notifyChanges) ;
  }
}

public void setBackPointerR801To(SymbolicConstantValue_c target)
{
    backPointer_IsSubtypeSymbolicConstantValueIsSubtype_R801 = target;
}

public void unrelateAcrossR801From(SymbolicConstantValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, true) ;
  }
}

public void unrelateAcrossR801From(SymbolicConstantValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR801From(this, notifyChanges) ;
  }
}

public void clearBackPointerR801To(SymbolicConstantValue_c target)
{
	if (target == backPointer_IsSubtypeSymbolicConstantValueIsSubtype_R801) {
		backPointer_IsSubtypeSymbolicConstantValueIsSubtype_R801 = null;
	}
}

public static Value_c getOneV_VALOnR801(SymbolicConstantValue_c [] targets)
{
    return getOneV_VALOnR801(targets, null);
}

public static Value_c getOneV_VALOnR801(SymbolicConstantValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR801(targets, test, true);
}

public static Value_c getOneV_VALOnR801(SymbolicConstantValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR801(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR801(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR801(SymbolicConstantValue_c target)
{
	return getOneV_VALOnR801(target, true);
}
public static Value_c getOneV_VALOnR801(SymbolicConstantValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.IsSupertypeValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR801(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].IsSupertypeValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c [] targets)
{
  return getManyV_VALsOnR801(targets, null);
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SymbolicConstantValue_c [] targetArray = new SymbolicConstantValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR801(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c target)
{
    return getManyV_VALsOnR801(target, null, true);
}

public static Value_c [] getManyV_VALsOnR801(SymbolicConstantValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR801(target, null, loadComponent);
}


    
  
  
// referred to navigation

MemberValueReference_c backPointer_IsRootForMemberValueReferenceIsRootFor_R837;

public void setMemberValueReferenceOrderInChildListR837(MemberValueReference_c target, int index) {
	unrelateAcrossR837From(target);
	MemberValueReference_c[] elements = MemberValueReference_c.getManyV_MVLsOnR837(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR837From((MemberValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR837To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR837To((MemberValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR837To(MemberValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR837To(this, true) ;
  }
}

public void relateAcrossR837To(MemberValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR837To(this, notifyChanges) ;
  }
}

public void setBackPointerR837To(MemberValueReference_c target)
{
    backPointer_IsRootForMemberValueReferenceIsRootFor_R837 = target;
}

public void unrelateAcrossR837From(MemberValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR837From(this, true) ;
  }
}

public void unrelateAcrossR837From(MemberValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR837From(this, notifyChanges) ;
  }
}

public void clearBackPointerR837To(MemberValueReference_c target)
{
	if (target == backPointer_IsRootForMemberValueReferenceIsRootFor_R837) {
		backPointer_IsRootForMemberValueReferenceIsRootFor_R837 = null;
	}
}

public static Value_c getOneV_VALOnR837(MemberValueReference_c [] targets)
{
    return getOneV_VALOnR837(targets, null);
}

public static Value_c getOneV_VALOnR837(MemberValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR837(targets, test, true);
}

public static Value_c getOneV_VALOnR837(MemberValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR837(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR837(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR837(MemberValueReference_c target)
{
	return getOneV_VALOnR837(target, true);
}
public static Value_c getOneV_VALOnR837(MemberValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.Value ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR837(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].Value;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c [] targets)
{
  return getManyV_VALsOnR837(targets, null);
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MemberValueReference_c [] targetArray = new MemberValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR837(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR837(target, null, true);
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c target)
{
    return getManyV_VALsOnR837(target, null, true);
}

public static Value_c [] getManyV_VALsOnR837(MemberValueReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR837(target, null, loadComponent);
}


    
  
  
// referred to navigation

AttributeValueReference_c backPointer_IsRootForAttributeValueReferenceIsRootFor_R807;

public void setAttributeValueReferenceOrderInChildListR807(AttributeValueReference_c target, int index) {
	unrelateAcrossR807From(target);
	AttributeValueReference_c[] elements = AttributeValueReference_c.getManyV_AVLsOnR807(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR807From((AttributeValueReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR807To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR807To((AttributeValueReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR807To(AttributeValueReference_c target)
{
  if (target != null) {
    target.relateAcrossR807To(this, true) ;
  }
}

public void relateAcrossR807To(AttributeValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR807To(this, notifyChanges) ;
  }
}

public void setBackPointerR807To(AttributeValueReference_c target)
{
    backPointer_IsRootForAttributeValueReferenceIsRootFor_R807 = target;
}

public void unrelateAcrossR807From(AttributeValueReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR807From(this, true) ;
  }
}

public void unrelateAcrossR807From(AttributeValueReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR807From(this, notifyChanges) ;
  }
}

public void clearBackPointerR807To(AttributeValueReference_c target)
{
	if (target == backPointer_IsRootForAttributeValueReferenceIsRootFor_R807) {
		backPointer_IsRootForAttributeValueReferenceIsRootFor_R807 = null;
	}
}

public static Value_c getOneV_VALOnR807(AttributeValueReference_c [] targets)
{
    return getOneV_VALOnR807(targets, null);
}

public static Value_c getOneV_VALOnR807(AttributeValueReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR807(targets, test, true);
}

public static Value_c getOneV_VALOnR807(AttributeValueReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR807(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR807(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR807(AttributeValueReference_c target)
{
	return getOneV_VALOnR807(target, true);
}
public static Value_c getOneV_VALOnR807(AttributeValueReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasRootValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR807(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasRootValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c [] targets)
{
  return getManyV_VALsOnR807(targets, null);
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AttributeValueReference_c [] targetArray = new AttributeValueReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR807(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR807(target, null, true);
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c target)
{
    return getManyV_VALsOnR807(target, null, true);
}

public static Value_c [] getManyV_VALsOnR807(AttributeValueReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR807(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayElementReference_c backPointer_IsRootForArrayElementReferenceIsRootFor_R838;

public void setArrayElementReferenceOrderInChildListR838(ArrayElementReference_c target, int index) {
	unrelateAcrossR838From(target);
	ArrayElementReference_c[] elements = ArrayElementReference_c.getManyV_AERsOnR838(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR838From((ArrayElementReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR838To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR838To((ArrayElementReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR838To(ArrayElementReference_c target)
{
  if (target != null) {
    target.relateAcrossR838To(this, true) ;
  }
}

public void relateAcrossR838To(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR838To(this, notifyChanges) ;
  }
}

public void setBackPointerR838To(ArrayElementReference_c target)
{
    backPointer_IsRootForArrayElementReferenceIsRootFor_R838 = target;
}

public void unrelateAcrossR838From(ArrayElementReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR838From(this, true) ;
  }
}

public void unrelateAcrossR838From(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR838From(this, notifyChanges) ;
  }
}

public void clearBackPointerR838To(ArrayElementReference_c target)
{
	if (target == backPointer_IsRootForArrayElementReferenceIsRootFor_R838) {
		backPointer_IsRootForArrayElementReferenceIsRootFor_R838 = null;
	}
}

public static Value_c getOneV_VALOnR838(ArrayElementReference_c [] targets)
{
    return getOneV_VALOnR838(targets, null);
}

public static Value_c getOneV_VALOnR838(ArrayElementReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR838(targets, test, true);
}

public static Value_c getOneV_VALOnR838(ArrayElementReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR838(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR838(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR838(ArrayElementReference_c target)
{
	return getOneV_VALOnR838(target, true);
}
public static Value_c getOneV_VALOnR838(ArrayElementReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasRootValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR838(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasRootValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c [] targets)
{
  return getManyV_VALsOnR838(targets, null);
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ArrayElementReference_c [] targetArray = new ArrayElementReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR838(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR838(target, null, true);
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c target)
{
    return getManyV_VALsOnR838(target, null, true);
}

public static Value_c [] getManyV_VALsOnR838(ArrayElementReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR838(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayElementReference_c backPointer_ProvidesIndexOfArrayElementReferenceProvidesIndexOf_R839;

public void setArrayElementReferenceOrderInChildListR839(ArrayElementReference_c target, int index) {
	unrelateAcrossR839From(target);
	ArrayElementReference_c[] elements = ArrayElementReference_c.getManyV_AERsOnR839(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR839From((ArrayElementReference_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR839To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR839To((ArrayElementReference_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR839To(ArrayElementReference_c target)
{
  if (target != null) {
    target.relateAcrossR839To(this, true) ;
  }
}

public void relateAcrossR839To(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR839To(this, notifyChanges) ;
  }
}

public void setBackPointerR839To(ArrayElementReference_c target)
{
    backPointer_ProvidesIndexOfArrayElementReferenceProvidesIndexOf_R839 = target;
}

public void unrelateAcrossR839From(ArrayElementReference_c target)
{
  if (target != null) {
    target.unrelateAcrossR839From(this, true) ;
  }
}

public void unrelateAcrossR839From(ArrayElementReference_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR839From(this, notifyChanges) ;
  }
}

public void clearBackPointerR839To(ArrayElementReference_c target)
{
	if (target == backPointer_ProvidesIndexOfArrayElementReferenceProvidesIndexOf_R839) {
		backPointer_ProvidesIndexOfArrayElementReferenceProvidesIndexOf_R839 = null;
	}
}

public static Value_c getOneV_VALOnR839(ArrayElementReference_c [] targets)
{
    return getOneV_VALOnR839(targets, null);
}

public static Value_c getOneV_VALOnR839(ArrayElementReference_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR839(targets, test, true);
}

public static Value_c getOneV_VALOnR839(ArrayElementReference_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR839(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR839(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR839(ArrayElementReference_c target)
{
	return getOneV_VALOnR839(target, true);
}
public static Value_c getOneV_VALOnR839(ArrayElementReference_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasIndexValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR839(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasIndexValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c [] targets)
{
  return getManyV_VALsOnR839(targets, null);
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ArrayElementReference_c [] targetArray = new ArrayElementReference_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR839(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR839(target, null, true);
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c target)
{
    return getManyV_VALsOnR839(target, null, true);
}

public static Value_c [] getManyV_VALsOnR839(ArrayElementReference_c target, boolean loadComponent)
{
    return getManyV_VALsOnR839(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayLengthValue_c backPointer_HasLengthReturnedByArrayLengthValueHasLengthReturnedBy_R840;

public void setArrayLengthValueOrderInChildListR840(ArrayLengthValue_c target, int index) {
	unrelateAcrossR840From(target);
	ArrayLengthValue_c[] elements = ArrayLengthValue_c.getManyV_ALVsOnR840(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR840From((ArrayLengthValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR840To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR840To((ArrayLengthValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR840To(ArrayLengthValue_c target)
{
  if (target != null) {
    target.relateAcrossR840To(this, true) ;
  }
}

public void relateAcrossR840To(ArrayLengthValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR840To(this, notifyChanges) ;
  }
}

public void setBackPointerR840To(ArrayLengthValue_c target)
{
    backPointer_HasLengthReturnedByArrayLengthValueHasLengthReturnedBy_R840 = target;
}

public void unrelateAcrossR840From(ArrayLengthValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR840From(this, true) ;
  }
}

public void unrelateAcrossR840From(ArrayLengthValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR840From(this, notifyChanges) ;
  }
}

public void clearBackPointerR840To(ArrayLengthValue_c target)
{
	if (target == backPointer_HasLengthReturnedByArrayLengthValueHasLengthReturnedBy_R840) {
		backPointer_HasLengthReturnedByArrayLengthValueHasLengthReturnedBy_R840 = null;
	}
}

public static Value_c getOneV_VALOnR840(ArrayLengthValue_c [] targets)
{
    return getOneV_VALOnR840(targets, null);
}

public static Value_c getOneV_VALOnR840(ArrayLengthValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR840(targets, test, true);
}

public static Value_c getOneV_VALOnR840(ArrayLengthValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR840(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR840(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR840(ArrayLengthValue_c target)
{
	return getOneV_VALOnR840(target, true);
}
public static Value_c getOneV_VALOnR840(ArrayLengthValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ReturnsLengthOfValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR840(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].ReturnsLengthOfValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c [] targets)
{
  return getManyV_VALsOnR840(targets, null);
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ArrayLengthValue_c [] targetArray = new ArrayLengthValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR840(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR840(target, null, true);
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c target)
{
    return getManyV_VALsOnR840(target, null, true);
}

public static Value_c [] getManyV_VALsOnR840(ArrayLengthValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR840(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<MessageValue_c> backPointer_IsTargetOfMessageValueIsTargetOf_R851 = new ArrayList<MessageValue_c>();

public void setMessageValueOrderInChildListR851(MessageValue_c target, int index) {
	unrelateAcrossR851From(target);
	MessageValue_c[] elements = MessageValue_c.getManyV_MSVsOnR851(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR851From((MessageValue_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR851To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR851To((MessageValue_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR851To(MessageValue_c target)
{
  if (target != null) {
    target.relateAcrossR851To(this, true) ;
  }
}

public void relateAcrossR851To(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR851To(this, notifyChanges) ;
  }
}

public void setBackPointerR851To(MessageValue_c target)
{
  	synchronized (backPointer_IsTargetOfMessageValueIsTargetOf_R851) {
		backPointer_IsTargetOfMessageValueIsTargetOf_R851.add(target);
	}
}

public void unrelateAcrossR851From(MessageValue_c target)
{
  if (target != null) {
    target.unrelateAcrossR851From(this, true) ;
  }
}

public void unrelateAcrossR851From(MessageValue_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR851From(this, notifyChanges) ;
  }
}

public void clearBackPointerR851To(MessageValue_c target)
{
  synchronized (backPointer_IsTargetOfMessageValueIsTargetOf_R851) {
	    backPointer_IsTargetOfMessageValueIsTargetOf_R851.remove(target);
	}
}

public static Value_c getOneV_VALOnR851(MessageValue_c [] targets)
{
    return getOneV_VALOnR851(targets, null);
}

public static Value_c getOneV_VALOnR851(MessageValue_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR851(targets, test, true);
}

public static Value_c getOneV_VALOnR851(MessageValue_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR851(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR851(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR851(MessageValue_c target)
{
	return getOneV_VALOnR851(target, true);
}
public static Value_c getOneV_VALOnR851(MessageValue_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasTargetValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR851(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasTargetValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c [] targets)
{
  return getManyV_VALsOnR851(targets, null);
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    MessageValue_c [] targetArray = new MessageValue_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR851(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR851(target, null, true);
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c target)
{
    return getManyV_VALsOnR851(target, null, true);
}

public static Value_c [] getManyV_VALsOnR851(MessageValue_c target, boolean loadComponent)
{
    return getManyV_VALsOnR851(target, null, loadComponent);
}


    
  
  
// referred to navigation

SelectFromInstancesWhere_c backPointer_SelectFromInstancesWhere_R610;

public void setSelectFromInstancesWhereOrderInChildListR610(SelectFromInstancesWhere_c target, int index) {
	unrelateAcrossR610From(target);
	SelectFromInstancesWhere_c[] elements = SelectFromInstancesWhere_c.getManyACT_FIWsOnR610(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR610From((SelectFromInstancesWhere_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR610To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR610To((SelectFromInstancesWhere_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR610To(SelectFromInstancesWhere_c target)
{
  if (target != null) {
    target.relateAcrossR610To(this, true) ;
  }
}

public void relateAcrossR610To(SelectFromInstancesWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR610To(this, notifyChanges) ;
  }
}

public void setBackPointerR610To(SelectFromInstancesWhere_c target)
{
    backPointer_SelectFromInstancesWhere_R610 = target;
}

public void unrelateAcrossR610From(SelectFromInstancesWhere_c target)
{
  if (target != null) {
    target.unrelateAcrossR610From(this, true) ;
  }
}

public void unrelateAcrossR610From(SelectFromInstancesWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR610From(this, notifyChanges) ;
  }
}

public void clearBackPointerR610To(SelectFromInstancesWhere_c target)
{
	if (target == backPointer_SelectFromInstancesWhere_R610) {
		backPointer_SelectFromInstancesWhere_R610 = null;
	}
}

public static Value_c getOneV_VALOnR610(SelectFromInstancesWhere_c [] targets)
{
    return getOneV_VALOnR610(targets, null);
}

public static Value_c getOneV_VALOnR610(SelectFromInstancesWhere_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR610(targets, test, true);
}

public static Value_c getOneV_VALOnR610(SelectFromInstancesWhere_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR610(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR610(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR610(SelectFromInstancesWhere_c target)
{
	return getOneV_VALOnR610(target, true);
}
public static Value_c getOneV_VALOnR610(SelectFromInstancesWhere_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WhereClauseValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR610(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].WhereClauseValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c [] targets)
{
  return getManyV_VALsOnR610(targets, null);
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectFromInstancesWhere_c [] targetArray = new SelectFromInstancesWhere_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR610(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR610(target, null, true);
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c target)
{
    return getManyV_VALsOnR610(target, null, true);
}

public static Value_c [] getManyV_VALsOnR610(SelectFromInstancesWhere_c target, boolean loadComponent)
{
    return getManyV_VALsOnR610(target, null, loadComponent);
}


    
  
  
// referred to navigation

SelectRelatedWhere_c backPointer_SelectRelatedWhere_R611;

public void setSelectRelatedWhereOrderInChildListR611(SelectRelatedWhere_c target, int index) {
	unrelateAcrossR611From(target);
	SelectRelatedWhere_c[] elements = SelectRelatedWhere_c.getManyACT_SRWsOnR611(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR611From((SelectRelatedWhere_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR611To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR611To((SelectRelatedWhere_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR611To(SelectRelatedWhere_c target)
{
  if (target != null) {
    target.relateAcrossR611To(this, true) ;
  }
}

public void relateAcrossR611To(SelectRelatedWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR611To(this, notifyChanges) ;
  }
}

public void setBackPointerR611To(SelectRelatedWhere_c target)
{
    backPointer_SelectRelatedWhere_R611 = target;
}

public void unrelateAcrossR611From(SelectRelatedWhere_c target)
{
  if (target != null) {
    target.unrelateAcrossR611From(this, true) ;
  }
}

public void unrelateAcrossR611From(SelectRelatedWhere_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR611From(this, notifyChanges) ;
  }
}

public void clearBackPointerR611To(SelectRelatedWhere_c target)
{
	if (target == backPointer_SelectRelatedWhere_R611) {
		backPointer_SelectRelatedWhere_R611 = null;
	}
}

public static Value_c getOneV_VALOnR611(SelectRelatedWhere_c [] targets)
{
    return getOneV_VALOnR611(targets, null);
}

public static Value_c getOneV_VALOnR611(SelectRelatedWhere_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR611(targets, test, true);
}

public static Value_c getOneV_VALOnR611(SelectRelatedWhere_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR611(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR611(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR611(SelectRelatedWhere_c target)
{
	return getOneV_VALOnR611(target, true);
}
public static Value_c getOneV_VALOnR611(SelectRelatedWhere_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WhereClauseValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR611(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].WhereClauseValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c [] targets)
{
  return getManyV_VALsOnR611(targets, null);
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SelectRelatedWhere_c [] targetArray = new SelectRelatedWhere_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR611(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR611(target, null, true);
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c target)
{
    return getManyV_VALsOnR611(target, null, true);
}

public static Value_c [] getManyV_VALsOnR611(SelectRelatedWhere_c target, boolean loadComponent)
{
    return getManyV_VALsOnR611(target, null, loadComponent);
}


    
  
  
// referred to navigation

Select_c backPointer_Select_R613;

public void setSelectOrderInChildListR613(Select_c target, int index) {
	unrelateAcrossR613From(target);
	Select_c[] elements = Select_c.getManyACT_SELsOnR613(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR613From((Select_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR613To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR613To((Select_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR613To(Select_c target)
{
  if (target != null) {
    target.relateAcrossR613To(this, true) ;
  }
}

public void relateAcrossR613To(Select_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR613To(this, notifyChanges) ;
  }
}

public void setBackPointerR613To(Select_c target)
{
    backPointer_Select_R613 = target;
}

public void unrelateAcrossR613From(Select_c target)
{
  if (target != null) {
    target.unrelateAcrossR613From(this, true) ;
  }
}

public void unrelateAcrossR613From(Select_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR613From(this, notifyChanges) ;
  }
}

public void clearBackPointerR613To(Select_c target)
{
	if (target == backPointer_Select_R613) {
		backPointer_Select_R613 = null;
	}
}

public static Value_c getOneV_VALOnR613(Select_c [] targets)
{
    return getOneV_VALOnR613(targets, null);
}

public static Value_c getOneV_VALOnR613(Select_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR613(targets, test, true);
}

public static Value_c getOneV_VALOnR613(Select_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR613(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR613(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR613(Select_c target)
{
	return getOneV_VALOnR613(target, true);
}
public static Value_c getOneV_VALOnR613(Select_c target, boolean loadComponent)
{
  if (target != null) {
    return target.StartingPointValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR613(Select_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR613(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR613(Select_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].StartingPointValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR613(Select_c [] targets)
{
  return getManyV_VALsOnR613(targets, null);
}

public static Value_c [] getManyV_VALsOnR613(Select_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Select_c [] targetArray = new Select_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR613(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR613(Select_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR613(target, null, true);
}

public static Value_c [] getManyV_VALsOnR613(Select_c target)
{
    return getManyV_VALsOnR613(target, null, true);
}

public static Value_c [] getManyV_VALsOnR613(Select_c target, boolean loadComponent)
{
    return getManyV_VALsOnR613(target, null, loadComponent);
}


    
  
  
// referred to navigation

ReturnStmt_c backPointer_ReturnedByReturnStmtReturnedBy_R668;

public void setReturnStmtOrderInChildListR668(ReturnStmt_c target, int index) {
	unrelateAcrossR668From(target);
	ReturnStmt_c[] elements = ReturnStmt_c.getManyACT_RETsOnR668(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR668From((ReturnStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR668To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR668To((ReturnStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR668To(ReturnStmt_c target)
{
  if (target != null) {
    target.relateAcrossR668To(this, true) ;
  }
}

public void relateAcrossR668To(ReturnStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR668To(this, notifyChanges) ;
  }
}

public void setBackPointerR668To(ReturnStmt_c target)
{
    backPointer_ReturnedByReturnStmtReturnedBy_R668 = target;
}

public void unrelateAcrossR668From(ReturnStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR668From(this, true) ;
  }
}

public void unrelateAcrossR668From(ReturnStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR668From(this, notifyChanges) ;
  }
}

public void clearBackPointerR668To(ReturnStmt_c target)
{
	if (target == backPointer_ReturnedByReturnStmtReturnedBy_R668) {
		backPointer_ReturnedByReturnStmtReturnedBy_R668 = null;
	}
}

public static Value_c getOneV_VALOnR668(ReturnStmt_c [] targets)
{
    return getOneV_VALOnR668(targets, null);
}

public static Value_c getOneV_VALOnR668(ReturnStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR668(targets, test, true);
}

public static Value_c getOneV_VALOnR668(ReturnStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR668(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR668(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR668(ReturnStmt_c target)
{
	return getOneV_VALOnR668(target, true);
}
public static Value_c getOneV_VALOnR668(ReturnStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR668(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c [] targets)
{
  return getManyV_VALsOnR668(targets, null);
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ReturnStmt_c [] targetArray = new ReturnStmt_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR668(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR668(target, null, true);
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c target)
{
    return getManyV_VALsOnR668(target, null, true);
}

public static Value_c [] getManyV_VALsOnR668(ReturnStmt_c target, boolean loadComponent)
{
    return getManyV_VALsOnR668(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<SignalInvocation_c> backPointer_IsTargetOfSignalInvocationIsTargetOf_R630 = new ArrayList<SignalInvocation_c>();

public void setSignalInvocationOrderInChildListR630(SignalInvocation_c target, int index) {
	unrelateAcrossR630From(target);
	SignalInvocation_c[] elements = SignalInvocation_c.getManyACT_SGNsOnR630(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR630From((SignalInvocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR630To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR630To((SignalInvocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR630To(SignalInvocation_c target)
{
  if (target != null) {
    target.relateAcrossR630To(this, true) ;
  }
}

public void relateAcrossR630To(SignalInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR630To(this, notifyChanges) ;
  }
}

public void setBackPointerR630To(SignalInvocation_c target)
{
  	synchronized (backPointer_IsTargetOfSignalInvocationIsTargetOf_R630) {
		backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.add(target);
	}
}

public void unrelateAcrossR630From(SignalInvocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR630From(this, true) ;
  }
}

public void unrelateAcrossR630From(SignalInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR630From(this, notifyChanges) ;
  }
}

public void clearBackPointerR630To(SignalInvocation_c target)
{
  synchronized (backPointer_IsTargetOfSignalInvocationIsTargetOf_R630) {
	    backPointer_IsTargetOfSignalInvocationIsTargetOf_R630.remove(target);
	}
}

public static Value_c getOneV_VALOnR630(SignalInvocation_c [] targets)
{
    return getOneV_VALOnR630(targets, null);
}

public static Value_c getOneV_VALOnR630(SignalInvocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR630(targets, test, true);
}

public static Value_c getOneV_VALOnR630(SignalInvocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR630(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR630(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR630(SignalInvocation_c target)
{
	return getOneV_VALOnR630(target, true);
}
public static Value_c getOneV_VALOnR630(SignalInvocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasTargetValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR630(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasTargetValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c [] targets)
{
  return getManyV_VALsOnR630(targets, null);
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    SignalInvocation_c [] targetArray = new SignalInvocation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR630(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR630(target, null, true);
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c target)
{
    return getManyV_VALsOnR630(target, null, true);
}

public static Value_c [] getManyV_VALsOnR630(SignalInvocation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR630(target, null, loadComponent);
}


    
  
  
// referred to navigation

ArrayList<InterfaceOperationInvocation_c> backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629 = new ArrayList<InterfaceOperationInvocation_c>();

public void setInterfaceOperationInvocationOrderInChildListR629(InterfaceOperationInvocation_c target, int index) {
	unrelateAcrossR629From(target);
	InterfaceOperationInvocation_c[] elements = InterfaceOperationInvocation_c.getManyACT_IOPsOnR629(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR629From((InterfaceOperationInvocation_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR629To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR629To((InterfaceOperationInvocation_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR629To(InterfaceOperationInvocation_c target)
{
  if (target != null) {
    target.relateAcrossR629To(this, true) ;
  }
}

public void relateAcrossR629To(InterfaceOperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR629To(this, notifyChanges) ;
  }
}

public void setBackPointerR629To(InterfaceOperationInvocation_c target)
{
  	synchronized (backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629) {
		backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.add(target);
	}
}

public void unrelateAcrossR629From(InterfaceOperationInvocation_c target)
{
  if (target != null) {
    target.unrelateAcrossR629From(this, true) ;
  }
}

public void unrelateAcrossR629From(InterfaceOperationInvocation_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR629From(this, notifyChanges) ;
  }
}

public void clearBackPointerR629To(InterfaceOperationInvocation_c target)
{
  synchronized (backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629) {
	    backPointer_IsTargetOfInterfaceOperationInvocationIsTargetOf_R629.remove(target);
	}
}

public static Value_c getOneV_VALOnR629(InterfaceOperationInvocation_c [] targets)
{
    return getOneV_VALOnR629(targets, null);
}

public static Value_c getOneV_VALOnR629(InterfaceOperationInvocation_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR629(targets, test, true);
}

public static Value_c getOneV_VALOnR629(InterfaceOperationInvocation_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR629(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR629(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR629(InterfaceOperationInvocation_c target)
{
	return getOneV_VALOnR629(target, true);
}
public static Value_c getOneV_VALOnR629(InterfaceOperationInvocation_c target, boolean loadComponent)
{
  if (target != null) {
    return target.HasTargetValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR629(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].HasTargetValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c [] targets)
{
  return getManyV_VALsOnR629(targets, null);
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    InterfaceOperationInvocation_c [] targetArray = new InterfaceOperationInvocation_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR629(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR629(target, null, true);
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c target)
{
    return getManyV_VALsOnR629(target, null, true);
}

public static Value_c [] getManyV_VALsOnR629(InterfaceOperationInvocation_c target, boolean loadComponent)
{
    return getManyV_VALsOnR629(target, null, loadComponent);
}


    
  
  
// referred to navigation

AssignToMember_c backPointer_AssignToMember_R609;

public void setAssignToMemberOrderInChildListR609(AssignToMember_c target, int index) {
	unrelateAcrossR609From(target);
	AssignToMember_c[] elements = AssignToMember_c.getManyACT_AIsOnR609(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR609From((AssignToMember_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR609To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR609To((AssignToMember_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR609To(AssignToMember_c target)
{
  if (target != null) {
    target.relateAcrossR609To(this, true) ;
  }
}

public void relateAcrossR609To(AssignToMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR609To(this, notifyChanges) ;
  }
}

public void setBackPointerR609To(AssignToMember_c target)
{
    backPointer_AssignToMember_R609 = target;
}

public void unrelateAcrossR609From(AssignToMember_c target)
{
  if (target != null) {
    target.unrelateAcrossR609From(this, true) ;
  }
}

public void unrelateAcrossR609From(AssignToMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR609From(this, notifyChanges) ;
  }
}

public void clearBackPointerR609To(AssignToMember_c target)
{
	if (target == backPointer_AssignToMember_R609) {
		backPointer_AssignToMember_R609 = null;
	}
}

public static Value_c getOneV_VALOnR609(AssignToMember_c [] targets)
{
    return getOneV_VALOnR609(targets, null);
}

public static Value_c getOneV_VALOnR609(AssignToMember_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR609(targets, test, true);
}

public static Value_c getOneV_VALOnR609(AssignToMember_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR609(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR609(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR609(AssignToMember_c target)
{
	return getOneV_VALOnR609(target, true);
}
public static Value_c getOneV_VALOnR609(AssignToMember_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ReadsValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR609(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].ReadsValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c [] targets)
{
  return getManyV_VALsOnR609(targets, null);
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AssignToMember_c [] targetArray = new AssignToMember_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR609(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR609(target, null, true);
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c target)
{
    return getManyV_VALsOnR609(target, null, true);
}

public static Value_c [] getManyV_VALsOnR609(AssignToMember_c target, boolean loadComponent)
{
    return getManyV_VALsOnR609(target, null, loadComponent);
}


    
  
  
// referred to navigation

AssignToMember_c backPointer_AssignToMember_R689;

public void setAssignToMemberOrderInChildListR689(AssignToMember_c target, int index) {
	unrelateAcrossR689From(target);
	AssignToMember_c[] elements = AssignToMember_c.getManyACT_AIsOnR689(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR689From((AssignToMember_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR689To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR689To((AssignToMember_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR689To(AssignToMember_c target)
{
  if (target != null) {
    target.relateAcrossR689To(this, true) ;
  }
}

public void relateAcrossR689To(AssignToMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR689To(this, notifyChanges) ;
  }
}

public void setBackPointerR689To(AssignToMember_c target)
{
    backPointer_AssignToMember_R689 = target;
}

public void unrelateAcrossR689From(AssignToMember_c target)
{
  if (target != null) {
    target.unrelateAcrossR689From(this, true) ;
  }
}

public void unrelateAcrossR689From(AssignToMember_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR689From(this, notifyChanges) ;
  }
}

public void clearBackPointerR689To(AssignToMember_c target)
{
	if (target == backPointer_AssignToMember_R689) {
		backPointer_AssignToMember_R689 = null;
	}
}

public static Value_c getOneV_VALOnR689(AssignToMember_c [] targets)
{
    return getOneV_VALOnR689(targets, null);
}

public static Value_c getOneV_VALOnR689(AssignToMember_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR689(targets, test, true);
}

public static Value_c getOneV_VALOnR689(AssignToMember_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR689(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR689(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR689(AssignToMember_c target)
{
	return getOneV_VALOnR689(target, true);
}
public static Value_c getOneV_VALOnR689(AssignToMember_c target, boolean loadComponent)
{
  if (target != null) {
    return target.WritesValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR689(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].WritesValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c [] targets)
{
  return getManyV_VALsOnR689(targets, null);
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    AssignToMember_c [] targetArray = new AssignToMember_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR689(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR689(target, null, true);
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c target)
{
    return getManyV_VALsOnR689(target, null, true);
}

public static Value_c [] getManyV_VALsOnR689(AssignToMember_c target, boolean loadComponent)
{
    return getManyV_VALsOnR689(target, null, loadComponent);
}


    
  
  
// referred to navigation

GeneratePreexistingEvent_c backPointer_HoldsEventToBeGeneratedByGeneratePreexistingEventHoldsEventToBeGeneratedBy_R714;

public void setGeneratePreexistingEventOrderInChildListR714(GeneratePreexistingEvent_c target, int index) {
	unrelateAcrossR714From(target);
	GeneratePreexistingEvent_c[] elements = GeneratePreexistingEvent_c.getManyE_GPRsOnR714(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR714From((GeneratePreexistingEvent_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR714To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR714To((GeneratePreexistingEvent_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR714To(GeneratePreexistingEvent_c target)
{
  if (target != null) {
    target.relateAcrossR714To(this, true) ;
  }
}

public void relateAcrossR714To(GeneratePreexistingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR714To(this, notifyChanges) ;
  }
}

public void setBackPointerR714To(GeneratePreexistingEvent_c target)
{
    backPointer_HoldsEventToBeGeneratedByGeneratePreexistingEventHoldsEventToBeGeneratedBy_R714 = target;
}

public void unrelateAcrossR714From(GeneratePreexistingEvent_c target)
{
  if (target != null) {
    target.unrelateAcrossR714From(this, true) ;
  }
}

public void unrelateAcrossR714From(GeneratePreexistingEvent_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR714From(this, notifyChanges) ;
  }
}

public void clearBackPointerR714To(GeneratePreexistingEvent_c target)
{
	if (target == backPointer_HoldsEventToBeGeneratedByGeneratePreexistingEventHoldsEventToBeGeneratedBy_R714) {
		backPointer_HoldsEventToBeGeneratedByGeneratePreexistingEventHoldsEventToBeGeneratedBy_R714 = null;
	}
}

public static Value_c getOneV_VALOnR714(GeneratePreexistingEvent_c [] targets)
{
    return getOneV_VALOnR714(targets, null);
}

public static Value_c getOneV_VALOnR714(GeneratePreexistingEvent_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR714(targets, test, true);
}

public static Value_c getOneV_VALOnR714(GeneratePreexistingEvent_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR714(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR714(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR714(GeneratePreexistingEvent_c target)
{
	return getOneV_VALOnR714(target, true);
}
public static Value_c getOneV_VALOnR714(GeneratePreexistingEvent_c target, boolean loadComponent)
{
  if (target != null) {
    return target.GeneratesEventHeldByValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR714(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].GeneratesEventHeldByValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c [] targets)
{
  return getManyV_VALsOnR714(targets, null);
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    GeneratePreexistingEvent_c [] targetArray = new GeneratePreexistingEvent_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR714(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR714(target, null, true);
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c target)
{
    return getManyV_VALsOnR714(target, null, true);
}

public static Value_c [] getManyV_VALsOnR714(GeneratePreexistingEvent_c target, boolean loadComponent)
{
    return getManyV_VALsOnR714(target, null, loadComponent);
}


    
  
  
// referred to navigation

WhileStmt_c backPointer_WhileStmt_R626;

public void setWhileStmtOrderInChildListR626(WhileStmt_c target, int index) {
	unrelateAcrossR626From(target);
	WhileStmt_c[] elements = WhileStmt_c.getManyACT_WHLsOnR626(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR626From((WhileStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR626To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR626To((WhileStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR626To(WhileStmt_c target)
{
  if (target != null) {
    target.relateAcrossR626To(this, true) ;
  }
}

public void relateAcrossR626To(WhileStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR626To(this, notifyChanges) ;
  }
}

public void setBackPointerR626To(WhileStmt_c target)
{
    backPointer_WhileStmt_R626 = target;
}

public void unrelateAcrossR626From(WhileStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR626From(this, true) ;
  }
}

public void unrelateAcrossR626From(WhileStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR626From(this, notifyChanges) ;
  }
}

public void clearBackPointerR626To(WhileStmt_c target)
{
	if (target == backPointer_WhileStmt_R626) {
		backPointer_WhileStmt_R626 = null;
	}
}

public static Value_c getOneV_VALOnR626(WhileStmt_c [] targets)
{
    return getOneV_VALOnR626(targets, null);
}

public static Value_c getOneV_VALOnR626(WhileStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR626(targets, test, true);
}

public static Value_c getOneV_VALOnR626(WhileStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR626(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR626(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR626(WhileStmt_c target)
{
	return getOneV_VALOnR626(target, true);
}
public static Value_c getOneV_VALOnR626(WhileStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.ContinueResultValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR626(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].ContinueResultValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c [] targets)
{
  return getManyV_VALsOnR626(targets, null);
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    WhileStmt_c [] targetArray = new WhileStmt_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR626(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR626(target, null, true);
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c target)
{
    return getManyV_VALsOnR626(target, null, true);
}

public static Value_c [] getManyV_VALsOnR626(WhileStmt_c target, boolean loadComponent)
{
    return getManyV_VALsOnR626(target, null, loadComponent);
}


    
  
  
// referred to navigation

IfStmt_c backPointer_IfStmt_R625;

public void setIfStmtOrderInChildListR625(IfStmt_c target, int index) {
	unrelateAcrossR625From(target);
	IfStmt_c[] elements = IfStmt_c.getManyACT_IFsOnR625(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR625From((IfStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR625To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR625To((IfStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR625To(IfStmt_c target)
{
  if (target != null) {
    target.relateAcrossR625To(this, true) ;
  }
}

public void relateAcrossR625To(IfStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR625To(this, notifyChanges) ;
  }
}

public void setBackPointerR625To(IfStmt_c target)
{
    backPointer_IfStmt_R625 = target;
}

public void unrelateAcrossR625From(IfStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR625From(this, true) ;
  }
}

public void unrelateAcrossR625From(IfStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR625From(this, notifyChanges) ;
  }
}

public void clearBackPointerR625To(IfStmt_c target)
{
	if (target == backPointer_IfStmt_R625) {
		backPointer_IfStmt_R625 = null;
	}
}

public static Value_c getOneV_VALOnR625(IfStmt_c [] targets)
{
    return getOneV_VALOnR625(targets, null);
}

public static Value_c getOneV_VALOnR625(IfStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR625(targets, test, true);
}

public static Value_c getOneV_VALOnR625(IfStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR625(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR625(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR625(IfStmt_c target)
{
	return getOneV_VALOnR625(target, true);
}
public static Value_c getOneV_VALOnR625(IfStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.TestResultValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR625(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].TestResultValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c [] targets)
{
  return getManyV_VALsOnR625(targets, null);
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    IfStmt_c [] targetArray = new IfStmt_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR625(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR625(target, null, true);
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c target)
{
    return getManyV_VALsOnR625(target, null, true);
}

public static Value_c [] getManyV_VALsOnR625(IfStmt_c target, boolean loadComponent)
{
    return getManyV_VALsOnR625(target, null, loadComponent);
}


    
  
  
// referred to navigation

ElseifStmt_c backPointer_ElseifStmt_R659;

public void setElseifStmtOrderInChildListR659(ElseifStmt_c target, int index) {
	unrelateAcrossR659From(target);
	ElseifStmt_c[] elements = ElseifStmt_c.getManyACT_ELsOnR659(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR659From((ElseifStmt_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR659To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR659To((ElseifStmt_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR659To(ElseifStmt_c target)
{
  if (target != null) {
    target.relateAcrossR659To(this, true) ;
  }
}

public void relateAcrossR659To(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR659To(this, notifyChanges) ;
  }
}

public void setBackPointerR659To(ElseifStmt_c target)
{
    backPointer_ElseifStmt_R659 = target;
}

public void unrelateAcrossR659From(ElseifStmt_c target)
{
  if (target != null) {
    target.unrelateAcrossR659From(this, true) ;
  }
}

public void unrelateAcrossR659From(ElseifStmt_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR659From(this, notifyChanges) ;
  }
}

public void clearBackPointerR659To(ElseifStmt_c target)
{
	if (target == backPointer_ElseifStmt_R659) {
		backPointer_ElseifStmt_R659 = null;
	}
}

public static Value_c getOneV_VALOnR659(ElseifStmt_c [] targets)
{
    return getOneV_VALOnR659(targets, null);
}

public static Value_c getOneV_VALOnR659(ElseifStmt_c [] targets, ClassQueryInterface_c test)
{
    return getOneV_VALOnR659(targets, test, true);
}

public static Value_c getOneV_VALOnR659(ElseifStmt_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Value_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Value_c candidate_val = getOneV_VALOnR659(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneV_VALOnR659(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Value_c getOneV_VALOnR659(ElseifStmt_c target)
{
	return getOneV_VALOnR659(target, true);
}
public static Value_c getOneV_VALOnR659(ElseifStmt_c target, boolean loadComponent)
{
  if (target != null) {
    return target.TestResultValue ;
  } else {
    return null;
  }
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyV_VALsOnR659(targets, test, true);
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Value_c[0];
  
  
  LinkedHashSet<Value_c> elementsSet = new LinkedHashSet<Value_c>();
  for (int i = 0; i < targets.length; i++) {
    Value_c associate = targets[i].TestResultValue;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Value_c[] result = new Value_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c [] targets)
{
  return getManyV_VALsOnR659(targets, null);
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    ElseifStmt_c [] targetArray = new ElseifStmt_c[1];
    targetArray[0] = target;
    return getManyV_VALsOnR659(targetArray, test, loadComponent);
  } else {
    Value_c [] result = new Value_c [0] ;
    return result ;
  }
  
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c target,
    ClassQueryInterface_c test)
{
    return getManyV_VALsOnR659(target, null, true);
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c target)
{
    return getManyV_VALsOnR659(target, null, true);
}

public static Value_c [] getManyV_VALsOnR659(ElseifStmt_c target, boolean loadComponent)
{
    return getManyV_VALsOnR659(target, null, loadComponent);
}


      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
        InstanceList instances=null;
        ModelRoot baseRoot = modelRoot;

	if (HasTypeDataType == null) {          
      // R820
      DataType_c relInst37835 = (DataType_c) baseRoot.getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37835 == null) {
      			relInst37835 = (DataType_c) Ooaofooa.getDefaultInstance().getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
      		}
			if (relInst37835 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37835 = (DataType_c) roots[i].getInstanceList(DataType_c.class).get(new Object[] {m_dt_id});
					if (relInst37835 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37835 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37835) && !isProxy())) {
	      relInst37835.relateAcrossR820To(this, notifyChanges);
	  }
	  }
	}
	          

	if (HasScopeBlock == null) {          
      // R826
      Block_c relInst37836 = (Block_c) baseRoot.getInstanceList(Block_c.class).get(new Object[] {m_block_id});
            // if there was no local element, check for any global elements
            // failing that proceed to check other model roots
      		if (relInst37836 == null) {
      			relInst37836 = (Block_c) Ooaofooa.getDefaultInstance().getInstanceList(Block_c.class).get(new Object[] {m_block_id});
      		}
			if (relInst37836 == null && searchAllRoots && !baseRoot.isCompareRoot()) {
				Ooaofooa[] roots = Ooaofooa.getInstances();
				for (int i = 0; i < roots.length; i++) {
				    if(roots[i].isCompareRoot()) {
				         // never use elements from any compare root
				         continue;
				    }
					relInst37836 = (Block_c) roots[i].getInstanceList(Block_c.class).get(new Object[] {m_block_id});
					if (relInst37836 != null)
						break;
				}
			}
			//synchronized
      if ( relInst37836 != null )
      {
          if (relateProxies || !isProxy() || (inSameComponent(this, relInst37836) && !isProxy())) {
	      relInst37836.relateAcrossR826To(this, notifyChanges);
	  }
	  }
	}
	          
	}
  public void batchUnrelate(boolean notifyChanges)
  {
		NonRootModelElement inst=null;
      // R820
      // S_DT
		  inst=HasTypeDataType;
			unrelateAcrossR820From(HasTypeDataType, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
      // R826
      // ACT_BLK
		  inst=HasScopeBlock;
			unrelateAcrossR826From(HasScopeBlock, notifyChanges);
          if ( inst != null ) {
			   inst.removeRef();
	      }
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Value_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Value_c inst = (Value_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Value_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Value_c ValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Value_c result=findValueInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Value_c findValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Value_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Value_c x = (Value_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Value_c ValueInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return ValueInstance(modelRoot,test,true);
  }
  
  public static Value_c ValueInstance(ModelRoot modelRoot)
  {
	 return ValueInstance(modelRoot,null,true);
  }

  public static Value_c [] ValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Value_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Value_c x = (Value_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Value_c[] ret_set = new Value_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Value_c[0];
			}		
		} 
  }
  public static Value_c [] ValueInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  ValueInstances(modelRoot,test,true);
  }
  public static Value_c [] ValueInstances(ModelRoot modelRoot)
  {
	return ValueInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the Value.dispose call: ";
	ActualParameter_c testR800Inst = ActualParameter_c.getOneV_PAROnR800(this, false);

	if ( testR800Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "800 ";	
	}
	UnaryOperation_c testR804Inst = UnaryOperation_c.getOneV_UNYOnR804(this, false);

	if ( testR804Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "804 ";	
	}
	BinaryOperation_c testR803Inst = BinaryOperation_c.getOneV_BINOnR803(this, false);

	if ( testR803Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "803 ";	
	}
	BinaryOperation_c testR802Inst = BinaryOperation_c.getOneV_BINOnR802(this, false);

	if ( testR802Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "802 ";	
	}
	FunctionValue_c testR801Inst1 = FunctionValue_c.getOneV_FNVOnR801(this, false);

	if ( testR801Inst1 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	ParameterValue_c testR801Inst2 = ParameterValue_c.getOneV_PVLOnR801(this, false);

	if ( testR801Inst2 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	SelectedReference_c testR801Inst3 = SelectedReference_c.getOneV_SLROnR801(this, false);

	if ( testR801Inst3 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	BridgeValue_c testR801Inst4 = BridgeValue_c.getOneV_BRVOnR801(this, false);

	if ( testR801Inst4 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	InstanceReference_c testR801Inst5 = InstanceReference_c.getOneV_IRFOnR801(this, false);

	if ( testR801Inst5 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	AttributeValueReference_c testR801Inst6 = AttributeValueReference_c.getOneV_AVLOnR801(this, false);

	if ( testR801Inst6 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	LiteralInteger_c testR801Inst7 = LiteralInteger_c.getOneV_LINOnR801(this, false);

	if ( testR801Inst7 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	LiteralString_c testR801Inst8 = LiteralString_c.getOneV_LSTOnR801(this, false);

	if ( testR801Inst8 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	UnaryOperation_c testR801Inst9 = UnaryOperation_c.getOneV_UNYOnR801(this, false);

	if ( testR801Inst9 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	OperationValue_c testR801Inst10 = OperationValue_c.getOneV_TRVOnR801(this, false);

	if ( testR801Inst10 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	InstanceSetReference_c testR801Inst11 = InstanceSetReference_c.getOneV_ISROnR801(this, false);

	if ( testR801Inst11 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	EventDatumValue_c testR801Inst12 = EventDatumValue_c.getOneV_EDVOnR801(this, false);

	if ( testR801Inst12 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	TransientValueReference_c testR801Inst13 = TransientValueReference_c.getOneV_TVLOnR801(this, false);

	if ( testR801Inst13 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	LiteralReal_c testR801Inst14 = LiteralReal_c.getOneV_LRLOnR801(this, false);

	if ( testR801Inst14 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	LiteralBoolean_c testR801Inst15 = LiteralBoolean_c.getOneV_LBOOnR801(this, false);

	if ( testR801Inst15 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	BinaryOperation_c testR801Inst16 = BinaryOperation_c.getOneV_BINOnR801(this, false);

	if ( testR801Inst16 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	LiteralEnumerator_c testR801Inst17 = LiteralEnumerator_c.getOneV_LENOnR801(this, false);

	if ( testR801Inst17 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	MemberValueReference_c testR801Inst18 = MemberValueReference_c.getOneV_MVLOnR801(this, false);

	if ( testR801Inst18 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	ArrayElementReference_c testR801Inst19 = ArrayElementReference_c.getOneV_AEROnR801(this, false);

	if ( testR801Inst19 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	ArrayLengthValue_c testR801Inst20 = ArrayLengthValue_c.getOneV_ALVOnR801(this, false);

	if ( testR801Inst20 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	MessageValue_c testR801Inst21 = MessageValue_c.getOneV_MSVOnR801(this, false);

	if ( testR801Inst21 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	SymbolicConstantValue_c testR801Inst22 = SymbolicConstantValue_c.getOneV_SCVOnR801(this, false);

	if ( testR801Inst22 != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "801 ";
	}
	DataType_c testR820Inst = DataType_c.getOneS_DTOnR820(this, false);

	if ( testR820Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "820 ";
	}
	Block_c testR826Inst = Block_c.getOneACT_BLKOnR826(this, false);

	if ( testR826Inst != null )
	{
   	delete_error = true;	        
	errorMsg = errorMsg + "826 ";
	}
	MemberValueReference_c testR837Inst = MemberValueReference_c.getOneV_MVLOnR837(this, false);

	if ( testR837Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "837 ";	
	}
	AttributeValueReference_c testR807Inst = AttributeValueReference_c.getOneV_AVLOnR807(this, false);

	if ( testR807Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "807 ";	
	}
	ArrayElementReference_c testR838Inst = ArrayElementReference_c.getOneV_AEROnR838(this, false);

	if ( testR838Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "838 ";	
	}
	ArrayElementReference_c testR839Inst = ArrayElementReference_c.getOneV_AEROnR839(this, false);

	if ( testR839Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "839 ";	
	}
	ArrayLengthValue_c testR840Inst = ArrayLengthValue_c.getOneV_ALVOnR840(this, false);

	if ( testR840Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "840 ";	
	}
	MessageValue_c testR851Inst = MessageValue_c.getOneV_MSVOnR851(this, false);

	if ( testR851Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "851 ";	
	}
	SelectFromInstancesWhere_c testR610Inst = SelectFromInstancesWhere_c.getOneACT_FIWOnR610(this, false);

	if ( testR610Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "610 ";	
	}
	SelectRelatedWhere_c testR611Inst = SelectRelatedWhere_c.getOneACT_SRWOnR611(this, false);

	if ( testR611Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "611 ";	
	}
	Select_c testR613Inst = Select_c.getOneACT_SELOnR613(this, false);

	if ( testR613Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "613 ";	
	}
	ReturnStmt_c testR668Inst = ReturnStmt_c.getOneACT_RETOnR668(this, false);

	if ( testR668Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "668 ";	
	}
	SignalInvocation_c testR630Inst = SignalInvocation_c.getOneACT_SGNOnR630(this, false);

	if ( testR630Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "630 ";	
	}
	InterfaceOperationInvocation_c testR629Inst = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(this, false);

	if ( testR629Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "629 ";	
	}
	AssignToMember_c testR609Inst = AssignToMember_c.getOneACT_AIOnR609(this, false);

	if ( testR609Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "609 ";	
	}
	AssignToMember_c testR689Inst = AssignToMember_c.getOneACT_AIOnR689(this, false);

	if ( testR689Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "689 ";	
	}
	GeneratePreexistingEvent_c testR714Inst = GeneratePreexistingEvent_c.getOneE_GPROnR714(this, false);

	if ( testR714Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "714 ";	
	}
	WhileStmt_c testR626Inst = WhileStmt_c.getOneACT_WHLOnR626(this, false);

	if ( testR626Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "626 ";	
	}
	IfStmt_c testR625Inst = IfStmt_c.getOneACT_IFOnR625(this, false);

	if ( testR625Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "625 ";	
	}
	ElseifStmt_c testR659Inst = ElseifStmt_c.getOneACT_ELOnR659(this, false);

	if ( testR659Inst != null )
	{
	delete_error = true;
	errorMsg = errorMsg + "659 ";	
	}
	if(delete_error == true) {

		if(CorePlugin.getDefault().isDebugging()) {
			Ooaofooa.log.println(ILogger.DELETE, "Value", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CorePlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

	/**
	 * Assigns IDs to instances of this class.
	 */
    private static IdAssigner idAssigner = new IdAssigner();
    
	/**
	 * See field.
	 */
    public IdAssigner getIdAssigner() {return idAssigner;}

	/**
	 * See field.
	 */
    public static IdAssigner getIdAssigner_() {return idAssigner;}
  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      if(attributeName.equals("value_id")){
         return true;
      }
      if(attributeName.equals("block_id")){
         return true;
      }
      if(attributeName.equals("dt_id")){
         return true;
      }
      return false;      
  }      
  // declare attribute accessors
  public long getValue_idLongBased()
  {
    if(m_value_idLongBased == 0 && !IdAssigner.NULL_UUID.equals(m_value_id)){
    	return 0xfffffff & m_value_id.getLeastSignificantBits();
    }
    return m_value_idLongBased ;
  }
  public java.util.UUID getValue_id()
  {
    return m_value_id ;
  }


  public void setValue_id(java.util.UUID newValue)
  {
   m_value_id = IdAssigner.preprocessUUID(newValue);
  }
  public long getBlock_idLongBased()
  {
    if ( HasScopeBlock != null )
    {
      return HasScopeBlock.getBlock_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getBlock_id()
  {
    if ( HasScopeBlock != null )
    {
      return HasScopeBlock.getBlock_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getBlock_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_block_id) )
      return m_block_id;
    else
      return getBlock_id();
  }
  
  public void setBlock_id(java.util.UUID newValue)
  {
   m_block_id = IdAssigner.preprocessUUID(newValue);
  }
  public int getLinenumber()
  {
    return m_linenumber ;
  }


  public void setLinenumber(int newValue)
  {
   m_linenumber = newValue ;
  }
  public int getStartposition()
  {
    return m_startposition ;
  }


  public void setStartposition(int newValue)
  {
   m_startposition = newValue ;
  }
  public int getEndposition()
  {
    return m_endposition ;
  }


  public void setEndposition(int newValue)
  {
   m_endposition = newValue ;
  }
  public int getFirstparameterlabellinenumber()
  {
    return m_firstparameterlabellinenumber ;
  }


  public void setFirstparameterlabellinenumber(int newValue)
  {
   m_firstparameterlabellinenumber = newValue ;
  }
  public int getFirstparameterlabelcolumn()
  {
    return m_firstparameterlabelcolumn ;
  }


  public void setFirstparameterlabelcolumn(int newValue)
  {
   m_firstparameterlabelcolumn = newValue ;
  }
  public int getCurrentlaterparameterlabellinenumber()
  {
    return m_currentlaterparameterlabellinenumber ;
  }


  public void setCurrentlaterparameterlabellinenumber(int newValue)
  {
   m_currentlaterparameterlabellinenumber = newValue ;
  }
  public int getCurrentlaterparameterlabelcolumn()
  {
    return m_currentlaterparameterlabelcolumn ;
  }


  public void setCurrentlaterparameterlabelcolumn(int newValue)
  {
   m_currentlaterparameterlabelcolumn = newValue ;
  }
  public boolean getIslvalue()
  {
    return m_islvalue ;
  }


  public void setIslvalue(boolean newValue)
  {
   m_islvalue = newValue ;
  }
  public boolean getIsimplicit()
  {
    return m_isimplicit ;
  }


  public void setIsimplicit(boolean newValue)
  {
   m_isimplicit = newValue ;
  }
  public String getText()
  {
    return m_text ;
  }


  public void setText(String newValue)
  {
   m_text = newValue ;
  }
  public long getDt_idLongBased()
  {
    if ( HasTypeDataType != null )
    {
      return HasTypeDataType.getDt_idLongBased();
    }
    return 0;  
  }          
  public java.util.UUID getDt_id()
  {
    if ( HasTypeDataType != null )
    {
      return HasTypeDataType.getDt_id();
    }
    return IdAssigner.NULL_UUID;
  }


  public java.util.UUID getDt_idCachedValue()
  {
    if ( !IdAssigner.NULL_UUID.equals(m_dt_id) )
      return m_dt_id;
    else
      return getDt_id();
  }
  
  public void setDt_id(java.util.UUID newValue)
  {
   m_dt_id = IdAssigner.preprocessUUID(newValue);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Value", //$NON-NLS-1$
	  " Operation entered: Value::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Value_c [] objs = Value_c.ValueInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "Value", //$NON-NLS-1$
	  " Operation entered: Value::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Value_c_test37838_c implements ClassQueryInterface_c
    {
	  Value_c_test37838_c( java.util.UUID            p37839 ) {
	  m_p37839 = p37839;
	  }
	  private java.util.UUID             m_p37839; 
	  public boolean evaluate (Object candidate)
	  {
	      Value_c selected = (Value_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37839));
	      return retval;
	  }
    }

    Value_c [] objs37837 = 
    Value_c.ValueInstances(modelRoot, new Value_c_test37838_c(getValue_id())) ;

    if ( (  (objs37837.length) == 0) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37837.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37837.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs37837.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37837.length )  + " Value_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37837.length )  + " Value_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Value is a referring class in association: rel.Numb = 826
          // The participating class is: Block
    class Block_c_test37843_c implements ClassQueryInterface_c
    {
	  Block_c_test37843_c( java.util.UUID            p37844 ) {
	  m_p37844 = p37844;
	  }
	  private java.util.UUID             m_p37844; 
	  public boolean evaluate (Object candidate)
	  {
	      Block_c selected = (Block_c) candidate;
	      boolean retval = false;
	      retval = (selected.getBlock_id().equals(m_p37844));
	      return retval;
	  }
    }

    Block_c [] objs37842 = 
    Block_c.BlockInstances(modelRoot, new Block_c_test37843_c(getBlock_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs37842.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 826: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37842.length )  + " Block_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 826: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37842.length )  + " Block_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Value is a referring class in association: rel.Numb = 820
          // The participating class is: Data Type
    class DataType_c_test37846_c implements ClassQueryInterface_c
    {
	  DataType_c_test37846_c( java.util.UUID            p37847 ) {
	  m_p37847 = p37847;
	  }
	  private java.util.UUID             m_p37847; 
	  public boolean evaluate (Object candidate)
	  {
	      DataType_c selected = (DataType_c) candidate;
	      boolean retval = false;
	      retval = (selected.getDt_id().equals(m_p37847));
	      return retval;
	  }
    }

    DataType_c [] objs37845 = 
    DataType_c.DataTypeInstances(modelRoot, new DataType_c_test37846_c(getDt_id())) ;

          // The participant is unconditional
          // The multiplicity of the participant is one
    if ( (  (objs37845.length) != 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 820: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs37845.length )  + " DT_ID: " + "Not Printable" ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 820: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37845.length )  + " DT_ID: " + "Not Printable" , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 800
             // Object: Actual Parameter
    class ActualParameter_c_test37849_c implements ClassQueryInterface_c
    {
	  ActualParameter_c_test37849_c( java.util.UUID            p37850 ) {
	  m_p37850 = p37850;
	  }
	  private java.util.UUID             m_p37850; 
	  public boolean evaluate (Object candidate)
	  {
	      ActualParameter_c selected = (ActualParameter_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37850));
	      return retval;
	  }
    }

    ActualParameter_c [] objs37848 = 
    ActualParameter_c.ActualParameterInstances(modelRoot, new ActualParameter_c_test37849_c(getValue_id())) ;

    if ( (  (objs37848.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 800: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37848.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 800: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37848.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 804
             // Object: Unary Operation
    class UnaryOperation_c_test37852_c implements ClassQueryInterface_c
    {
	  UnaryOperation_c_test37852_c( java.util.UUID            p37853 ) {
	  m_p37853 = p37853;
	  }
	  private java.util.UUID             m_p37853; 
	  public boolean evaluate (Object candidate)
	  {
	      UnaryOperation_c selected = (UnaryOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getOperand_value_id().equals(m_p37853));
	      return retval;
	  }
    }

    UnaryOperation_c [] objs37851 = 
    UnaryOperation_c.UnaryOperationInstances(modelRoot, new UnaryOperation_c_test37852_c(getValue_id())) ;

    if ( (  (objs37851.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 804: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37851.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 804: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37851.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 803
             // Object: Binary Operation
    class BinaryOperation_c_test37855_c implements ClassQueryInterface_c
    {
	  BinaryOperation_c_test37855_c( java.util.UUID            p37856 ) {
	  m_p37856 = p37856;
	  }
	  private java.util.UUID             m_p37856; 
	  public boolean evaluate (Object candidate)
	  {
	      BinaryOperation_c selected = (BinaryOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRight_value_id().equals(m_p37856));
	      return retval;
	  }
    }

    BinaryOperation_c [] objs37854 = 
    BinaryOperation_c.BinaryOperationInstances(modelRoot, new BinaryOperation_c_test37855_c(getValue_id())) ;

    if ( (  (objs37854.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 803: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37854.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 803: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37854.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 802
             // Object: Binary Operation
    class BinaryOperation_c_test37858_c implements ClassQueryInterface_c
    {
	  BinaryOperation_c_test37858_c( java.util.UUID            p37859 ) {
	  m_p37859 = p37859;
	  }
	  private java.util.UUID             m_p37859; 
	  public boolean evaluate (Object candidate)
	  {
	      BinaryOperation_c selected = (BinaryOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getLeft_value_id().equals(m_p37859));
	      return retval;
	  }
    }

    BinaryOperation_c [] objs37857 = 
    BinaryOperation_c.BinaryOperationInstances(modelRoot, new BinaryOperation_c_test37858_c(getValue_id())) ;

    if ( (  (objs37857.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 802: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37857.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 802: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37857.length )  , e); 
      }
      retval = false;

    }

          // Supertype: rel.Numb = 801
    int objs37860 = 0;
            // Subtype Object: Function Value
    class FunctionValue_c_test37861_c implements ClassQueryInterface_c
    {
	  FunctionValue_c_test37861_c( java.util.UUID            p37862 ) {
	  m_p37862 = p37862;
	  }
	  private java.util.UUID             m_p37862; 
	  public boolean evaluate (Object candidate)
	  {
	      FunctionValue_c selected = (FunctionValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37862));
	      return retval;
	  }
    }

    FunctionValue_c [] objs37863 = 
    FunctionValue_c.FunctionValueInstances(modelRoot, new FunctionValue_c_test37861_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37863.length;
            // Subtype Object: Parameter Value
    class ParameterValue_c_test37864_c implements ClassQueryInterface_c
    {
	  ParameterValue_c_test37864_c( java.util.UUID            p37865 ) {
	  m_p37865 = p37865;
	  }
	  private java.util.UUID             m_p37865; 
	  public boolean evaluate (Object candidate)
	  {
	      ParameterValue_c selected = (ParameterValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37865));
	      return retval;
	  }
    }

    ParameterValue_c [] objs37866 = 
    ParameterValue_c.ParameterValueInstances(modelRoot, new ParameterValue_c_test37864_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37866.length;
            // Subtype Object: Selected Reference
    class SelectedReference_c_test37867_c implements ClassQueryInterface_c
    {
	  SelectedReference_c_test37867_c( java.util.UUID            p37868 ) {
	  m_p37868 = p37868;
	  }
	  private java.util.UUID             m_p37868; 
	  public boolean evaluate (Object candidate)
	  {
	      SelectedReference_c selected = (SelectedReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37868));
	      return retval;
	  }
    }

    SelectedReference_c [] objs37869 = 
    SelectedReference_c.SelectedReferenceInstances(modelRoot, new SelectedReference_c_test37867_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37869.length;
            // Subtype Object: Bridge Value
    class BridgeValue_c_test37870_c implements ClassQueryInterface_c
    {
	  BridgeValue_c_test37870_c( java.util.UUID            p37871 ) {
	  m_p37871 = p37871;
	  }
	  private java.util.UUID             m_p37871; 
	  public boolean evaluate (Object candidate)
	  {
	      BridgeValue_c selected = (BridgeValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37871));
	      return retval;
	  }
    }

    BridgeValue_c [] objs37872 = 
    BridgeValue_c.BridgeValueInstances(modelRoot, new BridgeValue_c_test37870_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37872.length;
            // Subtype Object: Instance Reference
    class InstanceReference_c_test37873_c implements ClassQueryInterface_c
    {
	  InstanceReference_c_test37873_c( java.util.UUID            p37874 ) {
	  m_p37874 = p37874;
	  }
	  private java.util.UUID             m_p37874; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceReference_c selected = (InstanceReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37874));
	      return retval;
	  }
    }

    InstanceReference_c [] objs37875 = 
    InstanceReference_c.InstanceReferenceInstances(modelRoot, new InstanceReference_c_test37873_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37875.length;
            // Subtype Object: Attribute Value Reference
    class AttributeValueReference_c_test37876_c implements ClassQueryInterface_c
    {
	  AttributeValueReference_c_test37876_c( java.util.UUID            p37877 ) {
	  m_p37877 = p37877;
	  }
	  private java.util.UUID             m_p37877; 
	  public boolean evaluate (Object candidate)
	  {
	      AttributeValueReference_c selected = (AttributeValueReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37877));
	      return retval;
	  }
    }

    AttributeValueReference_c [] objs37878 = 
    AttributeValueReference_c.AttributeValueReferenceInstances(modelRoot, new AttributeValueReference_c_test37876_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37878.length;
            // Subtype Object: Literal Integer
    class LiteralInteger_c_test37879_c implements ClassQueryInterface_c
    {
	  LiteralInteger_c_test37879_c( java.util.UUID            p37880 ) {
	  m_p37880 = p37880;
	  }
	  private java.util.UUID             m_p37880; 
	  public boolean evaluate (Object candidate)
	  {
	      LiteralInteger_c selected = (LiteralInteger_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37880));
	      return retval;
	  }
    }

    LiteralInteger_c [] objs37881 = 
    LiteralInteger_c.LiteralIntegerInstances(modelRoot, new LiteralInteger_c_test37879_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37881.length;
            // Subtype Object: Literal String
    class LiteralString_c_test37882_c implements ClassQueryInterface_c
    {
	  LiteralString_c_test37882_c( java.util.UUID            p37883 ) {
	  m_p37883 = p37883;
	  }
	  private java.util.UUID             m_p37883; 
	  public boolean evaluate (Object candidate)
	  {
	      LiteralString_c selected = (LiteralString_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37883));
	      return retval;
	  }
    }

    LiteralString_c [] objs37884 = 
    LiteralString_c.LiteralStringInstances(modelRoot, new LiteralString_c_test37882_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37884.length;
            // Subtype Object: Unary Operation
    class UnaryOperation_c_test37885_c implements ClassQueryInterface_c
    {
	  UnaryOperation_c_test37885_c( java.util.UUID            p37886 ) {
	  m_p37886 = p37886;
	  }
	  private java.util.UUID             m_p37886; 
	  public boolean evaluate (Object candidate)
	  {
	      UnaryOperation_c selected = (UnaryOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37886));
	      return retval;
	  }
    }

    UnaryOperation_c [] objs37887 = 
    UnaryOperation_c.UnaryOperationInstances(modelRoot, new UnaryOperation_c_test37885_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37887.length;
            // Subtype Object: Operation Value
    class OperationValue_c_test37888_c implements ClassQueryInterface_c
    {
	  OperationValue_c_test37888_c( java.util.UUID            p37889 ) {
	  m_p37889 = p37889;
	  }
	  private java.util.UUID             m_p37889; 
	  public boolean evaluate (Object candidate)
	  {
	      OperationValue_c selected = (OperationValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37889));
	      return retval;
	  }
    }

    OperationValue_c [] objs37890 = 
    OperationValue_c.OperationValueInstances(modelRoot, new OperationValue_c_test37888_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37890.length;
            // Subtype Object: Instance Set Reference
    class InstanceSetReference_c_test37891_c implements ClassQueryInterface_c
    {
	  InstanceSetReference_c_test37891_c( java.util.UUID            p37892 ) {
	  m_p37892 = p37892;
	  }
	  private java.util.UUID             m_p37892; 
	  public boolean evaluate (Object candidate)
	  {
	      InstanceSetReference_c selected = (InstanceSetReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37892));
	      return retval;
	  }
    }

    InstanceSetReference_c [] objs37893 = 
    InstanceSetReference_c.InstanceSetReferenceInstances(modelRoot, new InstanceSetReference_c_test37891_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37893.length;
            // Subtype Object: Event Datum Value
    class EventDatumValue_c_test37894_c implements ClassQueryInterface_c
    {
	  EventDatumValue_c_test37894_c( java.util.UUID            p37895 ) {
	  m_p37895 = p37895;
	  }
	  private java.util.UUID             m_p37895; 
	  public boolean evaluate (Object candidate)
	  {
	      EventDatumValue_c selected = (EventDatumValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37895));
	      return retval;
	  }
    }

    EventDatumValue_c [] objs37896 = 
    EventDatumValue_c.EventDatumValueInstances(modelRoot, new EventDatumValue_c_test37894_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37896.length;
            // Subtype Object: Transient Value Reference
    class TransientValueReference_c_test37897_c implements ClassQueryInterface_c
    {
	  TransientValueReference_c_test37897_c( java.util.UUID            p37898 ) {
	  m_p37898 = p37898;
	  }
	  private java.util.UUID             m_p37898; 
	  public boolean evaluate (Object candidate)
	  {
	      TransientValueReference_c selected = (TransientValueReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37898));
	      return retval;
	  }
    }

    TransientValueReference_c [] objs37899 = 
    TransientValueReference_c.TransientValueReferenceInstances(modelRoot, new TransientValueReference_c_test37897_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37899.length;
            // Subtype Object: Literal Real
    class LiteralReal_c_test37900_c implements ClassQueryInterface_c
    {
	  LiteralReal_c_test37900_c( java.util.UUID            p37901 ) {
	  m_p37901 = p37901;
	  }
	  private java.util.UUID             m_p37901; 
	  public boolean evaluate (Object candidate)
	  {
	      LiteralReal_c selected = (LiteralReal_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37901));
	      return retval;
	  }
    }

    LiteralReal_c [] objs37902 = 
    LiteralReal_c.LiteralRealInstances(modelRoot, new LiteralReal_c_test37900_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37902.length;
            // Subtype Object: Literal Boolean
    class LiteralBoolean_c_test37903_c implements ClassQueryInterface_c
    {
	  LiteralBoolean_c_test37903_c( java.util.UUID            p37904 ) {
	  m_p37904 = p37904;
	  }
	  private java.util.UUID             m_p37904; 
	  public boolean evaluate (Object candidate)
	  {
	      LiteralBoolean_c selected = (LiteralBoolean_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37904));
	      return retval;
	  }
    }

    LiteralBoolean_c [] objs37905 = 
    LiteralBoolean_c.LiteralBooleanInstances(modelRoot, new LiteralBoolean_c_test37903_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37905.length;
            // Subtype Object: Binary Operation
    class BinaryOperation_c_test37906_c implements ClassQueryInterface_c
    {
	  BinaryOperation_c_test37906_c( java.util.UUID            p37907 ) {
	  m_p37907 = p37907;
	  }
	  private java.util.UUID             m_p37907; 
	  public boolean evaluate (Object candidate)
	  {
	      BinaryOperation_c selected = (BinaryOperation_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37907));
	      return retval;
	  }
    }

    BinaryOperation_c [] objs37908 = 
    BinaryOperation_c.BinaryOperationInstances(modelRoot, new BinaryOperation_c_test37906_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37908.length;
            // Subtype Object: Literal Enumerator
    class LiteralEnumerator_c_test37909_c implements ClassQueryInterface_c
    {
	  LiteralEnumerator_c_test37909_c( java.util.UUID            p37910 ) {
	  m_p37910 = p37910;
	  }
	  private java.util.UUID             m_p37910; 
	  public boolean evaluate (Object candidate)
	  {
	      LiteralEnumerator_c selected = (LiteralEnumerator_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37910));
	      return retval;
	  }
    }

    LiteralEnumerator_c [] objs37911 = 
    LiteralEnumerator_c.LiteralEnumeratorInstances(modelRoot, new LiteralEnumerator_c_test37909_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37911.length;
            // Subtype Object: Member Value Reference
    class MemberValueReference_c_test37912_c implements ClassQueryInterface_c
    {
	  MemberValueReference_c_test37912_c( java.util.UUID            p37913 ) {
	  m_p37913 = p37913;
	  }
	  private java.util.UUID             m_p37913; 
	  public boolean evaluate (Object candidate)
	  {
	      MemberValueReference_c selected = (MemberValueReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37913));
	      return retval;
	  }
    }

    MemberValueReference_c [] objs37914 = 
    MemberValueReference_c.MemberValueReferenceInstances(modelRoot, new MemberValueReference_c_test37912_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37914.length;
            // Subtype Object: Array Element Reference
    class ArrayElementReference_c_test37915_c implements ClassQueryInterface_c
    {
	  ArrayElementReference_c_test37915_c( java.util.UUID            p37916 ) {
	  m_p37916 = p37916;
	  }
	  private java.util.UUID             m_p37916; 
	  public boolean evaluate (Object candidate)
	  {
	      ArrayElementReference_c selected = (ArrayElementReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37916));
	      return retval;
	  }
    }

    ArrayElementReference_c [] objs37917 = 
    ArrayElementReference_c.ArrayElementReferenceInstances(modelRoot, new ArrayElementReference_c_test37915_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37917.length;
            // Subtype Object: Array Length Value
    class ArrayLengthValue_c_test37918_c implements ClassQueryInterface_c
    {
	  ArrayLengthValue_c_test37918_c( java.util.UUID            p37919 ) {
	  m_p37919 = p37919;
	  }
	  private java.util.UUID             m_p37919; 
	  public boolean evaluate (Object candidate)
	  {
	      ArrayLengthValue_c selected = (ArrayLengthValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37919));
	      return retval;
	  }
    }

    ArrayLengthValue_c [] objs37920 = 
    ArrayLengthValue_c.ArrayLengthValueInstances(modelRoot, new ArrayLengthValue_c_test37918_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37920.length;
            // Subtype Object: Message Value
    class MessageValue_c_test37921_c implements ClassQueryInterface_c
    {
	  MessageValue_c_test37921_c( java.util.UUID            p37922 ) {
	  m_p37922 = p37922;
	  }
	  private java.util.UUID             m_p37922; 
	  public boolean evaluate (Object candidate)
	  {
	      MessageValue_c selected = (MessageValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37922));
	      return retval;
	  }
    }

    MessageValue_c [] objs37923 = 
    MessageValue_c.MessageValueInstances(modelRoot, new MessageValue_c_test37921_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37923.length;
            // Subtype Object: Symbolic Constant Value
    class SymbolicConstantValue_c_test37924_c implements ClassQueryInterface_c
    {
	  SymbolicConstantValue_c_test37924_c( java.util.UUID            p37925 ) {
	  m_p37925 = p37925;
	  }
	  private java.util.UUID             m_p37925; 
	  public boolean evaluate (Object candidate)
	  {
	      SymbolicConstantValue_c selected = (SymbolicConstantValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37925));
	      return retval;
	  }
    }

    SymbolicConstantValue_c [] objs37926 = 
    SymbolicConstantValue_c.SymbolicConstantValueInstances(modelRoot, new SymbolicConstantValue_c_test37924_c(getValue_id())) ;
 
    objs37860 = objs37860 + objs37926.length;
    if ( objs37860 != 1 )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 801: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37860 ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 801: Cardinality of subtype is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37860 )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 837
             // Object: Member Value Reference
    class MemberValueReference_c_test37928_c implements ClassQueryInterface_c
    {
	  MemberValueReference_c_test37928_c( java.util.UUID            p37929 ) {
	  m_p37929 = p37929;
	  }
	  private java.util.UUID             m_p37929; 
	  public boolean evaluate (Object candidate)
	  {
	      MemberValueReference_c selected = (MemberValueReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRoot_value_id().equals(m_p37929));
	      return retval;
	  }
    }

    MemberValueReference_c [] objs37927 = 
    MemberValueReference_c.MemberValueReferenceInstances(modelRoot, new MemberValueReference_c_test37928_c(getValue_id())) ;

    if ( (  (objs37927.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 837: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37927.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 837: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37927.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 807
             // Object: Attribute Value Reference
    class AttributeValueReference_c_test37931_c implements ClassQueryInterface_c
    {
	  AttributeValueReference_c_test37931_c( java.util.UUID            p37932 ) {
	  m_p37932 = p37932;
	  }
	  private java.util.UUID             m_p37932; 
	  public boolean evaluate (Object candidate)
	  {
	      AttributeValueReference_c selected = (AttributeValueReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRoot_value_id().equals(m_p37932));
	      return retval;
	  }
    }

    AttributeValueReference_c [] objs37930 = 
    AttributeValueReference_c.AttributeValueReferenceInstances(modelRoot, new AttributeValueReference_c_test37931_c(getValue_id())) ;

    if ( (  (objs37930.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 807: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37930.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 807: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37930.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 838
             // Object: Array Element Reference
    class ArrayElementReference_c_test37934_c implements ClassQueryInterface_c
    {
	  ArrayElementReference_c_test37934_c( java.util.UUID            p37935 ) {
	  m_p37935 = p37935;
	  }
	  private java.util.UUID             m_p37935; 
	  public boolean evaluate (Object candidate)
	  {
	      ArrayElementReference_c selected = (ArrayElementReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getRoot_value_id().equals(m_p37935));
	      return retval;
	  }
    }

    ArrayElementReference_c [] objs37933 = 
    ArrayElementReference_c.ArrayElementReferenceInstances(modelRoot, new ArrayElementReference_c_test37934_c(getValue_id())) ;

    if ( (  (objs37933.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 838: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37933.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 838: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37933.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 839
             // Object: Array Element Reference
    class ArrayElementReference_c_test37937_c implements ClassQueryInterface_c
    {
	  ArrayElementReference_c_test37937_c( java.util.UUID            p37938 ) {
	  m_p37938 = p37938;
	  }
	  private java.util.UUID             m_p37938; 
	  public boolean evaluate (Object candidate)
	  {
	      ArrayElementReference_c selected = (ArrayElementReference_c) candidate;
	      boolean retval = false;
	      retval = (selected.getIndex_value_id().equals(m_p37938));
	      return retval;
	  }
    }

    ArrayElementReference_c [] objs37936 = 
    ArrayElementReference_c.ArrayElementReferenceInstances(modelRoot, new ArrayElementReference_c_test37937_c(getValue_id())) ;

    if ( (  (objs37936.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 839: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37936.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 839: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37936.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 840
             // Object: Array Length Value
    class ArrayLengthValue_c_test37940_c implements ClassQueryInterface_c
    {
	  ArrayLengthValue_c_test37940_c( java.util.UUID            p37941 ) {
	  m_p37941 = p37941;
	  }
	  private java.util.UUID             m_p37941; 
	  public boolean evaluate (Object candidate)
	  {
	      ArrayLengthValue_c selected = (ArrayLengthValue_c) candidate;
	      boolean retval = false;
	      retval = (selected.getArray_value_id().equals(m_p37941));
	      return retval;
	  }
    }

    ArrayLengthValue_c [] objs37939 = 
    ArrayLengthValue_c.ArrayLengthValueInstances(modelRoot, new ArrayLengthValue_c_test37940_c(getValue_id())) ;

    if ( (  (objs37939.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 840: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37939.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 840: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37939.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 851
             // Object: Message Value
          // Value is a participating class in association: rel.Numb = 610
             // Object: Select From Instances Where
    class SelectFromInstancesWhere_c_test37943_c implements ClassQueryInterface_c
    {
	  SelectFromInstancesWhere_c_test37943_c( java.util.UUID            p37944 ) {
	  m_p37944 = p37944;
	  }
	  private java.util.UUID             m_p37944; 
	  public boolean evaluate (Object candidate)
	  {
	      SelectFromInstancesWhere_c selected = (SelectFromInstancesWhere_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWhere_clause_value_id().equals(m_p37944));
	      return retval;
	  }
    }

    SelectFromInstancesWhere_c [] objs37942 = 
    SelectFromInstancesWhere_c.SelectFromInstancesWhereInstances(modelRoot, new SelectFromInstancesWhere_c_test37943_c(getValue_id())) ;

    if ( (  (objs37942.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 610: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37942.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 610: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37942.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 611
             // Object: Select Related Where
    class SelectRelatedWhere_c_test37946_c implements ClassQueryInterface_c
    {
	  SelectRelatedWhere_c_test37946_c( java.util.UUID            p37947 ) {
	  m_p37947 = p37947;
	  }
	  private java.util.UUID             m_p37947; 
	  public boolean evaluate (Object candidate)
	  {
	      SelectRelatedWhere_c selected = (SelectRelatedWhere_c) candidate;
	      boolean retval = false;
	      retval = (selected.getWhere_clause_value_id().equals(m_p37947));
	      return retval;
	  }
    }

    SelectRelatedWhere_c [] objs37945 = 
    SelectRelatedWhere_c.SelectRelatedWhereInstances(modelRoot, new SelectRelatedWhere_c_test37946_c(getValue_id())) ;

    if ( (  (objs37945.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 611: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37945.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 611: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37945.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 613
             // Object: Select
    class Select_c_test37949_c implements ClassQueryInterface_c
    {
	  Select_c_test37949_c( java.util.UUID            p37950 ) {
	  m_p37950 = p37950;
	  }
	  private java.util.UUID             m_p37950; 
	  public boolean evaluate (Object candidate)
	  {
	      Select_c selected = (Select_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37950));
	      return retval;
	  }
    }

    Select_c [] objs37948 = 
    Select_c.SelectInstances(modelRoot, new Select_c_test37949_c(getValue_id())) ;

    if ( (  (objs37948.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 613: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37948.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 613: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37948.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 668
             // Object: Return Stmt
    class ReturnStmt_c_test37952_c implements ClassQueryInterface_c
    {
	  ReturnStmt_c_test37952_c( java.util.UUID            p37953 ) {
	  m_p37953 = p37953;
	  }
	  private java.util.UUID             m_p37953; 
	  public boolean evaluate (Object candidate)
	  {
	      ReturnStmt_c selected = (ReturnStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37953));
	      return retval;
	  }
    }

    ReturnStmt_c [] objs37951 = 
    ReturnStmt_c.ReturnStmtInstances(modelRoot, new ReturnStmt_c_test37952_c(getValue_id())) ;

    if ( (  (objs37951.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 668: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37951.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 668: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37951.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 630
             // Object: Signal Invocation
          // Value is a participating class in association: rel.Numb = 629
             // Object: Interface Operation Invocation
          // Value is a participating class in association: rel.Numb = 609
             // Object: Assign to Member
    class AssignToMember_c_test37955_c implements ClassQueryInterface_c
    {
	  AssignToMember_c_test37955_c( java.util.UUID            p37956 ) {
	  m_p37956 = p37956;
	  }
	  private java.util.UUID             m_p37956; 
	  public boolean evaluate (Object candidate)
	  {
	      AssignToMember_c selected = (AssignToMember_c) candidate;
	      boolean retval = false;
	      retval = (selected.getR_value_id().equals(m_p37956));
	      return retval;
	  }
    }

    AssignToMember_c [] objs37954 = 
    AssignToMember_c.AssignToMemberInstances(modelRoot, new AssignToMember_c_test37955_c(getValue_id())) ;

    if ( (  (objs37954.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 609: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37954.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 609: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37954.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 689
             // Object: Assign to Member
    class AssignToMember_c_test37958_c implements ClassQueryInterface_c
    {
	  AssignToMember_c_test37958_c( java.util.UUID            p37959 ) {
	  m_p37959 = p37959;
	  }
	  private java.util.UUID             m_p37959; 
	  public boolean evaluate (Object candidate)
	  {
	      AssignToMember_c selected = (AssignToMember_c) candidate;
	      boolean retval = false;
	      retval = (selected.getL_value_id().equals(m_p37959));
	      return retval;
	  }
    }

    AssignToMember_c [] objs37957 = 
    AssignToMember_c.AssignToMemberInstances(modelRoot, new AssignToMember_c_test37958_c(getValue_id())) ;

    if ( (  (objs37957.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 689: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37957.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 689: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37957.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 714
             // Object: Generate Preexisting Event
    class GeneratePreexistingEvent_c_test37961_c implements ClassQueryInterface_c
    {
	  GeneratePreexistingEvent_c_test37961_c( java.util.UUID            p37962 ) {
	  m_p37962 = p37962;
	  }
	  private java.util.UUID             m_p37962; 
	  public boolean evaluate (Object candidate)
	  {
	      GeneratePreexistingEvent_c selected = (GeneratePreexistingEvent_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37962));
	      return retval;
	  }
    }

    GeneratePreexistingEvent_c [] objs37960 = 
    GeneratePreexistingEvent_c.GeneratePreexistingEventInstances(modelRoot, new GeneratePreexistingEvent_c_test37961_c(getValue_id())) ;

    if ( (  (objs37960.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 714: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37960.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 714: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37960.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 626
             // Object: While Stmt
    class WhileStmt_c_test37964_c implements ClassQueryInterface_c
    {
	  WhileStmt_c_test37964_c( java.util.UUID            p37965 ) {
	  m_p37965 = p37965;
	  }
	  private java.util.UUID             m_p37965; 
	  public boolean evaluate (Object candidate)
	  {
	      WhileStmt_c selected = (WhileStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37965));
	      return retval;
	  }
    }

    WhileStmt_c [] objs37963 = 
    WhileStmt_c.WhileStmtInstances(modelRoot, new WhileStmt_c_test37964_c(getValue_id())) ;

    if ( (  (objs37963.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 626: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37963.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 626: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37963.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 625
             // Object: If Stmt
    class IfStmt_c_test37967_c implements ClassQueryInterface_c
    {
	  IfStmt_c_test37967_c( java.util.UUID            p37968 ) {
	  m_p37968 = p37968;
	  }
	  private java.util.UUID             m_p37968; 
	  public boolean evaluate (Object candidate)
	  {
	      IfStmt_c selected = (IfStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37968));
	      return retval;
	  }
    }

    IfStmt_c [] objs37966 = 
    IfStmt_c.IfStmtInstances(modelRoot, new IfStmt_c_test37967_c(getValue_id())) ;

    if ( (  (objs37966.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 625: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37966.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 625: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37966.length )  , e); 
      }
      retval = false;

    }

          // Value is a participating class in association: rel.Numb = 659
             // Object: ElseIf Stmt
    class ElseifStmt_c_test37970_c implements ClassQueryInterface_c
    {
	  ElseifStmt_c_test37970_c( java.util.UUID            p37971 ) {
	  m_p37971 = p37971;
	  }
	  private java.util.UUID             m_p37971; 
	  public boolean evaluate (Object candidate)
	  {
	      ElseifStmt_c selected = (ElseifStmt_c) candidate;
	      boolean retval = false;
	      retval = (selected.getValue_id().equals(m_p37971));
	      return retval;
	  }
    }

    ElseifStmt_c [] objs37969 = 
    ElseifStmt_c.ElseifStmtInstances(modelRoot, new ElseifStmt_c_test37970_c(getValue_id())) ;

    if ( (  (objs37969.length) > 1) )
    {

      if (CorePlugin.getDefault().isDebugging()){
          Ooaofooa.log.println(ILogger.CONSISTENCY, "Value", //$NON-NLS-1$
           "Consistency: Object: Value: Association: 659: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs37969.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CorePlugin.logError("Consistency: Object: Value: Association: 659: Cardinality of a formalizer is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs37969.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }


  // declare transform functions
  public  void Dispose()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Dispose") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End dispose
  public  void Setendposition()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Setendposition") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c.getOneACT_BLKOnR826(this));


if ( (getStartposition() == -1) )
{

setEndposition( -1) ;



}

else
{

LiteralInteger_c v_lin = LiteralInteger_c.getOneV_LINOnR801(this);


if ( (  (v_lin != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_lin.getValue()) - 1) ;


return ;



}

LiteralBoolean_c v_lbo = LiteralBoolean_c.getOneV_LBOOnR801(this);


if ( (  (v_lbo != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_lbo.getValue()) - 1) ;


return ;



}

LiteralString_c v_lst = LiteralString_c.getOneV_LSTOnR801(this);


if ( (  (v_lst != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_lst.getValue())) ;


return ;



}

LiteralReal_c v_lrl = LiteralReal_c.getOneV_LRLOnR801(this);


if ( (  (v_lrl != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_lrl.getValue()) - 1) ;


return ;



}

BinaryOperation_c v_bin = BinaryOperation_c.getOneV_BINOnR801(this);


if ( (  (v_bin != null)) )
{

Value_c v_lop = Value_c.getOneV_VALOnR802(v_bin);


Value_c v_rop = Value_c.getOneV_VALOnR803(v_bin);


setStartposition( v_lop.getStartposition()) ;


setEndposition( v_rop.getEndposition()) ;


return ;



}

UnaryOperation_c v_unary = UnaryOperation_c.getOneV_UNYOnR801(this);


if ( (  (v_unary != null)) )
{

Value_c v_op = Value_c.getOneV_VALOnR804(v_unary);


setEndposition( v_op.getEndposition()) ;


return ;



}

LiteralEnumerator_c v_len = LiteralEnumerator_c.getOneV_LENOnR801(this);


if ( (  (v_len != null)) )
{

Enumerator_c v_enum = Enumerator_c.getOneS_ENUMOnR824(v_len);


setEndposition( getStartposition() + Gd_c.Strlen(			    
v_enum.getName()) - 1) ;


return ;



}

SymbolicConstantValue_c v_scv = SymbolicConstantValue_c.getOneV_SCVOnR801(this);


if ( (  (v_scv != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
getText()) - 1) ;


return ;



}

InstanceReference_c v_irf = InstanceReference_c.getOneV_IRFOnR801(this);


if ( (  (v_irf != null)) )
{

Variable_c v_var = Variable_c.getOneV_VAROnR808(v_irf);


setEndposition( getStartposition() + Gd_c.Strlen(			    
v_var.getName()) - 1) ;


return ;



}

InstanceSetReference_c v_isr = InstanceSetReference_c.getOneV_ISROnR801(this);


if ( (  (v_isr != null)) )
{

Variable_c v_var = Variable_c.getOneV_VAROnR809(v_isr);


setEndposition( getStartposition() + Gd_c.Strlen(			    
v_var.getName()) - 1) ;


return ;



}

SelectedReference_c v_slr = SelectedReference_c.getOneV_SLROnR801(this);


if ( (  (v_slr != null)) )
{

return ;



}

FunctionValue_c v_fnc = FunctionValue_c.getOneV_FNVOnR801(this);


if ( (  (v_fnc != null)) )
{

return ;



}

BridgeValue_c v_brv = BridgeValue_c.getOneV_BRVOnR801(this);


if ( (  (v_brv != null)) )
{

return ;



}

OperationValue_c v_trv = OperationValue_c.getOneV_TRVOnR801(this);


if ( (  (v_trv != null)) )
{

return ;



}

Variable_c v_var = Variable_c.getOneV_VAROnR805(TransientValueReference_c.getOneV_TVLOnR801(this));


if ( (  (v_var != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_var.getName()) - 1) ;


return ;



}

EventParameterReference_c v_evtParmRef = EventParameterReference_c.getOneV_EPROnR834(EventDatumValue_c.getManyV_EDVsOnR801(this));


if (   (v_evtParmRef != null) )
{

StateMachineEventDataItem_c v_edi = StateMachineEventDataItem_c.getOneSM_EVTDIOnR846(v_evtParmRef);


if ( (  (v_edi != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_edi.getName()) - 1) ;


return ;



}

else
{

PropertyParameter_c v_propParm = PropertyParameter_c.getOneC_PPOnR847(v_evtParmRef);


if (   (v_propParm != null) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_propParm.getName()) - 1) ;


return ;



}


}


}

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR806(AttributeValueReference_c.getOneV_AVLOnR801(this));


if ( (  (v_attr != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_attr.getName()) - 1) ;


return ;



}

ParameterValue_c v_parm = ParameterValue_c.getOneV_PVLOnR801(this);


if ( (  (v_parm != null)) )
{

BridgeParameter_c v_bparm = BridgeParameter_c.getOneS_BPARMOnR831(v_parm);


if ( (  (v_bparm != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_bparm.getName()) - 1) ;


return ;



}

FunctionParameter_c v_sparm = FunctionParameter_c.getOneS_SPARMOnR832(v_parm);


if ( (  (v_sparm != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_sparm.getName()) - 1) ;


return ;



}

OperationParameter_c v_tparm = OperationParameter_c.getOneO_TPARMOnR833(v_parm);


if ( (  (v_tparm != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_tparm.getName()) - 1) ;


return ;



}

PropertyParameter_c v_pparm = PropertyParameter_c.getOneC_PPOnR843(v_parm);


if ( (  (v_pparm != null)) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_pparm.getName()) - 1) ;


return ;



}

setStartposition( -1) ;


setEndposition( -1) ;


String       v_pathMsg = "<No Path Available - Empty instance>" ;


if ( (  (v_body != null)) )
{

v_pathMsg = v_body.Getpath() ;



}

User_c.Logerror(			    
"Unknown parameter subtype"			    
,v_pathMsg ) ;


return ;



}

MemberValueReference_c v_memberVal = MemberValueReference_c.getOneV_MVLOnR801(this);


if ( (  (v_memberVal != null)) )
{

StructureMember_c v_member = StructureMember_c.getOneS_MBROnR836(v_memberVal);


setEndposition( getStartposition() + Gd_c.Strlen(			    
v_member.getName()) - 1) ;


return ;



}

ArrayElementReference_c v_aer = ArrayElementReference_c.getOneV_AEROnR801(this);


if ( (  (v_aer != null)) )
{

return ;



}

ArrayLengthValue_c v_alv = ArrayLengthValue_c.getOneV_ALVOnR801(this);


if ( (  (v_alv != null)) )
{

setEndposition( getStartposition() + 5) ;


return ;



}

MessageValue_c v_msv = MessageValue_c.getOneV_MSVOnR801(this);


if (   (v_msv != null) )
{

ExecutableProperty_c v_message = ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR841(v_msv));


if ( (  (v_message == null)) )
{

v_message = ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR845(v_msv));



}

if (   (v_message == null) )
{

String       v_pathMsg = "<No Path Available - Empty instance>" ;


if ( (  (v_body != null)) )
{

v_pathMsg = v_body.Getpath() ;



}

User_c.Logerror(			    
"setEndPosition: No message found"			    
,v_pathMsg ) ;



}

else
{

InterfaceSignal_c v_sig = InterfaceSignal_c.getOneC_ASOnR4004(v_message);


if (   (v_sig != null) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_sig.getName())) ;


return ;



}

else
{

InterfaceOperation_c v_op = InterfaceOperation_c.getOneC_IOOnR4004(v_message);


if (   (v_op != null) )
{

setEndposition( getStartposition() + Gd_c.Strlen(			    
v_op.getName())) ;


return ;



}

else
{

String       v_pathMsg = "<No Path Available - Empty instance>" ;


if ( (  (v_body != null)) )
{

v_pathMsg = v_body.Getpath() ;



}

User_c.Logerror(			    
"setEndPosition: Unknown message subtype"			    
,v_pathMsg ) ;



}


}


}

setStartposition( -1) ;


setEndposition( -1) ;


return ;



}

setStartposition( -1) ;


setEndposition( -1) ;


String       v_pathMsg = "<No Path Available - Empty instance>" ;


if ( (  (v_body != null)) )
{

v_pathMsg = v_body.Getpath() ;



}

User_c.Logerror(			    
"Unknown value subtype"			    
,v_pathMsg ) ;



}


   } // End setEndPosition
  public  void Computevalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Computevalue") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End computeValue
  public  void Setvalue(final java.util.UUID         p_Member_id,final java.util.UUID         p_Stack_frame_id,final Object p_Value)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Setvalue") ; 
               final ModelRoot modelRoot = getModelRoot();

   } // End setValue
  public  Object Getvalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Getvalue") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_instance();



   } // End getValue
  public  boolean      Hassubtype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Hassubtype") ; 
               final ModelRoot modelRoot = getModelRoot();
LiteralInteger_c v_lin = LiteralInteger_c.getOneV_LINOnR801(this);


if ( (  (v_lin != null)) )
{

return true;



}

LiteralBoolean_c v_lbo = LiteralBoolean_c.getOneV_LBOOnR801(this);


if ( (  (v_lbo != null)) )
{

return true;



}

LiteralString_c v_lst = LiteralString_c.getOneV_LSTOnR801(this);


if ( (  (v_lst != null)) )
{

return true;



}

LiteralReal_c v_lrl = LiteralReal_c.getOneV_LRLOnR801(this);


if ( (  (v_lrl != null)) )
{

return true;



}

BinaryOperation_c v_bin = BinaryOperation_c.getOneV_BINOnR801(this);


if ( (  (v_bin != null)) )
{

return true;



}

UnaryOperation_c v_unary = UnaryOperation_c.getOneV_UNYOnR801(this);


if ( (  (v_unary != null)) )
{

return true;



}

LiteralEnumerator_c v_len = LiteralEnumerator_c.getOneV_LENOnR801(this);


if ( (  (v_len != null)) )
{

return true;



}

InstanceReference_c v_irf = InstanceReference_c.getOneV_IRFOnR801(this);


if ( (  (v_irf != null)) )
{

return true;



}

InstanceSetReference_c v_isr = InstanceSetReference_c.getOneV_ISROnR801(this);


if ( (  (v_isr != null)) )
{

return true;



}

SelectedReference_c v_slr = SelectedReference_c.getOneV_SLROnR801(this);


if ( (  (v_slr != null)) )
{

return true;



}

FunctionValue_c v_fnc = FunctionValue_c.getOneV_FNVOnR801(this);


if ( (  (v_fnc != null)) )
{

return true;



}

BridgeValue_c v_brv = BridgeValue_c.getOneV_BRVOnR801(this);


if ( (  (v_brv != null)) )
{

return true;



}

OperationValue_c v_trv = OperationValue_c.getOneV_TRVOnR801(this);


if ( (  (v_trv != null)) )
{

return true;



}

TransientValueReference_c v_tvl = TransientValueReference_c.getOneV_TVLOnR801(this);


if ( (  (v_tvl != null)) )
{

return true;



}

EventDatumValue_c v_edv = EventDatumValue_c.getOneV_EDVOnR801(this);


if ( (  (v_edv != null)) )
{

return true;



}

AttributeValueReference_c v_avl = AttributeValueReference_c.getOneV_AVLOnR801(this);


if ( (  (v_avl != null)) )
{

return true;



}

ParameterValue_c v_parm = ParameterValue_c.getOneV_PVLOnR801(this);


if ( (  (v_parm != null)) )
{

return true;



}

MemberValueReference_c v_memberVal = MemberValueReference_c.getOneV_MVLOnR801(this);


if ( (  (v_memberVal != null)) )
{

return true;



}

return false;



   } // End hasSubtype
  public  java.util.UUID         Getruntimevalue(final java.util.UUID         p_Stack_frame_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Getruntimevalue") ; 
               final ModelRoot modelRoot = getModelRoot();
return Gd_c.Null_unique_id();



   } // End getRuntimeValue
  public  boolean      Isleaf()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Isleaf") ; 
               final ModelRoot modelRoot = getModelRoot();
MemberValueReference_c v_mvlRef = MemberValueReference_c.getOneV_MVLOnR837(this);


ArrayElementReference_c v_arrayRef = ArrayElementReference_c.getOneV_AEROnR838(this);


return   (v_mvlRef == null) &&   (v_arrayRef == null);



   } // End isLeaf
  public  java.util.UUID         Setrank(final int          p_Dimension,final java.util.UUID         p_Rval_id)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Setrank") ; 
               final ModelRoot modelRoot = getModelRoot();
TransientValueReference_c v_tvl = TransientValueReference_c.getOneV_TVLOnR801(this);


ArrayElementReference_c v_aer = ArrayElementReference_c.getOneV_AEROnR801(this);


java.util.UUID         v_varID = Gd_c.Null_unique_id() ;


if (   (v_tvl != null) )
{

Variable_c v_vvar = Variable_c.getOneV_VAROnR805(v_tvl);


if (   (v_vvar != null) )
{

v_varID = v_vvar.getVar_id() ;


  class Value_test37343_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Value_c selected = (Value_c)candidate;
		return p_Rval_id.equals(selected.getValue_id()) ;
	}
  }
Value_c v_rval = Value_c.ValueInstance(modelRoot, new Value_test37343_c()) ;


int          v_rvalNumDimensions = v_rval.Getdimensions() ;


int          v_totalLvarDims = v_rvalNumDimensions + p_Dimension ;


while ( (v_rvalNumDimensions > 0) )
{

int          v_elementCount = v_rval.Getarraylength(			    
v_rvalNumDimensions - 1) ;


Dimensions_c v_dim = new Dimensions_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_dim));


if (v_dim != null) {
  v_dim.setDimensioncount( (v_rvalNumDimensions + p_Dimension) - 1) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_dim != null) {
  v_dim.setElementcount( v_elementCount) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_vvar != null) {
  v_vvar.relateAcrossR849To(v_dim);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}


v_rvalNumDimensions = v_rvalNumDimensions - 1 ;



}


}


}

else if (   (v_aer != null) )
{

Value_c v_rootVal = Value_c.getOneV_VALOnR838(v_aer);


v_varID = v_rootVal.Setrank(			    
p_Dimension + 1			    
,p_Rval_id) ;


Variable_c v_vvar = (Variable_c) modelRoot.getInstanceList(Variable_c.class).getGlobal(null, v_varID);


if ( (  (v_vvar != null)) )
{

int          v_elementCount = 0 ;


LiteralInteger_c v_lin = LiteralInteger_c.getOneV_LINOnR801(Value_c.getOneV_VALOnR839(v_aer));


if ( (  (v_lin != null)) )
{

v_elementCount = v_lin.Getinteger() + 1 ;



}

Dimensions_c v_dim = new Dimensions_c(modelRoot) ;
Ooaofooa.getDefaultInstance().fireModelElementCreated(new BaseModelDelta(Modeleventnotification_c.DELTA_NEW, v_dim));


Dimensions_c [] v_numberOfDims = Dimensions_c.getManyS_DIMsOnR849(v_vvar);


if (v_dim != null) {
  v_dim.setDimensioncount(   (v_numberOfDims.length)) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_dim != null) {
  v_dim.setElementcount( v_elementCount) ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attribute write attempted on null instance.", t);
}


if (v_vvar != null) {
  v_vvar.relateAcrossR849To(v_dim);
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Relate attempted on null left hand instance.", t);
}



}


}

return v_varID;



   } // End setRank
  public  int          Getdimensions()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Getdimensions") ; 
               final ModelRoot modelRoot = getModelRoot();
MemberValueReference_c v_memberRef = MemberValueReference_c.getOneV_MVLOnR801(this);


AttributeValueReference_c v_attrValRef = AttributeValueReference_c.getOneV_AVLOnR801(this);


TransientValueReference_c v_tranValRef = TransientValueReference_c.getOneV_TVLOnR801(this);


ArrayElementReference_c v_arrayElemRef = ArrayElementReference_c.getOneV_AEROnR801(this);


FunctionValue_c v_funcReturnVal = FunctionValue_c.getOneV_FNVOnR801(this);


OperationValue_c v_opReturnVal = OperationValue_c.getOneV_TRVOnR801(this);


BridgeValue_c v_brReturnVal = BridgeValue_c.getOneV_BRVOnR801(this);


ParameterValue_c v_parmVal = ParameterValue_c.getOneV_PVLOnR801(this);


EventDatumValue_c v_evtDatVal = EventDatumValue_c.getOneV_EDVOnR801(this);


MessageValue_c v_msgVal = MessageValue_c.getOneV_MSVOnR801(this);


InstanceReference_c v_instRef = InstanceReference_c.getOneV_IRFOnR801(this);


if (   (v_memberRef != null) )
{

StructureMember_c v_member = StructureMember_c.getOneS_MBROnR836(v_memberRef);


return v_member.Getdimensionscnt();



}

else if (   (v_instRef != null) )
{

Variable_c v_var = Variable_c.getOneV_VAROnR808(v_instRef);


return v_var.Getdimensionscnt();



}

else if (   (v_attrValRef != null) )
{

Attribute_c v_attr = Attribute_c.getOneO_ATTROnR806(v_attrValRef);


return v_attr.Getdimensionscnt();



}

else if (   (v_tranValRef != null) )
{

Variable_c v_tran = Variable_c.getOneV_VAROnR805(v_tranValRef);


return v_tran.Getdimensionscnt();



}

else if (   (v_arrayElemRef != null) )
{

Value_c v_rootVal = Value_c.getOneV_VALOnR838(v_arrayElemRef);


int          v_cnt = v_rootVal.Getdimensions() - 1 ;


if ( v_cnt < 0 )
{


}

return v_cnt;



}

else if (   (v_funcReturnVal != null) )
{

Function_c v_func = Function_c.getOneS_SYNCOnR827(v_funcReturnVal);


return v_func.Getreturndimensionscnt();



}

else if (   (v_opReturnVal != null) )
{

Operation_c v_op = Operation_c.getOneO_TFROnR829(v_opReturnVal);


return v_op.Getreturndimensionscnt();



}

else if (   (v_brReturnVal != null) )
{

Bridge_c v_br = Bridge_c.getOneS_BRGOnR828(v_brReturnVal);


return v_br.Getreturndimensionscnt();



}

else if (   (v_parmVal != null) )
{

FunctionParameter_c v_fnParm = FunctionParameter_c.getOneS_SPARMOnR832(v_parmVal);


OperationParameter_c v_opParm = OperationParameter_c.getOneO_TPARMOnR833(v_parmVal);


BridgeParameter_c v_brParm = BridgeParameter_c.getOneS_BPARMOnR831(v_parmVal);


PropertyParameter_c v_ppParm = PropertyParameter_c.getOneC_PPOnR843(v_parmVal);


if (   (v_fnParm != null) )
{

return v_fnParm.Getdimensionscnt();



}

else if (   (v_opParm != null) )
{

return v_opParm.Getdimensionscnt();



}

else if (   (v_brParm != null) )
{

return v_brParm.Getdimensionscnt();



}

else if ( (  (v_ppParm != null)) )
{

return v_ppParm.Getdimensionscnt();



}

else
{

return 0;



}


}

else if (   (v_evtDatVal != null) )
{

EventParameterReference_c v_evtParmRef = EventParameterReference_c.getOneV_EPROnR834(v_evtDatVal);


StateMachineEventDataItem_c v_evtdi = StateMachineEventDataItem_c.getOneSM_EVTDIOnR846(v_evtParmRef);


if (   (v_evtdi != null) )
{

return v_evtdi.Getdimensionscnt();



}

else
{

PropertyParameter_c v_propParm = PropertyParameter_c.getOneC_PPOnR847(v_evtParmRef);


return v_propParm.Getdimensionscnt();



}


}

else if (   (v_msgVal != null) )
{

InterfaceOperation_c v_io = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getOneC_EPOnR4500(RequiredExecutableProperty_c.getOneSPR_REPOnR845(v_msgVal)));


if ( (  (v_io == null)) )
{

v_io = InterfaceOperation_c.getOneC_IOOnR4004(ExecutableProperty_c.getOneC_EPOnR4501(ProvidedExecutableProperty_c.getOneSPR_PEPOnR841(v_msgVal)));



}

if (   (v_io != null) )
{

return v_io.Getreturndimensionscnt();



}

else
{

return 0;



}


}

else
{

return 0;



}


   } // End getDimensions
  public  int          Getarraylength(final int          p_Dimension)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Getarraylength") ; 
               final ModelRoot modelRoot = getModelRoot();
MemberValueReference_c v_memberRef = MemberValueReference_c.getOneV_MVLOnR801(this);


AttributeValueReference_c v_attrValRef = AttributeValueReference_c.getOneV_AVLOnR801(this);


TransientValueReference_c v_tranValRef = TransientValueReference_c.getOneV_TVLOnR801(this);


ArrayElementReference_c v_arrayElemRef = ArrayElementReference_c.getOneV_AEROnR801(this);


FunctionValue_c v_funcReturnVal = FunctionValue_c.getOneV_FNVOnR801(this);


OperationValue_c v_opReturnVal = OperationValue_c.getOneV_TRVOnR801(this);


BridgeValue_c v_brReturnVal = BridgeValue_c.getOneV_BRVOnR801(this);


ParameterValue_c v_parmVal = ParameterValue_c.getOneV_PVLOnR801(this);


EventDatumValue_c v_evtDatVal = EventDatumValue_c.getOneV_EDVOnR801(this);


MessageValue_c v_msgVal = MessageValue_c.getOneV_MSVOnR801(this);


InstanceReference_c v_instRef = InstanceReference_c.getOneV_IRFOnR801(this);


Dimensions_c v_dim = (Dimensions_c) modelRoot.getInstanceList(Dimensions_c.class).getGlobal(null, Gd_c.Null_unique_id());


int          v_dimensionSize = -1 ;


if (   (v_memberRef != null) )
{

  class Dimensions_test37415_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR53(StructureMember_c.getManyS_MBRsOnR836(v_memberRef), new Dimensions_test37415_c());



}

else if (   (v_instRef != null) )
{

  class Dimensions_test37416_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR849(Variable_c.getManyV_VARsOnR808(v_instRef), new Dimensions_test37416_c());



}

else if (   (v_attrValRef != null) )
{

  class Dimensions_test37417_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR120(Attribute_c.getManyO_ATTRsOnR806(v_attrValRef), new Dimensions_test37417_c());



}

else if (   (v_tranValRef != null) )
{

  class Dimensions_test37418_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR849(Variable_c.getManyV_VARsOnR805(v_tranValRef), new Dimensions_test37418_c());



}

else if (   (v_arrayElemRef != null) )
{

Value_c v_rootVal = Value_c.getOneV_VALOnR838(v_arrayElemRef);


return v_rootVal.Getarraylength(			    
p_Dimension);



}

else if (   (v_funcReturnVal != null) )
{

  class Dimensions_test37419_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR51(Function_c.getManyS_SYNCsOnR827(v_funcReturnVal), new Dimensions_test37419_c());



}

else if (   (v_opReturnVal != null) )
{

  class Dimensions_test37420_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR122(Operation_c.getManyO_TFRsOnR829(v_opReturnVal), new Dimensions_test37420_c());



}

else if (   (v_brReturnVal != null) )
{

  class Dimensions_test37421_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR50(Bridge_c.getManyS_BRGsOnR828(v_brReturnVal), new Dimensions_test37421_c());



}

else if (   (v_parmVal != null) )
{

FunctionParameter_c v_fnParm = FunctionParameter_c.getOneS_SPARMOnR832(v_parmVal);


OperationParameter_c v_opParm = OperationParameter_c.getOneO_TPARMOnR833(v_parmVal);


BridgeParameter_c v_brParm = BridgeParameter_c.getOneS_BPARMOnR831(v_parmVal);


PropertyParameter_c v_prParm = PropertyParameter_c.getOneC_PPOnR843(v_parmVal);


if (   (v_fnParm != null) )
{

  class Dimensions_test37422_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR52(v_fnParm, new Dimensions_test37422_c());



}

else if (   (v_opParm != null) )
{

  class Dimensions_test37423_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR121(v_opParm, new Dimensions_test37423_c());



}

else if (   (v_brParm != null) )
{

  class Dimensions_test37424_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR49(v_brParm, new Dimensions_test37424_c());



}

else if (   (v_prParm != null) )
{

  class Dimensions_test37425_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR4017(v_prParm, new Dimensions_test37425_c());



}

else
{


}


}

else if (   (v_evtDatVal != null) )
{

  class Dimensions_test37426_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR531(StateMachineEventDataItem_c.getManySM_EVTDIsOnR846(EventParameterReference_c.getManyV_EPRsOnR834(v_evtDatVal)), new Dimensions_test37426_c());


if (   (v_dim == null) )
{

  class Dimensions_test37427_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR4017(PropertyParameter_c.getManyC_PPsOnR847(EventParameterReference_c.getManyV_EPRsOnR834(v_evtDatVal)), new Dimensions_test37427_c());



}


}

else if (   (v_msgVal != null) )
{

  class Dimensions_test37428_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR4018(InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4500(RequiredExecutableProperty_c.getManySPR_REPsOnR845(v_msgVal))), new Dimensions_test37428_c());


if ( (  (v_dim == null)) )
{

  class Dimensions_test37429_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		Dimensions_c selected = (Dimensions_c)candidate;
		return (selected.getDimensioncount() == p_Dimension) ;
	}
  }
v_dim = Dimensions_c.getOneS_DIMOnR4018(InterfaceOperation_c.getManyC_IOsOnR4004(ExecutableProperty_c.getManyC_EPsOnR4501(ProvidedExecutableProperty_c.getManySPR_PEPsOnR841(v_msgVal))), new Dimensions_test37429_c());



}


}

if ( (  (v_dim != null)) )
{

v_dimensionSize = v_dim.getElementcount() ;



}

return v_dimensionSize;



   } // End getArrayLength
  public  boolean      Iselementcountvalid()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Iselementcountvalid") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_isValid = true ;


ArrayElementReference_c v_aer = ArrayElementReference_c.getOneV_AEROnR801(this);


ArrayElementReference_c v_tempAER = v_aer ;


while (   (v_tempAER != null) )
{

v_tempAER = ArrayElementReference_c.getOneV_AEROnR801(Value_c.getOneV_VALOnR838(v_aer));


if ( (  (v_tempAER != null)) )
{

v_aer = v_tempAER ;



}


}

int          v_dimension = 0 ;


while ( (v_isValid &&   (v_aer != null)) )
{

int          v_specifiedDimension = -1 ;


LiteralInteger_c v_lin = LiteralInteger_c.getOneV_LINOnR801(Value_c.getOneV_VALOnR839(v_aer));


if ( (  (v_lin != null)) )
{

v_specifiedDimension = v_lin.Getinteger() ;



}

int          v_actualSize = Getarraylength(			    
v_dimension) ;


boolean      v_actualSizeIsDynamic = true ;


if ( (v_actualSize > 0) )
{

v_actualSizeIsDynamic = false ;



}

if ( ((  !v_actualSizeIsDynamic) && (v_specifiedDimension >= v_actualSize)) )
{

v_isValid = false ;



}

v_aer = ArrayElementReference_c.getOneV_AEROnR838(Value_c.getOneV_VALOnR801(v_aer));


v_dimension = v_dimension + 1 ;



}

return v_isValid;



   } // End isElementCountValid
  public  boolean      Isreferringtodefaultdatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Isreferringtodefaultdatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
DataType_c v_dt = DataType_c.getOneS_DTOnR820(this);


String       v_elementType = Util_c.Getsimpleclassname(			    
Converttoinstance()) ;


if ( (v_dt.getName().equals(DataType_c.Getdefaultdatatypename(modelRoot			    
,v_elementType))) )
{

return true;



}

return false;



   } // End isReferringToDefaultDataType
  public  Object Converttoinstance()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Converttoinstance") ; 
return this;
   } // End convertToInstance
  public  boolean      Canrefertodatatype()
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Canrefertodatatype") ; 
               final ModelRoot modelRoot = getModelRoot();
Body_c v_body = Body_c.getOneACT_ACTOnR601(Block_c.getOneACT_BLKOnR826(this));


boolean      v_isInGenericPackage = v_body.Associatewithcontainer() ;


if ( v_isInGenericPackage )
{

DataType_c v_dt = DataType_c.getOneS_DTOnR820(this);


if ( (  (v_dt != null)) )
{

PackageableElement_c v_containingElem = PackageableElement_c.getOnePE_PEOnR640(BodyInElement_c.getOneACT_BIEOnR640(v_body));


return v_containingElem.Canrefertodatatype(			    
v_dt.getDt_id()			    
,v_dt.getName());



}

return false;



}

else
{

DataType_c v_dt = DataType_c.getOneS_DTOnR820(this);


if ( (  (v_dt != null)) )
{

DataTypePackage_c v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if (v_body != null) {
v_body.Associatewithowningcomponent() ;
}
else {
  Throwable t = new Throwable();
  t.fillInStackTrace();
  CorePlugin.logError("Attempted to call an operation on a null instance.", t);
}


Component_c v_component = Component_c.getOneC_COnR694(BodyInComponent_c.getOneACT_BICOnR694(v_body));


if ( (  (v_component != null)) )
{

RequiredSignalBody_c v_reqSig = RequiredSignalBody_c.getOneACT_RSBOnR698(v_body);


RequiredOperationBody_c v_reqOp = RequiredOperationBody_c.getOneACT_ROBOnR698(v_body);


ProvidedSignalBody_c v_proSig = ProvidedSignalBody_c.getOneACT_PSBOnR698(v_body);


ProvidedOperationBody_c v_proOp = ProvidedOperationBody_c.getOneACT_POBOnR698(v_body);


if ( (  (v_reqSig != null)) )
{

if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_reqOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proSig != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else if ( (  (v_proOp != null)) )
{

v_dtPkg = DataTypePackage_c.getOneS_DPKOnR39(DataTypeInPackage_c.getOneS_DIPOnR39(v_dt));


if ( (v_dtPkg.Isdomainlevel()) )
{

return false;



}

else
{

return true;



}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (  !v_dtPkg.Isdomainlevel()) )
{

return true;



}

else
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_dtDomain == v_domain) )
{

return true;



}


}


}


}

else
{

Domain_c v_domain = Domain_c.DomainInstance(modelRoot) ;


if ( (v_dtPkg.Isdomainlevel()) )
{

Domain_c v_dtDomain = Domain_c.getOneS_DOMOnR14(v_dt);


if ( (v_domain == v_dtDomain) )
{

return true;



}


}

else
{

return true;



}


}


}

return false;



}


   } // End canReferToDataType
  public  boolean      Iselementcountcompatible(final java.util.UUID         p_Rval)
  {
      Ooaofooa.log.println(ILogger.OPERATION, "Value", " Operation entered: Value::Iselementcountcompatible") ; 
               final ModelRoot modelRoot = getModelRoot();
boolean      v_isValid = true ;


Value_c v_rval = (Value_c) modelRoot.getInstanceList(Value_c.class).getGlobal(null, p_Rval);


if ( (  (v_rval == null)) )
{

return false;



}

ArrayElementReference_c v_l_aer = ArrayElementReference_c.getOneV_AEROnR801(this);


ArrayElementReference_c v_r_aer = ArrayElementReference_c.getOneV_AEROnR801(v_rval);


ArrayElementReference_c v_l_tempAER = v_l_aer ;


ArrayElementReference_c v_r_tempAER = v_r_aer ;


while ( ((  (v_l_tempAER != null) &&   (v_r_tempAER != null)) && v_isValid) )
{

v_l_tempAER = ArrayElementReference_c.getOneV_AEROnR801(Value_c.getOneV_VALOnR838(v_l_aer));


v_r_tempAER = ArrayElementReference_c.getOneV_AEROnR801(Value_c.getOneV_VALOnR838(v_r_aer));


if ( (  (v_l_tempAER != null)) )
{

v_l_aer = v_l_tempAER ;


if ( (  (v_r_tempAER != null)) )
{

v_l_aer = v_l_tempAER ;



}

else
{

v_isValid = false ;



}


}

else
{

if ( (  (v_r_tempAER != null)) )
{

v_isValid = false ;



}


}


}

int          v_dimension = 0 ;


while ( ((  (v_l_aer != null) &&   (v_r_aer != null)) && v_isValid) )
{

int          v_l_actualSize = Getarraylength(			    
v_dimension) ;


int          v_r_actualSize = v_rval.Getarraylength(			    
v_dimension) ;


if ( (v_l_actualSize != v_r_actualSize) )
{

v_isValid = false ;


break;



}

v_l_aer = ArrayElementReference_c.getOneV_AEROnR838(Value_c.getOneV_VALOnR801(v_l_aer));


v_r_aer = ArrayElementReference_c.getOneV_AEROnR838(Value_c.getOneV_VALOnR801(v_r_aer));


v_dimension = v_dimension + 1 ;



}

return v_isValid;



   } // End isElementCountCompatible

  // end transform functions


  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end Value
