package com.mentor.nucleus.bp.core.test;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/test/RenameTest.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_action_test.arc
// Version:      $Revision: 1.73 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//

import java.io.FileInputStream;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceStatus;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.AbstractTreeViewer;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import com.mentor.nucleus.bp.test.TestUtil;
import com.mentor.nucleus.bp.test.common.TestingUtilities;
import com.mentor.nucleus.bp.core.common.PersistableModelComponent;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.core.test.CoreTest;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.core.ui.perspective.BridgePointPerspective;
import com.mentor.nucleus.bp.io.mdl.ImportModel;
import com.mentor.nucleus.bp.ui.explorer.ExplorerTreeViewer;
import com.mentor.nucleus.bp.ui.explorer.ExplorerView;

public class RenameTest extends CoreTest {
	private static boolean firstTime = true;
	private static PersistableModelComponent m_pmc = null;

	/**
	 * The name of the main system and project manipulated during these tests.
	 */
	private static final String mainSystemName = "testRename1";

	/**
	 * Used by the ModelChangeListenersBatchingTest to reset the
	 * project and modelRoot variables
	 *
	 * @throws CoreException
	 */
	public void specialSetUp() throws CoreException {
		setupProject(mainSystemName);
		PersistableModelComponent pmc = ensureAvailableAndLoaded(
				mainSystemName, false, true);
		m_bp_tree.refresh();
		m_bp_tree.expandToLevel(pmc.getRootModelElement(),
				AbstractTreeViewer.ALL_LEVELS);
	}

	protected void setUp() throws Exception {
		super.setUp();
		Ooaofooa.setPersistEnabled(false);
		Ooaofooa.setConsistencyEnabled(true);
		if (firstTime) {
			initialized = false;
			m_pmc = initialize(mainSystemName, false);
			firstTime = false;
			Display d = Display.getDefault();
			while (d.readAndDispatch());
		}
		m_bp_tree.refresh();
		m_bp_tree.expandToLevel(m_pmc.getRootModelElement(),
				AbstractTreeViewer.ALL_LEVELS);
	}

	private void updateTreeItem(Object t1, String newValue) throws Exception {
		updateTreeItem(t1, newValue, false);
	}
	private void updateTreeItem(Object t1, String newValue,
			boolean useFocusChange) throws Exception {
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, false);
		m_bp_tree.getTree().selectAll();
		TreeItem x[] = m_bp_tree.getTree().getSelection();
		assertNotNull("Tree is empty", x);
		for (int i = 0; i < x.length; ++i) {
			if (x[i].getData() == t1) {
				TreeItem[] x_set = {x[i]};
				m_bp_tree.getTree().setSelection(x_set);
				RenameAction t2 = (RenameAction) CorePlugin
						.getRenameAction(m_bp_tree);
				t2.run();
				t2.getTextEditor().setText(newValue);
				Event e = new Event();
				Display d = Display.getDefault();
				if (useFocusChange) {
					if (i > 0) {
						String oldName = x[i - 1].getText();
						TreeItem[] y_set = {x[i - 1]};
						m_bp_tree.getTree().setSelection(y_set);
						e.type = SWT.FocusOut;
						e.widget = t2.getTextEditor();
						t2.getTextEditor().notifyListeners(e.type, e);
						assertTrue("Focus target name was corrupted",
								oldName.equals(x[i - 1].getText()));
					}
				} else {
					e.type = SWT.Traverse;
					e.detail = SWT.TRAVERSE_RETURN;
					e.widget = t2.getTextEditor();
					t2.getTextEditor().notifyListeners(e.type, e);
				}
				while (d.readAndDispatch());
				return;
			}
		}
		fail("Tree item not found");
	}

	public void testDatatypesPackageReadonly() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		assertNotNull(t1);
		assertEquals(t1.getName(),
				Ooaofooa.Getcoredatatypespackagename(modelRoot));
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, false);
		assertFalse(RenameAction.canRenameAction());
	}

	public void testRenameS_SYS() throws Exception {
		SystemModel_c t1 = SystemModel_c.SystemModelInstance(Ooaofooa
				.getDefaultInstance());
		assertNotNull(t1);
		String oldName = t1.getName();
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SYS", false);
		assertEquals("New_NameS_SYS", t1.getName());

		// rename the element back to its original name
		// so that succeeding tests that depend
		// on the model-root's ID being unchanged won't fail
		t1.setName(oldName);
		updateTreeItem(t1, oldName, false);
	}
	public void testRenameS_DOM() throws Exception {
		Domain_c t1 = Domain_c.DomainInstance(modelRoot);
		assertNotNull(t1);
		String oldName = t1.getName();
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_DOM", false);
		assertEquals("New_NameS_DOM", t1.getName());

		// rename the element back to its original name
		// so that succeeding tests that depend
		// on the model-root's ID being unchanged won't fail
		t1.setName(oldName);
		updateTreeItem(t1, oldName, false);
	}
	public void testRenameS_DOMusingFocus() throws Exception {
		Domain_c t1 = Domain_c.DomainInstance(modelRoot);
		assertNotNull(t1);
		String oldName = t1.getName();
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_DOM", true);
		assertEquals("New_NameS_DOM", t1.getName());

		// rename the element back to its original name
		// so that succeeding tests that depend
		// on the model-root's ID being unchanged won't fail
		t1.setName(oldName);
		updateTreeItem(t1, oldName, false);
	}
	public void testRenameSQ_S() throws Exception {
		Sequence_c t1 = Sequence_c.SequenceInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_S", false);
		assertEquals("New_NameSQ_S", t1.getName());
	}
	public void testRenameSQ_SusingFocus() throws Exception {
		Sequence_c t1 = Sequence_c.SequenceInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_S", true);
		assertEquals("New_NameSQ_S", t1.getName());
	}
	public void testRenameSQ_CP() throws Exception {
		ClassParticipant_c t1 = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CP", false);
		assertEquals("New_NameSQ_CP", t1.getInformalname());
	}
	public void testRenameSQ_CPusingFocus() throws Exception {
		ClassParticipant_c t1 = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CP", true);
		assertEquals("New_NameSQ_CP", t1.getInformalname());
	}
	public void testRenameMSG_A() throws Exception {
		MessageArgument_c t1 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_A", false);
		assertEquals("New_NameMSG_A", t1.getInformalname());
	}
	public void testRenameMSG_AusingFocus() throws Exception {
		MessageArgument_c t1 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_A", true);
		assertEquals("New_NameMSG_A", t1.getInformalname());
	}
	public void testRenameSQ_COP() throws Exception {
		ComponentParticipant_c t1 = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_COP", false);
		assertEquals("New_NameSQ_COP", t1.getName());
	}
	public void testRenameSQ_COPusingFocus() throws Exception {
		ComponentParticipant_c t1 = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_COP", true);
		assertEquals("New_NameSQ_COP", t1.getName());
	}
	public void testRenameSQ_AV() throws Exception {
		InstanceAttributeValue_c t1 = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_AV", false);
		assertEquals("New_NameSQ_AV", t1.getInformalname());
	}
	public void testRenameSQ_AVusingFocus() throws Exception {
		InstanceAttributeValue_c t1 = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_AV", true);
		assertEquals("New_NameSQ_AV", t1.getInformalname());
	}
	public void testRenameSQ_CPA() throws Exception {
		ClassParticipantAttribute_c t1 = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CPA", false);
		assertEquals("New_NameSQ_CPA", t1.getName());
	}
	public void testRenameSQ_CPAusingFocus() throws Exception {
		ClassParticipantAttribute_c t1 = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CPA", true);
		assertEquals("New_NameSQ_CPA", t1.getName());
	}
	public void testRenameSQ_EEP() throws Exception {
		ExternalEntityParticipant_c t1 = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_EEP", false);
		assertEquals("New_NameSQ_EEP", t1.getInformalname());
	}
	public void testRenameSQ_EEPusingFocus() throws Exception {
		ExternalEntityParticipant_c t1 = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_EEP", true);
		assertEquals("New_NameSQ_EEP", t1.getInformalname());
	}
	public void testRenameSQ_FPP() throws Exception {
		FunctionPackageParticipant_c t1 = FunctionPackageParticipant_c
				.FunctionPackageParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_FPP", false);
		assertEquals("New_NameSQ_FPP", t1.getInformalname());
	}
	public void testRenameSQ_FPPusingFocus() throws Exception {
		FunctionPackageParticipant_c t1 = FunctionPackageParticipant_c
				.FunctionPackageParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameSQ_FPP", true);
		assertEquals("New_NameSQ_FPP", t1.getInformalname());
	}
	public void testRenameSQ_CIP() throws Exception {
		ClassInstanceParticipant_c t1 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CIP", false);
		assertEquals("New_NameSQ_CIP", t1.getName());
	}
	public void testRenameSQ_CIPusingFocus() throws Exception {
		ClassInstanceParticipant_c t1 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_CIP", true);
		assertEquals("New_NameSQ_CIP", t1.getName());
	}
	public void testRenameMSG_SM() throws Exception {
		SynchronousMessage_c t1 = SynchronousMessage_c
				.SynchronousMessageInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_SM", false);
		assertEquals("New_NameMSG_SM", t1.getInformalname());
	}
	public void testRenameMSG_SMusingFocus() throws Exception {
		SynchronousMessage_c t1 = SynchronousMessage_c
				.SynchronousMessageInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_SM", true);
		assertEquals("New_NameMSG_SM", t1.getInformalname());
	}
	public void testRenameMSG_AM() throws Exception {
		AsynchronousMessage_c t1 = AsynchronousMessage_c
				.AsynchronousMessageInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_AM", false);
		assertEquals("New_NameMSG_AM", t1.getInformalname());
	}
	public void testRenameMSG_AMusingFocus() throws Exception {
		AsynchronousMessage_c t1 = AsynchronousMessage_c
				.AsynchronousMessageInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");
		updateTreeItem(t1, "New_NameMSG_AM", true);
		assertEquals("New_NameMSG_AM", t1.getInformalname());
	}
	public void testRenameSQ_AP() throws Exception {
		ActorParticipant_c t1 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_AP", false);
		assertEquals("New_NameSQ_AP", t1.getName());
	}
	public void testRenameSQ_APusingFocus() throws Exception {
		ActorParticipant_c t1 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSQ_AP", true);
		assertEquals("New_NameSQ_AP", t1.getName());
	}
	public void testRenameS_DPK() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_DPK", false);
		assertEquals("New_NameS_DPK", t1.getName());
	}
	public void testRenameS_DPKusingFocus() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_DPK", true);
		assertEquals("New_NameS_DPK", t1.getName());
	}
	public void testRenameS_UDT() throws Exception {
		UserDataType_c t1 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_UDT", false);
		assertEquals("New_NameS_UDT", t2.getName());
	}
	public void testRenameS_UDTusingFocus() throws Exception {
		UserDataType_c t1 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_UDT", true);
		assertEquals("New_NameS_UDT", t2.getName());
	}
	public void testRenameS_EDT() throws Exception {
		EnumerationDataType_c t1 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EDT", false);
		assertEquals("New_NameS_EDT", t2.getName());
	}
	public void testRenameS_EDTusingFocus() throws Exception {
		EnumerationDataType_c t1 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EDT", true);
		assertEquals("New_NameS_EDT", t2.getName());
	}
	public void testRenameS_ENUM() throws Exception {
		Enumerator_c t1 = Enumerator_c.EnumeratorInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_ENUM", false);
		assertEquals("New_NameS_ENUM", t1.getName());
	}
	public void testRenameS_ENUMusingFocus() throws Exception {
		Enumerator_c t1 = Enumerator_c.EnumeratorInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_ENUM", true);
		assertEquals("New_NameS_ENUM", t1.getName());
	}
	public void testRenameCNST_CSP() throws Exception {
		ConstantSpecification_c t1 = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameCNST_CSP", false);
		assertEquals("New_NameCNST_CSP", t1.getName());
	}
	public void testRenameCNST_CSPusingFocus() throws Exception {
		ConstantSpecification_c t1 = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameCNST_CSP", true);
		assertEquals("New_NameCNST_CSP", t1.getName());
	}
	public void testRenameCNST_LSC() throws Exception {
		LiteralSymbolicConstant_c t1 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		assertNotNull(t1);
		SymbolicConstant_c t2 = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(t1));
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameCNST_LSC", false);
		assertEquals("New_NameCNST_LSC", t2.getName());
	}
	public void testRenameCNST_LSCusingFocus() throws Exception {
		LiteralSymbolicConstant_c t1 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		assertNotNull(t1);
		SymbolicConstant_c t2 = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(t1));
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameCNST_LSC", true);
		assertEquals("New_NameCNST_LSC", t2.getName());
	}
	public void testRenameS_FPK() throws Exception {
		FunctionPackage_c t1 = FunctionPackage_c
				.FunctionPackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_FPK", false);
		assertEquals("New_NameS_FPK", t1.getName());
	}
	public void testRenameS_FPKusingFocus() throws Exception {
		FunctionPackage_c t1 = FunctionPackage_c
				.FunctionPackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_FPK", true);
		assertEquals("New_NameS_FPK", t1.getName());
	}
	public void testRenameS_SYNC() throws Exception {
		Function_c t1 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SYNC", false);
		assertEquals("New_NameS_SYNC", t1.getName());
	}
	public void testRenameS_SYNCusingFocus() throws Exception {
		Function_c t1 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SYNC", true);
		assertEquals("New_NameS_SYNC", t1.getName());
	}
	public void testRenameS_SPARM() throws Exception {
		FunctionParameter_c t1 = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SPARM", false);
		assertEquals("New_NameS_SPARM", t1.getName());
	}
	public void testRenameS_SPARMusingFocus() throws Exception {
		FunctionParameter_c t1 = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SPARM", true);
		assertEquals("New_NameS_SPARM", t1.getName());
	}
	public void testRenameS_EEPK() throws Exception {
		ExternalEntityPackage_c t1 = ExternalEntityPackage_c
				.ExternalEntityPackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EEPK", false);
		assertEquals("New_NameS_EEPK", t1.getName());
	}
	public void testRenameS_EEPKusingFocus() throws Exception {
		ExternalEntityPackage_c t1 = ExternalEntityPackage_c
				.ExternalEntityPackageInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EEPK", true);
		assertEquals("New_NameS_EEPK", t1.getName());
	}
	public void testRenameS_EE() throws Exception {
		ExternalEntity_c t1 = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EE", false);
		assertEquals("New_NameS_EE", t1.getName());
	}
	public void testRenameS_EEusingFocus() throws Exception {
		ExternalEntity_c t1 = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_EE", true);
		assertEquals("New_NameS_EE", t1.getName());
	}
	public void testRenameS_BRG() throws Exception {
		Bridge_c t1 = Bridge_c.BridgeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_BRG", false);
		assertEquals("New_NameS_BRG", t1.getName());
	}
	public void testRenameS_BRGusingFocus() throws Exception {
		Bridge_c t1 = Bridge_c.BridgeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_BRG", true);
		assertEquals("New_NameS_BRG", t1.getName());
	}
	public void testRenameS_BPARM() throws Exception {
		BridgeParameter_c t1 = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_BPARM", false);
		assertEquals("New_NameS_BPARM", t1.getName());
	}
	public void testRenameS_BPARMusingFocus() throws Exception {
		BridgeParameter_c t1 = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_BPARM", true);
		assertEquals("New_NameS_BPARM", t1.getName());
	}
	public void testRenameS_SS() throws Exception {
		Subsystem_c t1 = Subsystem_c.SubsystemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SS", false);
		assertEquals("New_NameS_SS", t1.getName());
	}
	public void testRenameS_SSusingFocus() throws Exception {
		Subsystem_c t1 = Subsystem_c.SubsystemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SS", true);
		assertEquals("New_NameS_SS", t1.getName());
	}
	public void testRenameO_OBJ() throws Exception {
		ModelClass_c t1 = ModelClass_c.ModelClassInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_OBJ", false);
		assertEquals("New_NameO_OBJ", t1.getName());
	}
	public void testRenameO_OBJusingFocus() throws Exception {
		ModelClass_c t1 = ModelClass_c.ModelClassInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_OBJ", true);
		assertEquals("New_NameO_OBJ", t1.getName());
	}
	public void testRenameO_ATTR() throws Exception {
		Attribute_c t1 = Attribute_c.AttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setRoot_nam("Old_Name");
		updateTreeItem(t1, "New_NameO_ATTR", false);
		assertEquals("New_NameO_ATTR", t1.getName());
	}
	public void testRenameO_ATTRusingFocus() throws Exception {
		Attribute_c t1 = Attribute_c.AttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setRoot_nam("Old_Name");
		updateTreeItem(t1, "New_NameO_ATTR", true);
		assertEquals("New_NameO_ATTR", t1.getName());
	}
	public void testRenameO_TFR() throws Exception {
		Operation_c t1 = Operation_c.OperationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_TFR", false);
		assertEquals("New_NameO_TFR", t1.getName());
	}
	public void testRenameO_TFRusingFocus() throws Exception {
		Operation_c t1 = Operation_c.OperationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_TFR", true);
		assertEquals("New_NameO_TFR", t1.getName());
	}
	public void testRenameO_TPARM() throws Exception {
		OperationParameter_c t1 = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_TPARM", false);
		assertEquals("New_NameO_TPARM", t1.getName());
	}
	public void testRenameO_TPARMusingFocus() throws Exception {
		OperationParameter_c t1 = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameO_TPARM", true);
		assertEquals("New_NameO_TPARM", t1.getName());
	}
	public void testRenameSM_EVT() throws Exception {
		StateMachineEvent_c t1 = StateMachineEvent_c
				.StateMachineEventInstance(modelRoot);
		assertNotNull(t1);
		t1.setMning("Old_Name");
		updateTreeItem(t1, "New_NameSM_EVT", false);
		assertEquals("New_NameSM_EVT", t1.getMning());
	}
	public void testRenameSM_EVTusingFocus() throws Exception {
		StateMachineEvent_c t1 = StateMachineEvent_c
				.StateMachineEventInstance(modelRoot);
		assertNotNull(t1);
		t1.setMning("Old_Name");
		updateTreeItem(t1, "New_NameSM_EVT", true);
		assertEquals("New_NameSM_EVT", t1.getMning());
	}
	public void testRenameSM_EVTDI() throws Exception {
		StateMachineEventDataItem_c t1 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSM_EVTDI", false);
		assertEquals("New_NameSM_EVTDI", t1.getName());
	}
	public void testRenameSM_EVTDIusingFocus() throws Exception {
		StateMachineEventDataItem_c t1 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSM_EVTDI", true);
		assertEquals("New_NameSM_EVTDI", t1.getName());
	}
	public void testRenameSM_STATE() throws Exception {
		StateMachineState_c t1 = StateMachineState_c
				.StateMachineStateInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSM_STATE", false);
		assertEquals("New_NameSM_STATE", t1.getName());
	}
	public void testRenameSM_STATEusingFocus() throws Exception {
		StateMachineState_c t1 = StateMachineState_c
				.StateMachineStateInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameSM_STATE", true);
		assertEquals("New_NameSM_STATE", t1.getName());
	}
	public void testRenameCOMM_COMM() throws Exception {
		Communication_c t1 = Communication_c.CommunicationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameCOMM_COMM", false);
		assertEquals("New_NameCOMM_COMM", t1.getName());
	}
	public void testRenameCOMM_COMMusingFocus() throws Exception {
		Communication_c t1 = Communication_c.CommunicationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameCOMM_COMM", true);
		assertEquals("New_NameCOMM_COMM", t1.getName());
	}
	public void testRenameUC_UCC() throws Exception {
		UseCaseDiagram_c t1 = UseCaseDiagram_c
				.UseCaseDiagramInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameUC_UCC", false);
		assertEquals("New_NameUC_UCC", t1.getName());
	}
	public void testRenameUC_UCCusingFocus() throws Exception {
		UseCaseDiagram_c t1 = UseCaseDiagram_c
				.UseCaseDiagramInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameUC_UCC", true);
		assertEquals("New_NameUC_UCC", t1.getName());
	}
	public void testRenameIA_UCP() throws Exception {
		UseCaseParticipant_c t1 = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameIA_UCP", false);
		assertEquals("New_NameIA_UCP", t1.getName());
	}
	public void testRenameIA_UCPusingFocus() throws Exception {
		UseCaseParticipant_c t1 = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameIA_UCP", true);
		assertEquals("New_NameIA_UCP", t1.getName());
	}
	public void testRenameA_A() throws Exception {
		Activity_c t1 = Activity_c.ActivityInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_A", false);
		assertEquals("New_NameA_A", t1.getName());
	}
	public void testRenameA_AusingFocus() throws Exception {
		Activity_c t1 = Activity_c.ActivityInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_A", true);
		assertEquals("New_NameA_A", t1.getName());
	}
	public void testRenameA_GA() throws Exception {
		ActivityDiagramAction_c t1 = ActivityDiagramAction_c
				.ActivityDiagramActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_GA", false);
		assertEquals("New_NameA_GA", t1.getName());
	}
	public void testRenameA_GAusingFocus() throws Exception {
		ActivityDiagramAction_c t1 = ActivityDiagramAction_c
				.ActivityDiagramActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_GA", true);
		assertEquals("New_NameA_GA", t1.getName());
	}
	public void testRenameA_OBJ() throws Exception {
		ObjectNode_c t1 = ObjectNode_c.ObjectNodeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_OBJ", false);
		assertEquals("New_NameA_OBJ", t1.getName());
	}
	public void testRenameA_OBJusingFocus() throws Exception {
		ObjectNode_c t1 = ObjectNode_c.ObjectNodeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_OBJ", true);
		assertEquals("New_NameA_OBJ", t1.getName());
	}
	public void testRenameA_AEA() throws Exception {
		AcceptEventAction_c t1 = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_AEA", false);
		assertEquals("New_NameA_AEA", t1.getName());
	}
	public void testRenameA_AEAusingFocus() throws Exception {
		AcceptEventAction_c t1 = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_AEA", true);
		assertEquals("New_NameA_AEA", t1.getName());
	}
	public void testRenameA_ATE() throws Exception {
		AcceptTimeEventAction_c t1 = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_ATE", false);
		assertEquals("New_NameA_ATE", t1.getName());
	}
	public void testRenameA_ATEusingFocus() throws Exception {
		AcceptTimeEventAction_c t1 = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_ATE", true);
		assertEquals("New_NameA_ATE", t1.getName());
	}
	public void testRenameA_SS() throws Exception {
		SendSignal_c t1 = SendSignal_c.SendSignalInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_SS", false);
		assertEquals("New_NameA_SS", t1.getName());
	}
	public void testRenameA_SSusingFocus() throws Exception {
		SendSignal_c t1 = SendSignal_c.SendSignalInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameA_SS", true);
		assertEquals("New_NameA_SS", t1.getName());
	}
	public void testRenameS_SDT() throws Exception {
		StructuredDataType_c t1 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SDT", false);
		assertEquals("New_NameS_SDT", t2.getName());
	}
	public void testRenameS_SDTusingFocus() throws Exception {
		StructuredDataType_c t1 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_SDT", true);
		assertEquals("New_NameS_SDT", t2.getName());
	}
	public void testRenameS_MBR() throws Exception {
		StructureMember_c t1 = StructureMember_c
				.StructureMemberInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_MBR", false);
		assertEquals("New_NameS_MBR", t1.getName());
	}
	public void testRenameS_MBRusingFocus() throws Exception {
		StructureMember_c t1 = StructureMember_c
				.StructureMemberInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");
		updateTreeItem(t1, "New_NameS_MBR", true);
		assertEquals("New_NameS_MBR", t1.getName());
	}

	public void testRenameWithSpaceMSG_A() throws Exception {
		MessageArgument_c t1 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getInformalname());
	}
	public void testRenameWithSpaceMSG_AusingFocus() throws Exception {
		MessageArgument_c t1 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t1);
		t1.setInformalname("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getInformalname());
	}
	public void testRenameWithSpaceS_UDT() throws Exception {
		UserDataType_c t1 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", false);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_UDTusingFocus() throws Exception {
		UserDataType_c t1 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", true);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_EDT() throws Exception {
		EnumerationDataType_c t1 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", false);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_EDTusingFocus() throws Exception {
		EnumerationDataType_c t1 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", true);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_ENUM() throws Exception {
		Enumerator_c t1 = Enumerator_c.EnumeratorInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_ENUMusingFocus() throws Exception {
		Enumerator_c t1 = Enumerator_c.EnumeratorInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceCNST_LSC() throws Exception {
		LiteralSymbolicConstant_c t1 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		assertNotNull(t1);
		SymbolicConstant_c t2 = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(t1));
		t2.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t2.getName());
	}
	public void testRenameWithSpaceCNST_LSCusingFocus() throws Exception {
		LiteralSymbolicConstant_c t1 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		assertNotNull(t1);
		SymbolicConstant_c t2 = SymbolicConstant_c
				.getOneCNST_SYCOnR1502(LeafSymbolicConstant_c
						.getOneCNST_LFSCOnR1503(t1));
		t2.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t2.getName());
	}
	public void testRenameWithSpaceS_SYNC() throws Exception {
		Function_c t1 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_SYNCusingFocus() throws Exception {
		Function_c t1 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_SPARM() throws Exception {
		FunctionParameter_c t1 = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_SPARMusingFocus() throws Exception {
		FunctionParameter_c t1 = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_BRG() throws Exception {
		Bridge_c t1 = Bridge_c.BridgeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_BRGusingFocus() throws Exception {
		Bridge_c t1 = Bridge_c.BridgeInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_BPARM() throws Exception {
		BridgeParameter_c t1 = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_BPARMusingFocus() throws Exception {
		BridgeParameter_c t1 = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_ATTR() throws Exception {
		Attribute_c t1 = Attribute_c.AttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setRoot_nam("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_ATTRusingFocus() throws Exception {
		Attribute_c t1 = Attribute_c.AttributeInstance(modelRoot);
		assertNotNull(t1);
		t1.setRoot_nam("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_TFR() throws Exception {
		Operation_c t1 = Operation_c.OperationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_TFRusingFocus() throws Exception {
		Operation_c t1 = Operation_c.OperationInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_TPARM() throws Exception {
		OperationParameter_c t1 = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceO_TPARMusingFocus() throws Exception {
		OperationParameter_c t1 = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceSM_EVTDI() throws Exception {
		StateMachineEventDataItem_c t1 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceSM_EVTDIusingFocus() throws Exception {
		StateMachineEventDataItem_c t1 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_SDT() throws Exception {
		StructuredDataType_c t1 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", false);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_SDTusingFocus() throws Exception {
		StructuredDataType_c t1 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t1);
		DataType_c t2 = DataType_c.getOneS_DTOnR17(t1);
		t2.setName("Old_Name");
		updateTreeItem(t1, "New Name", true);
		assertEquals("New Name", t2.getName());
	}
	public void testRenameWithSpaceS_MBR() throws Exception {
		StructureMember_c t1 = StructureMember_c
				.StructureMemberInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", false);

		assertEquals("Old_Name", t1.getName());
	}
	public void testRenameWithSpaceS_MBRusingFocus() throws Exception {
		StructureMember_c t1 = StructureMember_c
				.StructureMemberInstance(modelRoot);
		assertNotNull(t1);
		t1.setName("Old_Name");

		TestUtil.dismissDialog(500);

		updateTreeItem(t1, "New Name", true);

		assertEquals("Old_Name", t1.getName());
	}

	/**
	 * Is created by testRenameS_SYSWithConflict() below and then also used later
	 * by testRenameS_DOMWithInterProjectConflict().
	 */
	private static final String nameOfExtraSystem = "extra";

	public void testRenameS_SYSWithConflict() throws Exception {
		// create an extra system besides the one created in setUp()
		// to ensure we have two present
		TestingUtilities.createProject(nameOfExtraSystem);

		SystemModel_c[] t1 = SystemModel_c.SystemModelInstances(Ooaofooa
				.getDefaultInstance());
		assertNotNull(t1);
		assertTrue(t1.length >= 2);
		String oldName = t1[0].getName();
		String newName = t1[1].getName();
		TestUtil.dismissDialog(2000);
		updateTreeItem(t1[0], newName);
		assertEquals(oldName, t1[0].getName());
	}
	public void testRenameS_DOMWithConflict() throws Exception {
		// copy a second model into the main system, to ensure we have two
		// present; also, get it noticed by Eclipse
		Object[] dom_set = getMainSystem().getChildren();

		if (dom_set.length < 2) {
			IProject mainProject = CorePlugin.getWorkspace().getRoot()
					.getProject(mainSystemName);
			ensureAvailableAndLoaded("Models", "small", mainProject, false,
					true);
			mainProject.refreshLocal(IResource.DEPTH_INFINITE,
					new NullProgressMonitor());
		}

		dom_set = getDomainSet();
		Domain_c dom1 = (Domain_c) dom_set[0];
		Domain_c dom2 = (Domain_c) dom_set[1];
		String oldName = dom1.getName();
		String newName = dom2.getName();
		TestUtil.dismissDialog(2000);
		updateTreeItem(dom1, newName);
		assertEquals(oldName, dom1.getName());
	}
	public void testRenameS_DOMWithInterProjectConflict() throws Exception {
		// copy a model into the extra system created previously so that
		// we can detm whether renaming a model in the main system to this copied
		// model's name is allowed; also, get the new model noticed by Eclipse
		String extraSystemModelName = "odms1";
		//recreate if not present.
		IProject extraProject = TestingUtilities
				.createProject(nameOfExtraSystem);
		ensureAvailableAndLoaded("Models", extraSystemModelName, extraProject,
				false, true);
		extraProject.refreshLocal(IResource.DEPTH_INFINITE,
				new NullProgressMonitor());

		Object[] dom_set = getMainSystem().getChildren();
		Domain_c dom1 = (Domain_c) dom_set[0];
		String newName = extraSystemModelName;
		updateTreeItem(dom1, newName);
		assertEquals(newName, dom1.getName());
	}

	private Object[] getDomainSet() {
		SystemModel_c sysMod = getMainSystem();
		assertNotNull(sysMod);
		Object[] dom_set = sysMod.getChildren();
		assertTrue(dom_set.length >= 2);

		// refresh the explorer tree in case any domains were loaded
		// from their proxies, above
		m_bp_tree.refresh();

		return dom_set;
	}

	/**
	 * Returns the main system manipulated during these tests.
	 */
	private SystemModel_c getMainSystem() {
		return SystemModel_c.SystemModelInstance(Ooaofooa.getDefaultInstance(),
				new ClassQueryInterface_c() {
					public boolean evaluate(Object candidate) {
						SystemModel_c selected = (SystemModel_c) candidate;
						return selected.getName().equals(mainSystemName);
					}
				});
	}
}
