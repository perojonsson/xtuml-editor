//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrixFull.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts_full;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_18 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_18(String arg0) {
        super("CopyPasteSourceDestinationTests_18", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B37).
     * 
     */
    public void testA49_B37() {
        test_id = getTestId("A49", "B37", "1");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B38).
     * 
     */
    public void testA49_B38() {
        test_id = getTestId("A49", "B38", "2");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B39).
     * 
     */
    public void testA49_B39() {
        test_id = getTestId("A49", "B39", "3");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B40).
     * 
     */
    public void testA49_B40() {
        test_id = getTestId("A49", "B40", "4");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B41).
     * 
     */
    public void testA49_B41() {
        test_id = getTestId("A49", "B41", "5");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B42).
     * 
     */
    public void testA49_B42() {
        test_id = getTestId("A49", "B42", "6");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B43).
     * 
     */
    public void testA49_B43() {
        test_id = getTestId("A49", "B43", "7");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B44).
     * 
     */
    public void testA49_B44() {
        test_id = getTestId("A49", "B44", "8");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B45).
     * 
     */
    public void testA49_B45() {
        test_id = getTestId("A49", "B45", "9");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B46).
     * 
     */
    public void testA49_B46() {
        test_id = getTestId("A49", "B46", "10");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B47).
     * 
     */
    public void testA49_B47() {
        test_id = getTestId("A49", "B47", "11");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B48).
     * 
     */
    public void testA49_B48() {
        test_id = getTestId("A49", "B48", "12");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B49).
     * 
     */
    public void testA49_B49() {
        test_id = getTestId("A49", "B49", "13");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B50).
     * 
     */
    public void testA49_B50() {
        test_id = getTestId("A49", "B50", "14");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B51).
     * 
     */
    public void testA49_B51() {
        test_id = getTestId("A49", "B51", "15");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B52).
     * 
     */
    public void testA49_B52() {
        test_id = getTestId("A49", "B52", "16");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B53).
     * 
     */
    public void testA49_B53() {
        test_id = getTestId("A49", "B53", "17");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B54).
     * 
     */
    public void testA49_B54() {
        test_id = getTestId("A49", "B54", "18");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B55).
     * 
     */
    public void testA49_B55() {
        test_id = getTestId("A49", "B55", "19");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B56).
     * 
     */
    public void testA49_B56() {
        test_id = getTestId("A49", "B56", "20");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B57).
     * 
     */
    public void testA49_B57() {
        test_id = getTestId("A49", "B57", "21");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B58).
     * 
     */
    public void testA49_B58() {
        test_id = getTestId("A49", "B58", "22");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B59).
     * 
     */
    public void testA49_B59() {
        test_id = getTestId("A49", "B59", "23");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B60).
     * 
     */
    public void testA49_B60() {
        test_id = getTestId("A49", "B60", "24");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B61).
     * 
     */
    public void testA49_B61() {
        test_id = getTestId("A49", "B61", "25");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B62).
     * 
     */
    public void testA49_B62() {
        test_id = getTestId("A49", "B62", "26");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B63).
     * 
     */
    public void testA49_B63() {
        test_id = getTestId("A49", "B63", "27");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B64).
     * 
     */
    public void testA49_B64() {
        test_id = getTestId("A49", "B64", "28");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B65).
     * 
     */
    public void testA49_B65() {
        test_id = getTestId("A49", "B65", "29");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B66).
     * 
     */
    public void testA49_B66() {
        test_id = getTestId("A49", "B66", "30");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B67).
     * 
     */
    public void testA49_B67() {
        test_id = getTestId("A49", "B67", "31");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B68).
     * 
     */
    public void testA49_B68() {
        test_id = getTestId("A49", "B68", "32");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B69).
     * 
     */
    public void testA49_B69() {
        test_id = getTestId("A49", "B69", "33");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B70).
     * 
     */
    public void testA49_B70() {
        test_id = getTestId("A49", "B70", "34");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B71).
     * 
     */
    public void testA49_B71() {
        test_id = getTestId("A49", "B71", "35");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B72).
     * 
     */
    public void testA49_B72() {
        test_id = getTestId("A49", "B72", "36");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B73).
     * 
     */
    public void testA49_B73() {
        test_id = getTestId("A49", "B73", "37");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B74).
     * 
     */
    public void testA49_B74() {
        test_id = getTestId("A49", "B74", "38");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B75).
     * 
     */
    public void testA49_B75() {
        test_id = getTestId("A49", "B75", "39");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B76).
     * 
     */
    public void testA49_B76() {
        test_id = getTestId("A49", "B76", "40");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B77).
     * 
     */
    public void testA49_B77() {
        test_id = getTestId("A49", "B77", "41");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B78).
     * 
     */
    public void testA49_B78() {
        test_id = getTestId("A49", "B78", "42");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B79).
     * 
     */
    public void testA49_B79() {
        test_id = getTestId("A49", "B79", "43");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B80).
     * 
     */
    public void testA49_B80() {
        test_id = getTestId("A49", "B80", "44");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B81).
     * 
     */
    public void testA49_B81() {
        test_id = getTestId("A49", "B81", "45");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B82).
     * 
     */
    public void testA49_B82() {
        test_id = getTestId("A49", "B82", "46");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B83).
     * 
     */
    public void testA49_B83() {
        test_id = getTestId("A49", "B83", "47");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B84).
     * 
     */
    public void testA49_B84() {
        test_id = getTestId("A49", "B84", "48");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B85).
     * 
     */
    public void testA49_B85() {
        test_id = getTestId("A49", "B85", "49");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B86).
     * 
     */
    public void testA49_B86() {
        test_id = getTestId("A49", "B86", "50");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B87).
     * 
     */
    public void testA49_B87() {
        test_id = getTestId("A49", "B87", "51");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B88).
     * 
     */
    public void testA49_B88() {
        test_id = getTestId("A49", "B88", "52");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B89).
     * 
     */
    public void testA49_B89() {
        test_id = getTestId("A49", "B89", "53");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B90).
     * 
     */
    public void testA49_B90() {
        test_id = getTestId("A49", "B90", "54");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B91).
     * 
     */
    public void testA49_B91() {
        test_id = getTestId("A49", "B91", "55");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B92).
     * 
     */
    public void testA49_B92() {
        test_id = getTestId("A49", "B92", "56");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A49) and row (B93).
     * 
     */
    public void testA49_B93() {
        test_id = getTestId("A49", "B93", "57");

        NonRootModelElement src = selectA("A49");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B1).
     * 
     */
    public void testA50_B1() {
        test_id = getTestId("A50", "B1", "58");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B2).
     * 
     */
    public void testA50_B2() {
        test_id = getTestId("A50", "B2", "59");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B3).
     * 
     */
    public void testA50_B3() {
        test_id = getTestId("A50", "B3", "60");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B4).
     * 
     */
    public void testA50_B4() {
        test_id = getTestId("A50", "B4", "61");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B5).
     * 
     */
    public void testA50_B5() {
        test_id = getTestId("A50", "B5", "62");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B6).
     * 
     */
    public void testA50_B6() {
        test_id = getTestId("A50", "B6", "63");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B7).
     * 
     */
    public void testA50_B7() {
        test_id = getTestId("A50", "B7", "64");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B8).
     * 
     */
    public void testA50_B8() {
        test_id = getTestId("A50", "B8", "65");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B9).
     * 
     */
    public void testA50_B9() {
        test_id = getTestId("A50", "B9", "66");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B10).
     * 
     */
    public void testA50_B10() {
        test_id = getTestId("A50", "B10", "67");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B11).
     * 
     */
    public void testA50_B11() {
        test_id = getTestId("A50", "B11", "68");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B12).
     * 
     */
    public void testA50_B12() {
        test_id = getTestId("A50", "B12", "69");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B13).
     * 
     */
    public void testA50_B13() {
        test_id = getTestId("A50", "B13", "70");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B14).
     * 
     */
    public void testA50_B14() {
        test_id = getTestId("A50", "B14", "71");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B15).
     * 
     */
    public void testA50_B15() {
        test_id = getTestId("A50", "B15", "72");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B16).
     * 
     */
    public void testA50_B16() {
        test_id = getTestId("A50", "B16", "73");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B17).
     * 
     */
    public void testA50_B17() {
        test_id = getTestId("A50", "B17", "74");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B18).
     * 
     */
    public void testA50_B18() {
        test_id = getTestId("A50", "B18", "75");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B19).
     * 
     */
    public void testA50_B19() {
        test_id = getTestId("A50", "B19", "76");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B20).
     * 
     */
    public void testA50_B20() {
        test_id = getTestId("A50", "B20", "77");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B21).
     * 
     */
    public void testA50_B21() {
        test_id = getTestId("A50", "B21", "78");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B22).
     * 
     */
    public void testA50_B22() {
        test_id = getTestId("A50", "B22", "79");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B23).
     * 
     */
    public void testA50_B23() {
        test_id = getTestId("A50", "B23", "80");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B24).
     * 
     */
    public void testA50_B24() {
        test_id = getTestId("A50", "B24", "81");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B25).
     * 
     */
    public void testA50_B25() {
        test_id = getTestId("A50", "B25", "82");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B26).
     * 
     */
    public void testA50_B26() {
        test_id = getTestId("A50", "B26", "83");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B27).
     * 
     */
    public void testA50_B27() {
        test_id = getTestId("A50", "B27", "84");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B28).
     * 
     */
    public void testA50_B28() {
        test_id = getTestId("A50", "B28", "85");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B29).
     * 
     */
    public void testA50_B29() {
        test_id = getTestId("A50", "B29", "86");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B30).
     * 
     */
    public void testA50_B30() {
        test_id = getTestId("A50", "B30", "87");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B31).
     * 
     */
    public void testA50_B31() {
        test_id = getTestId("A50", "B31", "88");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B32).
     * 
     */
    public void testA50_B32() {
        test_id = getTestId("A50", "B32", "89");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B33).
     * 
     */
    public void testA50_B33() {
        test_id = getTestId("A50", "B33", "90");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B34).
     * 
     */
    public void testA50_B34() {
        test_id = getTestId("A50", "B34", "91");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B35).
     * 
     */
    public void testA50_B35() {
        test_id = getTestId("A50", "B35", "92");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B36).
     * 
     */
    public void testA50_B36() {
        test_id = getTestId("A50", "B36", "93");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B37).
     * 
     */
    public void testA50_B37() {
        test_id = getTestId("A50", "B37", "94");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B38).
     * 
     */
    public void testA50_B38() {
        test_id = getTestId("A50", "B38", "95");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B39).
     * 
     */
    public void testA50_B39() {
        test_id = getTestId("A50", "B39", "96");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B40).
     * 
     */
    public void testA50_B40() {
        test_id = getTestId("A50", "B40", "97");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B41).
     * 
     */
    public void testA50_B41() {
        test_id = getTestId("A50", "B41", "98");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B42).
     * 
     */
    public void testA50_B42() {
        test_id = getTestId("A50", "B42", "99");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B43).
     * 
     */
    public void testA50_B43() {
        test_id = getTestId("A50", "B43", "100");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B44).
     * 
     */
    public void testA50_B44() {
        test_id = getTestId("A50", "B44", "101");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B45).
     * 
     */
    public void testA50_B45() {
        test_id = getTestId("A50", "B45", "102");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B46).
     * 
     */
    public void testA50_B46() {
        test_id = getTestId("A50", "B46", "103");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B47).
     * 
     */
    public void testA50_B47() {
        test_id = getTestId("A50", "B47", "104");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B48).
     * 
     */
    public void testA50_B48() {
        test_id = getTestId("A50", "B48", "105");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B49).
     * 
     */
    public void testA50_B49() {
        test_id = getTestId("A50", "B49", "106");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B50).
     * 
     */
    public void testA50_B50() {
        test_id = getTestId("A50", "B50", "107");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B51).
     * 
     */
    public void testA50_B51() {
        test_id = getTestId("A50", "B51", "108");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B52).
     * 
     */
    public void testA50_B52() {
        test_id = getTestId("A50", "B52", "109");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B53).
     * 
     */
    public void testA50_B53() {
        test_id = getTestId("A50", "B53", "110");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B54).
     * 
     */
    public void testA50_B54() {
        test_id = getTestId("A50", "B54", "111");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B55).
     * 
     */
    public void testA50_B55() {
        test_id = getTestId("A50", "B55", "112");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B56).
     * 
     */
    public void testA50_B56() {
        test_id = getTestId("A50", "B56", "113");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B57).
     * 
     */
    public void testA50_B57() {
        test_id = getTestId("A50", "B57", "114");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B58).
     * 
     */
    public void testA50_B58() {
        test_id = getTestId("A50", "B58", "115");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B59).
     * 
     */
    public void testA50_B59() {
        test_id = getTestId("A50", "B59", "116");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B60).
     * 
     */
    public void testA50_B60() {
        test_id = getTestId("A50", "B60", "117");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B61).
     * 
     */
    public void testA50_B61() {
        test_id = getTestId("A50", "B61", "118");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B62).
     * 
     */
    public void testA50_B62() {
        test_id = getTestId("A50", "B62", "119");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B63).
     * 
     */
    public void testA50_B63() {
        test_id = getTestId("A50", "B63", "120");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B64).
     * 
     */
    public void testA50_B64() {
        test_id = getTestId("A50", "B64", "121");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B65).
     * 
     */
    public void testA50_B65() {
        test_id = getTestId("A50", "B65", "122");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B66).
     * 
     */
    public void testA50_B66() {
        test_id = getTestId("A50", "B66", "123");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B67).
     * 
     */
    public void testA50_B67() {
        test_id = getTestId("A50", "B67", "124");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B68).
     * 
     */
    public void testA50_B68() {
        test_id = getTestId("A50", "B68", "125");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B69).
     * 
     */
    public void testA50_B69() {
        test_id = getTestId("A50", "B69", "126");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B70).
     * 
     */
    public void testA50_B70() {
        test_id = getTestId("A50", "B70", "127");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B71).
     * 
     */
    public void testA50_B71() {
        test_id = getTestId("A50", "B71", "128");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B72).
     * 
     */
    public void testA50_B72() {
        test_id = getTestId("A50", "B72", "129");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B73).
     * 
     */
    public void testA50_B73() {
        test_id = getTestId("A50", "B73", "130");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B74).
     * 
     */
    public void testA50_B74() {
        test_id = getTestId("A50", "B74", "131");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B75).
     * 
     */
    public void testA50_B75() {
        test_id = getTestId("A50", "B75", "132");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B76).
     * 
     */
    public void testA50_B76() {
        test_id = getTestId("A50", "B76", "133");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B77).
     * 
     */
    public void testA50_B77() {
        test_id = getTestId("A50", "B77", "134");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B78).
     * 
     */
    public void testA50_B78() {
        test_id = getTestId("A50", "B78", "135");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B79).
     * 
     */
    public void testA50_B79() {
        test_id = getTestId("A50", "B79", "136");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B80).
     * 
     */
    public void testA50_B80() {
        test_id = getTestId("A50", "B80", "137");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B81).
     * 
     */
    public void testA50_B81() {
        test_id = getTestId("A50", "B81", "138");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B82).
     * 
     */
    public void testA50_B82() {
        test_id = getTestId("A50", "B82", "139");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B83).
     * 
     */
    public void testA50_B83() {
        test_id = getTestId("A50", "B83", "140");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B84).
     * 
     */
    public void testA50_B84() {
        test_id = getTestId("A50", "B84", "141");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B85).
     * 
     */
    public void testA50_B85() {
        test_id = getTestId("A50", "B85", "142");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B86).
     * 
     */
    public void testA50_B86() {
        test_id = getTestId("A50", "B86", "143");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B87).
     * 
     */
    public void testA50_B87() {
        test_id = getTestId("A50", "B87", "144");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B88).
     * 
     */
    public void testA50_B88() {
        test_id = getTestId("A50", "B88", "145");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B89).
     * 
     */
    public void testA50_B89() {
        test_id = getTestId("A50", "B89", "146");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B90).
     * 
     */
    public void testA50_B90() {
        test_id = getTestId("A50", "B90", "147");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B91).
     * 
     */
    public void testA50_B91() {
        test_id = getTestId("A50", "B91", "148");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B92).
     * 
     */
    public void testA50_B92() {
        test_id = getTestId("A50", "B92", "149");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A50) and row (B93).
     * 
     */
    public void testA50_B93() {
        test_id = getTestId("A50", "B93", "150");

        NonRootModelElement src = selectA("A50");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B1).
     * 
     */
    public void testA51_B1() {
        test_id = getTestId("A51", "B1", "151");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B2).
     * 
     */
    public void testA51_B2() {
        test_id = getTestId("A51", "B2", "152");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B3).
     * 
     */
    public void testA51_B3() {
        test_id = getTestId("A51", "B3", "153");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B4).
     * 
     */
    public void testA51_B4() {
        test_id = getTestId("A51", "B4", "154");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B5).
     * 
     */
    public void testA51_B5() {
        test_id = getTestId("A51", "B5", "155");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B6).
     * 
     */
    public void testA51_B6() {
        test_id = getTestId("A51", "B6", "156");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B7).
     * 
     */
    public void testA51_B7() {
        test_id = getTestId("A51", "B7", "157");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B8).
     * 
     */
    public void testA51_B8() {
        test_id = getTestId("A51", "B8", "158");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B9).
     * 
     */
    public void testA51_B9() {
        test_id = getTestId("A51", "B9", "159");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B10).
     * 
     */
    public void testA51_B10() {
        test_id = getTestId("A51", "B10", "160");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B11).
     * 
     */
    public void testA51_B11() {
        test_id = getTestId("A51", "B11", "161");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B12).
     * 
     */
    public void testA51_B12() {
        test_id = getTestId("A51", "B12", "162");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B13).
     * 
     */
    public void testA51_B13() {
        test_id = getTestId("A51", "B13", "163");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B14).
     * 
     */
    public void testA51_B14() {
        test_id = getTestId("A51", "B14", "164");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B15).
     * 
     */
    public void testA51_B15() {
        test_id = getTestId("A51", "B15", "165");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B16).
     * 
     */
    public void testA51_B16() {
        test_id = getTestId("A51", "B16", "166");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B17).
     * 
     */
    public void testA51_B17() {
        test_id = getTestId("A51", "B17", "167");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B18).
     * 
     */
    public void testA51_B18() {
        test_id = getTestId("A51", "B18", "168");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B19).
     * 
     */
    public void testA51_B19() {
        test_id = getTestId("A51", "B19", "169");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B20).
     * 
     */
    public void testA51_B20() {
        test_id = getTestId("A51", "B20", "170");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B21).
     * 
     */
    public void testA51_B21() {
        test_id = getTestId("A51", "B21", "171");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B22).
     * 
     */
    public void testA51_B22() {
        test_id = getTestId("A51", "B22", "172");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B23).
     * 
     */
    public void testA51_B23() {
        test_id = getTestId("A51", "B23", "173");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B24).
     * 
     */
    public void testA51_B24() {
        test_id = getTestId("A51", "B24", "174");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B25).
     * 
     */
    public void testA51_B25() {
        test_id = getTestId("A51", "B25", "175");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B26).
     * 
     */
    public void testA51_B26() {
        test_id = getTestId("A51", "B26", "176");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B27).
     * 
     */
    public void testA51_B27() {
        test_id = getTestId("A51", "B27", "177");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B28).
     * 
     */
    public void testA51_B28() {
        test_id = getTestId("A51", "B28", "178");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B29).
     * 
     */
    public void testA51_B29() {
        test_id = getTestId("A51", "B29", "179");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B30).
     * 
     */
    public void testA51_B30() {
        test_id = getTestId("A51", "B30", "180");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B31).
     * 
     */
    public void testA51_B31() {
        test_id = getTestId("A51", "B31", "181");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B32).
     * 
     */
    public void testA51_B32() {
        test_id = getTestId("A51", "B32", "182");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B33).
     * 
     */
    public void testA51_B33() {
        test_id = getTestId("A51", "B33", "183");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B34).
     * 
     */
    public void testA51_B34() {
        test_id = getTestId("A51", "B34", "184");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B35).
     * 
     */
    public void testA51_B35() {
        test_id = getTestId("A51", "B35", "185");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B36).
     * 
     */
    public void testA51_B36() {
        test_id = getTestId("A51", "B36", "186");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B37).
     * 
     */
    public void testA51_B37() {
        test_id = getTestId("A51", "B37", "187");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B38).
     * 
     */
    public void testA51_B38() {
        test_id = getTestId("A51", "B38", "188");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B39).
     * 
     */
    public void testA51_B39() {
        test_id = getTestId("A51", "B39", "189");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B40).
     * 
     */
    public void testA51_B40() {
        test_id = getTestId("A51", "B40", "190");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B41).
     * 
     */
    public void testA51_B41() {
        test_id = getTestId("A51", "B41", "191");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B42).
     * 
     */
    public void testA51_B42() {
        test_id = getTestId("A51", "B42", "192");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B43).
     * 
     */
    public void testA51_B43() {
        test_id = getTestId("A51", "B43", "193");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B44).
     * 
     */
    public void testA51_B44() {
        test_id = getTestId("A51", "B44", "194");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B45).
     * 
     */
    public void testA51_B45() {
        test_id = getTestId("A51", "B45", "195");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B46).
     * 
     */
    public void testA51_B46() {
        test_id = getTestId("A51", "B46", "196");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B47).
     * 
     */
    public void testA51_B47() {
        test_id = getTestId("A51", "B47", "197");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B48).
     * 
     */
    public void testA51_B48() {
        test_id = getTestId("A51", "B48", "198");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B49).
     * 
     */
    public void testA51_B49() {
        test_id = getTestId("A51", "B49", "199");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B50).
     * 
     */
    public void testA51_B50() {
        test_id = getTestId("A51", "B50", "200");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B51).
     * 
     */
    public void testA51_B51() {
        test_id = getTestId("A51", "B51", "201");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B52).
     * 
     */
    public void testA51_B52() {
        test_id = getTestId("A51", "B52", "202");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B53).
     * 
     */
    public void testA51_B53() {
        test_id = getTestId("A51", "B53", "203");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B54).
     * 
     */
    public void testA51_B54() {
        test_id = getTestId("A51", "B54", "204");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B55).
     * 
     */
    public void testA51_B55() {
        test_id = getTestId("A51", "B55", "205");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B56).
     * 
     */
    public void testA51_B56() {
        test_id = getTestId("A51", "B56", "206");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B57).
     * 
     */
    public void testA51_B57() {
        test_id = getTestId("A51", "B57", "207");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B58).
     * 
     */
    public void testA51_B58() {
        test_id = getTestId("A51", "B58", "208");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B59).
     * 
     */
    public void testA51_B59() {
        test_id = getTestId("A51", "B59", "209");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B60).
     * 
     */
    public void testA51_B60() {
        test_id = getTestId("A51", "B60", "210");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B61).
     * 
     */
    public void testA51_B61() {
        test_id = getTestId("A51", "B61", "211");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B62).
     * 
     */
    public void testA51_B62() {
        test_id = getTestId("A51", "B62", "212");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B63).
     * 
     */
    public void testA51_B63() {
        test_id = getTestId("A51", "B63", "213");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B64).
     * 
     */
    public void testA51_B64() {
        test_id = getTestId("A51", "B64", "214");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B65).
     * 
     */
    public void testA51_B65() {
        test_id = getTestId("A51", "B65", "215");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B66).
     * 
     */
    public void testA51_B66() {
        test_id = getTestId("A51", "B66", "216");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B67).
     * 
     */
    public void testA51_B67() {
        test_id = getTestId("A51", "B67", "217");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B68).
     * 
     */
    public void testA51_B68() {
        test_id = getTestId("A51", "B68", "218");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B69).
     * 
     */
    public void testA51_B69() {
        test_id = getTestId("A51", "B69", "219");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B70).
     * 
     */
    public void testA51_B70() {
        test_id = getTestId("A51", "B70", "220");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B71).
     * 
     */
    public void testA51_B71() {
        test_id = getTestId("A51", "B71", "221");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B72).
     * 
     */
    public void testA51_B72() {
        test_id = getTestId("A51", "B72", "222");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B73).
     * 
     */
    public void testA51_B73() {
        test_id = getTestId("A51", "B73", "223");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B74).
     * 
     */
    public void testA51_B74() {
        test_id = getTestId("A51", "B74", "224");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B75).
     * 
     */
    public void testA51_B75() {
        test_id = getTestId("A51", "B75", "225");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B76).
     * 
     */
    public void testA51_B76() {
        test_id = getTestId("A51", "B76", "226");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B77).
     * 
     */
    public void testA51_B77() {
        test_id = getTestId("A51", "B77", "227");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B78).
     * 
     */
    public void testA51_B78() {
        test_id = getTestId("A51", "B78", "228");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B79).
     * 
     */
    public void testA51_B79() {
        test_id = getTestId("A51", "B79", "229");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B80).
     * 
     */
    public void testA51_B80() {
        test_id = getTestId("A51", "B80", "230");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B81).
     * 
     */
    public void testA51_B81() {
        test_id = getTestId("A51", "B81", "231");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B82).
     * 
     */
    public void testA51_B82() {
        test_id = getTestId("A51", "B82", "232");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B83).
     * 
     */
    public void testA51_B83() {
        test_id = getTestId("A51", "B83", "233");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B84).
     * 
     */
    public void testA51_B84() {
        test_id = getTestId("A51", "B84", "234");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B85).
     * 
     */
    public void testA51_B85() {
        test_id = getTestId("A51", "B85", "235");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B86).
     * 
     */
    public void testA51_B86() {
        test_id = getTestId("A51", "B86", "236");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B87).
     * 
     */
    public void testA51_B87() {
        test_id = getTestId("A51", "B87", "237");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B88).
     * 
     */
    public void testA51_B88() {
        test_id = getTestId("A51", "B88", "238");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B89).
     * 
     */
    public void testA51_B89() {
        test_id = getTestId("A51", "B89", "239");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B90).
     * 
     */
    public void testA51_B90() {
        test_id = getTestId("A51", "B90", "240");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B91).
     * 
     */
    public void testA51_B91() {
        test_id = getTestId("A51", "B91", "241");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B92).
     * 
     */
    public void testA51_B92() {
        test_id = getTestId("A51", "B92", "242");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A51) and row (B93).
     * 
     */
    public void testA51_B93() {
        test_id = getTestId("A51", "B93", "243");

        NonRootModelElement src = selectA("A51");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B1).
     * 
     */
    public void testA52_B1() {
        test_id = getTestId("A52", "B1", "244");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B2).
     * 
     */
    public void testA52_B2() {
        test_id = getTestId("A52", "B2", "245");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B3).
     * 
     */
    public void testA52_B3() {
        test_id = getTestId("A52", "B3", "246");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B4).
     * 
     */
    public void testA52_B4() {
        test_id = getTestId("A52", "B4", "247");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B5).
     * 
     */
    public void testA52_B5() {
        test_id = getTestId("A52", "B5", "248");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B6).
     * 
     */
    public void testA52_B6() {
        test_id = getTestId("A52", "B6", "249");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A52) and row (B7).
     * 
     */
    public void testA52_B7() {
        test_id = getTestId("A52", "B7", "250");

        NonRootModelElement src = selectA("A52");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
