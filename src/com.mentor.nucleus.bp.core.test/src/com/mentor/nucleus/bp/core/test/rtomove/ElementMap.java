//========================================================================
//
// File: ElementMap.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/generate_rto_move_matrix.arc
// Version:      $Revision: 1.3 $
//
// Copyright 2005-2014 Mentor Graphics Corporation.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
package com.mentor.nucleus.bp.core.test.rtomove;

import java.util.HashMap;

import com.mentor.nucleus.bp.core.*;

public class ElementMap {
	static HashMap<String, Class<?>> map = new HashMap<String, Class<?>>();
	
	public static Class<?> getElementType(String key) {
		if(map.isEmpty()) {
			initializeMap();
		}
		return map.get(key);
	}

	private static void initializeMap() {
		map.put("A1", DataType_c.class);
		map.put("A2", InterfaceReference_c.class);
		map.put("A3", Interface_c.class);
		map.put("A4", ExecutableProperty_c.class);
		map.put("A5", Component_c.class);
		map.put("B1", OperationParameter_c.class);
		map.put("B2", Operation_c.class);
		map.put("B3", Attribute_c.class);
		map.put("B4", StateMachineEventDataItem_c.class);
		map.put("B5", Bridge_c.class);
		map.put("B6", BridgeParameter_c.class);
		map.put("B7", Function_c.class);
		map.put("B8", FunctionParameter_c.class);
		map.put("B9", StructureMember_c.class);
		map.put("B10", UserDataType_c.class);
		map.put("B11", PropertyParameter_c.class);
		map.put("B12", InterfaceOperation_c.class);
		map.put("B13", ImportedReference_c.class);
		map.put("B14", InterfaceReference_c.class);
		map.put("B15", RequiredExecutableProperty_c.class);
		map.put("B16", ProvidedExecutableProperty_c.class);
		map.put("B17", ComponentReference_c.class);
	}
	
	public static String getAssociationFor(String key) {
		if(key.contains("A1")) {
			if(key.contains("B1D")) {
				return "118";
			}
			if(key.contains("B2D")) {
				return "116";
			}
			if(key.contains("B3D")) {
				return "114";
			}
			if(key.contains("B4D")) {
				return "524";
			}
			if(key.contains("B5D")) {
				return "20";
			}
			if(key.contains("B6D")) {
				return "22";
			}
			if(key.contains("B7D")) {
				return "25";
			}
			if(key.contains("B8D")) {
				return "26";
			}
			if(key.contains("B9D")) {
				return "45";
			}
			if(key.contains("B10D")) {
				return "18";
			}
			if(key.contains("B11D")) {
				return "4007";
			}
			if(key.contains("B12D")) {
				return "4008";
			}
		}
		if(key.contains("A2")) {
			if(key.contains("B13D")) {
				return "4701";
			}
		}
		if(key.contains("A3")) {
			if(key.contains("B14D")) {
				return "4012";
			}
		}
		if(key.contains("A4")) {
			if(key.contains("B15D")) {
				return "4500";
			}
			if(key.contains("B16D")) {
				return "4501";
			}
		}
		if(key.contains("A5")) {
			if(key.contains("B17D")) {
				return "4201";
			}
		}
		return "";
	}
}
