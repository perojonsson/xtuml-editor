package com.mentor.nucleus.bp.core.test;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/test/DisposeTestGenerics.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_dispose_test.arc
// Version:      $Revision: 1.50 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//

import org.eclipse.core.runtime.NullProgressMonitor;

import com.mentor.nucleus.bp.core.test.CoreTest;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.test.TestUtil;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;

public class DisposeTestGenerics extends CoreTest
{
    Ooaofooa modelRoot = BaseTest.getDefaultTestInstance();

    /**
     * Whether this class's test fixture has been set up.
     */
    private static boolean fixtureSetUp = false;

    /* (non-Javadoc)
     * @see junit.framework.TestCase#setUp()
     */
    protected void setUp() throws Exception {
        super.setUp();

        if (!fixtureSetUp) {
            // clear any data remaining in the model-root from previous test classes
            modelRoot.clearDatabase(new NullProgressMonitor());

            TestUtil.createMockDefaultDataTypes(modelRoot, null);

            fixtureSetUp = true;
        }
		Ooaofooa.setInUnitTest(true);
	}

	@Override
	protected void tearDown() throws Exception {
		super.tearDown();
		Ooaofooa.setInUnitTest(false);
	}
   	    public void testAutomaticWiringDispose() throws Exception
	    {
    	      AutomaticWiring_c testInst = new AutomaticWiring_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R3201
      Function_c testR3201Inst = new Function_c(modelRoot);
      testR3201Inst.relateAcrossR3201To(testInst);
      // Rel R3200
      Bridge_c testR3200Inst = new Bridge_c(modelRoot);
      testR3200Inst.relateAcrossR3200To(testInst);

      testInst.Dispose();

      // 

      Function_c testR3201Inst2 = Function_c.getOneS_SYNCOnR3201(testInst);
      assertNull ( testR3201Inst2 );
      Bridge_c testR3200Inst2 = Bridge_c.getOneS_BRGOnR3200(testInst);
      assertNull ( testR3200Inst2 );

      testInst.delete();
	    }

   	    public void testVariableDisposeInstanceHandle() throws Exception
	    {   
	            Variable_c testInst = new Variable_c(modelRoot);
      // Participant rels
      // Rel R814 - supertype
      InstanceHandle_c testR814Inst = new InstanceHandle_c(modelRoot);
      testR814Inst.relateAcrossR814To(testInst);
      // Rel R805
      TransientValueReference_c testR805Inst = new TransientValueReference_c(modelRoot);
      testR805Inst.relateAcrossR805To(testInst);
      // Rel R808
      InstanceReference_c testR808Inst = new InstanceReference_c(modelRoot);
      testR808Inst.relateAcrossR808To(testInst);
      // Rel R809
      InstanceSetReference_c testR809Inst = new InstanceSetReference_c(modelRoot);
      testR809Inst.relateAcrossR809To(testInst);
      // Rel R830
      OperationValue_c testR830Inst = new OperationValue_c(modelRoot);
      testR830Inst.relateAcrossR830To(testInst);
      // Rel R835
      VariableLocation_c testR835Inst = new VariableLocation_c(modelRoot);
      testR835Inst.relateAcrossR835To(testInst);
      // Rel R849
      Dimensions_c testR849Inst = new Dimensions_c(modelRoot);
      testR849Inst.relateAcrossR849To(testInst);
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst = new SelectFromInstancesWhere_c(modelRoot);
      testR665Inst.relateAcrossR665To(testInst);
      // Rel R639
      SelectFromInstances_c testR639Inst = new SelectFromInstances_c(modelRoot);
      testR639Inst.relateAcrossR639To(testInst);
      // Rel R638
      Select_c testR638Inst = new Select_c(modelRoot);
      testR638Inst.relateAcrossR638To(testInst);
      // Rel R615
      Relate_c testR615Inst = new Relate_c(modelRoot);
      testR615Inst.relateAcrossR615To(testInst);
      // Rel R616
      Relate_c testR616Inst = new Relate_c(modelRoot);
      testR616Inst.relateAcrossR616To(testInst);
      // Rel R617
      RelateUsing_c testR617Inst = new RelateUsing_c(modelRoot);
      testR617Inst.relateAcrossR617To(testInst);
      // Rel R618
      RelateUsing_c testR618Inst = new RelateUsing_c(modelRoot);
      testR618Inst.relateAcrossR618To(testInst);
      // Rel R619
      RelateUsing_c testR619Inst = new RelateUsing_c(modelRoot);
      testR619Inst.relateAcrossR619To(testInst);
      // Rel R620
      Unrelate_c testR620Inst = new Unrelate_c(modelRoot);
      testR620Inst.relateAcrossR620To(testInst);
      // Rel R621
      Unrelate_c testR621Inst = new Unrelate_c(modelRoot);
      testR621Inst.relateAcrossR621To(testInst);
      // Rel R622
      UnrelateUsing_c testR622Inst = new UnrelateUsing_c(modelRoot);
      testR622Inst.relateAcrossR622To(testInst);
      // Rel R623
      UnrelateUsing_c testR623Inst = new UnrelateUsing_c(modelRoot);
      testR623Inst.relateAcrossR623To(testInst);
      // Rel R624
      UnrelateUsing_c testR624Inst = new UnrelateUsing_c(modelRoot);
      testR624Inst.relateAcrossR624To(testInst);
      // Rel R667
      OperationInvocation_c testR667Inst = new OperationInvocation_c(modelRoot);
      testR667Inst.relateAcrossR667To(testInst);
      // Rel R633
      Create_c testR633Inst = new Create_c(modelRoot);
      testR633Inst.relateAcrossR633To(testInst);
      // Rel R634
      Delete_c testR634Inst = new Delete_c(modelRoot);
      testR634Inst.relateAcrossR634To(testInst);
      // Rel R712
      Generate_c testR712Inst = new Generate_c(modelRoot);
      testR712Inst.relateAcrossR712To(testInst);
      // Rel R711
      CreateEventToInstance_c testR711Inst = new CreateEventToInstance_c(modelRoot);
      testR711Inst.relateAcrossR711To(testInst);
      // Rel R710
      CreateEventStatement_c testR710Inst = new CreateEventStatement_c(modelRoot);
      testR710Inst.relateAcrossR710To(testInst);
      // Rel R614
      ForStmt_c testR614Inst = new ForStmt_c(modelRoot);
      testR614Inst.relateAcrossR614To(testInst);
      // Rel R652
      ForStmt_c testR652Inst = new ForStmt_c(modelRoot);
      testR652Inst.relateAcrossR652To(testInst);

      // Formalizer rels
      // Rel R848
      DataType_c testR848Inst = new DataType_c(modelRoot);
      testR848Inst.relateAcrossR848To(testInst);

      testInst.Dispose();

      // 
      // Rel R814
      InstanceHandle_c testR814Inst2 = InstanceHandle_c.getOneV_INTOnR814(testInst);
      assertNull ( testR814Inst2 );
      // Rel R805
      TransientValueReference_c testR805Inst2 = TransientValueReference_c.getOneV_TVLOnR805(testInst);
      assertNull ( testR805Inst2 );
      // Rel R808
      InstanceReference_c testR808Inst2 = InstanceReference_c.getOneV_IRFOnR808(testInst);
      assertNull ( testR808Inst2 );
      // Rel R809
      InstanceSetReference_c testR809Inst2 = InstanceSetReference_c.getOneV_ISROnR809(testInst);
      assertNull ( testR809Inst2 );
      // Rel R830
      OperationValue_c testR830Inst2 = OperationValue_c.getOneV_TRVOnR830(testInst);
      assertNull ( testR830Inst2 );
      // Rel R835
      VariableLocation_c testR835Inst2 = VariableLocation_c.getOneV_LOCOnR835(testInst);
      assertNull ( testR835Inst2 );
      // Rel R849
      Dimensions_c testR849Inst2 = Dimensions_c.getOneS_DIMOnR849(testInst);
      assertNull ( testR849Inst2 );
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst2 = SelectFromInstancesWhere_c.getOneACT_FIWOnR665(testInst);
      assertNull ( testR665Inst2 );
      // Rel R639
      SelectFromInstances_c testR639Inst2 = SelectFromInstances_c.getOneACT_FIOOnR639(testInst);
      assertNull ( testR639Inst2 );
      // Rel R638
      Select_c testR638Inst2 = Select_c.getOneACT_SELOnR638(testInst);
      assertNull ( testR638Inst2 );
      // Rel R615
      Relate_c testR615Inst2 = Relate_c.getOneACT_RELOnR615(testInst);
      assertNull ( testR615Inst2 );
      // Rel R616
      Relate_c testR616Inst2 = Relate_c.getOneACT_RELOnR616(testInst);
      assertNull ( testR616Inst2 );
      // Rel R617
      RelateUsing_c testR617Inst2 = RelateUsing_c.getOneACT_RUOnR617(testInst);
      assertNull ( testR617Inst2 );
      // Rel R618
      RelateUsing_c testR618Inst2 = RelateUsing_c.getOneACT_RUOnR618(testInst);
      assertNull ( testR618Inst2 );
      // Rel R619
      RelateUsing_c testR619Inst2 = RelateUsing_c.getOneACT_RUOnR619(testInst);
      assertNull ( testR619Inst2 );
      // Rel R620
      Unrelate_c testR620Inst2 = Unrelate_c.getOneACT_UNROnR620(testInst);
      assertNull ( testR620Inst2 );
      // Rel R621
      Unrelate_c testR621Inst2 = Unrelate_c.getOneACT_UNROnR621(testInst);
      assertNull ( testR621Inst2 );
      // Rel R622
      UnrelateUsing_c testR622Inst2 = UnrelateUsing_c.getOneACT_URUOnR622(testInst);
      assertNull ( testR622Inst2 );
      // Rel R623
      UnrelateUsing_c testR623Inst2 = UnrelateUsing_c.getOneACT_URUOnR623(testInst);
      assertNull ( testR623Inst2 );
      // Rel R624
      UnrelateUsing_c testR624Inst2 = UnrelateUsing_c.getOneACT_URUOnR624(testInst);
      assertNull ( testR624Inst2 );
      // Rel R667
      OperationInvocation_c testR667Inst2 = OperationInvocation_c.getOneACT_TFMOnR667(testInst);
      assertNull ( testR667Inst2 );
      // Rel R633
      Create_c testR633Inst2 = Create_c.getOneACT_CROnR633(testInst);
      assertNull ( testR633Inst2 );
      // Rel R634
      Delete_c testR634Inst2 = Delete_c.getOneACT_DELOnR634(testInst);
      assertNull ( testR634Inst2 );
      // Rel R712
      Generate_c testR712Inst2 = Generate_c.getOneE_GENOnR712(testInst);
      assertNull ( testR712Inst2 );
      // Rel R711
      CreateEventToInstance_c testR711Inst2 = CreateEventToInstance_c.getOneE_CEIOnR711(testInst);
      assertNull ( testR711Inst2 );
      // Rel R710
      CreateEventStatement_c testR710Inst2 = CreateEventStatement_c.getOneE_CESOnR710(testInst);
      assertNull ( testR710Inst2 );
      // Rel R614
      ForStmt_c testR614Inst2 = ForStmt_c.getOneACT_FOROnR614(testInst);
      assertNull ( testR614Inst2 );
      // Rel R652
      ForStmt_c testR652Inst2 = ForStmt_c.getOneACT_FOROnR652(testInst);
      assertNull ( testR652Inst2 );

      DataType_c testR848Inst2 = DataType_c.getOneS_DTOnR848(testInst);
      assertNull ( testR848Inst2 );

      testInst.delete();
	    }
	    public void testVariableDisposeInstanceSet() throws Exception
	    {   
	            Variable_c testInst = new Variable_c(modelRoot);
      // Participant rels
      // Rel R814 - supertype
      InstanceSet_c testR814Inst = new InstanceSet_c(modelRoot);
      testR814Inst.relateAcrossR814To(testInst);
      // Rel R805
      TransientValueReference_c testR805Inst = new TransientValueReference_c(modelRoot);
      testR805Inst.relateAcrossR805To(testInst);
      // Rel R808
      InstanceReference_c testR808Inst = new InstanceReference_c(modelRoot);
      testR808Inst.relateAcrossR808To(testInst);
      // Rel R809
      InstanceSetReference_c testR809Inst = new InstanceSetReference_c(modelRoot);
      testR809Inst.relateAcrossR809To(testInst);
      // Rel R830
      OperationValue_c testR830Inst = new OperationValue_c(modelRoot);
      testR830Inst.relateAcrossR830To(testInst);
      // Rel R835
      VariableLocation_c testR835Inst = new VariableLocation_c(modelRoot);
      testR835Inst.relateAcrossR835To(testInst);
      // Rel R849
      Dimensions_c testR849Inst = new Dimensions_c(modelRoot);
      testR849Inst.relateAcrossR849To(testInst);
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst = new SelectFromInstancesWhere_c(modelRoot);
      testR665Inst.relateAcrossR665To(testInst);
      // Rel R639
      SelectFromInstances_c testR639Inst = new SelectFromInstances_c(modelRoot);
      testR639Inst.relateAcrossR639To(testInst);
      // Rel R638
      Select_c testR638Inst = new Select_c(modelRoot);
      testR638Inst.relateAcrossR638To(testInst);
      // Rel R615
      Relate_c testR615Inst = new Relate_c(modelRoot);
      testR615Inst.relateAcrossR615To(testInst);
      // Rel R616
      Relate_c testR616Inst = new Relate_c(modelRoot);
      testR616Inst.relateAcrossR616To(testInst);
      // Rel R617
      RelateUsing_c testR617Inst = new RelateUsing_c(modelRoot);
      testR617Inst.relateAcrossR617To(testInst);
      // Rel R618
      RelateUsing_c testR618Inst = new RelateUsing_c(modelRoot);
      testR618Inst.relateAcrossR618To(testInst);
      // Rel R619
      RelateUsing_c testR619Inst = new RelateUsing_c(modelRoot);
      testR619Inst.relateAcrossR619To(testInst);
      // Rel R620
      Unrelate_c testR620Inst = new Unrelate_c(modelRoot);
      testR620Inst.relateAcrossR620To(testInst);
      // Rel R621
      Unrelate_c testR621Inst = new Unrelate_c(modelRoot);
      testR621Inst.relateAcrossR621To(testInst);
      // Rel R622
      UnrelateUsing_c testR622Inst = new UnrelateUsing_c(modelRoot);
      testR622Inst.relateAcrossR622To(testInst);
      // Rel R623
      UnrelateUsing_c testR623Inst = new UnrelateUsing_c(modelRoot);
      testR623Inst.relateAcrossR623To(testInst);
      // Rel R624
      UnrelateUsing_c testR624Inst = new UnrelateUsing_c(modelRoot);
      testR624Inst.relateAcrossR624To(testInst);
      // Rel R667
      OperationInvocation_c testR667Inst = new OperationInvocation_c(modelRoot);
      testR667Inst.relateAcrossR667To(testInst);
      // Rel R633
      Create_c testR633Inst = new Create_c(modelRoot);
      testR633Inst.relateAcrossR633To(testInst);
      // Rel R634
      Delete_c testR634Inst = new Delete_c(modelRoot);
      testR634Inst.relateAcrossR634To(testInst);
      // Rel R712
      Generate_c testR712Inst = new Generate_c(modelRoot);
      testR712Inst.relateAcrossR712To(testInst);
      // Rel R711
      CreateEventToInstance_c testR711Inst = new CreateEventToInstance_c(modelRoot);
      testR711Inst.relateAcrossR711To(testInst);
      // Rel R710
      CreateEventStatement_c testR710Inst = new CreateEventStatement_c(modelRoot);
      testR710Inst.relateAcrossR710To(testInst);
      // Rel R614
      ForStmt_c testR614Inst = new ForStmt_c(modelRoot);
      testR614Inst.relateAcrossR614To(testInst);
      // Rel R652
      ForStmt_c testR652Inst = new ForStmt_c(modelRoot);
      testR652Inst.relateAcrossR652To(testInst);

      // Formalizer rels
      // Rel R848
      DataType_c testR848Inst = new DataType_c(modelRoot);
      testR848Inst.relateAcrossR848To(testInst);

      testInst.Dispose();

      // 
      // Rel R814
      InstanceSet_c testR814Inst2 = InstanceSet_c.getOneV_INSOnR814(testInst);
      assertNull ( testR814Inst2 );
      // Rel R805
      TransientValueReference_c testR805Inst2 = TransientValueReference_c.getOneV_TVLOnR805(testInst);
      assertNull ( testR805Inst2 );
      // Rel R808
      InstanceReference_c testR808Inst2 = InstanceReference_c.getOneV_IRFOnR808(testInst);
      assertNull ( testR808Inst2 );
      // Rel R809
      InstanceSetReference_c testR809Inst2 = InstanceSetReference_c.getOneV_ISROnR809(testInst);
      assertNull ( testR809Inst2 );
      // Rel R830
      OperationValue_c testR830Inst2 = OperationValue_c.getOneV_TRVOnR830(testInst);
      assertNull ( testR830Inst2 );
      // Rel R835
      VariableLocation_c testR835Inst2 = VariableLocation_c.getOneV_LOCOnR835(testInst);
      assertNull ( testR835Inst2 );
      // Rel R849
      Dimensions_c testR849Inst2 = Dimensions_c.getOneS_DIMOnR849(testInst);
      assertNull ( testR849Inst2 );
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst2 = SelectFromInstancesWhere_c.getOneACT_FIWOnR665(testInst);
      assertNull ( testR665Inst2 );
      // Rel R639
      SelectFromInstances_c testR639Inst2 = SelectFromInstances_c.getOneACT_FIOOnR639(testInst);
      assertNull ( testR639Inst2 );
      // Rel R638
      Select_c testR638Inst2 = Select_c.getOneACT_SELOnR638(testInst);
      assertNull ( testR638Inst2 );
      // Rel R615
      Relate_c testR615Inst2 = Relate_c.getOneACT_RELOnR615(testInst);
      assertNull ( testR615Inst2 );
      // Rel R616
      Relate_c testR616Inst2 = Relate_c.getOneACT_RELOnR616(testInst);
      assertNull ( testR616Inst2 );
      // Rel R617
      RelateUsing_c testR617Inst2 = RelateUsing_c.getOneACT_RUOnR617(testInst);
      assertNull ( testR617Inst2 );
      // Rel R618
      RelateUsing_c testR618Inst2 = RelateUsing_c.getOneACT_RUOnR618(testInst);
      assertNull ( testR618Inst2 );
      // Rel R619
      RelateUsing_c testR619Inst2 = RelateUsing_c.getOneACT_RUOnR619(testInst);
      assertNull ( testR619Inst2 );
      // Rel R620
      Unrelate_c testR620Inst2 = Unrelate_c.getOneACT_UNROnR620(testInst);
      assertNull ( testR620Inst2 );
      // Rel R621
      Unrelate_c testR621Inst2 = Unrelate_c.getOneACT_UNROnR621(testInst);
      assertNull ( testR621Inst2 );
      // Rel R622
      UnrelateUsing_c testR622Inst2 = UnrelateUsing_c.getOneACT_URUOnR622(testInst);
      assertNull ( testR622Inst2 );
      // Rel R623
      UnrelateUsing_c testR623Inst2 = UnrelateUsing_c.getOneACT_URUOnR623(testInst);
      assertNull ( testR623Inst2 );
      // Rel R624
      UnrelateUsing_c testR624Inst2 = UnrelateUsing_c.getOneACT_URUOnR624(testInst);
      assertNull ( testR624Inst2 );
      // Rel R667
      OperationInvocation_c testR667Inst2 = OperationInvocation_c.getOneACT_TFMOnR667(testInst);
      assertNull ( testR667Inst2 );
      // Rel R633
      Create_c testR633Inst2 = Create_c.getOneACT_CROnR633(testInst);
      assertNull ( testR633Inst2 );
      // Rel R634
      Delete_c testR634Inst2 = Delete_c.getOneACT_DELOnR634(testInst);
      assertNull ( testR634Inst2 );
      // Rel R712
      Generate_c testR712Inst2 = Generate_c.getOneE_GENOnR712(testInst);
      assertNull ( testR712Inst2 );
      // Rel R711
      CreateEventToInstance_c testR711Inst2 = CreateEventToInstance_c.getOneE_CEIOnR711(testInst);
      assertNull ( testR711Inst2 );
      // Rel R710
      CreateEventStatement_c testR710Inst2 = CreateEventStatement_c.getOneE_CESOnR710(testInst);
      assertNull ( testR710Inst2 );
      // Rel R614
      ForStmt_c testR614Inst2 = ForStmt_c.getOneACT_FOROnR614(testInst);
      assertNull ( testR614Inst2 );
      // Rel R652
      ForStmt_c testR652Inst2 = ForStmt_c.getOneACT_FOROnR652(testInst);
      assertNull ( testR652Inst2 );

      DataType_c testR848Inst2 = DataType_c.getOneS_DTOnR848(testInst);
      assertNull ( testR848Inst2 );

      testInst.delete();
	    }
	    public void testVariableDisposeTransientVar() throws Exception
	    {   
	            Variable_c testInst = new Variable_c(modelRoot);
      // Participant rels
      // Rel R814 - supertype
      TransientVar_c testR814Inst = new TransientVar_c(modelRoot);
      testR814Inst.relateAcrossR814To(testInst);
      // Rel R805
      TransientValueReference_c testR805Inst = new TransientValueReference_c(modelRoot);
      testR805Inst.relateAcrossR805To(testInst);
      // Rel R808
      InstanceReference_c testR808Inst = new InstanceReference_c(modelRoot);
      testR808Inst.relateAcrossR808To(testInst);
      // Rel R809
      InstanceSetReference_c testR809Inst = new InstanceSetReference_c(modelRoot);
      testR809Inst.relateAcrossR809To(testInst);
      // Rel R830
      OperationValue_c testR830Inst = new OperationValue_c(modelRoot);
      testR830Inst.relateAcrossR830To(testInst);
      // Rel R835
      VariableLocation_c testR835Inst = new VariableLocation_c(modelRoot);
      testR835Inst.relateAcrossR835To(testInst);
      // Rel R849
      Dimensions_c testR849Inst = new Dimensions_c(modelRoot);
      testR849Inst.relateAcrossR849To(testInst);
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst = new SelectFromInstancesWhere_c(modelRoot);
      testR665Inst.relateAcrossR665To(testInst);
      // Rel R639
      SelectFromInstances_c testR639Inst = new SelectFromInstances_c(modelRoot);
      testR639Inst.relateAcrossR639To(testInst);
      // Rel R638
      Select_c testR638Inst = new Select_c(modelRoot);
      testR638Inst.relateAcrossR638To(testInst);
      // Rel R615
      Relate_c testR615Inst = new Relate_c(modelRoot);
      testR615Inst.relateAcrossR615To(testInst);
      // Rel R616
      Relate_c testR616Inst = new Relate_c(modelRoot);
      testR616Inst.relateAcrossR616To(testInst);
      // Rel R617
      RelateUsing_c testR617Inst = new RelateUsing_c(modelRoot);
      testR617Inst.relateAcrossR617To(testInst);
      // Rel R618
      RelateUsing_c testR618Inst = new RelateUsing_c(modelRoot);
      testR618Inst.relateAcrossR618To(testInst);
      // Rel R619
      RelateUsing_c testR619Inst = new RelateUsing_c(modelRoot);
      testR619Inst.relateAcrossR619To(testInst);
      // Rel R620
      Unrelate_c testR620Inst = new Unrelate_c(modelRoot);
      testR620Inst.relateAcrossR620To(testInst);
      // Rel R621
      Unrelate_c testR621Inst = new Unrelate_c(modelRoot);
      testR621Inst.relateAcrossR621To(testInst);
      // Rel R622
      UnrelateUsing_c testR622Inst = new UnrelateUsing_c(modelRoot);
      testR622Inst.relateAcrossR622To(testInst);
      // Rel R623
      UnrelateUsing_c testR623Inst = new UnrelateUsing_c(modelRoot);
      testR623Inst.relateAcrossR623To(testInst);
      // Rel R624
      UnrelateUsing_c testR624Inst = new UnrelateUsing_c(modelRoot);
      testR624Inst.relateAcrossR624To(testInst);
      // Rel R667
      OperationInvocation_c testR667Inst = new OperationInvocation_c(modelRoot);
      testR667Inst.relateAcrossR667To(testInst);
      // Rel R633
      Create_c testR633Inst = new Create_c(modelRoot);
      testR633Inst.relateAcrossR633To(testInst);
      // Rel R634
      Delete_c testR634Inst = new Delete_c(modelRoot);
      testR634Inst.relateAcrossR634To(testInst);
      // Rel R712
      Generate_c testR712Inst = new Generate_c(modelRoot);
      testR712Inst.relateAcrossR712To(testInst);
      // Rel R711
      CreateEventToInstance_c testR711Inst = new CreateEventToInstance_c(modelRoot);
      testR711Inst.relateAcrossR711To(testInst);
      // Rel R710
      CreateEventStatement_c testR710Inst = new CreateEventStatement_c(modelRoot);
      testR710Inst.relateAcrossR710To(testInst);
      // Rel R614
      ForStmt_c testR614Inst = new ForStmt_c(modelRoot);
      testR614Inst.relateAcrossR614To(testInst);
      // Rel R652
      ForStmt_c testR652Inst = new ForStmt_c(modelRoot);
      testR652Inst.relateAcrossR652To(testInst);

      // Formalizer rels
      // Rel R848
      DataType_c testR848Inst = new DataType_c(modelRoot);
      testR848Inst.relateAcrossR848To(testInst);

      testInst.Dispose();

      // 
      // Rel R814
      TransientVar_c testR814Inst2 = TransientVar_c.getOneV_TRNOnR814(testInst);
      assertNull ( testR814Inst2 );
      // Rel R805
      TransientValueReference_c testR805Inst2 = TransientValueReference_c.getOneV_TVLOnR805(testInst);
      assertNull ( testR805Inst2 );
      // Rel R808
      InstanceReference_c testR808Inst2 = InstanceReference_c.getOneV_IRFOnR808(testInst);
      assertNull ( testR808Inst2 );
      // Rel R809
      InstanceSetReference_c testR809Inst2 = InstanceSetReference_c.getOneV_ISROnR809(testInst);
      assertNull ( testR809Inst2 );
      // Rel R830
      OperationValue_c testR830Inst2 = OperationValue_c.getOneV_TRVOnR830(testInst);
      assertNull ( testR830Inst2 );
      // Rel R835
      VariableLocation_c testR835Inst2 = VariableLocation_c.getOneV_LOCOnR835(testInst);
      assertNull ( testR835Inst2 );
      // Rel R849
      Dimensions_c testR849Inst2 = Dimensions_c.getOneS_DIMOnR849(testInst);
      assertNull ( testR849Inst2 );
      // Rel R665
      SelectFromInstancesWhere_c testR665Inst2 = SelectFromInstancesWhere_c.getOneACT_FIWOnR665(testInst);
      assertNull ( testR665Inst2 );
      // Rel R639
      SelectFromInstances_c testR639Inst2 = SelectFromInstances_c.getOneACT_FIOOnR639(testInst);
      assertNull ( testR639Inst2 );
      // Rel R638
      Select_c testR638Inst2 = Select_c.getOneACT_SELOnR638(testInst);
      assertNull ( testR638Inst2 );
      // Rel R615
      Relate_c testR615Inst2 = Relate_c.getOneACT_RELOnR615(testInst);
      assertNull ( testR615Inst2 );
      // Rel R616
      Relate_c testR616Inst2 = Relate_c.getOneACT_RELOnR616(testInst);
      assertNull ( testR616Inst2 );
      // Rel R617
      RelateUsing_c testR617Inst2 = RelateUsing_c.getOneACT_RUOnR617(testInst);
      assertNull ( testR617Inst2 );
      // Rel R618
      RelateUsing_c testR618Inst2 = RelateUsing_c.getOneACT_RUOnR618(testInst);
      assertNull ( testR618Inst2 );
      // Rel R619
      RelateUsing_c testR619Inst2 = RelateUsing_c.getOneACT_RUOnR619(testInst);
      assertNull ( testR619Inst2 );
      // Rel R620
      Unrelate_c testR620Inst2 = Unrelate_c.getOneACT_UNROnR620(testInst);
      assertNull ( testR620Inst2 );
      // Rel R621
      Unrelate_c testR621Inst2 = Unrelate_c.getOneACT_UNROnR621(testInst);
      assertNull ( testR621Inst2 );
      // Rel R622
      UnrelateUsing_c testR622Inst2 = UnrelateUsing_c.getOneACT_URUOnR622(testInst);
      assertNull ( testR622Inst2 );
      // Rel R623
      UnrelateUsing_c testR623Inst2 = UnrelateUsing_c.getOneACT_URUOnR623(testInst);
      assertNull ( testR623Inst2 );
      // Rel R624
      UnrelateUsing_c testR624Inst2 = UnrelateUsing_c.getOneACT_URUOnR624(testInst);
      assertNull ( testR624Inst2 );
      // Rel R667
      OperationInvocation_c testR667Inst2 = OperationInvocation_c.getOneACT_TFMOnR667(testInst);
      assertNull ( testR667Inst2 );
      // Rel R633
      Create_c testR633Inst2 = Create_c.getOneACT_CROnR633(testInst);
      assertNull ( testR633Inst2 );
      // Rel R634
      Delete_c testR634Inst2 = Delete_c.getOneACT_DELOnR634(testInst);
      assertNull ( testR634Inst2 );
      // Rel R712
      Generate_c testR712Inst2 = Generate_c.getOneE_GENOnR712(testInst);
      assertNull ( testR712Inst2 );
      // Rel R711
      CreateEventToInstance_c testR711Inst2 = CreateEventToInstance_c.getOneE_CEIOnR711(testInst);
      assertNull ( testR711Inst2 );
      // Rel R710
      CreateEventStatement_c testR710Inst2 = CreateEventStatement_c.getOneE_CESOnR710(testInst);
      assertNull ( testR710Inst2 );
      // Rel R614
      ForStmt_c testR614Inst2 = ForStmt_c.getOneACT_FOROnR614(testInst);
      assertNull ( testR614Inst2 );
      // Rel R652
      ForStmt_c testR652Inst2 = ForStmt_c.getOneACT_FOROnR652(testInst);
      assertNull ( testR652Inst2 );

      DataType_c testR848Inst2 = DataType_c.getOneS_DTOnR848(testInst);
      assertNull ( testR848Inst2 );

      testInst.delete();
	    }

   	    public void testValueDisposeFunctionValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      FunctionValue_c testR801Inst = new FunctionValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      FunctionValue_c testR801Inst2 = FunctionValue_c.getOneV_FNVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeParameterValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      ParameterValue_c testR801Inst = new ParameterValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      ParameterValue_c testR801Inst2 = ParameterValue_c.getOneV_PVLOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeSelectedReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      SelectedReference_c testR801Inst = new SelectedReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      SelectedReference_c testR801Inst2 = SelectedReference_c.getOneV_SLROnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeBridgeValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      BridgeValue_c testR801Inst = new BridgeValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      BridgeValue_c testR801Inst2 = BridgeValue_c.getOneV_BRVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeInstanceReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      InstanceReference_c testR801Inst = new InstanceReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      InstanceReference_c testR801Inst2 = InstanceReference_c.getOneV_IRFOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeAttributeValueReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      AttributeValueReference_c testR801Inst = new AttributeValueReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      AttributeValueReference_c testR801Inst2 = AttributeValueReference_c.getOneV_AVLOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeLiteralInteger() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      LiteralInteger_c testR801Inst = new LiteralInteger_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      LiteralInteger_c testR801Inst2 = LiteralInteger_c.getOneV_LINOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeLiteralString() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      LiteralString_c testR801Inst = new LiteralString_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      LiteralString_c testR801Inst2 = LiteralString_c.getOneV_LSTOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeUnaryOperation() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      UnaryOperation_c testR801Inst = new UnaryOperation_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      UnaryOperation_c testR801Inst2 = UnaryOperation_c.getOneV_UNYOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeOperationValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      OperationValue_c testR801Inst = new OperationValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      OperationValue_c testR801Inst2 = OperationValue_c.getOneV_TRVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeInstanceSetReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      InstanceSetReference_c testR801Inst = new InstanceSetReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      InstanceSetReference_c testR801Inst2 = InstanceSetReference_c.getOneV_ISROnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeEventDatumValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      EventDatumValue_c testR801Inst = new EventDatumValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      EventDatumValue_c testR801Inst2 = EventDatumValue_c.getOneV_EDVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeTransientValueReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      TransientValueReference_c testR801Inst = new TransientValueReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      TransientValueReference_c testR801Inst2 = TransientValueReference_c.getOneV_TVLOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeLiteralReal() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      LiteralReal_c testR801Inst = new LiteralReal_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      LiteralReal_c testR801Inst2 = LiteralReal_c.getOneV_LRLOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeLiteralBoolean() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      LiteralBoolean_c testR801Inst = new LiteralBoolean_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      LiteralBoolean_c testR801Inst2 = LiteralBoolean_c.getOneV_LBOOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeBinaryOperation() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      BinaryOperation_c testR801Inst = new BinaryOperation_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      BinaryOperation_c testR801Inst2 = BinaryOperation_c.getOneV_BINOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeLiteralEnumerator() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      LiteralEnumerator_c testR801Inst = new LiteralEnumerator_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      LiteralEnumerator_c testR801Inst2 = LiteralEnumerator_c.getOneV_LENOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeMemberValueReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      MemberValueReference_c testR801Inst = new MemberValueReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      MemberValueReference_c testR801Inst2 = MemberValueReference_c.getOneV_MVLOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeArrayElementReference() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      ArrayElementReference_c testR801Inst = new ArrayElementReference_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      ArrayElementReference_c testR801Inst2 = ArrayElementReference_c.getOneV_AEROnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeArrayLengthValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      ArrayLengthValue_c testR801Inst = new ArrayLengthValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      ArrayLengthValue_c testR801Inst2 = ArrayLengthValue_c.getOneV_ALVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeMessageValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      MessageValue_c testR801Inst = new MessageValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      MessageValue_c testR801Inst2 = MessageValue_c.getOneV_MSVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }
	    public void testValueDisposeSymbolicConstantValue() throws Exception
	    {   
	            Value_c testInst = new Value_c(modelRoot);
      // Participant rels
      // Rel R801 - supertype
      SymbolicConstantValue_c testR801Inst = new SymbolicConstantValue_c(modelRoot);
      testR801Inst.relateAcrossR801To(testInst);
      // Rel R851
      MessageValue_c testR851Inst = new MessageValue_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);
      // Rel R630
      SignalInvocation_c testR630Inst = new SignalInvocation_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      // Formalizer rels
      // Rel R820
      DataType_c testR820Inst = new DataType_c(modelRoot);
      testR820Inst.relateAcrossR820To(testInst);

      testInst.Dispose();

      // 
      // Rel R801
      SymbolicConstantValue_c testR801Inst2 = SymbolicConstantValue_c.getOneV_SCVOnR801(testInst);
      assertNull ( testR801Inst2 );
      // Rel R851
      MessageValue_c testR851Inst2 = MessageValue_c.getOneV_MSVOnR851(testInst);
      assertNull ( testR851Inst2 );
      // Rel R630
      SignalInvocation_c testR630Inst2 = SignalInvocation_c.getOneACT_SGNOnR630(testInst);
      assertNull ( testR630Inst2 );
      // Rel R629
      InterfaceOperationInvocation_c testR629Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR629(testInst);
      assertNull ( testR629Inst2 );

      DataType_c testR820Inst2 = DataType_c.getOneS_DTOnR820(testInst);
      assertNull ( testR820Inst2 );

      testInst.delete();
	    }

   	    public void testUnaryOperationDispose() throws Exception
	    {
    	      UnaryOperation_c testInst = new UnaryOperation_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R804
      Value_c testR804Inst = new Value_c(modelRoot);
      testR804Inst.relateAcrossR804To(testInst);

      testInst.Dispose();

      // 

      Value_c testR804Inst2 = Value_c.getOneV_VALOnR804(testInst);
      assertNull ( testR804Inst2 );

      testInst.delete();
	    }

   	    public void testSymbolicConstantValueDispose() throws Exception
	    {
    	      SymbolicConstantValue_c testInst = new SymbolicConstantValue_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSelectedReferenceDispose() throws Exception
	    {
    	      SelectedReference_c testInst = new SelectedReference_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R825
      OperationValue_c testR825Inst = createOperationValue_c();
      testR825Inst.relateAcrossR825To(testInst);
      // Rel R812
      Attribute_c testR812Inst = new Attribute_c(modelRoot);
      testR812Inst.relateAcrossR812To(testInst);

      testInst.Dispose();

      // 

      OperationValue_c testR825Inst2 = OperationValue_c.getOneV_TRVOnR825(testInst);
      assertNull ( testR825Inst2 );
      Attribute_c testR812Inst2 = Attribute_c.getOneO_ATTROnR812(testInst);
      assertNull ( testR812Inst2 );

      testInst.delete();
	    }

   	    public void testParameterValueDispose() throws Exception
	    {
    	      ParameterValue_c testInst = new ParameterValue_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R831
      BridgeParameter_c testR831Inst = new BridgeParameter_c(modelRoot);
      testR831Inst.relateAcrossR831To(testInst);
      // Rel R832
      FunctionParameter_c testR832Inst = new FunctionParameter_c(modelRoot);
      testR832Inst.relateAcrossR832To(testInst);
      // Rel R833
      OperationParameter_c testR833Inst = new OperationParameter_c(modelRoot);
      testR833Inst.relateAcrossR833To(testInst);

      testInst.Dispose();

      // 

      BridgeParameter_c testR831Inst2 = BridgeParameter_c.getOneS_BPARMOnR831(testInst);
      assertNull ( testR831Inst2 );
      FunctionParameter_c testR832Inst2 = FunctionParameter_c.getOneS_SPARMOnR832(testInst);
      assertNull ( testR832Inst2 );
      OperationParameter_c testR833Inst2 = OperationParameter_c.getOneO_TPARMOnR833(testInst);
      assertNull ( testR833Inst2 );

      testInst.delete();
	    }

   	    public void testOperationValueDispose() throws Exception
	    {
    	      OperationValue_c testInst = new OperationValue_c(modelRoot);
      // Participant rels
      // Rel R811
      ActualParameter_c testR811Inst = new ActualParameter_c(modelRoot);
      testR811Inst.relateAcrossR811To(testInst);

      // Formalizer rels
      // Rel R830
      Variable_c testR830Inst = new Variable_c(modelRoot);
      testR830Inst.relateAcrossR830To(testInst);
      // Rel R829
      Operation_c testR829Inst = new Operation_c(modelRoot);
      testR829Inst.relateAcrossR829To(testInst);

      testInst.Dispose();

      // 
      // Rel R811
      ActualParameter_c testR811Inst2 = ActualParameter_c.getOneV_PAROnR811(testInst);
      assertNull ( testR811Inst2 );

      Variable_c testR830Inst2 = Variable_c.getOneV_VAROnR830(testInst);
      assertNull ( testR830Inst2 );
      Operation_c testR829Inst2 = Operation_c.getOneO_TFROnR829(testInst);
      assertNull ( testR829Inst2 );

      testInst.delete();
	    }

   	    public void testMessageValueDispose() throws Exception
	    {
    	      MessageValue_c testInst = new MessageValue_c(modelRoot);
      // Participant rels
      // Rel R842
      ActualParameter_c testR842Inst = new ActualParameter_c(modelRoot);
      testR842Inst.relateAcrossR842To(testInst);

      // Formalizer rels
      // Rel R851
      Value_c testR851Inst = new Value_c(modelRoot);
      testR851Inst.relateAcrossR851To(testInst);

      testInst.Dispose();

      // 
      // Rel R842
      ActualParameter_c testR842Inst2 = ActualParameter_c.getOneV_PAROnR842(testInst);
      assertNull ( testR842Inst2 );

      Value_c testR851Inst2 = Value_c.getOneV_VALOnR851(testInst);
      assertNull ( testR851Inst2 );

      testInst.delete();
	    }

   	    public void testMemberValueReferenceDispose() throws Exception
	    {
    	      MemberValueReference_c testInst = new MemberValueReference_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R836
      StructureMember_c testR836Inst = new StructureMember_c(modelRoot);
      testR836Inst.relateAcrossR836To(testInst);
      // Rel R837
      Value_c testR837Inst = new Value_c(modelRoot);
      testR837Inst.relateAcrossR837To(testInst);

      testInst.Dispose();

      // 

      StructureMember_c testR836Inst2 = StructureMember_c.getOneS_MBROnR836(testInst);
      assertNull ( testR836Inst2 );
      Value_c testR837Inst2 = Value_c.getOneV_VALOnR837(testInst);
      assertNull ( testR837Inst2 );

      testInst.delete();
	    }

   	    public void testInstanceSetDispose() throws Exception
	    {
    	      InstanceSet_c testInst = new InstanceSet_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R819
      ModelClass_c testR819Inst = new ModelClass_c(modelRoot);
      testR819Inst.relateAcrossR819To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR819Inst2 = ModelClass_c.getOneO_OBJOnR819(testInst);
      assertNull ( testR819Inst2 );

      testInst.delete();
	    }

   	    public void testInstanceHandleDispose() throws Exception
	    {
    	      InstanceHandle_c testInst = new InstanceHandle_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R818
      ModelClass_c testR818Inst = new ModelClass_c(modelRoot);
      testR818Inst.relateAcrossR818To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR818Inst2 = ModelClass_c.getOneO_OBJOnR818(testInst);
      assertNull ( testR818Inst2 );

      testInst.delete();
	    }

   	    public void testFunctionValueDispose() throws Exception
	    {
    	      FunctionValue_c testInst = new FunctionValue_c(modelRoot);
      // Participant rels
      // Rel R817
      ActualParameter_c testR817Inst = new ActualParameter_c(modelRoot);
      testR817Inst.relateAcrossR817To(testInst);

      // Formalizer rels
      // Rel R827
      Function_c testR827Inst = new Function_c(modelRoot);
      testR827Inst.relateAcrossR827To(testInst);

      testInst.Dispose();

      // 
      // Rel R817
      ActualParameter_c testR817Inst2 = ActualParameter_c.getOneV_PAROnR817(testInst);
      assertNull ( testR817Inst2 );

      Function_c testR827Inst2 = Function_c.getOneS_SYNCOnR827(testInst);
      assertNull ( testR827Inst2 );

      testInst.delete();
	    }

   	    public void testEventParameterReferenceDispose() throws Exception
	    {
    	      EventParameterReference_c testInst = new EventParameterReference_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R846
      StateMachineEventDataItem_c testR846Inst = new StateMachineEventDataItem_c(modelRoot);
      testR846Inst.relateAcrossR846To(testInst);

      testInst.Dispose();

      // 

      StateMachineEventDataItem_c testR846Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR846(testInst);
      assertNull ( testR846Inst2 );

      testInst.delete();
	    }

   	    public void testEventDatumValueDispose() throws Exception
	    {
    	      EventDatumValue_c testInst = new EventDatumValue_c(modelRoot);
      // Participant rels
      // Rel R834
      EventParameterReference_c testR834Inst = new EventParameterReference_c(modelRoot);
      testR834Inst.relateAcrossR834To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R834
      EventParameterReference_c testR834Inst2 = EventParameterReference_c.getOneV_EPROnR834(testInst);
      assertNull ( testR834Inst2 );


      testInst.delete();
	    }

   	    public void testBridgeValueDispose() throws Exception
	    {
    	      BridgeValue_c testInst = new BridgeValue_c(modelRoot);
      // Participant rels
      // Rel R810
      ActualParameter_c testR810Inst = new ActualParameter_c(modelRoot);
      testR810Inst.relateAcrossR810To(testInst);

      // Formalizer rels
      // Rel R828
      Bridge_c testR828Inst = new Bridge_c(modelRoot);
      testR828Inst.relateAcrossR828To(testInst);

      testInst.Dispose();

      // 
      // Rel R810
      ActualParameter_c testR810Inst2 = ActualParameter_c.getOneV_PAROnR810(testInst);
      assertNull ( testR810Inst2 );

      Bridge_c testR828Inst2 = Bridge_c.getOneS_BRGOnR828(testInst);
      assertNull ( testR828Inst2 );

      testInst.delete();
	    }

   	    public void testBinaryOperationDispose() throws Exception
	    {
    	      BinaryOperation_c testInst = new BinaryOperation_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R803
      Value_c testR803Inst = new Value_c(modelRoot);
      testR803Inst.relateAcrossR803To(testInst);
      // Rel R802
      Value_c testR802Inst = new Value_c(modelRoot);
      testR802Inst.relateAcrossR802To(testInst);

      testInst.Dispose();

      // 

      Value_c testR803Inst2 = Value_c.getOneV_VALOnR803(testInst);
      assertNull ( testR803Inst2 );
      Value_c testR802Inst2 = Value_c.getOneV_VALOnR802(testInst);
      assertNull ( testR802Inst2 );

      testInst.delete();
	    }

   	    public void testAttributeValueReferenceDispose() throws Exception
	    {
    	      AttributeValueReference_c testInst = new AttributeValueReference_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R806
      Attribute_c testR806Inst = new Attribute_c(modelRoot);
      testR806Inst.relateAcrossR806To(testInst);
      // Rel R807
      Value_c testR807Inst = new Value_c(modelRoot);
      testR807Inst.relateAcrossR807To(testInst);

      testInst.Dispose();

      // 

      Attribute_c testR806Inst2 = Attribute_c.getOneO_ATTROnR806(testInst);
      assertNull ( testR806Inst2 );
      Value_c testR807Inst2 = Value_c.getOneV_VALOnR807(testInst);
      assertNull ( testR807Inst2 );

      testInst.delete();
	    }

   	    public void testArrayLengthValueDispose() throws Exception
	    {
    	      ArrayLengthValue_c testInst = new ArrayLengthValue_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R840
      Value_c testR840Inst = new Value_c(modelRoot);
      testR840Inst.relateAcrossR840To(testInst);

      testInst.Dispose();

      // 

      Value_c testR840Inst2 = Value_c.getOneV_VALOnR840(testInst);
      assertNull ( testR840Inst2 );

      testInst.delete();
	    }

   	    public void testArrayElementReferenceDispose() throws Exception
	    {
    	      ArrayElementReference_c testInst = new ArrayElementReference_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R838
      Value_c testR838Inst = new Value_c(modelRoot);
      testR838Inst.relateAcrossR838To(testInst);
      // Rel R839
      Value_c testR839Inst = new Value_c(modelRoot);
      testR839Inst.relateAcrossR839To(testInst);

      testInst.Dispose();

      // 

      Value_c testR838Inst2 = Value_c.getOneV_VALOnR838(testInst);
      assertNull ( testR838Inst2 );
      Value_c testR839Inst2 = Value_c.getOneV_VALOnR839(testInst);
      assertNull ( testR839Inst2 );

      testInst.delete();
	    }

   	    public void testActualParameterDispose() throws Exception
	    {
    	      ActualParameter_c testInst = new ActualParameter_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R800
      Value_c testR800Inst = new Value_c(modelRoot);
      testR800Inst.relateAcrossR800To(testInst);

      testInst.Dispose();

      // 

      Value_c testR800Inst2 = Value_c.getOneV_VALOnR800(testInst);
      assertNull ( testR800Inst2 );

      testInst.delete();
	    }

   
   	    public void testUseCaseAssociationDisposeExtend() throws Exception
	    {   
	            UseCaseAssociation_c testInst = new UseCaseAssociation_c(modelRoot);
      // Participant rels
      // Rel R1210 - supertype
      Extend_c testR1210Inst = new Extend_c(modelRoot);
      testR1210Inst.relateAcrossR1210To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1210
      Extend_c testR1210Inst2 = Extend_c.getOneUC_EOnR1210(testInst);
      assertNull ( testR1210Inst2 );


      testInst.delete();
	    }
	    public void testUseCaseAssociationDisposeGeneralization() throws Exception
	    {   
	            UseCaseAssociation_c testInst = new UseCaseAssociation_c(modelRoot);
      // Participant rels
      // Rel R1210 - supertype
      Generalization_c testR1210Inst = new Generalization_c(modelRoot);
      testR1210Inst.relateAcrossR1210To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1210
      Generalization_c testR1210Inst2 = Generalization_c.getOneUC_GOnR1210(testInst);
      assertNull ( testR1210Inst2 );


      testInst.delete();
	    }
	    public void testUseCaseAssociationDisposeInclude() throws Exception
	    {   
	            UseCaseAssociation_c testInst = new UseCaseAssociation_c(modelRoot);
      // Participant rels
      // Rel R1210 - supertype
      Include_c testR1210Inst = new Include_c(modelRoot);
      testR1210Inst.relateAcrossR1210To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1210
      Include_c testR1210Inst2 = Include_c.getOneUC_IOnR1210(testInst);
      assertNull ( testR1210Inst2 );


      testInst.delete();
	    }
	    public void testUseCaseAssociationDisposeBinaryAssociation() throws Exception
	    {   
	            UseCaseAssociation_c testInst = new UseCaseAssociation_c(modelRoot);
      // Participant rels
      // Rel R1210 - supertype
      BinaryAssociation_c testR1210Inst = new BinaryAssociation_c(modelRoot);
      testR1210Inst.relateAcrossR1210To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1210
      BinaryAssociation_c testR1210Inst2 = BinaryAssociation_c.getOneUC_BAOnR1210(testInst);
      assertNull ( testR1210Inst2 );


      testInst.delete();
	    }

   	    public void testIncludeDispose() throws Exception
	    {
    	      Include_c testInst = new Include_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testGeneralizationDispose() throws Exception
	    {
    	      Generalization_c testInst = new Generalization_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testExtendDispose() throws Exception
	    {
    	      Extend_c testInst = new Extend_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testBinaryAssociationDispose() throws Exception
	    {
    	      BinaryAssociation_c testInst = new BinaryAssociation_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testReferredToIdentifierAttributeDispose() throws Exception
	    {
    	      ReferredToIdentifierAttribute_c testInst = new ReferredToIdentifierAttribute_c(modelRoot);
      // Participant rels
      // Rel R111 - associative
      AttributeReferenceInClass_c testR111Inst = new AttributeReferenceInClass_c(modelRoot);
      testR111Inst.relateAcrossR111To(testInst);
      ReferringClassInAssoc_c testR111InstOth = new ReferringClassInAssoc_c(modelRoot);
      testR111Inst.relateAcrossR111To(testR111InstOth);

      // Formalizer rels
      ReferredToClassInAssoc_c testR110InstOne = new ReferredToClassInAssoc_c(modelRoot);
      testR110InstOne.relateAcrossR110To(testInst);
      ClassIdentifierAttribute_c testR110InstOth = new ClassIdentifierAttribute_c(modelRoot);
      testR110InstOth.relateAcrossR110To(testInst);

      testInst.Dispose();

      // 
      // Rel R111
      AttributeReferenceInClass_c testR111Inst2 = AttributeReferenceInClass_c.getOneO_REFOnR111(testInst);
      assertNull ( testR111Inst2 );


      testInst.delete();
	    }

   	    public void testReferentialAttributeDispose() throws Exception
	    {
    	      ReferentialAttribute_c testInst = new ReferentialAttribute_c(modelRoot);
      // Participant rels
      // Rel R108
      AttributeReferenceInClass_c testR108Inst = createAttributeReferenceInClass_c();
      testR108Inst.relateAcrossR108To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R108
      AttributeReferenceInClass_c testR108Inst2 = AttributeReferenceInClass_c.getOneO_REFOnR108(testInst);
      assertNull ( testR108Inst2 );


      testInst.delete();
	    }

   	    public void testOperationParameterDispose() throws Exception
	    {
    	      OperationParameter_c testInst = new OperationParameter_c(modelRoot);
      // Participant rels
      // Rel R833
      ParameterValue_c testR833Inst = new ParameterValue_c(modelRoot);
      testR833Inst.relateAcrossR833To(testInst);
      // Rel R121
      Dimensions_c testR121Inst = new Dimensions_c(modelRoot);
      testR121Inst.relateAcrossR121To(testInst);
      // Rel R1015
      OperationArgument_c testR1015Inst = new OperationArgument_c(modelRoot);
      testR1015Inst.relateAcrossR1015To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R833
      ParameterValue_c testR833Inst2 = ParameterValue_c.getOneV_PVLOnR833(testInst);
      assertNull ( testR833Inst2 );
      // Rel R121
      Dimensions_c testR121Inst2 = Dimensions_c.getOneS_DIMOnR121(testInst);
      assertNull ( testR121Inst2 );
      // Rel R1015
      OperationArgument_c testR1015Inst2 = OperationArgument_c.getOneMSG_OAOnR1015(testInst);
      assertNull ( testR1015Inst2 );


      testInst.delete();
	    }

   	    public void testOperationDispose() throws Exception
	    {
    	      Operation_c testInst = new Operation_c(modelRoot);
      // Participant rels
      // Rel R829
      OperationValue_c testR829Inst = new OperationValue_c(modelRoot);
      testR829Inst.relateAcrossR829To(testInst);
      // Rel R117
      OperationParameter_c testR117Inst = new OperationParameter_c(modelRoot);
      testR117Inst.relateAcrossR117To(testInst);
      // Rel R122
      Dimensions_c testR122Inst = new Dimensions_c(modelRoot);
      testR122Inst.relateAcrossR122To(testInst);
      // Rel R673
      OperationInvocation_c testR673Inst = new OperationInvocation_c(modelRoot);
      testR673Inst.relateAcrossR673To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R829
      OperationValue_c testR829Inst2 = OperationValue_c.getOneV_TRVOnR829(testInst);
      assertNull ( testR829Inst2 );
      // Rel R117
      OperationParameter_c testR117Inst2 = OperationParameter_c.getOneO_TPARMOnR117(testInst);
      assertNull ( testR117Inst2 );
      // Rel R122
      Dimensions_c testR122Inst2 = Dimensions_c.getOneS_DIMOnR122(testInst);
      assertNull ( testR122Inst2 );
      // Rel R1011
      OperationMessage_c testR1011Inst2 = OperationMessage_c.getOneMSG_OOnR1011(testInst);
      assertNull ( testR1011Inst2 );
      // Rel R673
      OperationInvocation_c testR673Inst2 = OperationInvocation_c.getOneACT_TFMOnR673(testInst);
      assertNull ( testR673Inst2 );


      testInst.delete();
	    }

   	    public void testNewBaseAttributeDispose() throws Exception
	    {
    	      NewBaseAttribute_c testInst = new NewBaseAttribute_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testModelClassDispose() throws Exception
	    {
    	      ModelClass_c testInst = new ModelClass_c(modelRoot);
      // Participant rels
      // Rel R819
      InstanceSet_c testR819Inst = new InstanceSet_c(modelRoot);
      testR819Inst.relateAcrossR819To(testInst);
      // Rel R818
      InstanceHandle_c testR818Inst = new InstanceHandle_c(modelRoot);
      testR818Inst.relateAcrossR818To(testInst);
      // Rel R115
      Operation_c testR115Inst = new Operation_c(modelRoot);
      testR115Inst.relateAcrossR115To(testInst);
      // Rel R102
      Attribute_c testR102Inst = createAttribute_c();
      testR102Inst.relateAcrossR102To(testInst);
      // Rel R104
      ClassIdentifier_c testR104Inst = new ClassIdentifier_c(modelRoot);
      testR104Inst.relateAcrossR104To(testInst);
      // Rel R101
      ImportedClass_c testR101Inst = new ImportedClass_c(modelRoot);
      testR101Inst.relateAcrossR101To(testInst);
      // Rel R123
      InstanceReferenceDataType_c testR123Inst = createInstanceReferenceDataType_c();
      testR123Inst.relateAcrossR123To(testInst);
      // Rel R676
      SelectFromInstancesWhere_c testR676Inst = new SelectFromInstancesWhere_c(modelRoot);
      testR676Inst.relateAcrossR676To(testInst);
      // Rel R677
      SelectFromInstances_c testR677Inst = new SelectFromInstances_c(modelRoot);
      testR677Inst.relateAcrossR677To(testInst);
      // Rel R678
      ChainLink_c testR678Inst = new ChainLink_c(modelRoot);
      testR678Inst.relateAcrossR678To(testInst);
      // Rel R934
      ClassInstanceParticipant_c testR934Inst = new ClassInstanceParticipant_c(modelRoot);
      testR934Inst.relateAcrossR934To(testInst);
      // Rel R939
      ClassParticipant_c testR939Inst = new ClassParticipant_c(modelRoot);
      testR939Inst.relateAcrossR939To(testInst);
      // Rel R671
      Create_c testR671Inst = new Create_c(modelRoot);
      testR671Inst.relateAcrossR671To(testInst);
      // Rel R672
      CreateNoVariable_c testR672Inst = new CreateNoVariable_c(modelRoot);
      testR672Inst.relateAcrossR672To(testInst);
      // Rel R417
      SmToObjAccessPath_c testR417Inst = createSmToObjAccessPath_c();
      testR417Inst.relateAcrossR417To(testInst);
      // Rel R670
      ForStmt_c testR670Inst = new ForStmt_c(modelRoot);
      testR670Inst.relateAcrossR670To(testInst);
      // Rel R201 - associative
      ClassInAssociation_c testR201Inst = createClassInAssociation_c();
      testR201Inst.relateAcrossR201To(testInst);
      Association_c testR201InstOth = new Association_c(modelRoot);
      testR201Inst.relateAcrossR201To(testR201InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R819
      InstanceSet_c testR819Inst2 = InstanceSet_c.getOneV_INSOnR819(testInst);
      assertNull ( testR819Inst2 );
      // Rel R818
      InstanceHandle_c testR818Inst2 = InstanceHandle_c.getOneV_INTOnR818(testInst);
      assertNull ( testR818Inst2 );
      // Rel R115
      Operation_c testR115Inst2 = Operation_c.getOneO_TFROnR115(testInst);
      assertNull ( testR115Inst2 );
      // Rel R102
      Attribute_c testR102Inst2 = Attribute_c.getOneO_ATTROnR102(testInst);
      assertNull ( testR102Inst2 );
      // Rel R104
      ClassIdentifier_c testR104Inst2 = ClassIdentifier_c.getOneO_IDOnR104(testInst);
      assertNull ( testR104Inst2 );
      // Rel R101
      ImportedClass_c testR101Inst2 = ImportedClass_c.getOneO_IOBJOnR101(testInst);
      assertNull ( testR101Inst2 );
      // Rel R123
      InstanceReferenceDataType_c testR123Inst2 = InstanceReferenceDataType_c.getOneS_IRDTOnR123(testInst);
      assertNull ( testR123Inst2 );
      // Rel R676
      SelectFromInstancesWhere_c testR676Inst2 = SelectFromInstancesWhere_c.getOneACT_FIWOnR676(testInst);
      assertNull ( testR676Inst2 );
      // Rel R677
      SelectFromInstances_c testR677Inst2 = SelectFromInstances_c.getOneACT_FIOOnR677(testInst);
      assertNull ( testR677Inst2 );
      // Rel R678
      ChainLink_c testR678Inst2 = ChainLink_c.getOneACT_LNKOnR678(testInst);
      assertNull ( testR678Inst2 );
      // Rel R934
      ClassInstanceParticipant_c testR934Inst2 = ClassInstanceParticipant_c.getOneSQ_CIPOnR934(testInst);
      assertNull ( testR934Inst2 );
      // Rel R939
      ClassParticipant_c testR939Inst2 = ClassParticipant_c.getOneSQ_CPOnR939(testInst);
      assertNull ( testR939Inst2 );
      // Rel R671
      Create_c testR671Inst2 = Create_c.getOneACT_CROnR671(testInst);
      assertNull ( testR671Inst2 );
      // Rel R672
      CreateNoVariable_c testR672Inst2 = CreateNoVariable_c.getOneACT_CNVOnR672(testInst);
      assertNull ( testR672Inst2 );
      // Rel R417
      SmToObjAccessPath_c testR417Inst2 = SmToObjAccessPath_c.getOneCA_SMOAOnR417(testInst);
      assertNull ( testR417Inst2 );
      // Rel R670
      ForStmt_c testR670Inst2 = ForStmt_c.getOneACT_FOROnR670(testInst);
      assertNull ( testR670Inst2 );
      // Rel R201
      ClassInAssociation_c testR201Inst2 = ClassInAssociation_c.getOneR_OIROnR201(testInst);
      assertNull ( testR201Inst2 );


      testInst.delete();
	    }

   	    public void testImportedClassDispose() throws Exception
	    {
    	      ImportedClass_c testInst = new ImportedClass_c(modelRoot);
      // Participant rels
      // Rel R414
      SmToSmCommPath_c testR414Inst = createSmToSmCommPath_c();
      testR414Inst.relateAcrossR414To(testInst);
      // Rel R420
      SmToObjAccessPath_c testR420Inst = createSmToObjAccessPath_c();
      testR420Inst.relateAcrossR420To(testInst);
      // Rel R424
      SmToSmCommPath_c testR424Inst = createSmToSmCommPath_c();
      testR424Inst.relateAcrossR424To(testInst);
      // Rel R425
      AccessPath_c testR425Inst = new AccessPath_c(modelRoot);
      testR425Inst.relateAcrossR425To(testInst);
      // Rel R202
      ClassInAssociation_c testR202Inst = createClassInAssociation_c();
      testR202Inst.relateAcrossR202To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R414
      SmToSmCommPath_c testR414Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR414(testInst);
      assertNull ( testR414Inst2 );
      // Rel R420
      SmToObjAccessPath_c testR420Inst2 = SmToObjAccessPath_c.getOneCA_SMOAOnR420(testInst);
      assertNull ( testR420Inst2 );
      // Rel R424
      SmToSmCommPath_c testR424Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR424(testInst);
      assertNull ( testR424Inst2 );
      // Rel R425
      AccessPath_c testR425Inst2 = AccessPath_c.getOneCA_ACCOnR425(testInst);
      assertNull ( testR425Inst2 );
      // Rel R202
      ClassInAssociation_c testR202Inst2 = ClassInAssociation_c.getOneR_OIROnR202(testInst);
      assertNull ( testR202Inst2 );


      testInst.delete();
	    }

   	    public void testDerivedBaseAttributeDispose() throws Exception
	    {
    	      DerivedBaseAttribute_c testInst = new DerivedBaseAttribute_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testClassIdentifierAttributeDispose() throws Exception
	    {
    	      ClassIdentifierAttribute_c testInst = new ClassIdentifierAttribute_c(modelRoot);
      // Participant rels
      // Rel R110 - associative
      ReferredToIdentifierAttribute_c testR110Inst = new ReferredToIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testInst);
      ReferredToClassInAssoc_c testR110InstOth = new ReferredToClassInAssoc_c(modelRoot);
      testR110Inst.relateAcrossR110To(testR110InstOth);

      // Formalizer rels
      ClassIdentifier_c testR105InstOne = new ClassIdentifier_c(modelRoot);
      testR105InstOne.relateAcrossR105To(testInst);
      Attribute_c testR105InstOth = new Attribute_c(modelRoot);
      testR105InstOth.relateAcrossR105To(testInst);

      testInst.Dispose();

      // 
      // Rel R110
      ReferredToIdentifierAttribute_c testR110Inst2 = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(testInst);
      assertNull ( testR110Inst2 );


      testInst.delete();
	    }

   	    public void testClassIdentifierDispose() throws Exception
	    {
    	      ClassIdentifier_c testInst = new ClassIdentifier_c(modelRoot);
      // Participant rels
      // Rel R105 - associative
      ClassIdentifierAttribute_c testR105Inst = new ClassIdentifierAttribute_c(modelRoot);
      testR105Inst.relateAcrossR105To(testInst);
      Attribute_c testR105InstOth = new Attribute_c(modelRoot);
      testR105Inst.relateAcrossR105To(testR105InstOth);
      // Rel R109
      ReferredToClassInAssoc_c testR109Inst = new ReferredToClassInAssoc_c(modelRoot);
      testR109Inst.relateAcrossR109To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R105
      ClassIdentifierAttribute_c testR105Inst2 = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(testInst);
      assertNull ( testR105Inst2 );
      // Rel R109
      ReferredToClassInAssoc_c testR109Inst2 = ReferredToClassInAssoc_c.getOneR_RTOOnR109(testInst);
      assertNull ( testR109Inst2 );


      testInst.delete();
	    }

   	    public void testBaseAttributeDisposeDerivedBaseAttribute() throws Exception
	    {   
	            BaseAttribute_c testInst = new BaseAttribute_c(modelRoot);
      // Participant rels
      // Rel R113
      ReferentialAttribute_c testR113Inst = new ReferentialAttribute_c(modelRoot);
      testR113Inst.relateAcrossR113To(testInst);
      // Rel R107 - supertype
      DerivedBaseAttribute_c testR107Inst = new DerivedBaseAttribute_c(modelRoot);
      testR107Inst.relateAcrossR107To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R113
      ReferentialAttribute_c testR113Inst2 = ReferentialAttribute_c.getOneO_RATTROnR113(testInst);
      assertNull ( testR113Inst2 );
      // Rel R107
      DerivedBaseAttribute_c testR107Inst2 = DerivedBaseAttribute_c.getOneO_DBATTROnR107(testInst);
      assertNull ( testR107Inst2 );


      testInst.delete();
	    }
	    public void testBaseAttributeDisposeNewBaseAttribute() throws Exception
	    {   
	            BaseAttribute_c testInst = new BaseAttribute_c(modelRoot);
      // Participant rels
      // Rel R113
      ReferentialAttribute_c testR113Inst = new ReferentialAttribute_c(modelRoot);
      testR113Inst.relateAcrossR113To(testInst);
      // Rel R107 - supertype
      NewBaseAttribute_c testR107Inst = new NewBaseAttribute_c(modelRoot);
      testR107Inst.relateAcrossR107To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R113
      ReferentialAttribute_c testR113Inst2 = ReferentialAttribute_c.getOneO_RATTROnR113(testInst);
      assertNull ( testR113Inst2 );
      // Rel R107
      NewBaseAttribute_c testR107Inst2 = NewBaseAttribute_c.getOneO_NBATTROnR107(testInst);
      assertNull ( testR107Inst2 );


      testInst.delete();
	    }

   	    public void testAttributeReferenceinClassDispose() throws Exception
	    {
    	      AttributeReferenceInClass_c testInst = new AttributeReferenceInClass_c(modelRoot);
      // Participant rels

      // Formalizer rels
      ReferringClassInAssoc_c testR111InstOne = new ReferringClassInAssoc_c(modelRoot);
      testR111InstOne.relateAcrossR111To(testInst);
      ReferredToIdentifierAttribute_c testR111InstOth = new ReferredToIdentifierAttribute_c(modelRoot);
      testR111InstOth.relateAcrossR111To(testInst);

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testAttributeDisposeBaseAttribute() throws Exception
	    {   
	            Attribute_c testInst = new Attribute_c(modelRoot);
      // Participant rels
      // Rel R812
      SelectedReference_c testR812Inst = new SelectedReference_c(modelRoot);
      testR812Inst.relateAcrossR812To(testInst);
      // Rel R806
      AttributeValueReference_c testR806Inst = new AttributeValueReference_c(modelRoot);
      testR806Inst.relateAcrossR806To(testInst);
      // Rel R105 - associative
      ClassIdentifierAttribute_c testR105Inst = new ClassIdentifierAttribute_c(modelRoot);
      testR105Inst.relateAcrossR105To(testInst);
      ClassIdentifier_c testR105InstOth = new ClassIdentifier_c(modelRoot);
      testR105Inst.relateAcrossR105To(testR105InstOth);
      // Rel R106 - supertype
      BaseAttribute_c testR106Inst = new BaseAttribute_c(modelRoot);
      testR106Inst.relateAcrossR106To(testInst);
      // Rel R120
      Dimensions_c testR120Inst = new Dimensions_c(modelRoot);
      testR120Inst.relateAcrossR120To(testInst);
      // Rel R2910
      AttributeValue_c testR2910Inst = new AttributeValue_c(modelRoot);
      testR2910Inst.relateAcrossR2910To(testInst);
      // Rel R419
      SmToObjAttributeAccess_c testR419Inst = new SmToObjAttributeAccess_c(modelRoot);
      testR419Inst.relateAcrossR419To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R812
      SelectedReference_c testR812Inst2 = SelectedReference_c.getOneV_SLROnR812(testInst);
      assertNull ( testR812Inst2 );
      // Rel R806
      AttributeValueReference_c testR806Inst2 = AttributeValueReference_c.getOneV_AVLOnR806(testInst);
      assertNull ( testR806Inst2 );
      // Rel R105
      ClassIdentifierAttribute_c testR105Inst2 = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(testInst);
      assertNull ( testR105Inst2 );
      // Rel R106
      BaseAttribute_c testR106Inst2 = BaseAttribute_c.getOneO_BATTROnR106(testInst);
      assertNull ( testR106Inst2 );
      // Rel R120
      Dimensions_c testR120Inst2 = Dimensions_c.getOneS_DIMOnR120(testInst);
      assertNull ( testR120Inst2 );
      // Rel R938
      InstanceAttributeValue_c testR938Inst2 = InstanceAttributeValue_c.getOneSQ_AVOnR938(testInst);
      assertNull ( testR938Inst2 );
      // Rel R2910
      AttributeValue_c testR2910Inst2 = AttributeValue_c.getOneI_AVLOnR2910(testInst);
      assertNull ( testR2910Inst2 );
      // Rel R419
      SmToObjAttributeAccess_c testR419Inst2 = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR419(testInst);
      assertNull ( testR419Inst2 );


      testInst.delete();
	    }
	    public void testAttributeDisposeReferentialAttribute() throws Exception
	    {   
	            Attribute_c testInst = new Attribute_c(modelRoot);
      // Participant rels
      // Rel R812
      SelectedReference_c testR812Inst = new SelectedReference_c(modelRoot);
      testR812Inst.relateAcrossR812To(testInst);
      // Rel R806
      AttributeValueReference_c testR806Inst = new AttributeValueReference_c(modelRoot);
      testR806Inst.relateAcrossR806To(testInst);
      // Rel R105 - associative
      ClassIdentifierAttribute_c testR105Inst = new ClassIdentifierAttribute_c(modelRoot);
      testR105Inst.relateAcrossR105To(testInst);
      ClassIdentifier_c testR105InstOth = new ClassIdentifier_c(modelRoot);
      testR105Inst.relateAcrossR105To(testR105InstOth);
      // Rel R106 - supertype
      ReferentialAttribute_c testR106Inst = new ReferentialAttribute_c(modelRoot);
      testR106Inst.relateAcrossR106To(testInst);
      // Rel R120
      Dimensions_c testR120Inst = new Dimensions_c(modelRoot);
      testR120Inst.relateAcrossR120To(testInst);
      // Rel R2910
      AttributeValue_c testR2910Inst = new AttributeValue_c(modelRoot);
      testR2910Inst.relateAcrossR2910To(testInst);
      // Rel R419
      SmToObjAttributeAccess_c testR419Inst = new SmToObjAttributeAccess_c(modelRoot);
      testR419Inst.relateAcrossR419To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R812
      SelectedReference_c testR812Inst2 = SelectedReference_c.getOneV_SLROnR812(testInst);
      assertNull ( testR812Inst2 );
      // Rel R806
      AttributeValueReference_c testR806Inst2 = AttributeValueReference_c.getOneV_AVLOnR806(testInst);
      assertNull ( testR806Inst2 );
      // Rel R105
      ClassIdentifierAttribute_c testR105Inst2 = ClassIdentifierAttribute_c.getOneO_OIDAOnR105(testInst);
      assertNull ( testR105Inst2 );
      // Rel R106
      ReferentialAttribute_c testR106Inst2 = ReferentialAttribute_c.getOneO_RATTROnR106(testInst);
      assertNull ( testR106Inst2 );
      // Rel R120
      Dimensions_c testR120Inst2 = Dimensions_c.getOneS_DIMOnR120(testInst);
      assertNull ( testR120Inst2 );
      // Rel R938
      InstanceAttributeValue_c testR938Inst2 = InstanceAttributeValue_c.getOneSQ_AVOnR938(testInst);
      assertNull ( testR938Inst2 );
      // Rel R2910
      AttributeValue_c testR2910Inst2 = AttributeValue_c.getOneI_AVLOnR2910(testInst);
      assertNull ( testR2910Inst2 );
      // Rel R419
      SmToObjAttributeAccess_c testR419Inst2 = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR419(testInst);
      assertNull ( testR419Inst2 );


      testInst.delete();
	    }

   	    public void testTransitionActionHomeDispose() throws Exception
	    {
    	      TransitionActionHome_c testInst = new TransitionActionHome_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R530
      Transition_c testR530Inst = new Transition_c(modelRoot);
      testR530Inst.relateAcrossR530To(testInst);

      testInst.Dispose();

      // 

      Transition_c testR530Inst2 = Transition_c.getOneSM_TXNOnR530(testInst);
      assertNull ( testR530Inst2 );

      testInst.delete();
	    }

   	    public void testTransitionDisposeNoEventTransition() throws Exception
	    {   
	            Transition_c testInst = new Transition_c(modelRoot);
      // Participant rels
      // Rel R507 - supertype
      NoEventTransition_c testR507Inst = new NoEventTransition_c(modelRoot);
      testR507Inst.relateAcrossR507To(testInst);
      // Rel R512 - associative
      MealyActionHome_c testR512Inst = new MealyActionHome_c(modelRoot);
      testR512Inst.relateAcrossR512To(testInst);
      MealyStateMachine_c testR512InstOth = new MealyStateMachine_c(modelRoot);
      testR512Inst.relateAcrossR512To(testR512InstOth);
      // Rel R2953
      Instance_c testR2953Inst = new Instance_c(modelRoot);
      testR2953Inst.relateAcrossR2953To(testInst);

      // Formalizer rels
      // Rel R506
      StateMachineState_c testR506Inst = new StateMachineState_c(modelRoot);
      testR506Inst.relateAcrossR506To(testInst);

      testInst.Dispose();

      // 
      // Rel R507
      NoEventTransition_c testR507Inst2 = NoEventTransition_c.getOneSM_NETXNOnR507(testInst);
      assertNull ( testR507Inst2 );
      // Rel R512
      MealyActionHome_c testR512Inst2 = MealyActionHome_c.getOneSM_MEAHOnR512(testInst);
      assertNull ( testR512Inst2 );
      // Rel R2953
      Instance_c testR2953Inst2 = Instance_c.getOneI_INSOnR2953(testInst);
      assertNull ( testR2953Inst2 );

      StateMachineState_c testR506Inst2 = StateMachineState_c.getOneSM_STATEOnR506(testInst);
      assertNull ( testR506Inst2 );

      testInst.delete();
	    }
	    public void testTransitionDisposeCreationTransition() throws Exception
	    {   
	            Transition_c testInst = new Transition_c(modelRoot);
      // Participant rels
      // Rel R507 - supertype
      CreationTransition_c testR507Inst = new CreationTransition_c(modelRoot);
      testR507Inst.relateAcrossR507To(testInst);
      // Rel R512 - associative
      MealyActionHome_c testR512Inst = new MealyActionHome_c(modelRoot);
      testR512Inst.relateAcrossR512To(testInst);
      MealyStateMachine_c testR512InstOth = new MealyStateMachine_c(modelRoot);
      testR512Inst.relateAcrossR512To(testR512InstOth);
      // Rel R2953
      Instance_c testR2953Inst = new Instance_c(modelRoot);
      testR2953Inst.relateAcrossR2953To(testInst);

      // Formalizer rels
      // Rel R506
      StateMachineState_c testR506Inst = new StateMachineState_c(modelRoot);
      testR506Inst.relateAcrossR506To(testInst);

      testInst.Dispose();

      // 
      // Rel R507
      CreationTransition_c testR507Inst2 = CreationTransition_c.getOneSM_CRTXNOnR507(testInst);
      assertNull ( testR507Inst2 );
      // Rel R512
      MealyActionHome_c testR512Inst2 = MealyActionHome_c.getOneSM_MEAHOnR512(testInst);
      assertNull ( testR512Inst2 );
      // Rel R2953
      Instance_c testR2953Inst2 = Instance_c.getOneI_INSOnR2953(testInst);
      assertNull ( testR2953Inst2 );

      StateMachineState_c testR506Inst2 = StateMachineState_c.getOneSM_STATEOnR506(testInst);
      assertNull ( testR506Inst2 );

      testInst.delete();
	    }
	    public void testTransitionDisposeNewStateTransition() throws Exception
	    {   
	            Transition_c testInst = new Transition_c(modelRoot);
      // Participant rels
      // Rel R507 - supertype
      NewStateTransition_c testR507Inst = createNewStateTransition_c();
      testR507Inst.relateAcrossR507To(testInst);
      // Rel R512 - associative
      MealyActionHome_c testR512Inst = new MealyActionHome_c(modelRoot);
      testR512Inst.relateAcrossR512To(testInst);
      MealyStateMachine_c testR512InstOth = new MealyStateMachine_c(modelRoot);
      testR512Inst.relateAcrossR512To(testR512InstOth);
      // Rel R2953
      Instance_c testR2953Inst = new Instance_c(modelRoot);
      testR2953Inst.relateAcrossR2953To(testInst);

      // Formalizer rels
      // Rel R506
      StateMachineState_c testR506Inst = new StateMachineState_c(modelRoot);
      testR506Inst.relateAcrossR506To(testInst);

      testInst.Dispose();

      // 
      // Rel R507
      NewStateTransition_c testR507Inst2 = NewStateTransition_c.getOneSM_NSTXNOnR507(testInst);
      assertNull ( testR507Inst2 );
      // Rel R512
      MealyActionHome_c testR512Inst2 = MealyActionHome_c.getOneSM_MEAHOnR512(testInst);
      assertNull ( testR512Inst2 );
      // Rel R2953
      Instance_c testR2953Inst2 = Instance_c.getOneI_INSOnR2953(testInst);
      assertNull ( testR2953Inst2 );

      StateMachineState_c testR506Inst2 = StateMachineState_c.getOneSM_STATEOnR506(testInst);
      assertNull ( testR506Inst2 );

      testInst.delete();
	    }

   	    public void testSupplementalDataItemsDispose() throws Exception
	    {
    	      SupplementalDataItems_c testInst = new SupplementalDataItems_c(modelRoot);
      // Participant rels

      // Formalizer rels
      EventSupplementalData_c testR522InstOne = new EventSupplementalData_c(modelRoot);
      testR522InstOne.relateAcrossR522To(testInst);
      StateMachineEventDataItem_c testR522InstOth = new StateMachineEventDataItem_c(modelRoot);
      testR522InstOth.relateAcrossR522To(testInst);

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testStateMachineStateDispose() throws Exception
	    {
    	      StateMachineState_c testInst = new StateMachineState_c(modelRoot);
      // Participant rels
      // Rel R506
      Transition_c testR506Inst = new Transition_c(modelRoot);
      testR506Inst.relateAcrossR506To(testInst);
      // Rel R508
      NoEventTransition_c testR508Inst = createNoEventTransition_c();
      testR508Inst.relateAcrossR508To(testInst);
      // Rel R511 - associative
      MooreActionHome_c testR511Inst = createMooreActionHome_c();
      testR511Inst.relateAcrossR511To(testInst);
      MooreStateMachine_c testR511InstOth = new MooreStateMachine_c(modelRoot);
      testR511Inst.relateAcrossR511To(testR511InstOth);
      // Rel R503 - associative
      StateEventMatrixEntry_c testR503Inst = new StateEventMatrixEntry_c(modelRoot);
      testR503Inst.relateAcrossR503To(testInst);
      SemEvent_c testR503InstOth = new SemEvent_c(modelRoot);
      testR503Inst.relateAcrossR503To(testR503InstOth);
      // Rel R2915
      Instance_c testR2915Inst = new Instance_c(modelRoot);
      testR2915Inst.relateAcrossR2915To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R506
      Transition_c testR506Inst2 = Transition_c.getOneSM_TXNOnR506(testInst);
      assertNull ( testR506Inst2 );
      // Rel R508
      NoEventTransition_c testR508Inst2 = NoEventTransition_c.getOneSM_NETXNOnR508(testInst);
      assertNull ( testR508Inst2 );
      // Rel R511
      MooreActionHome_c testR511Inst2 = MooreActionHome_c.getOneSM_MOAHOnR511(testInst);
      assertNull ( testR511Inst2 );
      // Rel R503
      StateEventMatrixEntry_c testR503Inst2 = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(testInst);
      assertNull ( testR503Inst2 );
      // Rel R2915
      Instance_c testR2915Inst2 = Instance_c.getOneI_INSOnR2915(testInst);
      assertNull ( testR2915Inst2 );


      testInst.delete();
	    }

   	    public void testStateMachineEventDataItemDispose() throws Exception
	    {
    	      StateMachineEventDataItem_c testInst = new StateMachineEventDataItem_c(modelRoot);
      // Participant rels
      // Rel R846
      EventParameterReference_c testR846Inst = new EventParameterReference_c(modelRoot);
      testR846Inst.relateAcrossR846To(testInst);
      // Rel R522 - associative
      SupplementalDataItems_c testR522Inst = new SupplementalDataItems_c(modelRoot);
      testR522Inst.relateAcrossR522To(testInst);
      EventSupplementalData_c testR522InstOth = new EventSupplementalData_c(modelRoot);
      testR522Inst.relateAcrossR522To(testR522InstOth);
      // Rel R531
      Dimensions_c testR531Inst = new Dimensions_c(modelRoot);
      testR531Inst.relateAcrossR531To(testInst);
      // Rel R1017
      EventArgument_c testR1017Inst = new EventArgument_c(modelRoot);
      testR1017Inst.relateAcrossR1017To(testInst);
      // Rel R2934
      DataItemValue_c testR2934Inst = new DataItemValue_c(modelRoot);
      testR2934Inst.relateAcrossR2934To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R846
      EventParameterReference_c testR846Inst2 = EventParameterReference_c.getOneV_EPROnR846(testInst);
      assertNull ( testR846Inst2 );
      // Rel R522
      SupplementalDataItems_c testR522Inst2 = SupplementalDataItems_c.getOneSM_SDIOnR522(testInst);
      assertNull ( testR522Inst2 );
      // Rel R531
      Dimensions_c testR531Inst2 = Dimensions_c.getOneS_DIMOnR531(testInst);
      assertNull ( testR531Inst2 );
      // Rel R1017
      EventArgument_c testR1017Inst2 = EventArgument_c.getOneMSG_EAOnR1017(testInst);
      assertNull ( testR1017Inst2 );
      // Rel R2934
      DataItemValue_c testR2934Inst2 = DataItemValue_c.getOneI_DIVOnR2934(testInst);
      assertNull ( testR2934Inst2 );


      testInst.delete();
	    }

   	    public void testStateMachineEventDisposeSEMEvent() throws Exception
	    {   
	            StateMachineEvent_c testInst = new StateMachineEvent_c(modelRoot);
      // Participant rels
      // Rel R532
      StateMachineEventDataItem_c testR532Inst = new StateMachineEventDataItem_c(modelRoot);
      testR532Inst.relateAcrossR532To(testInst);
      // Rel R525 - supertype
      SemEvent_c testR525Inst = new SemEvent_c(modelRoot);
      testR525Inst.relateAcrossR525To(testInst);
      // Rel R2906
      PendingEvent_c testR2906Inst = new PendingEvent_c(modelRoot);
      testR2906Inst.relateAcrossR2906To(testInst);
      // Rel R706
      CreateSmEventStatement_c testR706Inst = new CreateSmEventStatement_c(modelRoot);
      testR706Inst.relateAcrossR706To(testInst);
      // Rel R707
      GenerateSmEventStatement_c testR707Inst = new GenerateSmEventStatement_c(modelRoot);
      testR707Inst.relateAcrossR707To(testInst);
      // Rel R405
      EeToSmEventComm_c testR405Inst = new EeToSmEventComm_c(modelRoot);
      testR405Inst.relateAcrossR405To(testInst);
      // Rel R409
      SmToSmEventComm_c testR409Inst = new SmToSmEventComm_c(modelRoot);
      testR409Inst.relateAcrossR409To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R532
      StateMachineEventDataItem_c testR532Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532(testInst);
      assertNull ( testR532Inst2 );
      // Rel R525
      SemEvent_c testR525Inst2 = SemEvent_c.getOneSM_SEVTOnR525(testInst);
      assertNull ( testR525Inst2 );
      // Rel R1009
      EventMessage_c testR1009Inst2 = EventMessage_c.getOneMSG_EOnR1009(testInst);
      assertNull ( testR1009Inst2 );
      // Rel R2906
      PendingEvent_c testR2906Inst2 = PendingEvent_c.getOneI_EVIOnR2906(testInst);
      assertNull ( testR2906Inst2 );
      // Rel R706
      CreateSmEventStatement_c testR706Inst2 = CreateSmEventStatement_c.getOneE_CSMEOnR706(testInst);
      assertNull ( testR706Inst2 );
      // Rel R707
      GenerateSmEventStatement_c testR707Inst2 = GenerateSmEventStatement_c.getOneE_GSMEOnR707(testInst);
      assertNull ( testR707Inst2 );
      // Rel R405
      EeToSmEventComm_c testR405Inst2 = EeToSmEventComm_c.getOneCA_EESMEOnR405(testInst);
      assertNull ( testR405Inst2 );
      // Rel R409
      SmToSmEventComm_c testR409Inst2 = SmToSmEventComm_c.getOneCA_SMSMEOnR409(testInst);
      assertNull ( testR409Inst2 );


      testInst.delete();
	    }
	    public void testStateMachineEventDisposePolymorphicEvent() throws Exception
	    {   
	            StateMachineEvent_c testInst = new StateMachineEvent_c(modelRoot);
      // Participant rels
      // Rel R532
      StateMachineEventDataItem_c testR532Inst = new StateMachineEventDataItem_c(modelRoot);
      testR532Inst.relateAcrossR532To(testInst);
      // Rel R525 - supertype
      PolymorphicEvent_c testR525Inst = new PolymorphicEvent_c(modelRoot);
      testR525Inst.relateAcrossR525To(testInst);
      // Rel R2906
      PendingEvent_c testR2906Inst = new PendingEvent_c(modelRoot);
      testR2906Inst.relateAcrossR2906To(testInst);
      // Rel R706
      CreateSmEventStatement_c testR706Inst = new CreateSmEventStatement_c(modelRoot);
      testR706Inst.relateAcrossR706To(testInst);
      // Rel R707
      GenerateSmEventStatement_c testR707Inst = new GenerateSmEventStatement_c(modelRoot);
      testR707Inst.relateAcrossR707To(testInst);
      // Rel R405
      EeToSmEventComm_c testR405Inst = new EeToSmEventComm_c(modelRoot);
      testR405Inst.relateAcrossR405To(testInst);
      // Rel R409
      SmToSmEventComm_c testR409Inst = new SmToSmEventComm_c(modelRoot);
      testR409Inst.relateAcrossR409To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R532
      StateMachineEventDataItem_c testR532Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR532(testInst);
      assertNull ( testR532Inst2 );
      // Rel R525
      PolymorphicEvent_c testR525Inst2 = PolymorphicEvent_c.getOneSM_PEVTOnR525(testInst);
      assertNull ( testR525Inst2 );
      // Rel R1009
      EventMessage_c testR1009Inst2 = EventMessage_c.getOneMSG_EOnR1009(testInst);
      assertNull ( testR1009Inst2 );
      // Rel R2906
      PendingEvent_c testR2906Inst2 = PendingEvent_c.getOneI_EVIOnR2906(testInst);
      assertNull ( testR2906Inst2 );
      // Rel R706
      CreateSmEventStatement_c testR706Inst2 = CreateSmEventStatement_c.getOneE_CSMEOnR706(testInst);
      assertNull ( testR706Inst2 );
      // Rel R707
      GenerateSmEventStatement_c testR707Inst2 = GenerateSmEventStatement_c.getOneE_GSMEOnR707(testInst);
      assertNull ( testR707Inst2 );
      // Rel R405
      EeToSmEventComm_c testR405Inst2 = EeToSmEventComm_c.getOneCA_EESMEOnR405(testInst);
      assertNull ( testR405Inst2 );
      // Rel R409
      SmToSmEventComm_c testR409Inst2 = SmToSmEventComm_c.getOneCA_SMSMEOnR409(testInst);
      assertNull ( testR409Inst2 );


      testInst.delete();
	    }

       public void testStateMachineDisposeMooreStateMachineInstanceStateMachine() throws Exception
    {
      StateMachine_c testInst = new StateMachine_c(modelRoot);
        // Rel R501
        StateMachineState_c testR501Inst = new StateMachineState_c(modelRoot);
        testR501Inst.relateAcrossR501To(testInst);
      // Participant rels
      // Rel R505
      Transition_c testR505Inst = new Transition_c(modelRoot);
      testR505Inst.relateAcrossR505To(testInst);
      // Rel R516
      StateMachineEventDataItem_c testR516Inst = new StateMachineEventDataItem_c(modelRoot);
      testR516Inst.relateAcrossR516To(testInst);
      // Rel R502
      StateMachineEvent_c testR502Inst = new StateMachineEvent_c(modelRoot);
      testR502Inst.relateAcrossR502To(testInst);
      // Rel R510 - supertype
      MooreStateMachine_c testR510Inst = MooreStateMachine_c.getOneSM_MOOREOnR510(testInst);
      if(testR510Inst == null)
	      testR510Inst = new MooreStateMachine_c(modelRoot);
      testR510Inst.relateAcrossR510To(testInst);
      // Rel R515
      Action_c testR515Inst = createAction_c(testInst, testR501Inst);
      testR515Inst.relateAcrossR515To(testInst);
      // Rel R517 - supertype
      InstanceStateMachine_c testR517Inst = new InstanceStateMachine_c(modelRoot);
      testR517Inst.relateAcrossR517To(testInst);
      // Rel R523
      EventSupplementalData_c testR523Inst = new EventSupplementalData_c(modelRoot);
      testR523Inst.relateAcrossR523To(testInst);
      // Rel R403
      EeToSmCommPath_c testR403Inst = createEeToSmCommPath_c();
      testR403Inst.relateAcrossR403To(testInst);
      // Rel R410
      SmToEeCommPath_c testR410Inst = createSmToEeCommPath_c();
      testR410Inst.relateAcrossR410To(testInst);
      // Rel R406
      SmToSmCommPath_c testR406Inst = createSmToSmCommPath_c();
      testR406Inst.relateAcrossR406To(testInst);
      // Rel R407
      SmToSmCommPath_c testR407Inst = createSmToSmCommPath_c();
      testR407Inst.relateAcrossR407To(testInst);
      // Rel R416
      AccessPath_c testR416Inst = new AccessPath_c(modelRoot);
      testR416Inst.relateAcrossR416To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R505
      Transition_c testR505Inst2 = Transition_c.getOneSM_TXNOnR505(testInst);
      assertNull ( testR505Inst2 );
      // Rel R501
      StateMachineState_c testR501Inst2 = StateMachineState_c.getOneSM_STATEOnR501(testInst);
      assertNull ( testR501Inst2 );
      // Rel R516
      StateMachineEventDataItem_c testR516Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR516(testInst);
      assertNull ( testR516Inst2 );
      // Rel R502
      StateMachineEvent_c testR502Inst2 = StateMachineEvent_c.getOneSM_EVTOnR502(testInst);
      assertNull ( testR502Inst2 );
      // Rel R510
      MooreStateMachine_c testR510Inst2 = MooreStateMachine_c.getOneSM_MOOREOnR510(testInst);
      assertNull ( testR510Inst2 );
      // Rel R515
      Action_c testR515Inst2 = Action_c.getOneSM_ACTOnR515(testInst);
      assertNull ( testR515Inst2 );
      // Rel R517
      InstanceStateMachine_c testR517Inst2 = InstanceStateMachine_c.getOneSM_ISMOnR517(testInst);
      assertNull ( testR517Inst2 );
      // Rel R523
      EventSupplementalData_c testR523Inst2 = EventSupplementalData_c.getOneSM_SUPDTOnR523(testInst);
      assertNull ( testR523Inst2 );
      // Rel R403
      EeToSmCommPath_c testR403Inst2 = EeToSmCommPath_c.getOneCA_EESMCOnR403(testInst);
      assertNull ( testR403Inst2 );
      // Rel R410
      SmToEeCommPath_c testR410Inst2 = SmToEeCommPath_c.getOneCA_SMEECOnR410(testInst);
      assertNull ( testR410Inst2 );
      // Rel R406
      SmToSmCommPath_c testR406Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR406(testInst);
      assertNull ( testR406Inst2 );
      // Rel R407
      SmToSmCommPath_c testR407Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR407(testInst);
      assertNull ( testR407Inst2 );
      // Rel R416
      AccessPath_c testR416Inst2 = AccessPath_c.getOneCA_ACCOnR416(testInst);
      assertNull ( testR416Inst2 );


      testInst.delete();
    }

    public void testStateMachineDisposeMooreStateMachineClassStateMachine() throws Exception
    {
      StateMachine_c testInst = new StateMachine_c(modelRoot);
        // Rel R501
        StateMachineState_c testR501Inst = new StateMachineState_c(modelRoot);
        testR501Inst.relateAcrossR501To(testInst);
      // Participant rels
      // Rel R505
      Transition_c testR505Inst = new Transition_c(modelRoot);
      testR505Inst.relateAcrossR505To(testInst);
      // Rel R516
      StateMachineEventDataItem_c testR516Inst = new StateMachineEventDataItem_c(modelRoot);
      testR516Inst.relateAcrossR516To(testInst);
      // Rel R502
      StateMachineEvent_c testR502Inst = new StateMachineEvent_c(modelRoot);
      testR502Inst.relateAcrossR502To(testInst);
      // Rel R510 - supertype
      MooreStateMachine_c testR510Inst = MooreStateMachine_c.getOneSM_MOOREOnR510(testInst);
      if(testR510Inst == null)
	      testR510Inst = new MooreStateMachine_c(modelRoot);
      testR510Inst.relateAcrossR510To(testInst);
      // Rel R515
      Action_c testR515Inst = createAction_c(testInst, testR501Inst);
      testR515Inst.relateAcrossR515To(testInst);
      // Rel R517 - supertype
      ClassStateMachine_c testR517Inst = new ClassStateMachine_c(modelRoot);
      testR517Inst.relateAcrossR517To(testInst);
      // Rel R523
      EventSupplementalData_c testR523Inst = new EventSupplementalData_c(modelRoot);
      testR523Inst.relateAcrossR523To(testInst);
      // Rel R403
      EeToSmCommPath_c testR403Inst = createEeToSmCommPath_c();
      testR403Inst.relateAcrossR403To(testInst);
      // Rel R410
      SmToEeCommPath_c testR410Inst = createSmToEeCommPath_c();
      testR410Inst.relateAcrossR410To(testInst);
      // Rel R406
      SmToSmCommPath_c testR406Inst = createSmToSmCommPath_c();
      testR406Inst.relateAcrossR406To(testInst);
      // Rel R407
      SmToSmCommPath_c testR407Inst = createSmToSmCommPath_c();
      testR407Inst.relateAcrossR407To(testInst);
      // Rel R416
      AccessPath_c testR416Inst = new AccessPath_c(modelRoot);
      testR416Inst.relateAcrossR416To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R505
      Transition_c testR505Inst2 = Transition_c.getOneSM_TXNOnR505(testInst);
      assertNull ( testR505Inst2 );
      // Rel R501
      StateMachineState_c testR501Inst2 = StateMachineState_c.getOneSM_STATEOnR501(testInst);
      assertNull ( testR501Inst2 );
      // Rel R516
      StateMachineEventDataItem_c testR516Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR516(testInst);
      assertNull ( testR516Inst2 );
      // Rel R502
      StateMachineEvent_c testR502Inst2 = StateMachineEvent_c.getOneSM_EVTOnR502(testInst);
      assertNull ( testR502Inst2 );
      // Rel R510
      MooreStateMachine_c testR510Inst2 = MooreStateMachine_c.getOneSM_MOOREOnR510(testInst);
      assertNull ( testR510Inst2 );
      // Rel R515
      Action_c testR515Inst2 = Action_c.getOneSM_ACTOnR515(testInst);
      assertNull ( testR515Inst2 );
      // Rel R517
      ClassStateMachine_c testR517Inst2 = ClassStateMachine_c.getOneSM_ASMOnR517(testInst);
      assertNull ( testR517Inst2 );
      // Rel R523
      EventSupplementalData_c testR523Inst2 = EventSupplementalData_c.getOneSM_SUPDTOnR523(testInst);
      assertNull ( testR523Inst2 );
      // Rel R403
      EeToSmCommPath_c testR403Inst2 = EeToSmCommPath_c.getOneCA_EESMCOnR403(testInst);
      assertNull ( testR403Inst2 );
      // Rel R410
      SmToEeCommPath_c testR410Inst2 = SmToEeCommPath_c.getOneCA_SMEECOnR410(testInst);
      assertNull ( testR410Inst2 );
      // Rel R406
      SmToSmCommPath_c testR406Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR406(testInst);
      assertNull ( testR406Inst2 );
      // Rel R407
      SmToSmCommPath_c testR407Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR407(testInst);
      assertNull ( testR407Inst2 );
      // Rel R416
      AccessPath_c testR416Inst2 = AccessPath_c.getOneCA_ACCOnR416(testInst);
      assertNull ( testR416Inst2 );


      testInst.delete();
    }


   	    public void testStateEventMatrixEntryDisposeEventIgnored() throws Exception
	    {   
	            StateEventMatrixEntry_c testInst = new StateEventMatrixEntry_c(modelRoot);
      // Participant rels
      // Rel R504 - supertype
      EventIgnored_c testR504Inst = new EventIgnored_c(modelRoot);
      testR504Inst.relateAcrossR504To(testInst);

      // Formalizer rels
      StateMachineState_c testR503InstOne = new StateMachineState_c(modelRoot);
      testR503InstOne.relateAcrossR503To(testInst);
      SemEvent_c testR503InstOth = new SemEvent_c(modelRoot);
      testR503InstOth.relateAcrossR503To(testInst);

      testInst.Dispose();

      // 
      // Rel R504
      EventIgnored_c testR504Inst2 = EventIgnored_c.getOneSM_EIGNOnR504(testInst);
      assertNull ( testR504Inst2 );


      testInst.delete();
	    }
	    public void testStateEventMatrixEntryDisposeCantHappen() throws Exception
	    {   
	            StateEventMatrixEntry_c testInst = new StateEventMatrixEntry_c(modelRoot);
      // Participant rels
      // Rel R504 - supertype
      CantHappen_c testR504Inst = new CantHappen_c(modelRoot);
      testR504Inst.relateAcrossR504To(testInst);

      // Formalizer rels
      StateMachineState_c testR503InstOne = new StateMachineState_c(modelRoot);
      testR503InstOne.relateAcrossR503To(testInst);
      SemEvent_c testR503InstOth = new SemEvent_c(modelRoot);
      testR503InstOth.relateAcrossR503To(testInst);

      testInst.Dispose();

      // 
      // Rel R504
      CantHappen_c testR504Inst2 = CantHappen_c.getOneSM_CHOnR504(testInst);
      assertNull ( testR504Inst2 );


      testInst.delete();
	    }
	    public void testStateEventMatrixEntryDisposeNewStateTransition() throws Exception
	    {   
	            StateEventMatrixEntry_c testInst = new StateEventMatrixEntry_c(modelRoot);
      // Participant rels
      // Rel R504 - supertype
      NewStateTransition_c testR504Inst = createNewStateTransition_c();
      testR504Inst.relateAcrossR504To(testInst);

      // Formalizer rels
      StateMachineState_c testR503InstOne = new StateMachineState_c(modelRoot);
      testR503InstOne.relateAcrossR503To(testInst);
      SemEvent_c testR503InstOth = new SemEvent_c(modelRoot);
      testR503InstOth.relateAcrossR503To(testInst);

      testInst.Dispose();

      // 
      // Rel R504
      NewStateTransition_c testR504Inst2 = NewStateTransition_c.getOneSM_NSTXNOnR504(testInst);
      assertNull ( testR504Inst2 );


      testInst.delete();
	    }

   	    public void testSignalEventDispose() throws Exception
	    {
    	      SignalEvent_c testInst = new SignalEvent_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R528
      ProvidedSignal_c testR528Inst = new ProvidedSignal_c(modelRoot);
      testR528Inst.relateAcrossR528To(testInst);
      // Rel R529
      RequiredSignal_c testR529Inst = new RequiredSignal_c(modelRoot);
      testR529Inst.relateAcrossR529To(testInst);

      testInst.Dispose();

      // 

      ProvidedSignal_c testR528Inst2 = ProvidedSignal_c.getOneSPR_PSOnR528(testInst);
      assertNull ( testR528Inst2 );
      RequiredSignal_c testR529Inst2 = RequiredSignal_c.getOneSPR_RSOnR529(testInst);
      assertNull ( testR529Inst2 );

      testInst.delete();
	    }

   	    public void testSEMEventDisposeNonLocalEvent() throws Exception
	    {   
	            SemEvent_c testInst = new SemEvent_c(modelRoot);
      // Participant rels
      // Rel R503 - associative
      StateEventMatrixEntry_c testR503Inst = new StateEventMatrixEntry_c(modelRoot);
      testR503Inst.relateAcrossR503To(testInst);
      StateMachineState_c testR503InstOth = new StateMachineState_c(modelRoot);
      testR503Inst.relateAcrossR503To(testR503InstOth);
      // Rel R526 - supertype
      NonLocalEvent_c testR526Inst = new NonLocalEvent_c(modelRoot);
      testR526Inst.relateAcrossR526To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R503
      StateEventMatrixEntry_c testR503Inst2 = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(testInst);
      assertNull ( testR503Inst2 );
      // Rel R526
      NonLocalEvent_c testR526Inst2 = NonLocalEvent_c.getOneSM_NLEVTOnR526(testInst);
      assertNull ( testR526Inst2 );


      testInst.delete();
	    }
	    public void testSEMEventDisposeLocalEvent() throws Exception
	    {   
	            SemEvent_c testInst = new SemEvent_c(modelRoot);
      // Participant rels
      // Rel R503 - associative
      StateEventMatrixEntry_c testR503Inst = new StateEventMatrixEntry_c(modelRoot);
      testR503Inst.relateAcrossR503To(testInst);
      StateMachineState_c testR503InstOth = new StateMachineState_c(modelRoot);
      testR503Inst.relateAcrossR503To(testR503InstOth);
      // Rel R526 - supertype
      LocalEvent_c testR526Inst = new LocalEvent_c(modelRoot);
      testR526Inst.relateAcrossR526To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R503
      StateEventMatrixEntry_c testR503Inst2 = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(testInst);
      assertNull ( testR503Inst2 );
      // Rel R526
      LocalEvent_c testR526Inst2 = LocalEvent_c.getOneSM_LEVTOnR526(testInst);
      assertNull ( testR526Inst2 );


      testInst.delete();
	    }
	    public void testSEMEventDisposeSignalEvent() throws Exception
	    {   
	            SemEvent_c testInst = new SemEvent_c(modelRoot);
      // Participant rels
      // Rel R503 - associative
      StateEventMatrixEntry_c testR503Inst = new StateEventMatrixEntry_c(modelRoot);
      testR503Inst.relateAcrossR503To(testInst);
      StateMachineState_c testR503InstOth = new StateMachineState_c(modelRoot);
      testR503Inst.relateAcrossR503To(testR503InstOth);
      // Rel R526 - supertype
      SignalEvent_c testR526Inst = new SignalEvent_c(modelRoot);
      testR526Inst.relateAcrossR526To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R503
      StateEventMatrixEntry_c testR503Inst2 = StateEventMatrixEntry_c.getOneSM_SEMEOnR503(testInst);
      assertNull ( testR503Inst2 );
      // Rel R526
      SignalEvent_c testR526Inst2 = SignalEvent_c.getOneSM_SGEVTOnR526(testInst);
      assertNull ( testR526Inst2 );


      testInst.delete();
	    }

   	    public void testPolymorphicEventDispose() throws Exception
	    {
    	      PolymorphicEvent_c testInst = new PolymorphicEvent_c(modelRoot);
      // Participant rels
      // Rel R527
      NonLocalEvent_c testR527Inst = new NonLocalEvent_c(modelRoot);
      testR527Inst.relateAcrossR527To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R527
      NonLocalEvent_c testR527Inst2 = NonLocalEvent_c.getOneSM_NLEVTOnR527(testInst);
      assertNull ( testR527Inst2 );


      testInst.delete();
	    }

   	    public void testNonLocalEventDispose() throws Exception
	    {
    	      NonLocalEvent_c testInst = new NonLocalEvent_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testMooreStateMachineDispose() throws Exception
	    {
    	      MooreStateMachine_c testInst = new MooreStateMachine_c(modelRoot);
      // Participant rels
      // Rel R511 - associative
      MooreActionHome_c testR511Inst = createMooreActionHome_c();
      testR511Inst.relateAcrossR511To(testInst);
      StateMachineState_c testR511InstOth = new StateMachineState_c(modelRoot);
      testR511Inst.relateAcrossR511To(testR511InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R511
      MooreActionHome_c testR511Inst2 = MooreActionHome_c.getOneSM_MOAHOnR511(testInst);
      assertNull ( testR511Inst2 );


      testInst.delete();
	    }

   	    public void testMooreActionHomeDispose() throws Exception
	    {
    	      MooreActionHome_c testInst = new MooreActionHome_c(modelRoot);
      // Participant rels

      // Formalizer rels
      MooreStateMachine_c testR511InstOne = new MooreStateMachine_c(modelRoot);
      testR511InstOne.relateAcrossR511To(testInst);
      StateMachineState_c testR511InstOth = new StateMachineState_c(modelRoot);
      testR511InstOth.relateAcrossR511To(testInst);

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testMealyActionHomeDispose() throws Exception
	    {
    	      MealyActionHome_c testInst = new MealyActionHome_c(modelRoot);
      // Participant rels

      // Formalizer rels
      MealyStateMachine_c testR512InstOne = new MealyStateMachine_c(modelRoot);
      testR512InstOne.relateAcrossR512To(testInst);
      Transition_c testR512InstOth = new Transition_c(modelRoot);
      testR512InstOth.relateAcrossR512To(testInst);

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testLocalEventDispose() throws Exception
	    {
    	      LocalEvent_c testInst = new LocalEvent_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testInstanceStateMachineDispose() throws Exception
	    {
    	      InstanceStateMachine_c testInst = new InstanceStateMachine_c(modelRoot);
      StateMachine_c sm = new StateMachine_c(modelRoot);
      testInst.relateAcrossR517To(sm);
      // Participant rels

      // Formalizer rels
      // Rel R518
      ModelClass_c testR518Inst = new ModelClass_c(modelRoot);
      testR518Inst.relateAcrossR518To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR518Inst2 = ModelClass_c.getOneO_OBJOnR518(testInst);
      assertNull ( testR518Inst2 );

      testInst.delete();
	    }

   	    public void testEventSupplementalDataDispose() throws Exception
	    {
    	      EventSupplementalData_c testInst = new EventSupplementalData_c(modelRoot);
      // Participant rels
      // Rel R522 - associative
      SupplementalDataItems_c testR522Inst = new SupplementalDataItems_c(modelRoot);
      testR522Inst.relateAcrossR522To(testInst);
      StateMachineEventDataItem_c testR522InstOth = new StateMachineEventDataItem_c(modelRoot);
      testR522Inst.relateAcrossR522To(testR522InstOth);
      // Rel R521
      StateMachineState_c testR521Inst = new StateMachineState_c(modelRoot);
      testR521Inst.relateAcrossR521To(testInst);
      // Rel R520
      StateMachineEvent_c testR520Inst = new StateMachineEvent_c(modelRoot);
      testR520Inst.relateAcrossR520To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R522
      SupplementalDataItems_c testR522Inst2 = SupplementalDataItems_c.getOneSM_SDIOnR522(testInst);
      assertNull ( testR522Inst2 );
      // Rel R521
      StateMachineState_c testR521Inst2 = StateMachineState_c.getOneSM_STATEOnR521(testInst);
      assertNull ( testR521Inst2 );
      // Rel R520
      StateMachineEvent_c testR520Inst2 = StateMachineEvent_c.getOneSM_EVTOnR520(testInst);
      assertNull ( testR520Inst2 );


      testInst.delete();
	    }

   	    public void testClassStateMachineDispose() throws Exception
	    {
    	      ClassStateMachine_c testInst = new ClassStateMachine_c(modelRoot);
      StateMachine_c sm = new StateMachine_c(modelRoot);
      testInst.relateAcrossR517To(sm);
      // Participant rels

      // Formalizer rels
      // Rel R519
      ModelClass_c testR519Inst = new ModelClass_c(modelRoot);
      testR519Inst.relateAcrossR519To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR519Inst2 = ModelClass_c.getOneO_OBJOnR519(testInst);
      assertNull ( testR519Inst2 );

      testInst.delete();
	    }

   	    public void testCantHappenDispose() throws Exception
	    {
    	      CantHappen_c testInst = new CantHappen_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testActionHomeDisposeMooreActionHome() throws Exception
	    {   
	            ActionHome_c testInst = new ActionHome_c(modelRoot);
      // Participant rels
      // Rel R513 - supertype
      MooreActionHome_c testR513Inst = new MooreActionHome_c(modelRoot);
      testR513Inst.relateAcrossR513To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R513
      MooreActionHome_c testR513Inst2 = MooreActionHome_c.getOneSM_MOAHOnR513(testInst);
      assertNull ( testR513Inst2 );

      Action_c testR514Inst2 = Action_c.getOneSM_ACTOnR514(testInst);
      assertNull ( testR514Inst2 );

      testInst.delete();
	    }
	    public void testActionHomeDisposeTransitionActionHome() throws Exception
	    {   
	            ActionHome_c testInst = new ActionHome_c(modelRoot);
      // Participant rels
      // Rel R513 - supertype
      TransitionActionHome_c testR513Inst = new TransitionActionHome_c(modelRoot);
      testR513Inst.relateAcrossR513To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R513
      TransitionActionHome_c testR513Inst2 = TransitionActionHome_c.getOneSM_TAHOnR513(testInst);
      assertNull ( testR513Inst2 );

      Action_c testR514Inst2 = Action_c.getOneSM_ACTOnR514(testInst);
      assertNull ( testR514Inst2 );

      testInst.delete();
	    }

   	    public void testActionDispose() throws Exception
	    {
    	      StateMachine_c sm = new StateMachine_c(modelRoot);
      MooreStateMachine_c msm = new MooreStateMachine_c(modelRoot);
      msm.relateAcrossR510To(sm);
      StateMachineState_c st = new StateMachineState_c(modelRoot);
      Action_c testInst = createAction_c(sm, st);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   
   	    public void testSelectFromInstancesWhereDispose() throws Exception
	    {
    	      SelectFromInstancesWhere_c testInst = new SelectFromInstancesWhere_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R665
      Variable_c testR665Inst = new Variable_c(modelRoot);
      testR665Inst.relateAcrossR665To(testInst);
      // Rel R676
      ModelClass_c testR676Inst = new ModelClass_c(modelRoot);
      testR676Inst.relateAcrossR676To(testInst);
      // Rel R610
      Value_c testR610Inst = new Value_c(modelRoot);
      testR610Inst.relateAcrossR610To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR665Inst2 = Variable_c.getOneV_VAROnR665(testInst);
      assertNull ( testR665Inst2 );
      ModelClass_c testR676Inst2 = ModelClass_c.getOneO_OBJOnR676(testInst);
      assertNull ( testR676Inst2 );
      Value_c testR610Inst2 = Value_c.getOneV_VALOnR610(testInst);
      assertNull ( testR610Inst2 );

      testInst.delete();
	    }

   	    public void testSelectFromInstancesDispose() throws Exception
	    {
    	      SelectFromInstances_c testInst = new SelectFromInstances_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R639
      Variable_c testR639Inst = new Variable_c(modelRoot);
      testR639Inst.relateAcrossR639To(testInst);
      // Rel R677
      ModelClass_c testR677Inst = new ModelClass_c(modelRoot);
      testR677Inst.relateAcrossR677To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR639Inst2 = Variable_c.getOneV_VAROnR639(testInst);
      assertNull ( testR639Inst2 );
      ModelClass_c testR677Inst2 = ModelClass_c.getOneO_OBJOnR677(testInst);
      assertNull ( testR677Inst2 );

      testInst.delete();
	    }

   	    public void testSelectDisposeSelectRelatedWhere() throws Exception
	    {   
	            Select_c testInst = new Select_c(modelRoot);
      // Participant rels
      // Rel R664 - supertype
      SelectRelatedWhere_c testR664Inst = new SelectRelatedWhere_c(modelRoot);
      testR664Inst.relateAcrossR664To(testInst);

      // Formalizer rels
      // Rel R638
      Variable_c testR638Inst = new Variable_c(modelRoot);
      testR638Inst.relateAcrossR638To(testInst);
      // Rel R613
      Value_c testR613Inst = new Value_c(modelRoot);
      testR613Inst.relateAcrossR613To(testInst);

      testInst.Dispose();

      // 
      // Rel R664
      SelectRelatedWhere_c testR664Inst2 = SelectRelatedWhere_c.getOneACT_SRWOnR664(testInst);
      assertNull ( testR664Inst2 );

      Variable_c testR638Inst2 = Variable_c.getOneV_VAROnR638(testInst);
      assertNull ( testR638Inst2 );
      Value_c testR613Inst2 = Value_c.getOneV_VALOnR613(testInst);
      assertNull ( testR613Inst2 );

      testInst.delete();
	    }
	    public void testSelectDisposeSelectRelatedBy() throws Exception
	    {   
	            Select_c testInst = new Select_c(modelRoot);
      // Participant rels
      // Rel R664 - supertype
      SelectRelatedBy_c testR664Inst = new SelectRelatedBy_c(modelRoot);
      testR664Inst.relateAcrossR664To(testInst);

      // Formalizer rels
      // Rel R638
      Variable_c testR638Inst = new Variable_c(modelRoot);
      testR638Inst.relateAcrossR638To(testInst);
      // Rel R613
      Value_c testR613Inst = new Value_c(modelRoot);
      testR613Inst.relateAcrossR613To(testInst);

      testInst.Dispose();

      // 
      // Rel R664
      SelectRelatedBy_c testR664Inst2 = SelectRelatedBy_c.getOneACT_SROnR664(testInst);
      assertNull ( testR664Inst2 );

      Variable_c testR638Inst2 = Variable_c.getOneV_VAROnR638(testInst);
      assertNull ( testR638Inst2 );
      Value_c testR613Inst2 = Value_c.getOneV_VALOnR613(testInst);
      assertNull ( testR613Inst2 );

      testInst.delete();
	    }

   	    public void testChainLinkDispose() throws Exception
	    {
    	      ChainLink_c testInst = new ChainLink_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R678
      ModelClass_c testR678Inst = new ModelClass_c(modelRoot);
      testR678Inst.relateAcrossR678To(testInst);
      // Rel R681
      Association_c testR681Inst = new Association_c(modelRoot);
      testR681Inst.relateAcrossR681To(testInst);
      // Rel R637
      Select_c testR637Inst = new Select_c(modelRoot);
      testR637Inst.relateAcrossR637To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR678Inst2 = ModelClass_c.getOneO_OBJOnR678(testInst);
      assertNull ( testR678Inst2 );
      Association_c testR681Inst2 = Association_c.getOneR_RELOnR681(testInst);
      assertNull ( testR681Inst2 );
      Select_c testR637Inst2 = Select_c.getOneACT_SELOnR637(testInst);
      assertNull ( testR637Inst2 );

      testInst.delete();
	    }

   	    public void testSearchResultDispose() throws Exception
	    {
    	      SearchResult_c testInst = new SearchResult_c(modelRoot);
      // Participant rels
      // Rel R9800
      Match_c testR9800Inst = new Match_c(modelRoot);
      testR9800Inst.relateAcrossR9800To(testInst);

      // Formalizer rels
      // Rel R9802
      SearchParticipant_c testR9802Inst = new SearchParticipant_c(modelRoot);
      testR9802Inst.relateAcrossR9802To(testInst);

      testInst.Dispose();

      // 
      // Rel R9800
      Match_c testR9800Inst2 = Match_c.getOneSR_MOnR9800(testInst);
      assertNull ( testR9800Inst2 );

      SearchParticipant_c testR9802Inst2 = SearchParticipant_c.getOneSP_SPOnR9802(testInst);
      assertNull ( testR9802Inst2 );

      testInst.delete();
	    }

   	    public void testMatchDisposeNameMatch() throws Exception
	    {   
	            Match_c testInst = new Match_c(modelRoot);
      // Participant rels
      // Rel R9801 - supertype
      NameMatch_c testR9801Inst = new NameMatch_c(modelRoot);
      testR9801Inst.relateAcrossR9801To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9801
      NameMatch_c testR9801Inst2 = NameMatch_c.getOneSR_NMOnR9801(testInst);
      assertNull ( testR9801Inst2 );


      testInst.delete();
	    }
	    public void testMatchDisposeContentMatch() throws Exception
	    {   
	            Match_c testInst = new Match_c(modelRoot);
      // Participant rels
      // Rel R9801 - supertype
      ContentMatch_c testR9801Inst = new ContentMatch_c(modelRoot);
      testR9801Inst.relateAcrossR9801To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9801
      ContentMatch_c testR9801Inst2 = ContentMatch_c.getOneSR_CMOnR9801(testInst);
      assertNull ( testR9801Inst2 );


      testInst.delete();
	    }

   	    public void testQueryDisposeDeclarationQuery() throws Exception
	    {   
	            Query_c testInst = new Query_c(modelRoot);
      // Participant rels
      // Rel R9600 - supertype
      DeclarationQuery_c testR9600Inst = new DeclarationQuery_c(modelRoot);
      testR9600Inst.relateAcrossR9600To(testInst);

      // Formalizer rels
      // Rel R9500
      SearchEngine_c testR9500Inst = new SearchEngine_c(modelRoot);
      testR9500Inst.relateAcrossR9500To(testInst);

      testInst.Dispose();

      // 
      // Rel R9600
      DeclarationQuery_c testR9600Inst2 = DeclarationQuery_c.getOneSQU_DOnR9600(testInst);
      assertNull ( testR9600Inst2 );

      SearchEngine_c testR9500Inst2 = SearchEngine_c.getOneSEN_EOnR9500(testInst);
      assertNull ( testR9500Inst2 );

      testInst.delete();
	    }
	    public void testQueryDisposeReferencesQuery() throws Exception
	    {   
	            Query_c testInst = new Query_c(modelRoot);
      // Participant rels
      // Rel R9600 - supertype
      ReferencesQuery_c testR9600Inst = new ReferencesQuery_c(modelRoot);
      testR9600Inst.relateAcrossR9600To(testInst);

      // Formalizer rels
      // Rel R9500
      SearchEngine_c testR9500Inst = new SearchEngine_c(modelRoot);
      testR9500Inst.relateAcrossR9500To(testInst);

      testInst.Dispose();

      // 
      // Rel R9600
      ReferencesQuery_c testR9600Inst2 = ReferencesQuery_c.getOneSQU_ROnR9600(testInst);
      assertNull ( testR9600Inst2 );

      SearchEngine_c testR9500Inst2 = SearchEngine_c.getOneSEN_EOnR9500(testInst);
      assertNull ( testR9500Inst2 );

      testInst.delete();
	    }
	    public void testQueryDisposeDescriptionQuery() throws Exception
	    {   
	            Query_c testInst = new Query_c(modelRoot);
      // Participant rels
      // Rel R9600 - supertype
      DescriptionQuery_c testR9600Inst = new DescriptionQuery_c(modelRoot);
      testR9600Inst.relateAcrossR9600To(testInst);

      // Formalizer rels
      // Rel R9500
      SearchEngine_c testR9500Inst = new SearchEngine_c(modelRoot);
      testR9500Inst.relateAcrossR9500To(testInst);

      testInst.Dispose();

      // 
      // Rel R9600
      DescriptionQuery_c testR9600Inst2 = DescriptionQuery_c.getOneSQU_DEOnR9600(testInst);
      assertNull ( testR9600Inst2 );

      SearchEngine_c testR9500Inst2 = SearchEngine_c.getOneSEN_EOnR9500(testInst);
      assertNull ( testR9500Inst2 );

      testInst.delete();
	    }
	    public void testQueryDisposeActionLanguageQuery() throws Exception
	    {   
	            Query_c testInst = new Query_c(modelRoot);
      // Participant rels
      // Rel R9600 - supertype
      ActionLanguageQuery_c testR9600Inst = new ActionLanguageQuery_c(modelRoot);
      testR9600Inst.relateAcrossR9600To(testInst);

      // Formalizer rels
      // Rel R9500
      SearchEngine_c testR9500Inst = new SearchEngine_c(modelRoot);
      testR9500Inst.relateAcrossR9500To(testInst);

      testInst.Dispose();

      // 
      // Rel R9600
      ActionLanguageQuery_c testR9600Inst2 = ActionLanguageQuery_c.getOneSQU_AOnR9600(testInst);
      assertNull ( testR9600Inst2 );

      SearchEngine_c testR9500Inst2 = SearchEngine_c.getOneSEN_EOnR9500(testInst);
      assertNull ( testR9500Inst2 );

      testInst.delete();
	    }

   	    public void testSearchableElementDisposeNamedSearchable() throws Exception
	    {   
	            SearchableElement_c testInst = new SearchableElement_c(modelRoot);
      // Participant rels
      // Rel R9702 - supertype
      NamedSearchable_c testR9702Inst = new NamedSearchable_c(modelRoot);
      testR9702Inst.relateAcrossR9702To(testInst);

      // Formalizer rels
      // Rel R9700
      SearchParticipant_c testR9700Inst = new SearchParticipant_c(modelRoot);
      testR9700Inst.relateAcrossR9700To(testInst);

      testInst.Dispose();

      // 
      // Rel R9702
      NamedSearchable_c testR9702Inst2 = NamedSearchable_c.getOneSP_NSOnR9702(testInst);
      assertNull ( testR9702Inst2 );

      SearchParticipant_c testR9700Inst2 = SearchParticipant_c.getOneSP_SPOnR9700(testInst);
      assertNull ( testR9700Inst2 );

      testInst.delete();
	    }
	    public void testSearchableElementDisposeActionLanguageSearchable() throws Exception
	    {   
	            SearchableElement_c testInst = new SearchableElement_c(modelRoot);
      // Participant rels
      // Rel R9702 - supertype
      ActionLanguageSearchable_c testR9702Inst = new ActionLanguageSearchable_c(modelRoot);
      testR9702Inst.relateAcrossR9702To(testInst);

      // Formalizer rels
      // Rel R9700
      SearchParticipant_c testR9700Inst = new SearchParticipant_c(modelRoot);
      testR9700Inst.relateAcrossR9700To(testInst);

      testInst.Dispose();

      // 
      // Rel R9702
      ActionLanguageSearchable_c testR9702Inst2 = ActionLanguageSearchable_c.getOneSP_ALSOnR9702(testInst);
      assertNull ( testR9702Inst2 );

      SearchParticipant_c testR9700Inst2 = SearchParticipant_c.getOneSP_SPOnR9700(testInst);
      assertNull ( testR9700Inst2 );

      testInst.delete();
	    }
	    public void testSearchableElementDisposeDescriptionSearchable() throws Exception
	    {   
	            SearchableElement_c testInst = new SearchableElement_c(modelRoot);
      // Participant rels
      // Rel R9702 - supertype
      DescriptionSearchable_c testR9702Inst = new DescriptionSearchable_c(modelRoot);
      testR9702Inst.relateAcrossR9702To(testInst);

      // Formalizer rels
      // Rel R9700
      SearchParticipant_c testR9700Inst = new SearchParticipant_c(modelRoot);
      testR9700Inst.relateAcrossR9700To(testInst);

      testInst.Dispose();

      // 
      // Rel R9702
      DescriptionSearchable_c testR9702Inst2 = DescriptionSearchable_c.getOneSP_DSOnR9702(testInst);
      assertNull ( testR9702Inst2 );

      SearchParticipant_c testR9700Inst2 = SearchParticipant_c.getOneSP_SPOnR9700(testInst);
      assertNull ( testR9700Inst2 );

      testInst.delete();
	    }

   	    public void testSearchParticipantDispose() throws Exception
	    {
    	      SearchParticipant_c testInst = new SearchParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSearchEngineDisposeActionLanguageEngine() throws Exception
	    {   
	            SearchEngine_c testInst = new SearchEngine_c(modelRoot);
      // Participant rels
      // Rel R9503
      SearchResult_c testR9503Inst = new SearchResult_c(modelRoot);
      testR9503Inst.relateAcrossR9503To(testInst);
      // Rel R9502
      SearchParticipant_c testR9502Inst = new SearchParticipant_c(modelRoot);
      testR9502Inst.relateAcrossR9502To(testInst);
      // Rel R9501 - supertype
      ActionLanguageEngine_c testR9501Inst = new ActionLanguageEngine_c(modelRoot);
      testR9501Inst.relateAcrossR9501To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9503
      SearchResult_c testR9503Inst2 = SearchResult_c.getOneSR_SROnR9503(testInst);
      assertNull ( testR9503Inst2 );
      // Rel R9502
      SearchParticipant_c testR9502Inst2 = SearchParticipant_c.getOneSP_SPOnR9502(testInst);
      assertNull ( testR9502Inst2 );
      // Rel R9501
      ActionLanguageEngine_c testR9501Inst2 = ActionLanguageEngine_c.getOneSEN_ALEOnR9501(testInst);
      assertNull ( testR9501Inst2 );


      testInst.delete();
	    }
	    public void testSearchEngineDisposeDescriptionEngine() throws Exception
	    {   
	            SearchEngine_c testInst = new SearchEngine_c(modelRoot);
      // Participant rels
      // Rel R9503
      SearchResult_c testR9503Inst = new SearchResult_c(modelRoot);
      testR9503Inst.relateAcrossR9503To(testInst);
      // Rel R9502
      SearchParticipant_c testR9502Inst = new SearchParticipant_c(modelRoot);
      testR9502Inst.relateAcrossR9502To(testInst);
      // Rel R9501 - supertype
      DescriptionEngine_c testR9501Inst = new DescriptionEngine_c(modelRoot);
      testR9501Inst.relateAcrossR9501To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9503
      SearchResult_c testR9503Inst2 = SearchResult_c.getOneSR_SROnR9503(testInst);
      assertNull ( testR9503Inst2 );
      // Rel R9502
      SearchParticipant_c testR9502Inst2 = SearchParticipant_c.getOneSP_SPOnR9502(testInst);
      assertNull ( testR9502Inst2 );
      // Rel R9501
      DescriptionEngine_c testR9501Inst2 = DescriptionEngine_c.getOneSEN_DEOnR9501(testInst);
      assertNull ( testR9501Inst2 );


      testInst.delete();
	    }
	    public void testSearchEngineDisposeDeclarationsEngine() throws Exception
	    {   
	            SearchEngine_c testInst = new SearchEngine_c(modelRoot);
      // Participant rels
      // Rel R9503
      SearchResult_c testR9503Inst = new SearchResult_c(modelRoot);
      testR9503Inst.relateAcrossR9503To(testInst);
      // Rel R9502
      SearchParticipant_c testR9502Inst = new SearchParticipant_c(modelRoot);
      testR9502Inst.relateAcrossR9502To(testInst);
      // Rel R9501 - supertype
      DeclarationsEngine_c testR9501Inst = new DeclarationsEngine_c(modelRoot);
      testR9501Inst.relateAcrossR9501To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9503
      SearchResult_c testR9503Inst2 = SearchResult_c.getOneSR_SROnR9503(testInst);
      assertNull ( testR9503Inst2 );
      // Rel R9502
      SearchParticipant_c testR9502Inst2 = SearchParticipant_c.getOneSP_SPOnR9502(testInst);
      assertNull ( testR9502Inst2 );
      // Rel R9501
      DeclarationsEngine_c testR9501Inst2 = DeclarationsEngine_c.getOneSEN_DCEOnR9501(testInst);
      assertNull ( testR9501Inst2 );


      testInst.delete();
	    }
	    public void testSearchEngineDisposeReferencesEngine() throws Exception
	    {   
	            SearchEngine_c testInst = new SearchEngine_c(modelRoot);
      // Participant rels
      // Rel R9503
      SearchResult_c testR9503Inst = new SearchResult_c(modelRoot);
      testR9503Inst.relateAcrossR9503To(testInst);
      // Rel R9502
      SearchParticipant_c testR9502Inst = new SearchParticipant_c(modelRoot);
      testR9502Inst.relateAcrossR9502To(testInst);
      // Rel R9501 - supertype
      ReferencesEngine_c testR9501Inst = new ReferencesEngine_c(modelRoot);
      testR9501Inst.relateAcrossR9501To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R9503
      SearchResult_c testR9503Inst2 = SearchResult_c.getOneSR_SROnR9503(testInst);
      assertNull ( testR9503Inst2 );
      // Rel R9502
      SearchParticipant_c testR9502Inst2 = SearchParticipant_c.getOneSP_SPOnR9502(testInst);
      assertNull ( testR9502Inst2 );
      // Rel R9501
      ReferencesEngine_c testR9501Inst2 = ReferencesEngine_c.getOneSEN_REOnR9501(testInst);
      assertNull ( testR9501Inst2 );


      testInst.delete();
	    }

   	    public void testUnrelateUsingDispose() throws Exception
	    {
    	      UnrelateUsing_c testInst = new UnrelateUsing_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R622
      Variable_c testR622Inst = new Variable_c(modelRoot);
      testR622Inst.relateAcrossR622To(testInst);
      // Rel R623
      Variable_c testR623Inst = new Variable_c(modelRoot);
      testR623Inst.relateAcrossR623To(testInst);
      // Rel R624
      Variable_c testR624Inst = new Variable_c(modelRoot);
      testR624Inst.relateAcrossR624To(testInst);
      // Rel R656
      Association_c testR656Inst = new Association_c(modelRoot);
      testR656Inst.relateAcrossR656To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR622Inst2 = Variable_c.getOneV_VAROnR622(testInst);
      assertNull ( testR622Inst2 );
      Variable_c testR623Inst2 = Variable_c.getOneV_VAROnR623(testInst);
      assertNull ( testR623Inst2 );
      Variable_c testR624Inst2 = Variable_c.getOneV_VAROnR624(testInst);
      assertNull ( testR624Inst2 );
      Association_c testR656Inst2 = Association_c.getOneR_RELOnR656(testInst);
      assertNull ( testR656Inst2 );

      testInst.delete();
	    }

   	    public void testUnrelateDispose() throws Exception
	    {
    	      Unrelate_c testInst = new Unrelate_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R620
      Variable_c testR620Inst = new Variable_c(modelRoot);
      testR620Inst.relateAcrossR620To(testInst);
      // Rel R621
      Variable_c testR621Inst = new Variable_c(modelRoot);
      testR621Inst.relateAcrossR621To(testInst);
      // Rel R655
      Association_c testR655Inst = new Association_c(modelRoot);
      testR655Inst.relateAcrossR655To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR620Inst2 = Variable_c.getOneV_VAROnR620(testInst);
      assertNull ( testR620Inst2 );
      Variable_c testR621Inst2 = Variable_c.getOneV_VAROnR621(testInst);
      assertNull ( testR621Inst2 );
      Association_c testR655Inst2 = Association_c.getOneR_RELOnR655(testInst);
      assertNull ( testR655Inst2 );

      testInst.delete();
	    }

   	    public void testRelateUsingDispose() throws Exception
	    {
    	      RelateUsing_c testInst = new RelateUsing_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R617
      Variable_c testR617Inst = new Variable_c(modelRoot);
      testR617Inst.relateAcrossR617To(testInst);
      // Rel R618
      Variable_c testR618Inst = new Variable_c(modelRoot);
      testR618Inst.relateAcrossR618To(testInst);
      // Rel R619
      Variable_c testR619Inst = new Variable_c(modelRoot);
      testR619Inst.relateAcrossR619To(testInst);
      // Rel R654
      Association_c testR654Inst = new Association_c(modelRoot);
      testR654Inst.relateAcrossR654To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR617Inst2 = Variable_c.getOneV_VAROnR617(testInst);
      assertNull ( testR617Inst2 );
      Variable_c testR618Inst2 = Variable_c.getOneV_VAROnR618(testInst);
      assertNull ( testR618Inst2 );
      Variable_c testR619Inst2 = Variable_c.getOneV_VAROnR619(testInst);
      assertNull ( testR619Inst2 );
      Association_c testR654Inst2 = Association_c.getOneR_RELOnR654(testInst);
      assertNull ( testR654Inst2 );

      testInst.delete();
	    }

   	    public void testRelateDispose() throws Exception
	    {
    	      Relate_c testInst = new Relate_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R615
      Variable_c testR615Inst = new Variable_c(modelRoot);
      testR615Inst.relateAcrossR615To(testInst);
      // Rel R616
      Variable_c testR616Inst = new Variable_c(modelRoot);
      testR616Inst.relateAcrossR616To(testInst);
      // Rel R653
      Association_c testR653Inst = new Association_c(modelRoot);
      testR653Inst.relateAcrossR653To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR615Inst2 = Variable_c.getOneV_VAROnR615(testInst);
      assertNull ( testR615Inst2 );
      Variable_c testR616Inst2 = Variable_c.getOneV_VAROnR616(testInst);
      assertNull ( testR616Inst2 );
      Association_c testR653Inst2 = Association_c.getOneR_RELOnR653(testInst);
      assertNull ( testR653Inst2 );

      testInst.delete();
	    }

   	    public void testSearchResultSetDispose() throws Exception
	    {
    	      SearchResultSet_c testInst = new SearchResultSet_c(modelRoot);
      // Participant rels
      // Rel R8006
      ElementVisibility_c testR8006Inst = new ElementVisibility_c(modelRoot);
      testR8006Inst.relateAcrossR8006To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8006
      ElementVisibility_c testR8006Inst2 = ElementVisibility_c.getOnePE_VISOnR8006(testInst);
      assertNull ( testR8006Inst2 );


      testInst.delete();
	    }

   	    public void testPackageableElementDisposeDataType() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      DataType_c testR8001Inst = new DataType_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      DataType_c testR8001Inst2 = DataType_c.getOneS_DTOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeInteractionParticipant() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      InteractionParticipant_c testR8001Inst = new InteractionParticipant_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      InteractionParticipant_c testR8001Inst2 = InteractionParticipant_c.getOneSQ_POnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeUseCaseAssociation() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      UseCaseAssociation_c testR8001Inst = new UseCaseAssociation_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      UseCaseAssociation_c testR8001Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeActivityNode() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ActivityNode_c testR8001Inst = new ActivityNode_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ActivityNode_c testR8001Inst2 = ActivityNode_c.getOneA_NOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeModelClass() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ModelClass_c testR8001Inst = new ModelClass_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ModelClass_c testR8001Inst2 = ModelClass_c.getOneO_OBJOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeComponent() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Component_c testR8001Inst = new Component_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Component_c testR8001Inst2 = Component_c.getOneC_COnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeComponentReference() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ComponentReference_c testR8001Inst = new ComponentReference_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ComponentReference_c testR8001Inst2 = ComponentReference_c.getOneCL_ICOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeInterface() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Interface_c testR8001Inst = new Interface_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Interface_c testR8001Inst2 = Interface_c.getOneC_IOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposePackage() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Package_c testR8001Inst = new Package_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Package_c testR8001Inst2 = Package_c.getOneEP_PKGOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeConstantSpecification() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ConstantSpecification_c testR8001Inst = new ConstantSpecification_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ConstantSpecification_c testR8001Inst2 = ConstantSpecification_c.getOneCNST_CSPOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeActivityPartition() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ActivityPartition_c testR8001Inst = new ActivityPartition_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ActivityPartition_c testR8001Inst2 = ActivityPartition_c.getOneA_APOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeActivityEdge() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ActivityEdge_c testR8001Inst = new ActivityEdge_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ActivityEdge_c testR8001Inst2 = ActivityEdge_c.getOneA_EOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeMessage() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Message_c testR8001Inst = new Message_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Message_c testR8001Inst2 = Message_c.getOneMSG_MOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeImportedClass() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ImportedClass_c testR8001Inst = new ImportedClass_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ImportedClass_c testR8001Inst2 = ImportedClass_c.getOneO_IOBJOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeAssociation() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Association_c testR8001Inst = new Association_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Association_c testR8001Inst2 = Association_c.getOneR_RELOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeExternalEntity() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      ExternalEntity_c testR8001Inst = new ExternalEntity_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      ExternalEntity_c testR8001Inst2 = ExternalEntity_c.getOneS_EEOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeFunction() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Function_c testR8001Inst = new Function_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Function_c testR8001Inst2 = Function_c.getOneS_SYNCOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeSatisfaction() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Satisfaction_c testR8001Inst = new Satisfaction_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Satisfaction_c testR8001Inst2 = Satisfaction_c.getOneC_SFOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }
	    public void testPackageableElementDisposeDelegation() throws Exception
	    {   
	            PackageableElement_c testInst = new PackageableElement_c(modelRoot);
      // Participant rels
      // Rel R8001 - supertype
      Delegation_c testR8001Inst = new Delegation_c(modelRoot);
      testR8001Inst.relateAcrossR8001To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      Package_c testR8002InstOth = new Package_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      Component_c testR8004InstOth = new Component_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      SystemModel_c testR9100InstOth = new SystemModel_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      Body_c testR640InstOth = new Body_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8001
      Delegation_c testR8001Inst2 = Delegation_c.getOneC_DGOnR8001(testInst);
      assertNull ( testR8001Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );


      testInst.delete();
	    }

   	    public void testComponentResultSetDispose() throws Exception
	    {
    	      ComponentResultSet_c testInst = new ComponentResultSet_c(modelRoot);
      // Participant rels
      // Rel R8008
      ComponentVisibility_c testR8008Inst = new ComponentVisibility_c(modelRoot);
      testR8008Inst.relateAcrossR8008To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R8008
      ComponentVisibility_c testR8008Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8008(testInst);
      assertNull ( testR8008Inst2 );


      testInst.delete();
	    }

   	    public void testIntegrityIssueDispose() throws Exception
	    {
    	      IntegrityIssue_c testInst = new IntegrityIssue_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSynchronousMessageDisposeFunctionMessage() throws Exception
	    {   
	            SynchronousMessage_c testInst = new SynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1020 - supertype
      FunctionMessage_c testR1020Inst = new FunctionMessage_c(modelRoot);
      testR1020Inst.relateAcrossR1020To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1020
      FunctionMessage_c testR1020Inst2 = FunctionMessage_c.getOneMSG_FOnR1020(testInst);
      assertNull ( testR1020Inst2 );


      testInst.delete();
	    }
	    public void testSynchronousMessageDisposeOperationMessage() throws Exception
	    {   
	            SynchronousMessage_c testInst = new SynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1020 - supertype
      OperationMessage_c testR1020Inst = new OperationMessage_c(modelRoot);
      testR1020Inst.relateAcrossR1020To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1020
      OperationMessage_c testR1020Inst2 = OperationMessage_c.getOneMSG_OOnR1020(testInst);
      assertNull ( testR1020Inst2 );


      testInst.delete();
	    }
	    public void testSynchronousMessageDisposeBridgeMessage() throws Exception
	    {   
	            SynchronousMessage_c testInst = new SynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1020 - supertype
      BridgeMessage_c testR1020Inst = new BridgeMessage_c(modelRoot);
      testR1020Inst.relateAcrossR1020To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1020
      BridgeMessage_c testR1020Inst2 = BridgeMessage_c.getOneMSG_BOnR1020(testInst);
      assertNull ( testR1020Inst2 );


      testInst.delete();
	    }
	    public void testSynchronousMessageDisposeInformalSynchronousMessage() throws Exception
	    {   
	            SynchronousMessage_c testInst = new SynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1020 - supertype
      InformalSynchronousMessage_c testR1020Inst = new InformalSynchronousMessage_c(modelRoot);
      testR1020Inst.relateAcrossR1020To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1020
      InformalSynchronousMessage_c testR1020Inst2 = InformalSynchronousMessage_c.getOneMSG_ISMOnR1020(testInst);
      assertNull ( testR1020Inst2 );


      testInst.delete();
	    }
	    public void testSynchronousMessageDisposeInterfaceOperationMessage() throws Exception
	    {   
	            SynchronousMessage_c testInst = new SynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1020 - supertype
      InterfaceOperationMessage_c testR1020Inst = new InterfaceOperationMessage_c(modelRoot);
      testR1020Inst.relateAcrossR1020To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1020
      InterfaceOperationMessage_c testR1020Inst2 = InterfaceOperationMessage_c.getOneMSG_IOPOnR1020(testInst);
      assertNull ( testR1020Inst2 );


      testInst.delete();
	    }

   	    public void testSignalMessageDispose() throws Exception
	    {
    	      SignalMessage_c testInst = new SignalMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testReturnMessageDispose() throws Exception
	    {
    	      ReturnMessage_c testInst = new ReturnMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testOperationMessageDispose() throws Exception
	    {
    	      OperationMessage_c testInst = new OperationMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1011
      Operation_c testR1011Inst = new Operation_c(modelRoot);
      testR1011Inst.relateAcrossR1011To(testInst);

      testInst.Dispose();

      // 

      Operation_c testR1011Inst2 = Operation_c.getOneO_TFROnR1011(testInst);
      assertNull ( testR1011Inst2 );

      testInst.delete();
	    }

   	    public void testOperationArgumentDispose() throws Exception
	    {
    	      OperationArgument_c testInst = new OperationArgument_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1015
      OperationParameter_c testR1015Inst = new OperationParameter_c(modelRoot);
      testR1015Inst.relateAcrossR1015To(testInst);

      testInst.Dispose();

      // 

      OperationParameter_c testR1015Inst2 = OperationParameter_c.getOneO_TPARMOnR1015(testInst);
      assertNull ( testR1015Inst2 );

      testInst.delete();
	    }

   	    public void testMessageArgumentDisposeBridgeArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      BridgeArgument_c testR1013Inst = new BridgeArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      BridgeArgument_c testR1013Inst2 = BridgeArgument_c.getOneMSG_BAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }
	    public void testMessageArgumentDisposeOperationArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      OperationArgument_c testR1013Inst = new OperationArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      OperationArgument_c testR1013Inst2 = OperationArgument_c.getOneMSG_OAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }
	    public void testMessageArgumentDisposeFunctionArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      FunctionArgument_c testR1013Inst = new FunctionArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      FunctionArgument_c testR1013Inst2 = FunctionArgument_c.getOneMSG_FAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }
	    public void testMessageArgumentDisposeEventArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      EventArgument_c testR1013Inst = new EventArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      EventArgument_c testR1013Inst2 = EventArgument_c.getOneMSG_EAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }
	    public void testMessageArgumentDisposeInformalArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      InformalArgument_c testR1013Inst = new InformalArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      InformalArgument_c testR1013Inst2 = InformalArgument_c.getOneMSG_IAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }
	    public void testMessageArgumentDisposeExecutablePropertyArgument() throws Exception
	    {   
	            MessageArgument_c testInst = new MessageArgument_c(modelRoot);
      // Participant rels
      // Rel R1013 - supertype
      ExecutablePropertyArgument_c testR1013Inst = new ExecutablePropertyArgument_c(modelRoot);
      testR1013Inst.relateAcrossR1013To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1013
      ExecutablePropertyArgument_c testR1013Inst2 = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1013(testInst);
      assertNull ( testR1013Inst2 );


      testInst.delete();
	    }

   	    public void testMessageDisposeAsynchronousMessage() throws Exception
	    {   
	            Message_c testInst = new Message_c(modelRoot);
      // Participant rels
      // Rel R1000
      MessageArgument_c testR1000Inst = new MessageArgument_c(modelRoot);
      testR1000Inst.relateAcrossR1000To(testInst);
      // Rel R1001
      MessageArgument_c testR1001Inst = new MessageArgument_c(modelRoot);
      testR1001Inst.relateAcrossR1001To(testInst);
      // Rel R1018 - supertype
      AsynchronousMessage_c testR1018Inst = new AsynchronousMessage_c(modelRoot);
      testR1018Inst.relateAcrossR1018To(testInst);
      // Rel R1135 - associative
      MessageInCommunication_c testR1135Inst = new MessageInCommunication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testInst);
      Communication_c testR1135InstOth = new Communication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testR1135InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1000
      MessageArgument_c testR1000Inst2 = MessageArgument_c.getOneMSG_AOnR1000(testInst);
      assertNull ( testR1000Inst2 );
      // Rel R1001
      MessageArgument_c testR1001Inst2 = MessageArgument_c.getOneMSG_AOnR1001(testInst);
      assertNull ( testR1001Inst2 );
      // Rel R1018
      AsynchronousMessage_c testR1018Inst2 = AsynchronousMessage_c.getOneMSG_AMOnR1018(testInst);
      assertNull ( testR1018Inst2 );
      // Rel R1135
      MessageInCommunication_c testR1135Inst2 = MessageInCommunication_c.getOneCOMM_MICOnR1135(testInst);
      assertNull ( testR1135Inst2 );


      testInst.delete();
	    }
	    public void testMessageDisposeSynchronousMessage() throws Exception
	    {   
	            Message_c testInst = new Message_c(modelRoot);
      // Participant rels
      // Rel R1000
      MessageArgument_c testR1000Inst = new MessageArgument_c(modelRoot);
      testR1000Inst.relateAcrossR1000To(testInst);
      // Rel R1001
      MessageArgument_c testR1001Inst = new MessageArgument_c(modelRoot);
      testR1001Inst.relateAcrossR1001To(testInst);
      // Rel R1018 - supertype
      SynchronousMessage_c testR1018Inst = new SynchronousMessage_c(modelRoot);
      testR1018Inst.relateAcrossR1018To(testInst);
      // Rel R1135 - associative
      MessageInCommunication_c testR1135Inst = new MessageInCommunication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testInst);
      Communication_c testR1135InstOth = new Communication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testR1135InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1000
      MessageArgument_c testR1000Inst2 = MessageArgument_c.getOneMSG_AOnR1000(testInst);
      assertNull ( testR1000Inst2 );
      // Rel R1001
      MessageArgument_c testR1001Inst2 = MessageArgument_c.getOneMSG_AOnR1001(testInst);
      assertNull ( testR1001Inst2 );
      // Rel R1018
      SynchronousMessage_c testR1018Inst2 = SynchronousMessage_c.getOneMSG_SMOnR1018(testInst);
      assertNull ( testR1018Inst2 );
      // Rel R1135
      MessageInCommunication_c testR1135Inst2 = MessageInCommunication_c.getOneCOMM_MICOnR1135(testInst);
      assertNull ( testR1135Inst2 );


      testInst.delete();
	    }
	    public void testMessageDisposeReturnMessage() throws Exception
	    {   
	            Message_c testInst = new Message_c(modelRoot);
      // Participant rels
      // Rel R1000
      MessageArgument_c testR1000Inst = new MessageArgument_c(modelRoot);
      testR1000Inst.relateAcrossR1000To(testInst);
      // Rel R1001
      MessageArgument_c testR1001Inst = new MessageArgument_c(modelRoot);
      testR1001Inst.relateAcrossR1001To(testInst);
      // Rel R1018 - supertype
      ReturnMessage_c testR1018Inst = new ReturnMessage_c(modelRoot);
      testR1018Inst.relateAcrossR1018To(testInst);
      // Rel R1135 - associative
      MessageInCommunication_c testR1135Inst = new MessageInCommunication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testInst);
      Communication_c testR1135InstOth = new Communication_c(modelRoot);
      testR1135Inst.relateAcrossR1135To(testR1135InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1000
      MessageArgument_c testR1000Inst2 = MessageArgument_c.getOneMSG_AOnR1000(testInst);
      assertNull ( testR1000Inst2 );
      // Rel R1001
      MessageArgument_c testR1001Inst2 = MessageArgument_c.getOneMSG_AOnR1001(testInst);
      assertNull ( testR1001Inst2 );
      // Rel R1018
      ReturnMessage_c testR1018Inst2 = ReturnMessage_c.getOneMSG_ROnR1018(testInst);
      assertNull ( testR1018Inst2 );
      // Rel R1135
      MessageInCommunication_c testR1135Inst2 = MessageInCommunication_c.getOneCOMM_MICOnR1135(testInst);
      assertNull ( testR1135Inst2 );


      testInst.delete();
	    }

   	    public void testInterfaceOperationMessageDispose() throws Exception
	    {
    	      InterfaceOperationMessage_c testInst = new InterfaceOperationMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testInformalSynchronousMessageDispose() throws Exception
	    {
    	      InformalSynchronousMessage_c testInst = new InformalSynchronousMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testInformalAsynchronousMessageDispose() throws Exception
	    {
    	      InformalAsynchronousMessage_c testInst = new InformalAsynchronousMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testFunctionMessageDispose() throws Exception
	    {
    	      FunctionMessage_c testInst = new FunctionMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1010
      Function_c testR1010Inst = new Function_c(modelRoot);
      testR1010Inst.relateAcrossR1010To(testInst);

      testInst.Dispose();

      // 

      Function_c testR1010Inst2 = Function_c.getOneS_SYNCOnR1010(testInst);
      assertNull ( testR1010Inst2 );

      testInst.delete();
	    }

   	    public void testFunctionArgumentDispose() throws Exception
	    {
    	      FunctionArgument_c testInst = new FunctionArgument_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1016
      FunctionParameter_c testR1016Inst = new FunctionParameter_c(modelRoot);
      testR1016Inst.relateAcrossR1016To(testInst);

      testInst.Dispose();

      // 

      FunctionParameter_c testR1016Inst2 = FunctionParameter_c.getOneS_SPARMOnR1016(testInst);
      assertNull ( testR1016Inst2 );

      testInst.delete();
	    }

   	    public void testExecutablePropertyArgumentDispose() throws Exception
	    {
    	      ExecutablePropertyArgument_c testInst = new ExecutablePropertyArgument_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testEventMessageDispose() throws Exception
	    {
    	      EventMessage_c testInst = new EventMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1009
      StateMachineEvent_c testR1009Inst = new StateMachineEvent_c(modelRoot);
      testR1009Inst.relateAcrossR1009To(testInst);

      testInst.Dispose();

      // 

      StateMachineEvent_c testR1009Inst2 = StateMachineEvent_c.getOneSM_EVTOnR1009(testInst);
      assertNull ( testR1009Inst2 );

      testInst.delete();
	    }

   	    public void testEventArgumentDispose() throws Exception
	    {
    	      EventArgument_c testInst = new EventArgument_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1017
      StateMachineEventDataItem_c testR1017Inst = new StateMachineEventDataItem_c(modelRoot);
      testR1017Inst.relateAcrossR1017To(testInst);

      testInst.Dispose();

      // 

      StateMachineEventDataItem_c testR1017Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR1017(testInst);
      assertNull ( testR1017Inst2 );

      testInst.delete();
	    }

   	    public void testBridgeMessageDispose() throws Exception
	    {
    	      BridgeMessage_c testInst = new BridgeMessage_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1012
      Bridge_c testR1012Inst = new Bridge_c(modelRoot);
      testR1012Inst.relateAcrossR1012To(testInst);

      testInst.Dispose();

      // 

      Bridge_c testR1012Inst2 = Bridge_c.getOneS_BRGOnR1012(testInst);
      assertNull ( testR1012Inst2 );

      testInst.delete();
	    }

   	    public void testBridgeArgumentDispose() throws Exception
	    {
    	      BridgeArgument_c testInst = new BridgeArgument_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1014
      BridgeParameter_c testR1014Inst = new BridgeParameter_c(modelRoot);
      testR1014Inst.relateAcrossR1014To(testInst);

      testInst.Dispose();

      // 

      BridgeParameter_c testR1014Inst2 = BridgeParameter_c.getOneS_BPARMOnR1014(testInst);
      assertNull ( testR1014Inst2 );

      testInst.delete();
	    }

   	    public void testAsynchronousMessageDisposeEventMessage() throws Exception
	    {   
	            AsynchronousMessage_c testInst = new AsynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1019 - supertype
      EventMessage_c testR1019Inst = new EventMessage_c(modelRoot);
      testR1019Inst.relateAcrossR1019To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1019
      EventMessage_c testR1019Inst2 = EventMessage_c.getOneMSG_EOnR1019(testInst);
      assertNull ( testR1019Inst2 );


      testInst.delete();
	    }
	    public void testAsynchronousMessageDisposeInformalAsynchronousMessage() throws Exception
	    {   
	            AsynchronousMessage_c testInst = new AsynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1019 - supertype
      InformalAsynchronousMessage_c testR1019Inst = new InformalAsynchronousMessage_c(modelRoot);
      testR1019Inst.relateAcrossR1019To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1019
      InformalAsynchronousMessage_c testR1019Inst2 = InformalAsynchronousMessage_c.getOneMSG_IAMOnR1019(testInst);
      assertNull ( testR1019Inst2 );


      testInst.delete();
	    }
	    public void testAsynchronousMessageDisposeSignalMessage() throws Exception
	    {   
	            AsynchronousMessage_c testInst = new AsynchronousMessage_c(modelRoot);
      // Participant rels
      // Rel R1019 - supertype
      SignalMessage_c testR1019Inst = new SignalMessage_c(modelRoot);
      testR1019Inst.relateAcrossR1019To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1019
      SignalMessage_c testR1019Inst2 = SignalMessage_c.getOneMSG_SIGOnR1019(testInst);
      assertNull ( testR1019Inst2 );


      testInst.delete();
	    }

   	    public void testSignalInvocationDispose() throws Exception
	    {
    	      SignalInvocation_c testInst = new SignalInvocation_c(modelRoot);
      // Participant rels
      // Rel R662
      ActualParameter_c testR662Inst = new ActualParameter_c(modelRoot);
      testR662Inst.relateAcrossR662To(testInst);

      // Formalizer rels
      // Rel R630
      Value_c testR630Inst = new Value_c(modelRoot);
      testR630Inst.relateAcrossR630To(testInst);

      testInst.Dispose();

      // 
      // Rel R662
      ActualParameter_c testR662Inst2 = ActualParameter_c.getOneV_PAROnR662(testInst);
      assertNull ( testR662Inst2 );

      Value_c testR630Inst2 = Value_c.getOneV_VALOnR630(testInst);
      assertNull ( testR630Inst2 );

      testInst.delete();
	    }

   	    public void testReturnStmtDispose() throws Exception
	    {
    	      ReturnStmt_c testInst = new ReturnStmt_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R668
      Value_c testR668Inst = new Value_c(modelRoot);
      testR668Inst.relateAcrossR668To(testInst);

      testInst.Dispose();

      // 

      Value_c testR668Inst2 = Value_c.getOneV_VALOnR668(testInst);
      assertNull ( testR668Inst2 );

      testInst.delete();
	    }

   	    public void testOperationInvocationDispose() throws Exception
	    {
    	      OperationInvocation_c testInst = new OperationInvocation_c(modelRoot);
      // Participant rels
      // Rel R627
      ActualParameter_c testR627Inst = new ActualParameter_c(modelRoot);
      testR627Inst.relateAcrossR627To(testInst);

      // Formalizer rels
      // Rel R667
      Variable_c testR667Inst = new Variable_c(modelRoot);
      testR667Inst.relateAcrossR667To(testInst);
      // Rel R673
      Operation_c testR673Inst = new Operation_c(modelRoot);
      testR673Inst.relateAcrossR673To(testInst);

      testInst.Dispose();

      // 
      // Rel R627
      ActualParameter_c testR627Inst2 = ActualParameter_c.getOneV_PAROnR627(testInst);
      assertNull ( testR627Inst2 );

      Variable_c testR667Inst2 = Variable_c.getOneV_VAROnR667(testInst);
      assertNull ( testR667Inst2 );
      Operation_c testR673Inst2 = Operation_c.getOneO_TFROnR673(testInst);
      assertNull ( testR673Inst2 );

      testInst.delete();
	    }

   	    public void testInterfaceOperationInvocationDispose() throws Exception
	    {
    	      InterfaceOperationInvocation_c testInst = new InterfaceOperationInvocation_c(modelRoot);
      // Participant rels
      // Rel R679
      ActualParameter_c testR679Inst = new ActualParameter_c(modelRoot);
      testR679Inst.relateAcrossR679To(testInst);

      // Formalizer rels
      // Rel R629
      Value_c testR629Inst = new Value_c(modelRoot);
      testR629Inst.relateAcrossR629To(testInst);

      testInst.Dispose();

      // 
      // Rel R679
      ActualParameter_c testR679Inst2 = ActualParameter_c.getOneV_PAROnR679(testInst);
      assertNull ( testR679Inst2 );

      Value_c testR629Inst2 = Value_c.getOneV_VALOnR629(testInst);
      assertNull ( testR629Inst2 );

      testInst.delete();
	    }

   	    public void testFunctionInvocationDispose() throws Exception
	    {
    	      FunctionInvocation_c testInst = new FunctionInvocation_c(modelRoot);
      // Participant rels
      // Rel R669
      ActualParameter_c testR669Inst = new ActualParameter_c(modelRoot);
      testR669Inst.relateAcrossR669To(testInst);

      // Formalizer rels
      // Rel R675
      Function_c testR675Inst = new Function_c(modelRoot);
      testR675Inst.relateAcrossR675To(testInst);

      testInst.Dispose();

      // 
      // Rel R669
      ActualParameter_c testR669Inst2 = ActualParameter_c.getOneV_PAROnR669(testInst);
      assertNull ( testR669Inst2 );

      Function_c testR675Inst2 = Function_c.getOneS_SYNCOnR675(testInst);
      assertNull ( testR675Inst2 );

      testInst.delete();
	    }

   	    public void testBridgeInvocationDispose() throws Exception
	    {
    	      BridgeInvocation_c testInst = new BridgeInvocation_c(modelRoot);
      // Participant rels
      // Rel R628
      ActualParameter_c testR628Inst = new ActualParameter_c(modelRoot);
      testR628Inst.relateAcrossR628To(testInst);

      // Formalizer rels
      // Rel R674
      Bridge_c testR674Inst = new Bridge_c(modelRoot);
      testR674Inst.relateAcrossR674To(testInst);

      testInst.Dispose();

      // 
      // Rel R628
      ActualParameter_c testR628Inst2 = ActualParameter_c.getOneV_PAROnR628(testInst);
      assertNull ( testR628Inst2 );

      Bridge_c testR674Inst2 = Bridge_c.getOneS_BRGOnR674(testInst);
      assertNull ( testR674Inst2 );

      testInst.delete();
	    }

   
   	    public void testUseCaseParticipantDispose() throws Exception
	    {
    	      UseCaseParticipant_c testInst = new UseCaseParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testTimingMarkDispose() throws Exception
	    {
    	      TimingMark_c testInst = new TimingMark_c(modelRoot);
      // Participant rels
      // Rel R941
      TimeSpan_c testR941Inst = new TimeSpan_c(modelRoot);
      testR941Inst.relateAcrossR941To(testInst);
      // Rel R942
      TimeSpan_c testR942Inst = new TimeSpan_c(modelRoot);
      testR942Inst.relateAcrossR942To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R941
      TimeSpan_c testR941Inst2 = TimeSpan_c.getOneSQ_TSOnR941(testInst);
      assertNull ( testR941Inst2 );
      // Rel R942
      TimeSpan_c testR942Inst2 = TimeSpan_c.getOneSQ_TSOnR942(testInst);
      assertNull ( testR942Inst2 );


      testInst.delete();
	    }

   	    public void testTimeSpanDispose() throws Exception
	    {
    	      TimeSpan_c testInst = new TimeSpan_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testPackageParticipantDispose() throws Exception
	    {
    	      PackageParticipant_c testInst = new PackageParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testLifespanDispose() throws Exception
	    {
    	      Lifespan_c testInst = new Lifespan_c(modelRoot);
      // Participant rels
      // Rel R931
      TimingMark_c testR931Inst = new TimingMark_c(modelRoot);
      testR931Inst.relateAcrossR931To(testInst);

      // Formalizer rels
      // Rel R940
      InteractionParticipant_c testR940Inst = new InteractionParticipant_c(modelRoot);
      testR940Inst.relateAcrossR940To(testInst);

      testInst.Dispose();

      // 
      // Rel R931
      TimingMark_c testR931Inst2 = TimingMark_c.getOneSQ_TMOnR931(testInst);
      assertNull ( testR931Inst2 );

      InteractionParticipant_c testR940Inst2 = InteractionParticipant_c.getOneSQ_POnR940(testInst);
      assertNull ( testR940Inst2 );

      testInst.delete();
	    }

   	    public void testInteractionParticipantDisposeClassInstanceParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      ClassInstanceParticipant_c testR930Inst = new ClassInstanceParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      ClassInstanceParticipant_c testR930Inst2 = ClassInstanceParticipant_c.getOneSQ_CIPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeExternalEntityParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      ExternalEntityParticipant_c testR930Inst = new ExternalEntityParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      ExternalEntityParticipant_c testR930Inst2 = ExternalEntityParticipant_c.getOneSQ_EEPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeFunctionPackageParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      FunctionPackageParticipant_c testR930Inst = new FunctionPackageParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      FunctionPackageParticipant_c testR930Inst2 = FunctionPackageParticipant_c.getOneSQ_FPPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeClassParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      ClassParticipant_c testR930Inst = new ClassParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      ClassParticipant_c testR930Inst2 = ClassParticipant_c.getOneSQ_CPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeActorParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      ActorParticipant_c testR930Inst = new ActorParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      ActorParticipant_c testR930Inst2 = ActorParticipant_c.getOneSQ_APOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeLifespan() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      Lifespan_c testR930Inst = new Lifespan_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      Lifespan_c testR930Inst2 = Lifespan_c.getOneSQ_LSOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeUseCaseParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      UseCaseParticipant_c testR930Inst = new UseCaseParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      UseCaseParticipant_c testR930Inst2 = UseCaseParticipant_c.getOneIA_UCPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposeComponentParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      ComponentParticipant_c testR930Inst = new ComponentParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      ComponentParticipant_c testR930Inst2 = ComponentParticipant_c.getOneSQ_COPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }
	    public void testInteractionParticipantDisposePackageParticipant() throws Exception
	    {   
	            InteractionParticipant_c testInst = new InteractionParticipant_c(modelRoot);
      // Participant rels
      // Rel R1203 - associative
      ParticipantInUseCase_c testR1203Inst = new ParticipantInUseCase_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testInst);
      UseCaseDiagram_c testR1203InstOth = new UseCaseDiagram_c(modelRoot);
      testR1203Inst.relateAcrossR1203To(testR1203InstOth);
      // Rel R1206
      UseCaseAssociation_c testR1206Inst = new UseCaseAssociation_c(modelRoot);
      testR1206Inst.relateAcrossR1206To(testInst);
      // Rel R1207
      UseCaseAssociation_c testR1207Inst = new UseCaseAssociation_c(modelRoot);
      testR1207Inst.relateAcrossR1207To(testInst);
      // Rel R1007
      Message_c testR1007Inst = new Message_c(modelRoot);
      testR1007Inst.relateAcrossR1007To(testInst);
      // Rel R1008
      Message_c testR1008Inst = new Message_c(modelRoot);
      testR1008Inst.relateAcrossR1008To(testInst);
      // Rel R930 - supertype
      PackageParticipant_c testR930Inst = new PackageParticipant_c(modelRoot);
      testR930Inst.relateAcrossR930To(testInst);
      // Rel R1126 - associative
      ParticipantInCommunication_c testR1126Inst = new ParticipantInCommunication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testInst);
      Communication_c testR1126InstOth = new Communication_c(modelRoot);
      testR1126Inst.relateAcrossR1126To(testR1126InstOth);
      // Rel R1133
      CommunicationLink_c testR1133Inst = new CommunicationLink_c(modelRoot);
      testR1133Inst.relateAcrossR1133To(testInst);
      // Rel R1134
      CommunicationLink_c testR1134Inst = new CommunicationLink_c(modelRoot);
      testR1134Inst.relateAcrossR1134To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1203
      ParticipantInUseCase_c testR1203Inst2 = ParticipantInUseCase_c.getOneUC_PIUCOnR1203(testInst);
      assertNull ( testR1203Inst2 );
      // Rel R1206
      UseCaseAssociation_c testR1206Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1206(testInst);
      assertNull ( testR1206Inst2 );
      // Rel R1207
      UseCaseAssociation_c testR1207Inst2 = UseCaseAssociation_c.getOneUC_UCAOnR1207(testInst);
      assertNull ( testR1207Inst2 );
      // Rel R1007
      Message_c testR1007Inst2 = Message_c.getOneMSG_MOnR1007(testInst);
      assertNull ( testR1007Inst2 );
      // Rel R1008
      Message_c testR1008Inst2 = Message_c.getOneMSG_MOnR1008(testInst);
      assertNull ( testR1008Inst2 );
      // Rel R930
      PackageParticipant_c testR930Inst2 = PackageParticipant_c.getOneSQ_PPOnR930(testInst);
      assertNull ( testR930Inst2 );
      // Rel R1126
      ParticipantInCommunication_c testR1126Inst2 = ParticipantInCommunication_c.getOneCOMM_PICOnR1126(testInst);
      assertNull ( testR1126Inst2 );
      // Rel R1133
      CommunicationLink_c testR1133Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1133(testInst);
      assertNull ( testR1133Inst2 );
      // Rel R1134
      CommunicationLink_c testR1134Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1134(testInst);
      assertNull ( testR1134Inst2 );


      testInst.delete();
	    }

   	    public void testInstanceAttributeValueDisposeInformalAttributeValue() throws Exception
	    {   
	            InstanceAttributeValue_c testInst = new InstanceAttributeValue_c(modelRoot);
      // Participant rels
      // Rel R948 - supertype
      InformalAttributeValue_c testR948Inst = new InformalAttributeValue_c(modelRoot);
      testR948Inst.relateAcrossR948To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R948
      InformalAttributeValue_c testR948Inst2 = InformalAttributeValue_c.getOneSQ_IAVOnR948(testInst);
      assertNull ( testR948Inst2 );

      Attribute_c testR938Inst2 = Attribute_c.getOneO_ATTROnR938(testInst);
      assertNull ( testR938Inst2 );

      testInst.delete();
	    }
	    public void testInstanceAttributeValueDisposeFormalAttributeValue() throws Exception
	    {   
	            InstanceAttributeValue_c testInst = new InstanceAttributeValue_c(modelRoot);
      // Participant rels
      // Rel R948 - supertype
      FormalAttributeValue_c testR948Inst = new FormalAttributeValue_c(modelRoot);
      testR948Inst.relateAcrossR948To(testInst);

      // Formalizer rels
      // Rel R938
      Attribute_c testR938Inst = new Attribute_c(modelRoot);
      testR938Inst.relateAcrossR938To(testInst);

      testInst.Dispose();

      // 
      // Rel R948
      FormalAttributeValue_c testR948Inst2 = FormalAttributeValue_c.getOneSQ_FAVOnR948(testInst);
      assertNull ( testR948Inst2 );

      Attribute_c testR938Inst2 = Attribute_c.getOneO_ATTROnR938(testInst);
      assertNull ( testR938Inst2 );

      testInst.delete();
	    }

   	    public void testFunctionPackageParticipantDispose() throws Exception
	    {
    	      FunctionPackageParticipant_c testInst = new FunctionPackageParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R932
      FunctionPackage_c testR932Inst = new FunctionPackage_c(modelRoot);
      testR932Inst.relateAcrossR932To(testInst);

      testInst.Dispose();

      // 

      FunctionPackage_c testR932Inst2 = FunctionPackage_c.getOneS_FPKOnR932(testInst);
      assertNull ( testR932Inst2 );

      testInst.delete();
	    }

   	    public void testExternalEntityParticipantDispose() throws Exception
	    {
    	      ExternalEntityParticipant_c testInst = new ExternalEntityParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R933
      ExternalEntity_c testR933Inst = new ExternalEntity_c(modelRoot);
      testR933Inst.relateAcrossR933To(testInst);

      testInst.Dispose();

      // 

      ExternalEntity_c testR933Inst2 = ExternalEntity_c.getOneS_EEOnR933(testInst);
      assertNull ( testR933Inst2 );

      testInst.delete();
	    }

   	    public void testComponentParticipantDispose() throws Exception
	    {
    	      ComponentParticipant_c testInst = new ComponentParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testClassParticipantAttributeDisposeInformalAttribute() throws Exception
	    {   
	            ClassParticipantAttribute_c testInst = new ClassParticipantAttribute_c(modelRoot);
      // Participant rels
      // Rel R947 - supertype
      InformalAttribute_c testR947Inst = new InformalAttribute_c(modelRoot);
      testR947Inst.relateAcrossR947To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R947
      InformalAttribute_c testR947Inst2 = InformalAttribute_c.getOneSQ_IAOnR947(testInst);
      assertNull ( testR947Inst2 );


      testInst.delete();
	    }
	    public void testClassParticipantAttributeDisposeFormalAttribute() throws Exception
	    {   
	            ClassParticipantAttribute_c testInst = new ClassParticipantAttribute_c(modelRoot);
      // Participant rels
      // Rel R947 - supertype
      FormalAttribute_c testR947Inst = new FormalAttribute_c(modelRoot);
      testR947Inst.relateAcrossR947To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R947
      FormalAttribute_c testR947Inst2 = FormalAttribute_c.getOneSQ_FAOnR947(testInst);
      assertNull ( testR947Inst2 );


      testInst.delete();
	    }

   	    public void testClassParticipantDispose() throws Exception
	    {
    	      ClassParticipant_c testInst = new ClassParticipant_c(modelRoot);
      // Participant rels
      // Rel R935
      ClassParticipantAttribute_c testR935Inst = new ClassParticipantAttribute_c(modelRoot);
      testR935Inst.relateAcrossR935To(testInst);

      // Formalizer rels
      // Rel R939
      ModelClass_c testR939Inst = new ModelClass_c(modelRoot);
      testR939Inst.relateAcrossR939To(testInst);

      testInst.Dispose();

      // 
      // Rel R935
      ClassParticipantAttribute_c testR935Inst2 = ClassParticipantAttribute_c.getOneSQ_CPAOnR935(testInst);
      assertNull ( testR935Inst2 );

      ModelClass_c testR939Inst2 = ModelClass_c.getOneO_OBJOnR939(testInst);
      assertNull ( testR939Inst2 );

      testInst.delete();
	    }

   	    public void testClassInstanceParticipantDispose() throws Exception
	    {
    	      ClassInstanceParticipant_c testInst = new ClassInstanceParticipant_c(modelRoot);
      // Participant rels
      // Rel R936
      InstanceAttributeValue_c testR936Inst = new InstanceAttributeValue_c(modelRoot);
      testR936Inst.relateAcrossR936To(testInst);
      // Rel R937
      InstanceAttributeValue_c testR937Inst = new InstanceAttributeValue_c(modelRoot);
      testR937Inst.relateAcrossR937To(testInst);

      // Formalizer rels
      // Rel R934
      ModelClass_c testR934Inst = new ModelClass_c(modelRoot);
      testR934Inst.relateAcrossR934To(testInst);

      testInst.Dispose();

      // 
      // Rel R936
      InstanceAttributeValue_c testR936Inst2 = InstanceAttributeValue_c.getOneSQ_AVOnR936(testInst);
      assertNull ( testR936Inst2 );
      // Rel R937
      InstanceAttributeValue_c testR937Inst2 = InstanceAttributeValue_c.getOneSQ_AVOnR937(testInst);
      assertNull ( testR937Inst2 );

      ModelClass_c testR934Inst2 = ModelClass_c.getOneO_OBJOnR934(testInst);
      assertNull ( testR934Inst2 );

      testInst.delete();
	    }

   	    public void testActorParticipantDispose() throws Exception
	    {
    	      ActorParticipant_c testInst = new ActorParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R949
      Lifespan_c testR949Inst = new Lifespan_c(modelRoot);
      testR949Inst.relateAcrossR949To(testInst);

      testInst.Dispose();

      // 

      Lifespan_c testR949Inst2 = Lifespan_c.getOneSQ_LSOnR949(testInst);
      assertNull ( testR949Inst2 );

      testInst.delete();
	    }

   	    public void testDeleteDispose() throws Exception
	    {
    	      Delete_c testInst = new Delete_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R634
      Variable_c testR634Inst = new Variable_c(modelRoot);
      testR634Inst.relateAcrossR634To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR634Inst2 = Variable_c.getOneV_VAROnR634(testInst);
      assertNull ( testR634Inst2 );

      testInst.delete();
	    }

   	    public void testCreateNoVariableDispose() throws Exception
	    {
    	      CreateNoVariable_c testInst = new CreateNoVariable_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R672
      ModelClass_c testR672Inst = new ModelClass_c(modelRoot);
      testR672Inst.relateAcrossR672To(testInst);

      testInst.Dispose();

      // 

      ModelClass_c testR672Inst2 = ModelClass_c.getOneO_OBJOnR672(testInst);
      assertNull ( testR672Inst2 );

      testInst.delete();
	    }

   	    public void testCreateDispose() throws Exception
	    {
    	      Create_c testInst = new Create_c(modelRoot);
      testInst.setIs_implicit(true);
      // Participant rels

      // Formalizer rels
      // Rel R633
      Variable_c testR633Inst = new Variable_c(modelRoot);
      testR633Inst.relateAcrossR633To(testInst);
      // Rel R671
      ModelClass_c testR671Inst = new ModelClass_c(modelRoot);
      testR671Inst.relateAcrossR671To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR633Inst2 = Variable_c.getOneV_VAROnR633(testInst);
      assertNull ( testR633Inst2 );
      ModelClass_c testR671Inst2 = ModelClass_c.getOneO_OBJOnR671(testInst);
      assertNull ( testR671Inst2 );

      testInst.delete();
	    }

   	    public void testAssigntoMemberDispose() throws Exception
	    {
    	      AssignToMember_c testInst = new AssignToMember_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R609
      Value_c testR609Inst = new Value_c(modelRoot);
      testR609Inst.relateAcrossR609To(testInst);
      // Rel R689
      Value_c testR689Inst = new Value_c(modelRoot);
      testR689Inst.relateAcrossR689To(testInst);

      testInst.Dispose();

      // 

      Value_c testR609Inst2 = Value_c.getOneV_VALOnR609(testInst);
      assertNull ( testR609Inst2 );
      Value_c testR689Inst2 = Value_c.getOneV_VALOnR689(testInst);
      assertNull ( testR689Inst2 );

      testInst.delete();
	    }

   	    public void testTimerDispose() throws Exception
	    {
    	      Timer_c testInst = new Timer_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R2940
      PendingEvent_c testR2940Inst = new PendingEvent_c(modelRoot);
      testR2940Inst.relateAcrossR2940To(testInst);

      testInst.Dispose();

      // 

      PendingEvent_c testR2940Inst2 = PendingEvent_c.getOneI_EVIOnR2940(testInst);
      assertNull ( testR2940Inst2 );

      testInst.delete();
	    }

   	    public void testPendingEventDispose() throws Exception
	    {
    	      PendingEvent_c testInst = new PendingEvent_c(modelRoot);
      // Participant rels
      // Rel R2933
      DataItemValue_c testR2933Inst = new DataItemValue_c(modelRoot);
      testR2933Inst.relateAcrossR2933To(testInst);

      // Formalizer rels
      // Rel R2906
      StateMachineEvent_c testR2906Inst = new StateMachineEvent_c(modelRoot);
      testR2906Inst.relateAcrossR2906To(testInst);

      testInst.Dispose();

      // 
      // Rel R2933
      DataItemValue_c testR2933Inst2 = DataItemValue_c.getOneI_DIVOnR2933(testInst);
      assertNull ( testR2933Inst2 );

      StateMachineEvent_c testR2906Inst2 = StateMachineEvent_c.getOneSM_EVTOnR2906(testInst);
      assertNull ( testR2906Inst2 );

      testInst.delete();
	    }

   	    public void testLinkParticipationDispose() throws Exception
	    {
    	      LinkParticipation_c testInst = new LinkParticipation_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R2959
      Association_c testR2959Inst = new Association_c(modelRoot);
      testR2959Inst.relateAcrossR2959To(testInst);

      testInst.Dispose();

      // 

      Association_c testR2959Inst2 = Association_c.getOneR_RELOnR2959(testInst);
      assertNull ( testR2959Inst2 );

      testInst.delete();
	    }

   	    public void testLinkDispose() throws Exception
	    {
    	      Link_c testInst = new Link_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R2904
      Association_c testR2904Inst = new Association_c(modelRoot);
      testR2904Inst.relateAcrossR2904To(testInst);
      // Rel R2901
      LinkParticipation_c testR2901Inst = new LinkParticipation_c(modelRoot);
      testR2901Inst.relateAcrossR2901To(testInst);
      // Rel R2902
      LinkParticipation_c testR2902Inst = new LinkParticipation_c(modelRoot);
      testR2902Inst.relateAcrossR2902To(testInst);
      // Rel R2903
      LinkParticipation_c testR2903Inst = new LinkParticipation_c(modelRoot);
      testR2903Inst.relateAcrossR2903To(testInst);

      testInst.Dispose();

      // 

      Association_c testR2904Inst2 = Association_c.getOneR_RELOnR2904(testInst);
      assertNull ( testR2904Inst2 );
      LinkParticipation_c testR2901Inst2 = LinkParticipation_c.getOneI_LIPOnR2901(testInst);
      assertNull ( testR2901Inst2 );
      LinkParticipation_c testR2902Inst2 = LinkParticipation_c.getOneI_LIPOnR2902(testInst);
      assertNull ( testR2902Inst2 );
      LinkParticipation_c testR2903Inst2 = LinkParticipation_c.getOneI_LIPOnR2903(testInst);
      assertNull ( testR2903Inst2 );

      testInst.delete();
	    }

   	    public void testInstanceDispose() throws Exception
	    {
    	      Instance_c testInst = new Instance_c(modelRoot);
      // Participant rels
      // Rel R2907
      PendingEvent_c testR2907Inst = new PendingEvent_c(modelRoot);
      testR2907Inst.relateAcrossR2907To(testInst);
      // Rel R2935
      PendingEvent_c testR2935Inst = new PendingEvent_c(modelRoot);
      testR2935Inst.relateAcrossR2935To(testInst);
      // Rel R2937
      PendingEvent_c testR2937Inst = new PendingEvent_c(modelRoot);
      testR2937Inst.relateAcrossR2937To(testInst);
      // Rel R2958
      LinkParticipation_c testR2958Inst = new LinkParticipation_c(modelRoot);
      testR2958Inst.relateAcrossR2958To(testInst);
      // Rel R2909
      AttributeValue_c testR2909Inst = new AttributeValue_c(modelRoot);
      testR2909Inst.relateAcrossR2909To(testInst);

      // Formalizer rels
      // Rel R2953
      Transition_c testR2953Inst = new Transition_c(modelRoot);
      testR2953Inst.relateAcrossR2953To(testInst);
      // Rel R2915
      StateMachineState_c testR2915Inst = new StateMachineState_c(modelRoot);
      testR2915Inst.relateAcrossR2915To(testInst);

      testInst.Dispose();

      // 
      // Rel R2907
      PendingEvent_c testR2907Inst2 = PendingEvent_c.getOneI_EVIOnR2907(testInst);
      assertNull ( testR2907Inst2 );
      // Rel R2935
      PendingEvent_c testR2935Inst2 = PendingEvent_c.getOneI_EVIOnR2935(testInst);
      assertNull ( testR2935Inst2 );
      // Rel R2937
      PendingEvent_c testR2937Inst2 = PendingEvent_c.getOneI_EVIOnR2937(testInst);
      assertNull ( testR2937Inst2 );
      // Rel R2958
      LinkParticipation_c testR2958Inst2 = LinkParticipation_c.getOneI_LIPOnR2958(testInst);
      assertNull ( testR2958Inst2 );
      // Rel R2909
      AttributeValue_c testR2909Inst2 = AttributeValue_c.getOneI_AVLOnR2909(testInst);
      assertNull ( testR2909Inst2 );

      Transition_c testR2953Inst2 = Transition_c.getOneSM_TXNOnR2953(testInst);
      assertNull ( testR2953Inst2 );
      StateMachineState_c testR2915Inst2 = StateMachineState_c.getOneSM_STATEOnR2915(testInst);
      assertNull ( testR2915Inst2 );

      testInst.delete();
	    }

   	    public void testDataItemValueDispose() throws Exception
	    {
    	      DataItemValue_c testInst = new DataItemValue_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R2934
      StateMachineEventDataItem_c testR2934Inst = new StateMachineEventDataItem_c(modelRoot);
      testR2934Inst.relateAcrossR2934To(testInst);

      testInst.Dispose();

      // 

      StateMachineEventDataItem_c testR2934Inst2 = StateMachineEventDataItem_c.getOneSM_EVTDIOnR2934(testInst);
      assertNull ( testR2934Inst2 );

      testInst.delete();
	    }

   	    public void testComponentInstanceDispose() throws Exception
	    {
    	      ComponentInstance_c testInst = new ComponentInstance_c(modelRoot);
      // Participant rels
      // Rel R2964
      PendingEvent_c testR2964Inst = new PendingEvent_c(modelRoot);
      testR2964Inst.relateAcrossR2964To(testInst);
      // Rel R2976
      PendingEvent_c testR2976Inst = new PendingEvent_c(modelRoot);
      testR2976Inst.relateAcrossR2976To(testInst);
      // Rel R2957
      Instance_c testR2957Inst = new Instance_c(modelRoot);
      testR2957Inst.relateAcrossR2957To(testInst);

      // Formalizer rels
      // Rel R2948
      Domain_c testR2948Inst = new Domain_c(modelRoot);
      testR2948Inst.relateAcrossR2948To(testInst);
      // Rel R2970
      Package_c testR2970Inst = new Package_c(modelRoot);
      testR2970Inst.relateAcrossR2970To(testInst);

      testInst.Dispose();

      // 
      // Rel R2964
      PendingEvent_c testR2964Inst2 = PendingEvent_c.getOneI_EVIOnR2964(testInst);
      assertNull ( testR2964Inst2 );
      // Rel R2976
      PendingEvent_c testR2976Inst2 = PendingEvent_c.getOneI_EVIOnR2976(testInst);
      assertNull ( testR2976Inst2 );
      // Rel R2957
      Instance_c testR2957Inst2 = Instance_c.getOneI_INSOnR2957(testInst);
      assertNull ( testR2957Inst2 );

      Domain_c testR2948Inst2 = Domain_c.getOneS_DOMOnR2948(testInst);
      assertNull ( testR2948Inst2 );
      Package_c testR2970Inst2 = Package_c.getOneEP_PKGOnR2970(testInst);
      assertNull ( testR2970Inst2 );

      testInst.delete();
	    }

   	    public void testAttributeValueDispose() throws Exception
	    {
    	      AttributeValue_c testInst = new AttributeValue_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R2910
      Attribute_c testR2910Inst = new Attribute_c(modelRoot);
      testR2910Inst.relateAcrossR2910To(testInst);

      testInst.Dispose();

      // 

      Attribute_c testR2910Inst2 = Attribute_c.getOneO_ATTROnR2910(testInst);
      assertNull ( testR2910Inst2 );

      testInst.delete();
	    }

   	    public void testGeneratetoExternalEntityDispose() throws Exception
	    {
    	      GenerateToExternalEntity_c testInst = new GenerateToExternalEntity_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R709
      ExternalEntityEvent_c testR709Inst = new ExternalEntityEvent_c(modelRoot);
      testR709Inst.relateAcrossR709To(testInst);

      testInst.Dispose();

      // 

      ExternalEntityEvent_c testR709Inst2 = ExternalEntityEvent_c.getOneS_EEEVTOnR709(testInst);
      assertNull ( testR709Inst2 );

      testInst.delete();
	    }

   	    public void testGeneratetoCreatorDispose() throws Exception
	    {
    	      GenerateToCreator_c testInst = new GenerateToCreator_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testGeneratetoClassDispose() throws Exception
	    {
    	      GenerateToClass_c testInst = new GenerateToClass_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testGenerateSMEventStatementDisposeGenerate() throws Exception
	    {   
	            GenerateSmEventStatement_c testInst = new GenerateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R705 - supertype
      Generate_c testR705Inst = new Generate_c(modelRoot);
      testR705Inst.relateAcrossR705To(testInst);

      // Formalizer rels
      // Rel R707
      StateMachineEvent_c testR707Inst = new StateMachineEvent_c(modelRoot);
      testR707Inst.relateAcrossR707To(testInst);

      testInst.Dispose();

      // 
      // Rel R705
      Generate_c testR705Inst2 = Generate_c.getOneE_GENOnR705(testInst);
      assertNull ( testR705Inst2 );

      StateMachineEvent_c testR707Inst2 = StateMachineEvent_c.getOneSM_EVTOnR707(testInst);
      assertNull ( testR707Inst2 );

      testInst.delete();
	    }
	    public void testGenerateSMEventStatementDisposeGeneratetoClass() throws Exception
	    {   
	            GenerateSmEventStatement_c testInst = new GenerateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R705 - supertype
      GenerateToClass_c testR705Inst = new GenerateToClass_c(modelRoot);
      testR705Inst.relateAcrossR705To(testInst);

      // Formalizer rels
      // Rel R707
      StateMachineEvent_c testR707Inst = new StateMachineEvent_c(modelRoot);
      testR707Inst.relateAcrossR707To(testInst);

      testInst.Dispose();

      // 
      // Rel R705
      GenerateToClass_c testR705Inst2 = GenerateToClass_c.getOneE_GAROnR705(testInst);
      assertNull ( testR705Inst2 );

      StateMachineEvent_c testR707Inst2 = StateMachineEvent_c.getOneSM_EVTOnR707(testInst);
      assertNull ( testR707Inst2 );

      testInst.delete();
	    }
	    public void testGenerateSMEventStatementDisposeGeneratetoCreator() throws Exception
	    {   
	            GenerateSmEventStatement_c testInst = new GenerateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R705 - supertype
      GenerateToCreator_c testR705Inst = new GenerateToCreator_c(modelRoot);
      testR705Inst.relateAcrossR705To(testInst);

      // Formalizer rels
      // Rel R707
      StateMachineEvent_c testR707Inst = new StateMachineEvent_c(modelRoot);
      testR707Inst.relateAcrossR707To(testInst);

      testInst.Dispose();

      // 
      // Rel R705
      GenerateToCreator_c testR705Inst2 = GenerateToCreator_c.getOneE_GECOnR705(testInst);
      assertNull ( testR705Inst2 );

      StateMachineEvent_c testR707Inst2 = StateMachineEvent_c.getOneSM_EVTOnR707(testInst);
      assertNull ( testR707Inst2 );

      testInst.delete();
	    }

   	    public void testGeneratePreexistingEventDispose() throws Exception
	    {
    	      GeneratePreexistingEvent_c testInst = new GeneratePreexistingEvent_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R714
      Value_c testR714Inst = new Value_c(modelRoot);
      testR714Inst.relateAcrossR714To(testInst);

      testInst.Dispose();

      // 

      Value_c testR714Inst2 = Value_c.getOneV_VALOnR714(testInst);
      assertNull ( testR714Inst2 );

      testInst.delete();
	    }

   	    public void testGenerateEventStatementDisposeGeneratetoExternalEntity() throws Exception
	    {   
	            GenerateEventStatement_c testInst = new GenerateEventStatement_c(modelRoot);
      // Participant rels
      // Rel R703 - supertype
      GenerateToExternalEntity_c testR703Inst = new GenerateToExternalEntity_c(modelRoot);
      testR703Inst.relateAcrossR703To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R703
      GenerateToExternalEntity_c testR703Inst2 = GenerateToExternalEntity_c.getOneE_GEEOnR703(testInst);
      assertNull ( testR703Inst2 );


      testInst.delete();
	    }
	    public void testGenerateEventStatementDisposeGenerateSMEventStatement() throws Exception
	    {   
	            GenerateEventStatement_c testInst = new GenerateEventStatement_c(modelRoot);
      // Participant rels
      // Rel R703 - supertype
      GenerateSmEventStatement_c testR703Inst = new GenerateSmEventStatement_c(modelRoot);
      testR703Inst.relateAcrossR703To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R703
      GenerateSmEventStatement_c testR703Inst2 = GenerateSmEventStatement_c.getOneE_GSMEOnR703(testInst);
      assertNull ( testR703Inst2 );


      testInst.delete();
	    }

   	    public void testGenerateDispose() throws Exception
	    {
    	      Generate_c testInst = new Generate_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R712
      Variable_c testR712Inst = new Variable_c(modelRoot);
      testR712Inst.relateAcrossR712To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR712Inst2 = Variable_c.getOneV_VAROnR712(testInst);
      assertNull ( testR712Inst2 );

      testInst.delete();
	    }

   	    public void testEventSpecificationStatementDisposeCreateEventStatement() throws Exception
	    {   
	            EventSpecificationStatement_c testInst = new EventSpecificationStatement_c(modelRoot);
      // Participant rels
      // Rel R700
      ActualParameter_c testR700Inst = new ActualParameter_c(modelRoot);
      testR700Inst.relateAcrossR700To(testInst);
      // Rel R701 - supertype
      CreateEventStatement_c testR701Inst = new CreateEventStatement_c(modelRoot);
      testR701Inst.relateAcrossR701To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R700
      ActualParameter_c testR700Inst2 = ActualParameter_c.getOneV_PAROnR700(testInst);
      assertNull ( testR700Inst2 );
      // Rel R701
      CreateEventStatement_c testR701Inst2 = CreateEventStatement_c.getOneE_CESOnR701(testInst);
      assertNull ( testR701Inst2 );


      testInst.delete();
	    }
	    public void testEventSpecificationStatementDisposeGenerateEventStatement() throws Exception
	    {   
	            EventSpecificationStatement_c testInst = new EventSpecificationStatement_c(modelRoot);
      // Participant rels
      // Rel R700
      ActualParameter_c testR700Inst = new ActualParameter_c(modelRoot);
      testR700Inst.relateAcrossR700To(testInst);
      // Rel R701 - supertype
      GenerateEventStatement_c testR701Inst = new GenerateEventStatement_c(modelRoot);
      testR701Inst.relateAcrossR701To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R700
      ActualParameter_c testR700Inst2 = ActualParameter_c.getOneV_PAROnR700(testInst);
      assertNull ( testR700Inst2 );
      // Rel R701
      GenerateEventStatement_c testR701Inst2 = GenerateEventStatement_c.getOneE_GESOnR701(testInst);
      assertNull ( testR701Inst2 );


      testInst.delete();
	    }

   	    public void testCreateSMEventStatementDisposeCreateEventtoInstance() throws Exception
	    {   
	            CreateSmEventStatement_c testInst = new CreateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R704 - supertype
      CreateEventToInstance_c testR704Inst = new CreateEventToInstance_c(modelRoot);
      testR704Inst.relateAcrossR704To(testInst);

      // Formalizer rels
      // Rel R706
      StateMachineEvent_c testR706Inst = new StateMachineEvent_c(modelRoot);
      testR706Inst.relateAcrossR706To(testInst);

      testInst.Dispose();

      // 
      // Rel R704
      CreateEventToInstance_c testR704Inst2 = CreateEventToInstance_c.getOneE_CEIOnR704(testInst);
      assertNull ( testR704Inst2 );

      StateMachineEvent_c testR706Inst2 = StateMachineEvent_c.getOneSM_EVTOnR706(testInst);
      assertNull ( testR706Inst2 );

      testInst.delete();
	    }
	    public void testCreateSMEventStatementDisposeCreateEventtoClass() throws Exception
	    {   
	            CreateSmEventStatement_c testInst = new CreateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R704 - supertype
      CreateEventToClass_c testR704Inst = new CreateEventToClass_c(modelRoot);
      testR704Inst.relateAcrossR704To(testInst);

      // Formalizer rels
      // Rel R706
      StateMachineEvent_c testR706Inst = new StateMachineEvent_c(modelRoot);
      testR706Inst.relateAcrossR706To(testInst);

      testInst.Dispose();

      // 
      // Rel R704
      CreateEventToClass_c testR704Inst2 = CreateEventToClass_c.getOneE_CEAOnR704(testInst);
      assertNull ( testR704Inst2 );

      StateMachineEvent_c testR706Inst2 = StateMachineEvent_c.getOneSM_EVTOnR706(testInst);
      assertNull ( testR706Inst2 );

      testInst.delete();
	    }
	    public void testCreateSMEventStatementDisposeCreateEventtoCreator() throws Exception
	    {   
	            CreateSmEventStatement_c testInst = new CreateSmEventStatement_c(modelRoot);
      // Participant rels
      // Rel R704 - supertype
      CreateEventToCreator_c testR704Inst = new CreateEventToCreator_c(modelRoot);
      testR704Inst.relateAcrossR704To(testInst);

      // Formalizer rels
      // Rel R706
      StateMachineEvent_c testR706Inst = new StateMachineEvent_c(modelRoot);
      testR706Inst.relateAcrossR706To(testInst);

      testInst.Dispose();

      // 
      // Rel R704
      CreateEventToCreator_c testR704Inst2 = CreateEventToCreator_c.getOneE_CECOnR704(testInst);
      assertNull ( testR704Inst2 );

      StateMachineEvent_c testR706Inst2 = StateMachineEvent_c.getOneSM_EVTOnR706(testInst);
      assertNull ( testR706Inst2 );

      testInst.delete();
	    }

   	    public void testCreateEventtoInstanceDispose() throws Exception
	    {
    	      CreateEventToInstance_c testInst = new CreateEventToInstance_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R711
      Variable_c testR711Inst = new Variable_c(modelRoot);
      testR711Inst.relateAcrossR711To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR711Inst2 = Variable_c.getOneV_VAROnR711(testInst);
      assertNull ( testR711Inst2 );

      testInst.delete();
	    }

   	    public void testCreateEventtoExternalEntityDispose() throws Exception
	    {
    	      CreateEventToExternalEntity_c testInst = new CreateEventToExternalEntity_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R708
      ExternalEntityEvent_c testR708Inst = new ExternalEntityEvent_c(modelRoot);
      testR708Inst.relateAcrossR708To(testInst);

      testInst.Dispose();

      // 

      ExternalEntityEvent_c testR708Inst2 = ExternalEntityEvent_c.getOneS_EEEVTOnR708(testInst);
      assertNull ( testR708Inst2 );

      testInst.delete();
	    }

   	    public void testCreateEventtoCreatorDispose() throws Exception
	    {
    	      CreateEventToCreator_c testInst = new CreateEventToCreator_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testCreateEventtoClassDispose() throws Exception
	    {
    	      CreateEventToClass_c testInst = new CreateEventToClass_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testCreateEventStatementDisposeCreateEventtoExternalEntity() throws Exception
	    {   
	            CreateEventStatement_c testInst = new CreateEventStatement_c(modelRoot);
      // Participant rels
      // Rel R702 - supertype
      CreateEventToExternalEntity_c testR702Inst = new CreateEventToExternalEntity_c(modelRoot);
      testR702Inst.relateAcrossR702To(testInst);

      // Formalizer rels
      // Rel R710
      Variable_c testR710Inst = new Variable_c(modelRoot);
      testR710Inst.relateAcrossR710To(testInst);

      testInst.Dispose();

      // 
      // Rel R702
      CreateEventToExternalEntity_c testR702Inst2 = CreateEventToExternalEntity_c.getOneE_CEEOnR702(testInst);
      assertNull ( testR702Inst2 );

      Variable_c testR710Inst2 = Variable_c.getOneV_VAROnR710(testInst);
      assertNull ( testR710Inst2 );

      testInst.delete();
	    }
	    public void testCreateEventStatementDisposeCreateSMEventStatement() throws Exception
	    {   
	            CreateEventStatement_c testInst = new CreateEventStatement_c(modelRoot);
      // Participant rels
      // Rel R702 - supertype
      CreateSmEventStatement_c testR702Inst = new CreateSmEventStatement_c(modelRoot);
      testR702Inst.relateAcrossR702To(testInst);

      // Formalizer rels
      // Rel R710
      Variable_c testR710Inst = new Variable_c(modelRoot);
      testR710Inst.relateAcrossR710To(testInst);

      testInst.Dispose();

      // 
      // Rel R702
      CreateSmEventStatement_c testR702Inst2 = CreateSmEventStatement_c.getOneE_CSMEOnR702(testInst);
      assertNull ( testR702Inst2 );

      Variable_c testR710Inst2 = Variable_c.getOneV_VAROnR710(testInst);
      assertNull ( testR710Inst2 );

      testInst.delete();
	    }

   	    public void testSpecificationPackageDisposeActivity() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      Activity_c testR1402Inst = new Activity_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      Activity_c testR1402Inst2 = Activity_c.getOneA_AOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeCommunication() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      Communication_c testR1402Inst = new Communication_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      Communication_c testR1402Inst2 = Communication_c.getOneCOMM_COMMOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeComponentPackage() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      ComponentPackage_c testR1402Inst = new ComponentPackage_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      ComponentPackage_c testR1402Inst2 = ComponentPackage_c.getOneCP_CPOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeDataTypePackage() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      DataTypePackage_c testR1402Inst = new DataTypePackage_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      DataTypePackage_c testR1402Inst2 = DataTypePackage_c.getOneS_DPKOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeInterfacePackage() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      InterfacePackage_c testR1402Inst = new InterfacePackage_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      InterfacePackage_c testR1402Inst2 = InterfacePackage_c.getOneIP_IPOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeUseCaseDiagram() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      UseCaseDiagram_c testR1402Inst = new UseCaseDiagram_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      UseCaseDiagram_c testR1402Inst2 = UseCaseDiagram_c.getOneUC_UCCOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }
	    public void testSpecificationPackageDisposeSequence() throws Exception
	    {   
	            SpecificationPackage_c testInst = new SpecificationPackage_c(modelRoot);
      // Participant rels
      // Rel R1402 - supertype
      Sequence_c testR1402Inst = new Sequence_c(modelRoot);
      testR1402Inst.relateAcrossR1402To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1402
      Sequence_c testR1402Inst2 = Sequence_c.getOneSQ_SOnR1402(testInst);
      assertNull ( testR1402Inst2 );


      testInst.delete();
	    }

   	    public void testPackageDispose() throws Exception
	    {
    	      Package_c testInst = new Package_c(modelRoot);
      // Participant rels
      // Rel R8005
      SearchResultSet_c testR8005Inst = new SearchResultSet_c(modelRoot);
      testR8005Inst.relateAcrossR8005To(testInst);
      // Rel R8000
      PackageableElement_c testR8000Inst = new PackageableElement_c(modelRoot);
      testR8000Inst.relateAcrossR8000To(testInst);
      // Rel R8002 - associative
      ElementVisibility_c testR8002Inst = new ElementVisibility_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testInst);
      PackageableElement_c testR8002InstOth = new PackageableElement_c(modelRoot);
      testR8002Inst.relateAcrossR8002To(testR8002InstOth);
      // Rel R956
      PackageParticipant_c testR956Inst = new PackageParticipant_c(modelRoot);
      testR956Inst.relateAcrossR956To(testInst);
        InteractionParticipant_c interactionParticipant = new InteractionParticipant_c(modelRoot);
		testR956Inst.relateAcrossR930To(interactionParticipant);
		PackageableElement_c pe = new PackageableElement_c(modelRoot);	
		interactionParticipant.relateAcrossR8001To(pe);
		Package_c pkg = new Package_c(modelRoot);
		pkg.relateAcrossR8000To(pe);            
      // Rel R1400
      SpecificationPackage_c testR1400Inst = new SpecificationPackage_c(modelRoot);
      testR1400Inst.relateAcrossR1400To(testInst);
      // Rel R1403
      PackageInPackage_c testR1403Inst = new PackageInPackage_c(modelRoot);
      testR1403Inst.relateAcrossR1403To(testInst);
    Package_c nestedPackage = new Package_c(modelRoot);
    testR1403Inst.relateAcrossR1404To(nestedPackage);

      // Formalizer rels
      // Rel R1401
      SystemModel_c testR1401Inst = new SystemModel_c(modelRoot);
      testR1401Inst.relateAcrossR1401To(testInst);
      // Rel R1405
      SystemModel_c testR1405Inst = new SystemModel_c(modelRoot);
      testR1405Inst.relateAcrossR1405To(testInst);

      testInst.Dispose();

      // 
      // Rel R8005
      SearchResultSet_c testR8005Inst2 = SearchResultSet_c.getOnePE_SRSOnR8005(testInst);
      assertNull ( testR8005Inst2 );
      // Rel R8000
      PackageableElement_c testR8000Inst2 = PackageableElement_c.getOnePE_PEOnR8000(testInst);
      assertNull ( testR8000Inst2 );
      // Rel R8002
      ElementVisibility_c testR8002Inst2 = ElementVisibility_c.getOnePE_VISOnR8002(testInst);
      assertNull ( testR8002Inst2 );
      // Rel R956
      PackageParticipant_c testR956Inst2 = PackageParticipant_c.getOneSQ_PPOnR956(testInst);
      assertNull ( testR956Inst2 );
      // Rel R1400
      SpecificationPackage_c testR1400Inst2 = SpecificationPackage_c.getOneEP_SPKGOnR1400(testInst);
      assertNull ( testR1400Inst2 );
      // Rel R1403
      PackageInPackage_c testR1403Inst2 = PackageInPackage_c.getOneEP_PIPOnR1403(testInst);
      assertNull ( testR1403Inst2 );

      SystemModel_c testR1401Inst2 = SystemModel_c.getOneS_SYSOnR1401(testInst);
      assertNull ( testR1401Inst2 );
      SystemModel_c testR1405Inst2 = SystemModel_c.getOneS_SYSOnR1405(testInst);
      assertNull ( testR1405Inst2 );

      testInst.delete();
	    }

   	    public void testUserDataTypeDispose() throws Exception
	    {
    	      UserDataType_c testInst = new UserDataType_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSystemModelDispose() throws Exception
	    {
    	      SystemModel_c testInst = new SystemModel_c(modelRoot);
      // Participant rels
      // Rel R1211
      UseCaseDiagram_c testR1211Inst = new UseCaseDiagram_c(modelRoot);
      testR1211Inst.relateAcrossR1211To(testInst);
      // Rel R950
      Sequence_c testR950Inst = new Sequence_c(modelRoot);
      testR950Inst.relateAcrossR950To(testInst);
      // Rel R9100 - associative
      GlobalElementInSystem_c testR9100Inst = new GlobalElementInSystem_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testInst);
      PackageableElement_c testR9100InstOth = new PackageableElement_c(modelRoot);
      testR9100Inst.relateAcrossR9100To(testR9100InstOth);
      // Rel R4302
      InterfacePackage_c testR4302Inst = new InterfacePackage_c(modelRoot);
      testR4302Inst.relateAcrossR4302To(testInst);
      // Rel R4304
      InterfacePackage_c testR4304Inst = new InterfacePackage_c(modelRoot);
      testR4304Inst.relateAcrossR4304To(testInst);
      // Rel R1401
      Package_c testR1401Inst = new Package_c(modelRoot);
      testR1401Inst.relateAcrossR1401To(testInst);
      // Rel R1405
      Package_c testR1405Inst = new Package_c(modelRoot);
      testR1405Inst.relateAcrossR1405To(testInst);
      // Rel R4400 - associative
      SystemDatatypePackage_c testR4400Inst = new SystemDatatypePackage_c(modelRoot);
      testR4400Inst.relateAcrossR4400To(testInst);
      DataTypePackage_c testR4400InstOth = new DataTypePackage_c(modelRoot);
      testR4400Inst.relateAcrossR4400To(testR4400InstOth);
      // Rel R4402
      SystemDatatypeInPackage_c testR4402Inst = new SystemDatatypeInPackage_c(modelRoot);
      testR4402Inst.relateAcrossR4402To(testInst);
      // Rel R4404
      SystemConstantInPackage_c testR4404Inst = new SystemConstantInPackage_c(modelRoot);
      testR4404Inst.relateAcrossR4404To(testInst);
      // Rel R28
      Domain_c testR28Inst = new Domain_c(modelRoot);
      testR28Inst.relateAcrossR28To(testInst);
      // Rel R4602
      ComponentPackage_c testR4602Inst = new ComponentPackage_c(modelRoot);
      testR4602Inst.relateAcrossR4602To(testInst);
      // Rel R4606
      ComponentPackage_c testR4606Inst = new ComponentPackage_c(modelRoot);
      testR4606Inst.relateAcrossR4606To(testInst);
      // Rel R1136
      Communication_c testR1136Inst = new Communication_c(modelRoot);
      testR1136Inst.relateAcrossR1136To(testInst);
      // Rel R1113
      Activity_c testR1113Inst = new Activity_c(modelRoot);
      testR1113Inst.relateAcrossR1113To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1211
      UseCaseDiagram_c testR1211Inst2 = UseCaseDiagram_c.getOneUC_UCCOnR1211(testInst);
      // Rel R950
      Sequence_c testR950Inst2 = Sequence_c.getOneSQ_SOnR950(testInst);
      // Rel R9100
      GlobalElementInSystem_c testR9100Inst2 = GlobalElementInSystem_c.getOneG_EISOnR9100(testInst);
      assertNull ( testR9100Inst2 );
      // Rel R4302
      InterfacePackage_c testR4302Inst2 = InterfacePackage_c.getOneIP_IPOnR4302(testInst);
      // Rel R4304
      InterfacePackage_c testR4304Inst2 = InterfacePackage_c.getOneIP_IPOnR4304(testInst);
      // Rel R1401
      Package_c testR1401Inst2 = Package_c.getOneEP_PKGOnR1401(testInst);
      // Rel R1405
      Package_c testR1405Inst2 = Package_c.getOneEP_PKGOnR1405(testInst);
      // Rel R4400
      SystemDatatypePackage_c testR4400Inst2 = SystemDatatypePackage_c.getOneSLD_SDPOnR4400(testInst);
      assertNull ( testR4400Inst2 );
      // Rel R4402
      SystemDatatypeInPackage_c testR4402Inst2 = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4402(testInst);
      // Rel R4404
      SystemConstantInPackage_c testR4404Inst2 = SystemConstantInPackage_c.getOneSLD_SCINPOnR4404(testInst);
      // Rel R28
      Domain_c testR28Inst2 = Domain_c.getOneS_DOMOnR28(testInst);
      // Rel R4602
      ComponentPackage_c testR4602Inst2 = ComponentPackage_c.getOneCP_CPOnR4602(testInst);
      // Rel R4606
      ComponentPackage_c testR4606Inst2 = ComponentPackage_c.getOneCP_CPOnR4606(testInst);
      // Rel R1136
      Communication_c testR1136Inst2 = Communication_c.getOneCOMM_COMMOnR1136(testInst);
      // Rel R1113
      Activity_c testR1113Inst2 = Activity_c.getOneA_AOnR1113(testInst);


      testInst.delete();
	    }

   	    public void testSubsysteminSubsystemDispose() throws Exception
	    {
    	      SubsystemInSubsystem_c testInst = new SubsystemInSubsystem_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R42
      Subsystem_c testR42Inst = new Subsystem_c(modelRoot);
      testR42Inst.relateAcrossR42To(testInst);

      testInst.Dispose();

      // 

      Subsystem_c testR42Inst2 = Subsystem_c.getOneS_SSOnR42(testInst);
      assertNull ( testR42Inst2 );

      testInst.delete();
	    }

   
   	    public void testStructuredDataTypeDispose() throws Exception
	    {
    	      StructuredDataType_c testInst = new StructuredDataType_c(modelRoot);
      // Participant rels
      // Rel R44
      StructureMember_c testR44Inst = new StructureMember_c(modelRoot);
      testR44Inst.relateAcrossR44To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R44
      StructureMember_c testR44Inst2 = StructureMember_c.getOneS_MBROnR44(testInst);
      assertNull ( testR44Inst2 );


      testInst.delete();
	    }

   	    public void testStructureMemberDispose() throws Exception
	    {
    	      StructureMember_c testInst = new StructureMember_c(modelRoot);
      // Participant rels
      // Rel R836
      MemberValueReference_c testR836Inst = new MemberValueReference_c(modelRoot);
      testR836Inst.relateAcrossR836To(testInst);
      // Rel R53
      Dimensions_c testR53Inst = new Dimensions_c(modelRoot);
      testR53Inst.relateAcrossR53To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R836
      MemberValueReference_c testR836Inst2 = MemberValueReference_c.getOneV_MVLOnR836(testInst);
      assertNull ( testR836Inst2 );
      // Rel R53
      Dimensions_c testR53Inst2 = Dimensions_c.getOneS_DIMOnR53(testInst);
      assertNull ( testR53Inst2 );


      testInst.delete();
	    }

   	    public void testInstanceReferenceDataTypeDispose() throws Exception
	    {
    	      InstanceReferenceDataType_c testInst = new InstanceReferenceDataType_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testFunctionParameterDispose() throws Exception
	    {
    	      FunctionParameter_c testInst = new FunctionParameter_c(modelRoot);
      // Participant rels
      // Rel R832
      ParameterValue_c testR832Inst = new ParameterValue_c(modelRoot);
      testR832Inst.relateAcrossR832To(testInst);
      // Rel R1016
      FunctionArgument_c testR1016Inst = new FunctionArgument_c(modelRoot);
      testR1016Inst.relateAcrossR1016To(testInst);
      // Rel R52
      Dimensions_c testR52Inst = new Dimensions_c(modelRoot);
      testR52Inst.relateAcrossR52To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R832
      ParameterValue_c testR832Inst2 = ParameterValue_c.getOneV_PVLOnR832(testInst);
      assertNull ( testR832Inst2 );
      // Rel R1016
      FunctionArgument_c testR1016Inst2 = FunctionArgument_c.getOneMSG_FAOnR1016(testInst);
      assertNull ( testR1016Inst2 );
      // Rel R52
      Dimensions_c testR52Inst2 = Dimensions_c.getOneS_DIMOnR52(testInst);
      assertNull ( testR52Inst2 );


      testInst.delete();
	    }

   
   	    public void testFunctionDispose() throws Exception
	    {
    	      Function_c testInst = new Function_c(modelRoot);
      // Participant rels
      // Rel R3201
      AutomaticWiring_c testR3201Inst = new AutomaticWiring_c(modelRoot);
      testR3201Inst.relateAcrossR3201To(testInst);
      // Rel R827
      FunctionValue_c testR827Inst = new FunctionValue_c(modelRoot);
      testR827Inst.relateAcrossR827To(testInst);
      // Rel R675
      FunctionInvocation_c testR675Inst = new FunctionInvocation_c(modelRoot);
      testR675Inst.relateAcrossR675To(testInst);
      // Rel R24
      FunctionParameter_c testR24Inst = new FunctionParameter_c(modelRoot);
      testR24Inst.relateAcrossR24To(testInst);
      // Rel R31 - associative
      FunctionInPackage_c testR31Inst = new FunctionInPackage_c(modelRoot);
      testR31Inst.relateAcrossR31To(testInst);
      FunctionPackage_c testR31InstOth = new FunctionPackage_c(modelRoot);
      testR31Inst.relateAcrossR31To(testR31InstOth);
      // Rel R51
      Dimensions_c testR51Inst = new Dimensions_c(modelRoot);
      testR51Inst.relateAcrossR51To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R3201
      AutomaticWiring_c testR3201Inst2 = AutomaticWiring_c.getOneS_AWOnR3201(testInst);
      assertNull ( testR3201Inst2 );
      // Rel R827
      FunctionValue_c testR827Inst2 = FunctionValue_c.getOneV_FNVOnR827(testInst);
      assertNull ( testR827Inst2 );
      // Rel R1010
      FunctionMessage_c testR1010Inst2 = FunctionMessage_c.getOneMSG_FOnR1010(testInst);
      assertNull ( testR1010Inst2 );
      // Rel R675
      FunctionInvocation_c testR675Inst2 = FunctionInvocation_c.getOneACT_FNCOnR675(testInst);
      assertNull ( testR675Inst2 );
      // Rel R24
      FunctionParameter_c testR24Inst2 = FunctionParameter_c.getOneS_SPARMOnR24(testInst);
      assertNull ( testR24Inst2 );
      // Rel R31
      FunctionInPackage_c testR31Inst2 = FunctionInPackage_c.getOneS_FIPOnR31(testInst);
      assertNull ( testR31Inst2 );
      // Rel R51
      Dimensions_c testR51Inst2 = Dimensions_c.getOneS_DIMOnR51(testInst);
      assertNull ( testR51Inst2 );


      testInst.delete();
	    }

   
   	    public void testExternalEntityinModelDispose() throws Exception
	    {
    	      ExternalEntityInModel_c testInst = new ExternalEntityInModel_c(modelRoot);
      // Participant rels
      // Rel R421
      SmToEeAccessPath_c testR421Inst = createSmToEeAccessPath_c();
      testR421Inst.relateAcrossR421To(testInst);
      // Rel R402
      EeToSmCommPath_c testR402Inst = createEeToSmCommPath_c();
      testR402Inst.relateAcrossR402To(testInst);
      // Rel R411
      SmToEeCommPath_c testR411Inst = createSmToEeCommPath_c();
      testR411Inst.relateAcrossR411To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R421
      SmToEeAccessPath_c testR421Inst2 = SmToEeAccessPath_c.getOneCA_SMEEAOnR421(testInst);
      assertNull ( testR421Inst2 );
      // Rel R402
      EeToSmCommPath_c testR402Inst2 = EeToSmCommPath_c.getOneCA_EESMCOnR402(testInst);
      assertNull ( testR402Inst2 );
      // Rel R411
      SmToEeCommPath_c testR411Inst2 = SmToEeCommPath_c.getOneCA_SMEECOnR411(testInst);
      assertNull ( testR411Inst2 );


      testInst.delete();
	    }

   	    public void testExternalEntityEventDataItemDispose() throws Exception
	    {
    	      ExternalEntityEventDataItem_c testInst = new ExternalEntityEventDataItem_c(modelRoot);
      // Participant rels
      // Rel R13 - associative
      ExternalEntityEventData_c testR13Inst = new ExternalEntityEventData_c(modelRoot);
      testR13Inst.relateAcrossR13To(testInst);
      ExternalEntityEvent_c testR13InstOth = new ExternalEntityEvent_c(modelRoot);
      testR13Inst.relateAcrossR13To(testR13InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R13
      ExternalEntityEventData_c testR13Inst2 = ExternalEntityEventData_c.getOneS_EEEDTOnR13(testInst);
      assertNull ( testR13Inst2 );


      testInst.delete();
	    }

   	    public void testExternalEntityEventDataDispose() throws Exception
	    {
    	      ExternalEntityEventData_c testInst = new ExternalEntityEventData_c(modelRoot);
      // Participant rels

      // Formalizer rels
      ExternalEntityEventDataItem_c testR13InstOne = new ExternalEntityEventDataItem_c(modelRoot);
      testR13InstOne.relateAcrossR13To(testInst);
      ExternalEntityEvent_c testR13InstOth = new ExternalEntityEvent_c(modelRoot);
      testR13InstOth.relateAcrossR13To(testInst);

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testExternalEntityEventDispose() throws Exception
	    {
    	      ExternalEntityEvent_c testInst = new ExternalEntityEvent_c(modelRoot);
      // Participant rels
      // Rel R709
      GenerateToExternalEntity_c testR709Inst = new GenerateToExternalEntity_c(modelRoot);
      testR709Inst.relateAcrossR709To(testInst);
      // Rel R708
      CreateEventToExternalEntity_c testR708Inst = new CreateEventToExternalEntity_c(modelRoot);
      testR708Inst.relateAcrossR708To(testInst);
      // Rel R13 - associative
      ExternalEntityEventData_c testR13Inst = new ExternalEntityEventData_c(modelRoot);
      testR13Inst.relateAcrossR13To(testInst);
      ExternalEntityEventDataItem_c testR13InstOth = new ExternalEntityEventDataItem_c(modelRoot);
      testR13Inst.relateAcrossR13To(testR13InstOth);
      // Rel R413
      SmToEeEventComm_c testR413Inst = createSmToEeEventComm_c();
      testR413Inst.relateAcrossR413To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R709
      GenerateToExternalEntity_c testR709Inst2 = GenerateToExternalEntity_c.getOneE_GEEOnR709(testInst);
      assertNull ( testR709Inst2 );
      // Rel R708
      CreateEventToExternalEntity_c testR708Inst2 = CreateEventToExternalEntity_c.getOneE_CEEOnR708(testInst);
      assertNull ( testR708Inst2 );
      // Rel R13
      ExternalEntityEventData_c testR13Inst2 = ExternalEntityEventData_c.getOneS_EEEDTOnR13(testInst);
      assertNull ( testR13Inst2 );
      // Rel R413
      SmToEeEventComm_c testR413Inst2 = SmToEeEventComm_c.getOneCA_SMEEEOnR413(testInst);
      assertNull ( testR413Inst2 );


      testInst.delete();
	    }

   	    public void testExternalEntityDataItemDispose() throws Exception
	    {
    	      ExternalEntityDataItem_c testInst = new ExternalEntityDataItem_c(modelRoot);
      // Participant rels
      // Rel R423
      SmToEeDataItemAccess_c testR423Inst = createSmToEeDataItemAccess_c();
      testR423Inst.relateAcrossR423To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R423
      SmToEeDataItemAccess_c testR423Inst2 = SmToEeDataItemAccess_c.getOneCA_SMEEDOnR423(testInst);
      assertNull ( testR423Inst2 );


      testInst.delete();
	    }

   	    public void testExternalEntityDispose() throws Exception
	    {
    	      ExternalEntity_c testInst = new ExternalEntity_c(modelRoot);
      // Participant rels
      // Rel R933
      ExternalEntityParticipant_c testR933Inst = new ExternalEntityParticipant_c(modelRoot);
      testR933Inst.relateAcrossR933To(testInst);
      // Rel R33 - associative
      ExternalEntityInPackage_c testR33Inst = new ExternalEntityInPackage_c(modelRoot);
      testR33Inst.relateAcrossR33To(testInst);
      ExternalEntityPackage_c testR33InstOth = new ExternalEntityPackage_c(modelRoot);
      testR33Inst.relateAcrossR33To(testR33InstOth);
      // Rel R9
      ExternalEntityInModel_c testR9Inst = new ExternalEntityInModel_c(modelRoot);
      testR9Inst.relateAcrossR9To(testInst);
      // Rel R12
      ExternalEntityEventDataItem_c testR12Inst = new ExternalEntityEventDataItem_c(modelRoot);
      testR12Inst.relateAcrossR12To(testInst);
      // Rel R10
      ExternalEntityEvent_c testR10Inst = new ExternalEntityEvent_c(modelRoot);
      testR10Inst.relateAcrossR10To(testInst);
      // Rel R11
      ExternalEntityDataItem_c testR11Inst = new ExternalEntityDataItem_c(modelRoot);
      testR11Inst.relateAcrossR11To(testInst);
      // Rel R19
      Bridge_c testR19Inst = new Bridge_c(modelRoot);
      testR19Inst.relateAcrossR19To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R933
      ExternalEntityParticipant_c testR933Inst2 = ExternalEntityParticipant_c.getOneSQ_EEPOnR933(testInst);
      assertNull ( testR933Inst2 );
      // Rel R33
      ExternalEntityInPackage_c testR33Inst2 = ExternalEntityInPackage_c.getOneS_EEIPOnR33(testInst);
      assertNull ( testR33Inst2 );
      // Rel R9
      ExternalEntityInModel_c testR9Inst2 = ExternalEntityInModel_c.getOneS_EEMOnR9(testInst);
      assertNull ( testR9Inst2 );
      // Rel R12
      ExternalEntityEventDataItem_c testR12Inst2 = ExternalEntityEventDataItem_c.getOneS_EEEDIOnR12(testInst);
      assertNull ( testR12Inst2 );
      // Rel R10
      ExternalEntityEvent_c testR10Inst2 = ExternalEntityEvent_c.getOneS_EEEVTOnR10(testInst);
      assertNull ( testR10Inst2 );
      // Rel R11
      ExternalEntityDataItem_c testR11Inst2 = ExternalEntityDataItem_c.getOneS_EEDIOnR11(testInst);
      assertNull ( testR11Inst2 );
      // Rel R19
      Bridge_c testR19Inst2 = Bridge_c.getOneS_BRGOnR19(testInst);
      assertNull ( testR19Inst2 );


      testInst.delete();
	    }

   	    public void testEnumeratorDispose() throws Exception
	    {
    	      Enumerator_c testInst = new Enumerator_c(modelRoot);
      // Participant rels
      // Rel R824
      LiteralEnumerator_c testR824Inst = new LiteralEnumerator_c(modelRoot);
      testR824Inst.relateAcrossR824To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R824
      LiteralEnumerator_c testR824Inst2 = LiteralEnumerator_c.getOneV_LENOnR824(testInst);
      assertNull ( testR824Inst2 );


      testInst.delete();
	    }

   	    public void testEnumerationDataTypeDispose() throws Exception
	    {
    	      EnumerationDataType_c testInst = new EnumerationDataType_c(modelRoot);
      // Participant rels
      // Rel R27
      Enumerator_c testR27Inst = new Enumerator_c(modelRoot);
      testR27Inst.relateAcrossR27To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R27
      Enumerator_c testR27Inst2 = Enumerator_c.getOneS_ENUMOnR27(testInst);
      assertNull ( testR27Inst2 );


      testInst.delete();
	    }

   
   	    public void testDataTypePackageDispose() throws Exception
	    {
    	      DataTypePackage_c testInst = new DataTypePackage_c(modelRoot);
      // Participant rels
      // Rel R4400 - associative
      SystemDatatypePackage_c testR4400Inst = new SystemDatatypePackage_c(modelRoot);
      testR4400Inst.relateAcrossR4400To(testInst);
      SystemModel_c testR4400InstOth = new SystemModel_c(modelRoot);
      testR4400Inst.relateAcrossR4400To(testR4400InstOth);
      // Rel R39 - associative
      DataTypeInPackage_c testR39Inst = new DataTypeInPackage_c(modelRoot);
      testR39Inst.relateAcrossR39To(testInst);
      DataType_c testR39InstOth = createDataType_c();
      testR39Inst.relateAcrossR39To(testR39InstOth);
      // Rel R1506 - associative
      ConstantInPackage_c testR1506Inst = new ConstantInPackage_c(modelRoot);
      testR1506Inst.relateAcrossR1506To(testInst);
      ConstantSpecification_c testR1506InstOth = new ConstantSpecification_c(modelRoot);
      testR1506Inst.relateAcrossR1506To(testR1506InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4400
      SystemDatatypePackage_c testR4400Inst2 = SystemDatatypePackage_c.getOneSLD_SDPOnR4400(testInst);
      assertNull ( testR4400Inst2 );
      // Rel R4401
      SystemDatatypeInPackage_c testR4401Inst2 = SystemDatatypeInPackage_c.getOneSLD_SDINPOnR4401(testInst);
      assertNull ( testR4401Inst2 );
      // Rel R4403
      SystemConstantInPackage_c testR4403Inst2 = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403(testInst);
      assertNull ( testR4403Inst2 );
      // Rel R39
      DataTypeInPackage_c testR39Inst2 = DataTypeInPackage_c.getOneS_DIPOnR39(testInst);
      assertNull ( testR39Inst2 );
      // Rel R1506
      ConstantInPackage_c testR1506Inst2 = ConstantInPackage_c.getOneCNST_CIPOnR1506(testInst);
      assertNull ( testR1506Inst2 );


      testInst.delete();
	    }

   
   	    public void testCoreDataTypeDispose() throws Exception
	    {
    	      CoreDataType_c testInst = new CoreDataType_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testBridgeParameterDispose() throws Exception
	    {
    	      BridgeParameter_c testInst = new BridgeParameter_c(modelRoot);
      // Participant rels
      // Rel R831
      ParameterValue_c testR831Inst = new ParameterValue_c(modelRoot);
      testR831Inst.relateAcrossR831To(testInst);
      // Rel R1014
      BridgeArgument_c testR1014Inst = new BridgeArgument_c(modelRoot);
      testR1014Inst.relateAcrossR1014To(testInst);
      // Rel R49
      Dimensions_c testR49Inst = new Dimensions_c(modelRoot);
      testR49Inst.relateAcrossR49To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R831
      ParameterValue_c testR831Inst2 = ParameterValue_c.getOneV_PVLOnR831(testInst);
      assertNull ( testR831Inst2 );
      // Rel R1014
      BridgeArgument_c testR1014Inst2 = BridgeArgument_c.getOneMSG_BAOnR1014(testInst);
      assertNull ( testR1014Inst2 );
      // Rel R49
      Dimensions_c testR49Inst2 = Dimensions_c.getOneS_DIMOnR49(testInst);
      assertNull ( testR49Inst2 );


      testInst.delete();
	    }

   	    public void testBridgeDispose() throws Exception
	    {
    	      Bridge_c testInst = new Bridge_c(modelRoot);
      // Participant rels
      // Rel R828
      BridgeValue_c testR828Inst = new BridgeValue_c(modelRoot);
      testR828Inst.relateAcrossR828To(testInst);
      // Rel R674
      BridgeInvocation_c testR674Inst = new BridgeInvocation_c(modelRoot);
      testR674Inst.relateAcrossR674To(testInst);
      // Rel R21
      BridgeParameter_c testR21Inst = new BridgeParameter_c(modelRoot);
      testR21Inst.relateAcrossR21To(testInst);
      // Rel R50
      Dimensions_c testR50Inst = new Dimensions_c(modelRoot);
      testR50Inst.relateAcrossR50To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R828
      BridgeValue_c testR828Inst2 = BridgeValue_c.getOneV_BRVOnR828(testInst);
      assertNull ( testR828Inst2 );
      // Rel R1012
      BridgeMessage_c testR1012Inst2 = BridgeMessage_c.getOneMSG_BOnR1012(testInst);
      assertNull ( testR1012Inst2 );
      // Rel R674
      BridgeInvocation_c testR674Inst2 = BridgeInvocation_c.getOneACT_BRGOnR674(testInst);
      assertNull ( testR674Inst2 );
      // Rel R21
      BridgeParameter_c testR21Inst2 = BridgeParameter_c.getOneS_BPARMOnR21(testInst);
      assertNull ( testR21Inst2 );
      // Rel R50
      Dimensions_c testR50Inst2 = Dimensions_c.getOneS_DIMOnR50(testInst);
      assertNull ( testR50Inst2 );


      testInst.delete();
	    }

   	    public void testSymbolicConstantDisposeLeafSymbolicConstant() throws Exception
	    {   
	            SymbolicConstant_c testInst = new SymbolicConstant_c(modelRoot);
      // Participant rels
      // Rel R850
      SymbolicConstantValue_c testR850Inst = new SymbolicConstantValue_c(modelRoot);
      testR850Inst.relateAcrossR850To(testInst);
      // Rel R1502 - supertype
      LeafSymbolicConstant_c testR1502Inst = new LeafSymbolicConstant_c(modelRoot);
      testR1502Inst.relateAcrossR1502To(testInst);

      // Formalizer rels
      // Rel R1500
      DataType_c testR1500Inst = new DataType_c(modelRoot);
      testR1500Inst.relateAcrossR1500To(testInst);

      testInst.Dispose();

      // 
      // Rel R850
      SymbolicConstantValue_c testR850Inst2 = SymbolicConstantValue_c.getOneV_SCVOnR850(testInst);
      assertNull ( testR850Inst2 );
      // Rel R1502
      LeafSymbolicConstant_c testR1502Inst2 = LeafSymbolicConstant_c.getOneCNST_LFSCOnR1502(testInst);
      assertNull ( testR1502Inst2 );

      DataType_c testR1500Inst2 = DataType_c.getOneS_DTOnR1500(testInst);
      assertNull ( testR1500Inst2 );

      testInst.delete();
	    }

   	    public void testLiteralSymbolicConstantDispose() throws Exception
	    {
    	      LiteralSymbolicConstant_c testInst = new LiteralSymbolicConstant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testLeafSymbolicConstantDisposeLiteralSymbolicConstant() throws Exception
	    {   
	            LeafSymbolicConstant_c testInst = new LeafSymbolicConstant_c(modelRoot);
      // Participant rels
      // Rel R1503 - supertype
      LiteralSymbolicConstant_c testR1503Inst = new LiteralSymbolicConstant_c(modelRoot);
      testR1503Inst.relateAcrossR1503To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1503
      LiteralSymbolicConstant_c testR1503Inst2 = LiteralSymbolicConstant_c.getOneCNST_LSCOnR1503(testInst);
      assertNull ( testR1503Inst2 );


      testInst.delete();
	    }

   	    public void testConstantSpecificationDispose() throws Exception
	    {
    	      ConstantSpecification_c testInst = new ConstantSpecification_c(modelRoot);
    PackageableElement_c pe = new PackageableElement_c(modelRoot);
    pe.relateAcrossR8001To(testInst);
      // Participant rels
      // Rel R1506 - associative
      ConstantInPackage_c testR1506Inst = new ConstantInPackage_c(modelRoot);
      testR1506Inst.relateAcrossR1506To(testInst);
      DataTypePackage_c testR1506InstOth = new DataTypePackage_c(modelRoot);
      testR1506Inst.relateAcrossR1506To(testR1506InstOth);
      // Rel R1504
      SymbolicConstant_c testR1504Inst = new SymbolicConstant_c(modelRoot);
      testR1504Inst.relateAcrossR1504To(testInst);
      // Rel R4403 - associative
      SystemConstantInPackage_c testR4403Inst = new SystemConstantInPackage_c(modelRoot);
      testR4403Inst.relateAcrossR4403To(testInst);
      DataTypePackage_c testR4403InstOth = new DataTypePackage_c(modelRoot);
      testR4403Inst.relateAcrossR4403To(testR4403InstOth);

      // Formalizer rels

      testInst.Dispose();

      PackageableElement_c peAfter = PackageableElement_c.getOnePE_PEOnR8001(testInst);
      assertNull(peAfter);
      // 
      // Rel R1506
      ConstantInPackage_c testR1506Inst2 = ConstantInPackage_c.getOneCNST_CIPOnR1506(testInst);
      assertNull ( testR1506Inst2 );
      // Rel R1504
      SymbolicConstant_c testR1504Inst2 = SymbolicConstant_c.getOneCNST_SYCOnR1504(testInst);
      assertNull ( testR1504Inst2 );
      // Rel R4403
      SystemConstantInPackage_c testR4403Inst2 = SystemConstantInPackage_c.getOneSLD_SCINPOnR4403(testInst);
      assertNull ( testR4403Inst2 );


      testInst.delete();
	    }

   	    public void testRequiredSignalDispose() throws Exception
	    {
    	      RequiredSignal_c testInst = new RequiredSignal_c(modelRoot);
      // Participant rels
      // Rel R660
      SignalInvocation_c testR660Inst = new SignalInvocation_c(modelRoot);
      testR660Inst.relateAcrossR660To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R660
      SignalInvocation_c testR660Inst2 = SignalInvocation_c.getOneACT_SGNOnR660(testInst);
      assertNull ( testR660Inst2 );


      testInst.delete();
	    }

   	    public void testRequiredOperationDispose() throws Exception
	    {
    	      RequiredOperation_c testInst = new RequiredOperation_c(modelRoot);
      // Participant rels
      // Rel R657
      InterfaceOperationInvocation_c testR657Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR657Inst.relateAcrossR657To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R657
      InterfaceOperationInvocation_c testR657Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR657(testInst);
      assertNull ( testR657Inst2 );


      testInst.delete();
	    }

   	    public void testRequiredExecutablePropertyDisposeRequiredSignal() throws Exception
	    {   
	            RequiredExecutableProperty_c testInst = new RequiredExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R845
      MessageValue_c testR845Inst = new MessageValue_c(modelRoot);
      testR845Inst.relateAcrossR845To(testInst);
      // Rel R4502 - supertype
      RequiredSignal_c testR4502Inst = new RequiredSignal_c(modelRoot);
      testR4502Inst.relateAcrossR4502To(testInst);

      // Formalizer rels
      ExecutableProperty_c testR4500InstOne = new ExecutableProperty_c(modelRoot);
      testR4500InstOne.relateAcrossR4500To(testInst);
      Requirement_c testR4500InstOth = new Requirement_c(modelRoot);
      testR4500InstOth.relateAcrossR4500To(testInst);

      testInst.Dispose();

      // 
      // Rel R845
      MessageValue_c testR845Inst2 = MessageValue_c.getOneV_MSVOnR845(testInst);
      assertNull ( testR845Inst2 );
      // Rel R4502
      RequiredSignal_c testR4502Inst2 = RequiredSignal_c.getOneSPR_RSOnR4502(testInst);
      assertNull ( testR4502Inst2 );


      testInst.delete();
	    }
	    public void testRequiredExecutablePropertyDisposeRequiredOperation() throws Exception
	    {   
	            RequiredExecutableProperty_c testInst = new RequiredExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R845
      MessageValue_c testR845Inst = new MessageValue_c(modelRoot);
      testR845Inst.relateAcrossR845To(testInst);
      // Rel R4502 - supertype
      RequiredOperation_c testR4502Inst = new RequiredOperation_c(modelRoot);
      testR4502Inst.relateAcrossR4502To(testInst);

      // Formalizer rels
      ExecutableProperty_c testR4500InstOne = new ExecutableProperty_c(modelRoot);
      testR4500InstOne.relateAcrossR4500To(testInst);
      Requirement_c testR4500InstOth = new Requirement_c(modelRoot);
      testR4500InstOth.relateAcrossR4500To(testInst);

      testInst.Dispose();

      // 
      // Rel R845
      MessageValue_c testR845Inst2 = MessageValue_c.getOneV_MSVOnR845(testInst);
      assertNull ( testR845Inst2 );
      // Rel R4502
      RequiredOperation_c testR4502Inst2 = RequiredOperation_c.getOneSPR_ROOnR4502(testInst);
      assertNull ( testR4502Inst2 );


      testInst.delete();
	    }

   	    public void testProvidedSignalDispose() throws Exception
	    {
    	      ProvidedSignal_c testInst = new ProvidedSignal_c(modelRoot);
      // Participant rels
      // Rel R663
      SignalInvocation_c testR663Inst = new SignalInvocation_c(modelRoot);
      testR663Inst.relateAcrossR663To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R663
      SignalInvocation_c testR663Inst2 = SignalInvocation_c.getOneACT_SGNOnR663(testInst);
      assertNull ( testR663Inst2 );


      testInst.delete();
	    }

   	    public void testProvidedOperationDispose() throws Exception
	    {
    	      ProvidedOperation_c testInst = new ProvidedOperation_c(modelRoot);
      // Participant rels
      // Rel R680
      InterfaceOperationInvocation_c testR680Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR680Inst.relateAcrossR680To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R680
      InterfaceOperationInvocation_c testR680Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR680(testInst);
      assertNull ( testR680Inst2 );


      testInst.delete();
	    }

   	    public void testProvidedExecutablePropertyDisposeProvidedOperation() throws Exception
	    {   
	            ProvidedExecutableProperty_c testInst = new ProvidedExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R841
      MessageValue_c testR841Inst = new MessageValue_c(modelRoot);
      testR841Inst.relateAcrossR841To(testInst);
      // Rel R4503 - supertype
      ProvidedOperation_c testR4503Inst = new ProvidedOperation_c(modelRoot);
      testR4503Inst.relateAcrossR4503To(testInst);

      // Formalizer rels
      ExecutableProperty_c testR4501InstOne = new ExecutableProperty_c(modelRoot);
      testR4501InstOne.relateAcrossR4501To(testInst);
      Provision_c testR4501InstOth = new Provision_c(modelRoot);
      testR4501InstOth.relateAcrossR4501To(testInst);

      testInst.Dispose();

      // 
      // Rel R841
      MessageValue_c testR841Inst2 = MessageValue_c.getOneV_MSVOnR841(testInst);
      assertNull ( testR841Inst2 );
      // Rel R4503
      ProvidedOperation_c testR4503Inst2 = ProvidedOperation_c.getOneSPR_POOnR4503(testInst);
      assertNull ( testR4503Inst2 );


      testInst.delete();
	    }
	    public void testProvidedExecutablePropertyDisposeProvidedSignal() throws Exception
	    {   
	            ProvidedExecutableProperty_c testInst = new ProvidedExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R841
      MessageValue_c testR841Inst = new MessageValue_c(modelRoot);
      testR841Inst.relateAcrossR841To(testInst);
      // Rel R4503 - supertype
      ProvidedSignal_c testR4503Inst = new ProvidedSignal_c(modelRoot);
      testR4503Inst.relateAcrossR4503To(testInst);

      // Formalizer rels
      ExecutableProperty_c testR4501InstOne = new ExecutableProperty_c(modelRoot);
      testR4501InstOne.relateAcrossR4501To(testInst);
      Provision_c testR4501InstOth = new Provision_c(modelRoot);
      testR4501InstOth.relateAcrossR4501To(testInst);

      testInst.Dispose();

      // 
      // Rel R841
      MessageValue_c testR841Inst2 = MessageValue_c.getOneV_MSVOnR841(testInst);
      assertNull ( testR841Inst2 );
      // Rel R4503
      ProvidedSignal_c testR4503Inst2 = ProvidedSignal_c.getOneSPR_PSOnR4503(testInst);
      assertNull ( testR4503Inst2 );


      testInst.delete();
	    }

   	    public void testSatisfactionDispose() throws Exception
	    {
    	      Satisfaction_c testInst = new Satisfaction_c(modelRoot);
      // Participant rels
      // Rel R9001 - associative
      SatisfactionInComponentPackage_c testR9001Inst = new SatisfactionInComponentPackage_c(modelRoot);
      testR9001Inst.relateAcrossR9001To(testInst);
      ComponentPackage_c testR9001InstOth = new ComponentPackage_c(modelRoot);
      testR9001Inst.relateAcrossR9001To(testR9001InstOth);
      // Rel R9000 - associative
      SatisfactionInComponent_c testR9000Inst = new SatisfactionInComponent_c(modelRoot);
      testR9000Inst.relateAcrossR9000To(testInst);
      Component_c testR9000InstOth = new Component_c(modelRoot);
      testR9000Inst.relateAcrossR9000To(testR9000InstOth);
      // Rel R4705 - associative
      ImportedProvisionInSatisfaction_c testR4705Inst = new ImportedProvisionInSatisfaction_c(modelRoot);
      testR4705Inst.relateAcrossR4705To(testInst);
      ImportedProvision_c testR4705InstOth = new ImportedProvision_c(modelRoot);
      testR4705Inst.relateAcrossR4705To(testR4705InstOth);

      // Formalizer rels
      Requirement_c testR4002InstOne = new Requirement_c(modelRoot);
      testR4002InstOne.relateAcrossR4002To(testInst);
      Provision_c testR4002InstOth = new Provision_c(modelRoot);
      testR4002InstOth.relateAcrossR4002To(testInst);

      testInst.Dispose();

      // 
      // Rel R9001
      SatisfactionInComponentPackage_c testR9001Inst2 = SatisfactionInComponentPackage_c.getOnePA_SICPOnR9001(testInst);
      assertNull ( testR9001Inst2 );
      // Rel R9000
      SatisfactionInComponent_c testR9000Inst2 = SatisfactionInComponent_c.getOnePA_SICOnR9000(testInst);
      assertNull ( testR9000Inst2 );
      // Rel R4705
      ImportedProvisionInSatisfaction_c testR4705Inst2 = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(testInst);
      assertNull ( testR4705Inst2 );


      testInst.delete();
	    }

   	    public void testRequirementDispose() throws Exception
	    {
    	      Requirement_c testInst = new Requirement_c(modelRoot);
      // Participant rels
      // Rel R4500 - associative
      RequiredExecutableProperty_c testR4500Inst = new RequiredExecutableProperty_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testInst);
      ExecutableProperty_c testR4500InstOth = new ExecutableProperty_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testR4500InstOth);
      // Rel R4002 - associative
      Satisfaction_c testR4002Inst = new Satisfaction_c(modelRoot);
      testR4002Inst.relateAcrossR4002To(testInst);
      Provision_c testR4002InstOth = new Provision_c(modelRoot);
      testR4002Inst.relateAcrossR4002To(testR4002InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4500
      RequiredExecutableProperty_c testR4500Inst2 = RequiredExecutableProperty_c.getOneSPR_REPOnR4500(testInst);
      assertNull ( testR4500Inst2 );
      // Rel R4002
      Satisfaction_c testR4002Inst2 = Satisfaction_c.getOneC_SFOnR4002(testInst);
      assertNull ( testR4002Inst2 );


      testInst.delete();
	    }

   	    public void testProvisionDispose() throws Exception
	    {
    	      Provision_c testInst = new Provision_c(modelRoot);
      // Participant rels
      // Rel R4501 - associative
      ProvidedExecutableProperty_c testR4501Inst = new ProvidedExecutableProperty_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testInst);
      ExecutableProperty_c testR4501InstOth = new ExecutableProperty_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testR4501InstOth);
      // Rel R4002 - associative
      Satisfaction_c testR4002Inst = new Satisfaction_c(modelRoot);
      testR4002Inst.relateAcrossR4002To(testInst);
      Requirement_c testR4002InstOth = new Requirement_c(modelRoot);
      testR4002Inst.relateAcrossR4002To(testR4002InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4501
      ProvidedExecutableProperty_c testR4501Inst2 = ProvidedExecutableProperty_c.getOneSPR_PEPOnR4501(testInst);
      assertNull ( testR4501Inst2 );
      // Rel R4002
      Satisfaction_c testR4002Inst2 = Satisfaction_c.getOneC_SFOnR4002(testInst);
      assertNull ( testR4002Inst2 );


      testInst.delete();
	    }

   	    public void testPropertyParameterDispose() throws Exception
	    {
    	      PropertyParameter_c testInst = new PropertyParameter_c(modelRoot);
      // Participant rels
      // Rel R843
      ParameterValue_c testR843Inst = new ParameterValue_c(modelRoot);
      testR843Inst.relateAcrossR843To(testInst);
      // Rel R847
      EventParameterReference_c testR847Inst = new EventParameterReference_c(modelRoot);
      testR847Inst.relateAcrossR847To(testInst);
      // Rel R1023
      ExecutablePropertyArgument_c testR1023Inst = new ExecutablePropertyArgument_c(modelRoot);
      testR1023Inst.relateAcrossR1023To(testInst);
      // Rel R2956
      DataItemValue_c testR2956Inst = new DataItemValue_c(modelRoot);
      testR2956Inst.relateAcrossR2956To(testInst);
      // Rel R4017
      Dimensions_c testR4017Inst = new Dimensions_c(modelRoot);
      testR4017Inst.relateAcrossR4017To(testInst);

      // Formalizer rels
      // Rel R4007
      DataType_c testR4007Inst = new DataType_c(modelRoot);
      testR4007Inst.relateAcrossR4007To(testInst);

      testInst.Dispose();

      // 
      // Rel R843
      ParameterValue_c testR843Inst2 = ParameterValue_c.getOneV_PVLOnR843(testInst);
      assertNull ( testR843Inst2 );
      // Rel R847
      EventParameterReference_c testR847Inst2 = EventParameterReference_c.getOneV_EPROnR847(testInst);
      assertNull ( testR847Inst2 );
      // Rel R1023
      ExecutablePropertyArgument_c testR1023Inst2 = ExecutablePropertyArgument_c.getOneMSG_EPAOnR1023(testInst);
      assertNull ( testR1023Inst2 );
      // Rel R2956
      DataItemValue_c testR2956Inst2 = DataItemValue_c.getOneI_DIVOnR2956(testInst);
      assertNull ( testR2956Inst2 );
      // Rel R4017
      Dimensions_c testR4017Inst2 = Dimensions_c.getOneS_DIMOnR4017(testInst);
      assertNull ( testR4017Inst2 );

      DataType_c testR4007Inst2 = DataType_c.getOneS_DTOnR4007(testInst);
      assertNull ( testR4007Inst2 );

      testInst.delete();
	    }

   	    public void testPortDispose() throws Exception
	    {
    	      Port_c testInst = new Port_c(modelRoot);
      // Participant rels
      // Rel R4016
      InterfaceReference_c testR4016Inst = new InterfaceReference_c(modelRoot);
      testR4016Inst.relateAcrossR4016To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4016
      InterfaceReference_c testR4016Inst2 = InterfaceReference_c.getOneC_IROnR4016(testInst);
      assertNull ( testR4016Inst2 );


      testInst.delete();
	    }

   	    public void testInterfaceSignalDispose() throws Exception
	    {
    	      InterfaceSignal_c testInst = new InterfaceSignal_c(modelRoot);
      // Participant rels
      // Rel R1021
      SignalMessage_c testR1021Inst = new SignalMessage_c(modelRoot);
      testR1021Inst.relateAcrossR1021To(testInst);
		AsynchronousMessage_c asyncMessage = new AsynchronousMessage_c(modelRoot);
		Message_c message = new Message_c(modelRoot);
		testR1021Inst.relateAcrossR1019To(asyncMessage);
		asyncMessage.relateAcrossR1018To(message);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1021
      SignalMessage_c testR1021Inst2 = SignalMessage_c.getOneMSG_SIGOnR1021(testInst);
      assertNull ( testR1021Inst2 );


      testInst.delete();
	    }

   	    public void testInterfaceReferenceDisposeRequirement() throws Exception
	    {   
	            InterfaceReference_c testInst = new InterfaceReference_c(modelRoot);
      // Participant rels
      // Rel R4009 - supertype
      Requirement_c testR4009Inst = new Requirement_c(modelRoot);
      testR4009Inst.relateAcrossR4009To(testInst);
      // Rel R4013 - associative
      InterfaceReferenceInDelegation_c testR4013Inst = new InterfaceReferenceInDelegation_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testInst);
      Delegation_c testR4013InstOth = new Delegation_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testR4013InstOth);
      // Rel R4701
      ImportedReference_c testR4701Inst = new ImportedReference_c(modelRoot);
      testR4701Inst.relateAcrossR4701To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4009
      Requirement_c testR4009Inst2 = Requirement_c.getOneC_ROnR4009(testInst);
      assertNull ( testR4009Inst2 );
      // Rel R4013
      InterfaceReferenceInDelegation_c testR4013Inst2 = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013(testInst);
      assertNull ( testR4013Inst2 );


      testInst.delete();
	    }
	    public void testInterfaceReferenceDisposeProvision() throws Exception
	    {   
	            InterfaceReference_c testInst = new InterfaceReference_c(modelRoot);
      // Participant rels
      // Rel R4009 - supertype
      Provision_c testR4009Inst = new Provision_c(modelRoot);
      testR4009Inst.relateAcrossR4009To(testInst);
      // Rel R4013 - associative
      InterfaceReferenceInDelegation_c testR4013Inst = new InterfaceReferenceInDelegation_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testInst);
      Delegation_c testR4013InstOth = new Delegation_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testR4013InstOth);
      // Rel R4701
      ImportedReference_c testR4701Inst = new ImportedReference_c(modelRoot);
      testR4701Inst.relateAcrossR4701To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4009
      Provision_c testR4009Inst2 = Provision_c.getOneC_POnR4009(testInst);
      assertNull ( testR4009Inst2 );
      // Rel R4013
      InterfaceReferenceInDelegation_c testR4013Inst2 = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013(testInst);
      assertNull ( testR4013Inst2 );


      testInst.delete();
	    }

   	    public void testInterfaceOperationDispose() throws Exception
	    {
    	      InterfaceOperation_c testInst = new InterfaceOperation_c(modelRoot);
      // Participant rels
      // Rel R1022
      InterfaceOperationMessage_c testR1022Inst = new InterfaceOperationMessage_c(modelRoot);
      testR1022Inst.relateAcrossR1022To(testInst);
		SynchronousMessage_c syncMessage = new SynchronousMessage_c(modelRoot);
		Message_c message = new Message_c(modelRoot);
		testR1022Inst.relateAcrossR1020To(syncMessage);
		message.relateAcrossR1018To(syncMessage);
      // Rel R4018
      Dimensions_c testR4018Inst = new Dimensions_c(modelRoot);
      testR4018Inst.relateAcrossR4018To(testInst);

      // Formalizer rels
      // Rel R4008
      DataType_c testR4008Inst = new DataType_c(modelRoot);
      testR4008Inst.relateAcrossR4008To(testInst);

      testInst.Dispose();

      // 
      // Rel R1022
      InterfaceOperationMessage_c testR1022Inst2 = InterfaceOperationMessage_c.getOneMSG_IOPOnR1022(testInst);
      assertNull ( testR1022Inst2 );
      // Rel R4018
      Dimensions_c testR4018Inst2 = Dimensions_c.getOneS_DIMOnR4018(testInst);
      assertNull ( testR4018Inst2 );

      DataType_c testR4008Inst2 = DataType_c.getOneS_DTOnR4008(testInst);
      assertNull ( testR4008Inst2 );

      testInst.delete();
	    }

   	    public void testInterfaceDispose() throws Exception
	    {
    	      Interface_c testInst = new Interface_c(modelRoot);
      // Participant rels
      // Rel R4012
      InterfaceReference_c testR4012Inst = new InterfaceReference_c(modelRoot);
      testR4012Inst.relateAcrossR4012To(testInst);
    Provision_c pro = new Provision_c(modelRoot);
    pro.relateAcrossR4009To(testR4012Inst);
      // Rel R4003
      ExecutableProperty_c testR4003Inst = new ExecutableProperty_c(modelRoot);
      testR4003Inst.relateAcrossR4003To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4003
      ExecutableProperty_c testR4003Inst2 = ExecutableProperty_c.getOneC_EPOnR4003(testInst);
      assertNull ( testR4003Inst2 );


      testInst.delete();
	    }

   	    public void testExecutablePropertyDisposeInterfaceOperation() throws Exception
	    {   
	            ExecutableProperty_c testInst = new ExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R4500 - associative
      RequiredExecutableProperty_c testR4500Inst = new RequiredExecutableProperty_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testInst);
      Requirement_c testR4500InstOth = new Requirement_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testR4500InstOth);
      // Rel R4501 - associative
      ProvidedExecutableProperty_c testR4501Inst = new ProvidedExecutableProperty_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testInst);
      Provision_c testR4501InstOth = new Provision_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testR4501InstOth);
      // Rel R4006
      PropertyParameter_c testR4006Inst = new PropertyParameter_c(modelRoot);
      testR4006Inst.relateAcrossR4006To(testInst);
      // Rel R4004 - supertype
      InterfaceOperation_c testR4004Inst = new InterfaceOperation_c(modelRoot);
      testR4004Inst.relateAcrossR4004To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4006
      PropertyParameter_c testR4006Inst2 = PropertyParameter_c.getOneC_PPOnR4006(testInst);
      assertNull ( testR4006Inst2 );
      // Rel R4004
      InterfaceOperation_c testR4004Inst2 = InterfaceOperation_c.getOneC_IOOnR4004(testInst);
      assertNull ( testR4004Inst2 );


      testInst.delete();
	    }
	    public void testExecutablePropertyDisposeInterfaceSignal() throws Exception
	    {   
	            ExecutableProperty_c testInst = new ExecutableProperty_c(modelRoot);
      // Participant rels
      // Rel R4500 - associative
      RequiredExecutableProperty_c testR4500Inst = new RequiredExecutableProperty_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testInst);
      Requirement_c testR4500InstOth = new Requirement_c(modelRoot);
      testR4500Inst.relateAcrossR4500To(testR4500InstOth);
      // Rel R4501 - associative
      ProvidedExecutableProperty_c testR4501Inst = new ProvidedExecutableProperty_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testInst);
      Provision_c testR4501InstOth = new Provision_c(modelRoot);
      testR4501Inst.relateAcrossR4501To(testR4501InstOth);
      // Rel R4006
      PropertyParameter_c testR4006Inst = new PropertyParameter_c(modelRoot);
      testR4006Inst.relateAcrossR4006To(testInst);
      // Rel R4004 - supertype
      InterfaceSignal_c testR4004Inst = new InterfaceSignal_c(modelRoot);
      testR4004Inst.relateAcrossR4004To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4006
      PropertyParameter_c testR4006Inst2 = PropertyParameter_c.getOneC_PPOnR4006(testInst);
      assertNull ( testR4006Inst2 );
      // Rel R4004
      InterfaceSignal_c testR4004Inst2 = InterfaceSignal_c.getOneC_ASOnR4004(testInst);
      assertNull ( testR4004Inst2 );


      testInst.delete();
	    }

   	    public void testDelegationDispose() throws Exception
	    {
    	      Delegation_c testInst = new Delegation_c(modelRoot);
      // Participant rels
      // Rel R4014
      InterfaceReference_c testR4014Inst = new InterfaceReference_c(modelRoot);
      testR4014Inst.relateAcrossR4014To(testInst);
      // Rel R4013 - associative
      InterfaceReferenceInDelegation_c testR4013Inst = new InterfaceReferenceInDelegation_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testInst);
      InterfaceReference_c testR4013InstOth = new InterfaceReference_c(modelRoot);
      testR4013Inst.relateAcrossR4013To(testR4013InstOth);
      // Rel R9002 - associative
      DelegationInComponent_c testR9002Inst = new DelegationInComponent_c(modelRoot);
      testR9002Inst.relateAcrossR9002To(testInst);
      Component_c testR9002InstOth = new Component_c(modelRoot);
      testR9002Inst.relateAcrossR9002To(testR9002InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4014
      InterfaceReference_c testR4014Inst2 = InterfaceReference_c.getOneC_IROnR4014(testInst);
      assertNull ( testR4014Inst2 );
      // Rel R4013
      InterfaceReferenceInDelegation_c testR4013Inst2 = InterfaceReferenceInDelegation_c.getOneC_RIDOnR4013(testInst);
      assertNull ( testR4013Inst2 );
      // Rel R9002
      DelegationInComponent_c testR9002Inst2 = DelegationInComponent_c.getOnePA_DICOnR9002(testInst);
      assertNull ( testR9002Inst2 );


      testInst.delete();
	    }

   	    public void testComponentPackageinPackageDispose() throws Exception
	    {
    	      ComponentPackageInPackage_c testInst = new ComponentPackageInPackage_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   
   	    public void testImportedRequirementDispose() throws Exception
	    {
    	      ImportedRequirement_c testInst = new ImportedRequirement_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R4706
      Satisfaction_c testR4706Inst = new Satisfaction_c(modelRoot);
      testR4706Inst.relateAcrossR4706To(testInst);

      testInst.Dispose();

      // 

      Satisfaction_c testR4706Inst2 = Satisfaction_c.getOneC_SFOnR4706(testInst);
      assertNull ( testR4706Inst2 );

      testInst.delete();
	    }

   	    public void testImportedReferenceDisposeImportedProvision() throws Exception
	    {   
	            ImportedReference_c testInst = new ImportedReference_c(modelRoot);
      // Participant rels
      // Rel R4703 - supertype
      ImportedProvision_c testR4703Inst = new ImportedProvision_c(modelRoot);
      testR4703Inst.relateAcrossR4703To(testInst);

      // Formalizer rels
      // Rel R4704
      Delegation_c testR4704Inst = new Delegation_c(modelRoot);
      testR4704Inst.relateAcrossR4704To(testInst);

      testInst.Dispose();

      // 
      // Rel R4703
      ImportedProvision_c testR4703Inst2 = ImportedProvision_c.getOneCL_IPOnR4703(testInst);
      assertNull ( testR4703Inst2 );

      Delegation_c testR4704Inst2 = Delegation_c.getOneC_DGOnR4704(testInst);
      assertNull ( testR4704Inst2 );

      testInst.delete();
	    }
	    public void testImportedReferenceDisposeImportedRequirement() throws Exception
	    {   
	            ImportedReference_c testInst = new ImportedReference_c(modelRoot);
      // Participant rels
      // Rel R4703 - supertype
      ImportedRequirement_c testR4703Inst = new ImportedRequirement_c(modelRoot);
      testR4703Inst.relateAcrossR4703To(testInst);

      // Formalizer rels
      // Rel R4704
      Delegation_c testR4704Inst = new Delegation_c(modelRoot);
      testR4704Inst.relateAcrossR4704To(testInst);

      testInst.Dispose();

      // 
      // Rel R4703
      ImportedRequirement_c testR4703Inst2 = ImportedRequirement_c.getOneCL_IROnR4703(testInst);
      assertNull ( testR4703Inst2 );

      Delegation_c testR4704Inst2 = Delegation_c.getOneC_DGOnR4704(testInst);
      assertNull ( testR4704Inst2 );

      testInst.delete();
	    }

   	    public void testImportedProvisionDispose() throws Exception
	    {
    	      ImportedProvision_c testInst = new ImportedProvision_c(modelRoot);
      // Participant rels
      // Rel R4705 - associative
      ImportedProvisionInSatisfaction_c testR4705Inst = new ImportedProvisionInSatisfaction_c(modelRoot);
      testR4705Inst.relateAcrossR4705To(testInst);
      Satisfaction_c testR4705InstOth = new Satisfaction_c(modelRoot);
      testR4705Inst.relateAcrossR4705To(testR4705InstOth);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R4705
      ImportedProvisionInSatisfaction_c testR4705Inst2 = ImportedProvisionInSatisfaction_c.getOneCL_IPINSOnR4705(testInst);
      assertNull ( testR4705Inst2 );


      testInst.delete();
	    }

   	    public void testComponentReferenceDispose() throws Exception
	    {
    	      ComponentReference_c testInst = new ComponentReference_c(modelRoot);
      // Participant rels
      // Rel R2963
      ComponentInstance_c testR2963Inst = new ComponentInstance_c(modelRoot);
      testR2963Inst.relateAcrossR2963To(testInst);
      // Rel R4700
      ImportedReference_c testR4700Inst = new ImportedReference_c(modelRoot);
      testR4700Inst.relateAcrossR4700To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R2963
      ComponentInstance_c testR2963Inst2 = ComponentInstance_c.getOneI_EXEOnR2963(testInst);
      assertNull ( testR2963Inst2 );
      // Rel R4700
      ImportedReference_c testR4700Inst2 = ImportedReference_c.getOneCL_IIROnR4700(testInst);
      assertNull ( testR4700Inst2 );


      testInst.delete();
	    }

   	    public void testComponentDispose() throws Exception
	    {
    	      Component_c testInst = new Component_c(modelRoot);
      // Participant rels
      // Rel R1213
      UseCaseDiagram_c testR1213Inst = new UseCaseDiagram_c(modelRoot);
      testR1213Inst.relateAcrossR1213To(testInst);
      // Rel R952
      Sequence_c testR952Inst = new Sequence_c(modelRoot);
      testR952Inst.relateAcrossR952To(testInst);
      // Rel R8003
      PackageableElement_c testR8003Inst = new PackageableElement_c(modelRoot);
      testR8003Inst.relateAcrossR8003To(testInst);
      // Rel R8004 - associative
      ComponentVisibility_c testR8004Inst = new ComponentVisibility_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testInst);
      PackageableElement_c testR8004InstOth = new PackageableElement_c(modelRoot);
      testR8004Inst.relateAcrossR8004To(testR8004InstOth);
      // Rel R8007
      ComponentResultSet_c testR8007Inst = new ComponentResultSet_c(modelRoot);
      testR8007Inst.relateAcrossR8007To(testInst);
      // Rel R4206
      InterfacePackage_c testR4206Inst = new InterfacePackage_c(modelRoot);
      testR4206Inst.relateAcrossR4206To(testInst);
      // Rel R955
      ComponentParticipant_c testR955Inst = new ComponentParticipant_c(modelRoot);
      testR955Inst.relateAcrossR955To(testInst);
      // Rel R2955
      ComponentInstance_c testR2955Inst = new ComponentInstance_c(modelRoot);
      testR2955Inst.relateAcrossR2955To(testInst);
      // Rel R4204 - associative
      DomainAsComponent_c testR4204Inst = new DomainAsComponent_c(modelRoot);
      testR4204Inst.relateAcrossR4204To(testInst);
      Domain_c testR4204InstOth = new Domain_c(modelRoot);
      testR4204Inst.relateAcrossR4204To(testR4204InstOth);
      // Rel R9000 - associative
      SatisfactionInComponent_c testR9000Inst = new SatisfactionInComponent_c(modelRoot);
      testR9000Inst.relateAcrossR9000To(testInst);
      Satisfaction_c testR9000InstOth = new Satisfaction_c(modelRoot);
      testR9000Inst.relateAcrossR9000To(testR9000InstOth);
      // Rel R4010
      Port_c testR4010Inst = new Port_c(modelRoot);
      testR4010Inst.relateAcrossR4010To(testInst);
      // Rel R9002 - associative
      DelegationInComponent_c testR9002Inst = new DelegationInComponent_c(modelRoot);
      testR9002Inst.relateAcrossR9002To(testInst);
      Delegation_c testR9002InstOth = new Delegation_c(modelRoot);
      testR9002Inst.relateAcrossR9002To(testR9002InstOth);
      // Rel R4201
      ComponentReference_c testR4201Inst = new ComponentReference_c(modelRoot);
      testR4201Inst.relateAcrossR4201To(testInst);
      // Rel R4205
      ComponentReference_c testR4205Inst = new ComponentReference_c(modelRoot);
      testR4205Inst.relateAcrossR4205To(testInst);
      // Rel R1138
      Communication_c testR1138Inst = new Communication_c(modelRoot);
      testR1138Inst.relateAcrossR1138To(testInst);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Body_c testR694InstOth = new Body_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R1115
      Activity_c testR1115Inst = new Activity_c(modelRoot);
      testR1115Inst.relateAcrossR1115To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1213
      UseCaseDiagram_c testR1213Inst2 = UseCaseDiagram_c.getOneUC_UCCOnR1213(testInst);
      assertNull ( testR1213Inst2 );
      // Rel R952
      Sequence_c testR952Inst2 = Sequence_c.getOneSQ_SOnR952(testInst);
      assertNull ( testR952Inst2 );
      // Rel R8003
      PackageableElement_c testR8003Inst2 = PackageableElement_c.getOnePE_PEOnR8003(testInst);
      assertNull ( testR8003Inst2 );
      // Rel R8004
      ComponentVisibility_c testR8004Inst2 = ComponentVisibility_c.getOnePE_CVSOnR8004(testInst);
      assertNull ( testR8004Inst2 );
      // Rel R8007
      ComponentResultSet_c testR8007Inst2 = ComponentResultSet_c.getOnePE_CRSOnR8007(testInst);
      assertNull ( testR8007Inst2 );
      // Rel R4206
      InterfacePackage_c testR4206Inst2 = InterfacePackage_c.getOneIP_IPOnR4206(testInst);
      assertNull ( testR4206Inst2 );
      // Rel R955
      ComponentParticipant_c testR955Inst2 = ComponentParticipant_c.getOneSQ_COPOnR955(testInst);
      assertNull ( testR955Inst2 );
      // Rel R2955
      ComponentInstance_c testR2955Inst2 = ComponentInstance_c.getOneI_EXEOnR2955(testInst);
      assertNull ( testR2955Inst2 );
      // Rel R4204
      DomainAsComponent_c testR4204Inst2 = DomainAsComponent_c.getOneCN_DCOnR4204(testInst);
      assertNull ( testR4204Inst2 );
      // Rel R9000
      SatisfactionInComponent_c testR9000Inst2 = SatisfactionInComponent_c.getOnePA_SICOnR9000(testInst);
      assertNull ( testR9000Inst2 );
      // Rel R4010
      Port_c testR4010Inst2 = Port_c.getOneC_POOnR4010(testInst);
      assertNull ( testR4010Inst2 );
      // Rel R9002
      DelegationInComponent_c testR9002Inst2 = DelegationInComponent_c.getOnePA_DICOnR9002(testInst);
      assertNull ( testR9002Inst2 );
      // Rel R4205
      ComponentReference_c testR4205Inst2 = ComponentReference_c.getOneCL_ICOnR4205(testInst);
      assertNull ( testR4205Inst2 );
      // Rel R4202
      ComponentInComponent_c testR4202Inst2 = ComponentInComponent_c.getOneCN_CICOnR4202(testInst);
      assertNull ( testR4202Inst2 );
      // Rel R1138
      Communication_c testR1138Inst2 = Communication_c.getOneCOMM_COMMOnR1138(testInst);
      assertNull ( testR1138Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R1115
      Activity_c testR1115Inst2 = Activity_c.getOneA_AOnR1115(testInst);
      assertNull ( testR1115Inst2 );

      ComponentInComponent_c testR4203Inst2 = ComponentInComponent_c.getOneCN_CICOnR4203(testInst);
      assertNull ( testR4203Inst2 );

      testInst.delete();
	    }

   	    public void testSMtoSMEventCommDispose() throws Exception
	    {
    	      SmToSmEventComm_c testInst = createSmToSmEventComm_c();
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSMtoSMCommPathDispose() throws Exception
	    {
    	      SmToSmCommPath_c testInst = new SmToSmCommPath_c(modelRoot);
      // Participant rels
      // Rel R408
      SmToSmEventComm_c testR408Inst = new SmToSmEventComm_c(modelRoot);
      testR408Inst.relateAcrossR408To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R408
      SmToSmEventComm_c testR408Inst2 = SmToSmEventComm_c.getOneCA_SMSMEOnR408(testInst);
      assertNull ( testR408Inst2 );


      testInst.delete();
	    }

   	    public void testSMtoOBJAttributeAccessDispose() throws Exception
	    {
    	      SmToObjAttributeAccess_c testInst = createSmToObjAttributeAccess_c();
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSMtoOBJAccessPathDispose() throws Exception
	    {
    	      SmToObjAccessPath_c testInst = new SmToObjAccessPath_c(modelRoot);
      // Participant rels
      // Rel R418
      SmToObjAttributeAccess_c testR418Inst = new SmToObjAttributeAccess_c(modelRoot);
      testR418Inst.relateAcrossR418To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R418
      SmToObjAttributeAccess_c testR418Inst2 = SmToObjAttributeAccess_c.getOneCA_SMOAAOnR418(testInst);
      assertNull ( testR418Inst2 );


      testInst.delete();
	    }

   	    public void testSMtoEEEventCommDispose() throws Exception
	    {
    	      SmToEeEventComm_c testInst = createSmToEeEventComm_c();
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSMtoEEDataItemAccessDispose() throws Exception
	    {
    	      SmToEeDataItemAccess_c testInst = createSmToEeDataItemAccess_c();
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testSMtoEECommPathDispose() throws Exception
	    {
    	      SmToEeCommPath_c testInst = new SmToEeCommPath_c(modelRoot);
      // Participant rels
      // Rel R412
      SmToEeEventComm_c testR412Inst = createSmToEeEventComm_c();
      testR412Inst.relateAcrossR412To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R412
      SmToEeEventComm_c testR412Inst2 = SmToEeEventComm_c.getOneCA_SMEEEOnR412(testInst);
      assertNull ( testR412Inst2 );


      testInst.delete();
	    }

   	    public void testSMtoEEAccessPathDispose() throws Exception
	    {
    	      SmToEeAccessPath_c testInst = new SmToEeAccessPath_c(modelRoot);
      // Participant rels
      // Rel R422
      SmToEeDataItemAccess_c testR422Inst = createSmToEeDataItemAccess_c();
      testR422Inst.relateAcrossR422To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R422
      SmToEeDataItemAccess_c testR422Inst2 = SmToEeDataItemAccess_c.getOneCA_SMEEDOnR422(testInst);
      assertNull ( testR422Inst2 );


      testInst.delete();
	    }

   	    public void testEEtoSMEventCommDispose() throws Exception
	    {
    	      EeToSmEventComm_c testInst = createEeToSmEventComm_c();
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testEEtoSMCommPathDispose() throws Exception
	    {
    	      EeToSmCommPath_c testInst = new EeToSmCommPath_c(modelRoot);
      // Participant rels
      // Rel R404
      EeToSmEventComm_c testR404Inst = new EeToSmEventComm_c(modelRoot);
      testR404Inst.relateAcrossR404To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R404
      EeToSmEventComm_c testR404Inst2 = EeToSmEventComm_c.getOneCA_EESMEOnR404(testInst);
      assertNull ( testR404Inst2 );


      testInst.delete();
	    }

   	    public void testCommunicationPathDisposeEEtoSMCommPath() throws Exception
	    {   
	            CommunicationPath_c testInst = new CommunicationPath_c(modelRoot);
      // Participant rels
      // Rel R401 - supertype
      EeToSmCommPath_c testR401Inst = new EeToSmCommPath_c(modelRoot);
      testR401Inst.relateAcrossR401To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R401
      EeToSmCommPath_c testR401Inst2 = EeToSmCommPath_c.getOneCA_EESMCOnR401(testInst);
      assertNull ( testR401Inst2 );


      testInst.delete();
	    }
	    public void testCommunicationPathDisposeSMtoEECommPath() throws Exception
	    {   
	            CommunicationPath_c testInst = new CommunicationPath_c(modelRoot);
      // Participant rels
      // Rel R401 - supertype
      SmToEeCommPath_c testR401Inst = new SmToEeCommPath_c(modelRoot);
      testR401Inst.relateAcrossR401To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R401
      SmToEeCommPath_c testR401Inst2 = SmToEeCommPath_c.getOneCA_SMEECOnR401(testInst);
      assertNull ( testR401Inst2 );


      testInst.delete();
	    }
	    public void testCommunicationPathDisposeSMtoSMCommPath() throws Exception
	    {   
	            CommunicationPath_c testInst = new CommunicationPath_c(modelRoot);
      // Participant rels
      // Rel R401 - supertype
      SmToSmCommPath_c testR401Inst = new SmToSmCommPath_c(modelRoot);
      testR401Inst.relateAcrossR401To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R401
      SmToSmCommPath_c testR401Inst2 = SmToSmCommPath_c.getOneCA_SMSMCOnR401(testInst);
      assertNull ( testR401Inst2 );


      testInst.delete();
	    }

   	    public void testAccessPathDisposeSMtoOBJAccessPath() throws Exception
	    {   
	            AccessPath_c testInst = new AccessPath_c(modelRoot);
      // Participant rels
      // Rel R415 - supertype
      SmToObjAccessPath_c testR415Inst = new SmToObjAccessPath_c(modelRoot);
      testR415Inst.relateAcrossR415To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R415
      SmToObjAccessPath_c testR415Inst2 = SmToObjAccessPath_c.getOneCA_SMOAOnR415(testInst);
      assertNull ( testR415Inst2 );


      testInst.delete();
	    }
	    public void testAccessPathDisposeSMtoEEAccessPath() throws Exception
	    {   
	            AccessPath_c testInst = new AccessPath_c(modelRoot);
      // Participant rels
      // Rel R415 - supertype
      SmToEeAccessPath_c testR415Inst = new SmToEeAccessPath_c(modelRoot);
      testR415Inst.relateAcrossR415To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R415
      SmToEeAccessPath_c testR415Inst2 = SmToEeAccessPath_c.getOneCA_SMEEAOnR415(testInst);
      assertNull ( testR415Inst2 );


      testInst.delete();
	    }

   	    public void testCommunicationLinkDispose() throws Exception
	    {
    	      CommunicationLink_c testInst = new CommunicationLink_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R1128
      Association_c testR1128Inst = new Association_c(modelRoot);
      testR1128Inst.relateAcrossR1128To(testInst);

      testInst.Dispose();

      // 

      Association_c testR1128Inst2 = Association_c.getOneR_RELOnR1128(testInst);
      assertNull ( testR1128Inst2 );

      testInst.delete();
	    }

   
   	    public void testWhileStmtDispose() throws Exception
	    {
    	      WhileStmt_c testInst = new WhileStmt_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R608
      Block_c testR608Inst = new Block_c(modelRoot);
      testR608Inst.relateAcrossR608To(testInst);
      // Rel R626
      Value_c testR626Inst = new Value_c(modelRoot);
      testR626Inst.relateAcrossR626To(testInst);

      testInst.Dispose();

      // 

      Block_c testR608Inst2 = Block_c.getOneACT_BLKOnR608(testInst);
      assertNull ( testR608Inst2 );
      Value_c testR626Inst2 = Value_c.getOneV_VALOnR626(testInst);
      assertNull ( testR626Inst2 );

      testInst.delete();
	    }

   	    public void testTransitionActionBodyDispose() throws Exception
	    {
    	      TransitionActionBody_c testInst = new TransitionActionBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R688
      Action_c testR688Inst = new Action_c(modelRoot);
      testR688Inst.relateAcrossR688To(testInst);

      testInst.Dispose();

      // 

      Action_c testR688Inst2 = Action_c.getOneSM_ACTOnR688(testInst);
      assertNull ( testR688Inst2 );

      testInst.delete();
	    }

   	    public void testStatementDisposeForStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      ForStmt_c testR603Inst = new ForStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      ForStmt_c testR603Inst2 = ForStmt_c.getOneACT_FOROnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeWhileStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      WhileStmt_c testR603Inst = new WhileStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      WhileStmt_c testR603Inst2 = WhileStmt_c.getOneACT_WHLOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeIfStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      IfStmt_c testR603Inst = new IfStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      IfStmt_c testR603Inst2 = IfStmt_c.getOneACT_IFOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeElseIfStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      ElseifStmt_c testR603Inst = new ElseifStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      ElseifStmt_c testR603Inst2 = ElseifStmt_c.getOneACT_ELOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeElseStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      ElseStmt_c testR603Inst = new ElseStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      ElseStmt_c testR603Inst2 = ElseStmt_c.getOneACT_EOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeBridgeInvocation() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      BridgeInvocation_c testR603Inst = new BridgeInvocation_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      BridgeInvocation_c testR603Inst2 = BridgeInvocation_c.getOneACT_BRGOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeFunctionInvocation() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      FunctionInvocation_c testR603Inst = new FunctionInvocation_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      FunctionInvocation_c testR603Inst2 = FunctionInvocation_c.getOneACT_FNCOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeReturnStmt() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      ReturnStmt_c testR603Inst = new ReturnStmt_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      ReturnStmt_c testR603Inst2 = ReturnStmt_c.getOneACT_RETOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeOperationInvocation() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      OperationInvocation_c testR603Inst = new OperationInvocation_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      OperationInvocation_c testR603Inst2 = OperationInvocation_c.getOneACT_TFMOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeAssigntoMember() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      AssignToMember_c testR603Inst = new AssignToMember_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      AssignToMember_c testR603Inst2 = AssignToMember_c.getOneACT_AIOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeDelete() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Delete_c testR603Inst = new Delete_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Delete_c testR603Inst2 = Delete_c.getOneACT_DELOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeCreateNoVariable() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      CreateNoVariable_c testR603Inst = new CreateNoVariable_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      CreateNoVariable_c testR603Inst2 = CreateNoVariable_c.getOneACT_CNVOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeCreate() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Create_c testR603Inst = new Create_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Create_c testR603Inst2 = Create_c.getOneACT_CROnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeSelect() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Select_c testR603Inst = new Select_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Select_c testR603Inst2 = Select_c.getOneACT_SELOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeSelectFromInstances() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      SelectFromInstances_c testR603Inst = new SelectFromInstances_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      SelectFromInstances_c testR603Inst2 = SelectFromInstances_c.getOneACT_FIOOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeSelectFromInstancesWhere() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      SelectFromInstancesWhere_c testR603Inst = new SelectFromInstancesWhere_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      SelectFromInstancesWhere_c testR603Inst2 = SelectFromInstancesWhere_c.getOneACT_FIWOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeUnrelateUsing() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      UnrelateUsing_c testR603Inst = new UnrelateUsing_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      UnrelateUsing_c testR603Inst2 = UnrelateUsing_c.getOneACT_URUOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeUnrelate() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Unrelate_c testR603Inst = new Unrelate_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Unrelate_c testR603Inst2 = Unrelate_c.getOneACT_UNROnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeRelateUsing() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      RelateUsing_c testR603Inst = new RelateUsing_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      RelateUsing_c testR603Inst2 = RelateUsing_c.getOneACT_RUOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeRelate() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Relate_c testR603Inst = new Relate_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Relate_c testR603Inst2 = Relate_c.getOneACT_RELOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeControl() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Control_c testR603Inst = new Control_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Control_c testR603Inst2 = Control_c.getOneACT_CTLOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeBreak() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Break_c testR603Inst = new Break_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Break_c testR603Inst2 = Break_c.getOneACT_BRKOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeContinue() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      Continue_c testR603Inst = new Continue_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      Continue_c testR603Inst2 = Continue_c.getOneACT_CONOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeEventSpecificationStatement() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      EventSpecificationStatement_c testR603Inst = new EventSpecificationStatement_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      EventSpecificationStatement_c testR603Inst2 = EventSpecificationStatement_c.getOneE_ESSOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeGeneratePreexistingEvent() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      GeneratePreexistingEvent_c testR603Inst = new GeneratePreexistingEvent_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      GeneratePreexistingEvent_c testR603Inst2 = GeneratePreexistingEvent_c.getOneE_GPROnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeInterfaceOperationInvocation() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      InterfaceOperationInvocation_c testR603Inst = new InterfaceOperationInvocation_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      InterfaceOperationInvocation_c testR603Inst2 = InterfaceOperationInvocation_c.getOneACT_IOPOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }
	    public void testStatementDisposeSignalInvocation() throws Exception
	    {   
	            Statement_c testInst = new Statement_c(modelRoot);
      // Participant rels
      // Rel R603 - supertype
      SignalInvocation_c testR603Inst = new SignalInvocation_c(modelRoot);
      testR603Inst.relateAcrossR603To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R603
      SignalInvocation_c testR603Inst2 = SignalInvocation_c.getOneACT_SGNOnR603(testInst);
      assertNull ( testR603Inst2 );


      testInst.delete();
	    }

   	    public void testStateActionBodyDispose() throws Exception
	    {
    	      StateActionBody_c testInst = new StateActionBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R691
      Action_c testR691Inst = new Action_c(modelRoot);
      testR691Inst.relateAcrossR691To(testInst);

      testInst.Dispose();

      // 

      Action_c testR691Inst2 = Action_c.getOneSM_ACTOnR691(testInst);
      assertNull ( testR691Inst2 );

      testInst.delete();
	    }

   	    public void testRequiredSignalBodyDispose() throws Exception
	    {
    	      RequiredSignalBody_c testInst = new RequiredSignalBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R684
      RequiredSignal_c testR684Inst = new RequiredSignal_c(modelRoot);
      testR684Inst.relateAcrossR684To(testInst);

      testInst.Dispose();

      // 

      RequiredSignal_c testR684Inst2 = RequiredSignal_c.getOneSPR_RSOnR684(testInst);
      assertNull ( testR684Inst2 );

      testInst.delete();
	    }

   	    public void testRequiredOperationBodyDispose() throws Exception
	    {
    	      RequiredOperationBody_c testInst = new RequiredOperationBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R685
      RequiredOperation_c testR685Inst = new RequiredOperation_c(modelRoot);
      testR685Inst.relateAcrossR685To(testInst);

      testInst.Dispose();

      // 

      RequiredOperation_c testR685Inst2 = RequiredOperation_c.getOneSPR_ROOnR685(testInst);
      assertNull ( testR685Inst2 );

      testInst.delete();
	    }

   	    public void testProvidedSignalBodyDispose() throws Exception
	    {
    	      ProvidedSignalBody_c testInst = new ProvidedSignalBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R686
      ProvidedSignal_c testR686Inst = new ProvidedSignal_c(modelRoot);
      testR686Inst.relateAcrossR686To(testInst);

      testInst.Dispose();

      // 

      ProvidedSignal_c testR686Inst2 = ProvidedSignal_c.getOneSPR_PSOnR686(testInst);
      assertNull ( testR686Inst2 );

      testInst.delete();
	    }

   	    public void testProvidedOperationBodyDispose() throws Exception
	    {
    	      ProvidedOperationBody_c testInst = new ProvidedOperationBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R687
      ProvidedOperation_c testR687Inst = new ProvidedOperation_c(modelRoot);
      testR687Inst.relateAcrossR687To(testInst);

      testInst.Dispose();

      // 

      ProvidedOperation_c testR687Inst2 = ProvidedOperation_c.getOneSPR_POOnR687(testInst);
      assertNull ( testR687Inst2 );

      testInst.delete();
	    }

   	    public void testOperationBodyDispose() throws Exception
	    {
    	      OperationBody_c testInst = new OperationBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R696
      Operation_c testR696Inst = new Operation_c(modelRoot);
      testR696Inst.relateAcrossR696To(testInst);

      testInst.Dispose();

      // 

      Operation_c testR696Inst2 = Operation_c.getOneO_TFROnR696(testInst);
      assertNull ( testR696Inst2 );

      testInst.delete();
	    }

   	    public void testIfStmtDispose() throws Exception
	    {
    	      IfStmt_c testInst = new IfStmt_c(modelRoot);
      // Participant rels
      // Rel R682
      ElseifStmt_c testR682Inst = new ElseifStmt_c(modelRoot);
      testR682Inst.relateAcrossR682To(testInst);

      // Formalizer rels
      // Rel R607
      Block_c testR607Inst = new Block_c(modelRoot);
      testR607Inst.relateAcrossR607To(testInst);
      // Rel R625
      Value_c testR625Inst = new Value_c(modelRoot);
      testR625Inst.relateAcrossR625To(testInst);
      // Rel R690
      ElseifStmt_c testR690Inst = new ElseifStmt_c(modelRoot);
      testR690Inst.relateAcrossR690To(testInst);
      // Rel R692
      ElseStmt_c testR692Inst = new ElseStmt_c(modelRoot);
      testR692Inst.relateAcrossR692To(testInst);

      testInst.Dispose();

      // 
      // Rel R682
      ElseifStmt_c testR682Inst2 = ElseifStmt_c.getOneACT_ELOnR682(testInst);
      assertNull ( testR682Inst2 );

      Block_c testR607Inst2 = Block_c.getOneACT_BLKOnR607(testInst);
      assertNull ( testR607Inst2 );
      Value_c testR625Inst2 = Value_c.getOneV_VALOnR625(testInst);
      assertNull ( testR625Inst2 );
      ElseifStmt_c testR690Inst2 = ElseifStmt_c.getOneACT_ELOnR690(testInst);
      assertNull ( testR690Inst2 );
      ElseStmt_c testR692Inst2 = ElseStmt_c.getOneACT_EOnR692(testInst);
      assertNull ( testR692Inst2 );

      testInst.delete();
	    }

   	    public void testFunctionBodyDispose() throws Exception
	    {
    	      FunctionBody_c testInst = new FunctionBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R695
      Function_c testR695Inst = new Function_c(modelRoot);
      testR695Inst.relateAcrossR695To(testInst);

      testInst.Dispose();

      // 

      Function_c testR695Inst2 = Function_c.getOneS_SYNCOnR695(testInst);
      assertNull ( testR695Inst2 );

      testInst.delete();
	    }

   	    public void testForStmtDispose() throws Exception
	    {
    	      ForStmt_c testInst = new ForStmt_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R614
      Variable_c testR614Inst = new Variable_c(modelRoot);
      testR614Inst.relateAcrossR614To(testInst);
      // Rel R652
      Variable_c testR652Inst = new Variable_c(modelRoot);
      testR652Inst.relateAcrossR652To(testInst);
      // Rel R670
      ModelClass_c testR670Inst = new ModelClass_c(modelRoot);
      testR670Inst.relateAcrossR670To(testInst);
      // Rel R605
      Block_c testR605Inst = new Block_c(modelRoot);
      testR605Inst.relateAcrossR605To(testInst);

      testInst.Dispose();

      // 

      Variable_c testR614Inst2 = Variable_c.getOneV_VAROnR614(testInst);
      assertNull ( testR614Inst2 );
      Variable_c testR652Inst2 = Variable_c.getOneV_VAROnR652(testInst);
      assertNull ( testR652Inst2 );
      ModelClass_c testR670Inst2 = ModelClass_c.getOneO_OBJOnR670(testInst);
      assertNull ( testR670Inst2 );
      Block_c testR605Inst2 = Block_c.getOneACT_BLKOnR605(testInst);
      assertNull ( testR605Inst2 );

      testInst.delete();
	    }

   	    public void testElseIfStmtDispose() throws Exception
	    {
    	      ElseifStmt_c testInst = new ElseifStmt_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R658
      Block_c testR658Inst = new Block_c(modelRoot);
      testR658Inst.relateAcrossR658To(testInst);
      // Rel R659
      Value_c testR659Inst = new Value_c(modelRoot);
      testR659Inst.relateAcrossR659To(testInst);

      testInst.Dispose();

      // 

      Block_c testR658Inst2 = Block_c.getOneACT_BLKOnR658(testInst);
      assertNull ( testR658Inst2 );
      Value_c testR659Inst2 = Value_c.getOneV_VALOnR659(testInst);
      assertNull ( testR659Inst2 );

      testInst.delete();
	    }

   	    public void testElseStmtDispose() throws Exception
	    {
    	      ElseStmt_c testInst = new ElseStmt_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R606
      Block_c testR606Inst = new Block_c(modelRoot);
      testR606Inst.relateAcrossR606To(testInst);
      // Rel R683
      IfStmt_c testR683Inst = new IfStmt_c(modelRoot);
      testR683Inst.relateAcrossR683To(testInst);

      testInst.Dispose();

      // 

      Block_c testR606Inst2 = Block_c.getOneACT_BLKOnR606(testInst);
      assertNull ( testR606Inst2 );
      IfStmt_c testR683Inst2 = IfStmt_c.getOneACT_IFOnR683(testInst);
      assertNull ( testR683Inst2 );

      testInst.delete();
	    }

   	    public void testDerivedAttributeBodyDispose() throws Exception
	    {
    	      DerivedAttributeBody_c testInst = new DerivedAttributeBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R693
      DerivedBaseAttribute_c testR693Inst = new DerivedBaseAttribute_c(modelRoot);
      testR693Inst.relateAcrossR693To(testInst);

      testInst.Dispose();

      // 

      DerivedBaseAttribute_c testR693Inst2 = DerivedBaseAttribute_c.getOneO_DBATTROnR693(testInst);
      assertNull ( testR693Inst2 );

      testInst.delete();
	    }

   	    public void testControlDispose() throws Exception
	    {
    	      Control_c testInst = new Control_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testContinueDispose() throws Exception
	    {
    	      Continue_c testInst = new Continue_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testBridgeBodyDispose() throws Exception
	    {
    	      BridgeBody_c testInst = new BridgeBody_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R697
      Bridge_c testR697Inst = new Bridge_c(modelRoot);
      testR697Inst.relateAcrossR697To(testInst);

      testInst.Dispose();

      // 

      Bridge_c testR697Inst2 = Bridge_c.getOneS_BRGOnR697(testInst);
      assertNull ( testR697Inst2 );

      testInst.delete();
	    }

   	    public void testBreakDispose() throws Exception
	    {
    	      Break_c testInst = new Break_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testBodyDisposeStateActionBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      StateActionBody_c testR698Inst = new StateActionBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      StateActionBody_c testR698Inst2 = StateActionBody_c.getOneACT_SABOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeDerivedAttributeBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      DerivedAttributeBody_c testR698Inst = new DerivedAttributeBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      DerivedAttributeBody_c testR698Inst2 = DerivedAttributeBody_c.getOneACT_DABOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeFunctionBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      FunctionBody_c testR698Inst = new FunctionBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      FunctionBody_c testR698Inst2 = FunctionBody_c.getOneACT_FNBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeOperationBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      OperationBody_c testR698Inst = new OperationBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      OperationBody_c testR698Inst2 = OperationBody_c.getOneACT_OPBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeBridgeBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      BridgeBody_c testR698Inst = new BridgeBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      BridgeBody_c testR698Inst2 = BridgeBody_c.getOneACT_BRBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeProvidedOperationBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      ProvidedOperationBody_c testR698Inst = new ProvidedOperationBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      ProvidedOperationBody_c testR698Inst2 = ProvidedOperationBody_c.getOneACT_POBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeProvidedSignalBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      ProvidedSignalBody_c testR698Inst = new ProvidedSignalBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      ProvidedSignalBody_c testR698Inst2 = ProvidedSignalBody_c.getOneACT_PSBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeRequiredOperationBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      RequiredOperationBody_c testR698Inst = new RequiredOperationBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      RequiredOperationBody_c testR698Inst2 = RequiredOperationBody_c.getOneACT_ROBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeRequiredSignalBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      RequiredSignalBody_c testR698Inst = new RequiredSignalBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      RequiredSignalBody_c testR698Inst2 = RequiredSignalBody_c.getOneACT_RSBOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }
	    public void testBodyDisposeTransitionActionBody() throws Exception
	    {   
	            Body_c testInst = new Body_c(modelRoot);
      // Participant rels
      // Rel R640 - associative
      BodyInElement_c testR640Inst = new BodyInElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testInst);
      PackageableElement_c testR640InstOth = new PackageableElement_c(modelRoot);
      testR640Inst.relateAcrossR640To(testR640InstOth);
      // Rel R694 - associative
      BodyInComponent_c testR694Inst = new BodyInComponent_c(modelRoot);
      testR694Inst.relateAcrossR694To(testInst);
      Component_c testR694InstOth = new Component_c(modelRoot);
      testR694Inst.relateAcrossR694To(testR694InstOth);
      // Rel R601
      Block_c testR601Inst = new Block_c(modelRoot);
      testR601Inst.relateAcrossR601To(testInst);
      // Rel R698 - supertype
      TransitionActionBody_c testR698Inst = new TransitionActionBody_c(modelRoot);
      testR698Inst.relateAcrossR698To(testInst);
      // Rel R612
      Block_c testR612Inst = new Block_c(modelRoot);
      testR612Inst.relateAcrossR612To(testInst);

      // Formalizer rels
      // Rel R666
      Block_c testR666Inst = new Block_c(modelRoot);
      testR666Inst.relateAcrossR666To(testInst);
      // Rel R699
      Block_c testR699Inst = new Block_c(modelRoot);
      testR699Inst.relateAcrossR699To(testInst);
      // Rel R650
      Block_c testR650Inst = new Block_c(modelRoot);
      testR650Inst.relateAcrossR650To(testInst);

      testInst.Dispose();

      // 
      // Rel R640
      BodyInElement_c testR640Inst2 = BodyInElement_c.getOneACT_BIEOnR640(testInst);
      assertNull ( testR640Inst2 );
      // Rel R694
      BodyInComponent_c testR694Inst2 = BodyInComponent_c.getOneACT_BICOnR694(testInst);
      assertNull ( testR694Inst2 );
      // Rel R601
      Block_c testR601Inst2 = Block_c.getOneACT_BLKOnR601(testInst);
      assertNull ( testR601Inst2 );
      // Rel R698
      TransitionActionBody_c testR698Inst2 = TransitionActionBody_c.getOneACT_TABOnR698(testInst);
      assertNull ( testR698Inst2 );
      // Rel R612
      Block_c testR612Inst2 = Block_c.getOneACT_BLKOnR612(testInst);
      assertNull ( testR612Inst2 );

      Block_c testR666Inst2 = Block_c.getOneACT_BLKOnR666(testInst);
      assertNull ( testR666Inst2 );
      Block_c testR699Inst2 = Block_c.getOneACT_BLKOnR699(testInst);
      assertNull ( testR699Inst2 );
      Block_c testR650Inst2 = Block_c.getOneACT_BLKOnR650(testInst);
      assertNull ( testR650Inst2 );

      testInst.delete();
	    }

   	    public void testBlockDispose() throws Exception
	    {
    	      Block_c testInst = new Block_c(modelRoot);
      // Participant rels
      // Rel R823
      Variable_c testR823Inst = new Variable_c(modelRoot);
      testR823Inst.relateAcrossR823To(testInst);
      // Rel R826
      Value_c testR826Inst = new Value_c(modelRoot);
      testR826Inst.relateAcrossR826To(testInst);
      // Rel R602
      Statement_c testR602Inst = new Statement_c(modelRoot);
      testR602Inst.relateAcrossR602To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R823
      Variable_c testR823Inst2 = Variable_c.getOneV_VAROnR823(testInst);
      assertNull ( testR823Inst2 );
      // Rel R826
      Value_c testR826Inst2 = Value_c.getOneV_VALOnR826(testInst);
      assertNull ( testR826Inst2 );
      // Rel R602
      Statement_c testR602Inst2 = Statement_c.getOneACT_SMTOnR602(testInst);
      assertNull ( testR602Inst2 );


      testInst.delete();
	    }

   	    public void testSubtypeSupertypeAssociationDispose() throws Exception
	    {
    	      SubtypeSupertypeAssociation_c testInst = new SubtypeSupertypeAssociation_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R213
      ClassAsSubtype_c testR213Inst2 = ClassAsSubtype_c.getOneR_SUBOnR213(testInst);
      assertNull ( testR213Inst2 );


      testInst.delete();
	    }

   	    public void testSimpleAssociationDispose() throws Exception
	    {
    	      SimpleAssociation_c testInst = new SimpleAssociation_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R207
      ClassAsSimpleParticipant_c testR207Inst2 = ClassAsSimpleParticipant_c.getOneR_PARTOnR207(testInst);
      assertNull ( testR207Inst2 );


      testInst.delete();
	    }

   	    public void testReferringClassInAssocDisposeClassAsSubtype() throws Exception
	    {   
	            ReferringClassInAssoc_c testInst = new ReferringClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R111 - associative
      AttributeReferenceInClass_c testR111Inst = new AttributeReferenceInClass_c(modelRoot);
      testR111Inst.relateAcrossR111To(testInst);
      ReferredToIdentifierAttribute_c testR111InstOth = new ReferredToIdentifierAttribute_c(modelRoot);
      testR111Inst.relateAcrossR111To(testR111InstOth);
      // Rel R205 - supertype
      ClassAsSubtype_c testR205Inst = createClassAsSubtype_c(testInst);
      testR205Inst.relateAcrossR205To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R111
      AttributeReferenceInClass_c testR111Inst2 = AttributeReferenceInClass_c.getOneO_REFOnR111(testInst);
      assertNull ( testR111Inst2 );
      // Rel R205
      ClassAsSubtype_c testR205Inst2 = ClassAsSubtype_c.getOneR_SUBOnR205(testInst);
      assertNull ( testR205Inst2 );


      testInst.delete();
	    }
	    public void testReferringClassInAssocDisposeClassAsSimpleFormalizer() throws Exception
	    {   
	            ReferringClassInAssoc_c testInst = new ReferringClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R111 - associative
      AttributeReferenceInClass_c testR111Inst = new AttributeReferenceInClass_c(modelRoot);
      testR111Inst.relateAcrossR111To(testInst);
      ReferredToIdentifierAttribute_c testR111InstOth = new ReferredToIdentifierAttribute_c(modelRoot);
      testR111Inst.relateAcrossR111To(testR111InstOth);
      // Rel R205 - supertype
      ClassAsSimpleFormalizer_c testR205Inst = new ClassAsSimpleFormalizer_c(modelRoot);
      testR205Inst.relateAcrossR205To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R111
      AttributeReferenceInClass_c testR111Inst2 = AttributeReferenceInClass_c.getOneO_REFOnR111(testInst);
      assertNull ( testR111Inst2 );
      // Rel R205
      ClassAsSimpleFormalizer_c testR205Inst2 = ClassAsSimpleFormalizer_c.getOneR_FORMOnR205(testInst);
      assertNull ( testR205Inst2 );


      testInst.delete();
	    }
	    public void testReferringClassInAssocDisposeClassAsLink() throws Exception
	    {   
	            ReferringClassInAssoc_c testInst = new ReferringClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R111 - associative
      AttributeReferenceInClass_c testR111Inst = new AttributeReferenceInClass_c(modelRoot);
      testR111Inst.relateAcrossR111To(testInst);
      ReferredToIdentifierAttribute_c testR111InstOth = new ReferredToIdentifierAttribute_c(modelRoot);
      testR111Inst.relateAcrossR111To(testR111InstOth);
      // Rel R205 - supertype
      ClassAsLink_c testR205Inst = new ClassAsLink_c(modelRoot);
      testR205Inst.relateAcrossR205To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R111
      AttributeReferenceInClass_c testR111Inst2 = AttributeReferenceInClass_c.getOneO_REFOnR111(testInst);
      assertNull ( testR111Inst2 );
      // Rel R205
      ClassAsLink_c testR205Inst2 = ClassAsLink_c.getOneR_ASSROnR205(testInst);
      assertNull ( testR205Inst2 );


      testInst.delete();
	    }

   	    public void testReferredToClassinAssocDisposeClassAsSupertype() throws Exception
	    {   
	            ReferredToClassInAssoc_c testInst = new ReferredToClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R110 - associative
      ReferredToIdentifierAttribute_c testR110Inst = new ReferredToIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testInst);
      ClassIdentifierAttribute_c testR110InstOth = new ClassIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testR110InstOth);
      // Rel R204 - supertype
      ClassAsSupertype_c testR204Inst = new ClassAsSupertype_c(modelRoot);
      testR204Inst.relateAcrossR204To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R110
      ReferredToIdentifierAttribute_c testR110Inst2 = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(testInst);
      assertNull ( testR110Inst2 );
      // Rel R204
      ClassAsSupertype_c testR204Inst2 = ClassAsSupertype_c.getOneR_SUPEROnR204(testInst);
      assertNull ( testR204Inst2 );


      testInst.delete();
	    }
	    public void testReferredToClassinAssocDisposeClassAsSimpleParticipant() throws Exception
	    {   
	            ReferredToClassInAssoc_c testInst = new ReferredToClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R110 - associative
      ReferredToIdentifierAttribute_c testR110Inst = new ReferredToIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testInst);
      ClassIdentifierAttribute_c testR110InstOth = new ClassIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testR110InstOth);
      // Rel R204 - supertype
      ClassAsSimpleParticipant_c testR204Inst = new ClassAsSimpleParticipant_c(modelRoot);
      testR204Inst.relateAcrossR204To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R110
      ReferredToIdentifierAttribute_c testR110Inst2 = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(testInst);
      assertNull ( testR110Inst2 );
      // Rel R204
      ClassAsSimpleParticipant_c testR204Inst2 = ClassAsSimpleParticipant_c.getOneR_PARTOnR204(testInst);
      assertNull ( testR204Inst2 );


      testInst.delete();
	    }
	    public void testReferredToClassinAssocDisposeClassAsAssociatedOneSide() throws Exception
	    {   
	            ReferredToClassInAssoc_c testInst = new ReferredToClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R110 - associative
      ReferredToIdentifierAttribute_c testR110Inst = new ReferredToIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testInst);
      ClassIdentifierAttribute_c testR110InstOth = new ClassIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testR110InstOth);
      // Rel R204 - supertype
      ClassAsAssociatedOneSide_c testR204Inst = new ClassAsAssociatedOneSide_c(modelRoot);
      testR204Inst.relateAcrossR204To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R110
      ReferredToIdentifierAttribute_c testR110Inst2 = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(testInst);
      assertNull ( testR110Inst2 );
      // Rel R204
      ClassAsAssociatedOneSide_c testR204Inst2 = ClassAsAssociatedOneSide_c.getOneR_AONEOnR204(testInst);
      assertNull ( testR204Inst2 );


      testInst.delete();
	    }
	    public void testReferredToClassinAssocDisposeClassAsAssociatedOtherSide() throws Exception
	    {   
	            ReferredToClassInAssoc_c testInst = new ReferredToClassInAssoc_c(modelRoot);
      // Participant rels
      // Rel R110 - associative
      ReferredToIdentifierAttribute_c testR110Inst = new ReferredToIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testInst);
      ClassIdentifierAttribute_c testR110InstOth = new ClassIdentifierAttribute_c(modelRoot);
      testR110Inst.relateAcrossR110To(testR110InstOth);
      // Rel R204 - supertype
      ClassAsAssociatedOtherSide_c testR204Inst = new ClassAsAssociatedOtherSide_c(modelRoot);
      testR204Inst.relateAcrossR204To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R110
      ReferredToIdentifierAttribute_c testR110Inst2 = ReferredToIdentifierAttribute_c.getOneO_RTIDAOnR110(testInst);
      assertNull ( testR110Inst2 );
      // Rel R204
      ClassAsAssociatedOtherSide_c testR204Inst2 = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR204(testInst);
      assertNull ( testR204Inst2 );


      testInst.delete();
	    }

   	    public void testLinkedAssociationDispose() throws Exception
	    {
    	      LinkedAssociation_c testInst = new LinkedAssociation_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testDerivedAssociationDispose() throws Exception
	    {
    	      DerivedAssociation_c testInst = new DerivedAssociation_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testClassInAssociationDisposeReferredToClassinAssoc() throws Exception
	    {   
	            ClassInAssociation_c testInst = new ClassInAssociation_c(modelRoot);
      // Participant rels
      // Rel R203 - supertype
      ReferredToClassInAssoc_c testR203Inst = new ReferredToClassInAssoc_c(modelRoot);
      testR203Inst.relateAcrossR203To(testInst);

      // Formalizer rels
      Association_c testR201InstOne = new Association_c(modelRoot);
      testR201InstOne.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201InstOth.relateAcrossR201To(testInst);

      testInst.Dispose();

      // 
      // Rel R203
      ReferredToClassInAssoc_c testR203Inst2 = ReferredToClassInAssoc_c.getOneR_RTOOnR203(testInst);
      assertNull ( testR203Inst2 );


      testInst.delete();
	    }
	    public void testClassInAssociationDisposeReferringClassInAssoc() throws Exception
	    {   
	            ClassInAssociation_c testInst = new ClassInAssociation_c(modelRoot);
      // Participant rels
      // Rel R203 - supertype
      ReferringClassInAssoc_c testR203Inst = new ReferringClassInAssoc_c(modelRoot);
      testR203Inst.relateAcrossR203To(testInst);

      // Formalizer rels
      Association_c testR201InstOne = new Association_c(modelRoot);
      testR201InstOne.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201InstOth.relateAcrossR201To(testInst);

      testInst.Dispose();

      // 
      // Rel R203
      ReferringClassInAssoc_c testR203Inst2 = ReferringClassInAssoc_c.getOneR_RGOOnR203(testInst);
      assertNull ( testR203Inst2 );


      testInst.delete();
	    }
	    public void testClassInAssociationDisposeClassAsDerivedOneSide() throws Exception
	    {   
	            ClassInAssociation_c testInst = new ClassInAssociation_c(modelRoot);
      // Participant rels
      // Rel R203 - supertype
      ClassAsDerivedOneSide_c testR203Inst = new ClassAsDerivedOneSide_c(modelRoot);
      testR203Inst.relateAcrossR203To(testInst);

      // Formalizer rels
      Association_c testR201InstOne = new Association_c(modelRoot);
      testR201InstOne.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201InstOth.relateAcrossR201To(testInst);

      testInst.Dispose();

      // 
      // Rel R203
      ClassAsDerivedOneSide_c testR203Inst2 = ClassAsDerivedOneSide_c.getOneR_CONEOnR203(testInst);
      assertNull ( testR203Inst2 );


      testInst.delete();
	    }
	    public void testClassInAssociationDisposeClassAsDerivedOtherSide() throws Exception
	    {   
	            ClassInAssociation_c testInst = new ClassInAssociation_c(modelRoot);
      // Participant rels
      // Rel R203 - supertype
      ClassAsDerivedOtherSide_c testR203Inst = new ClassAsDerivedOtherSide_c(modelRoot);
      testR203Inst.relateAcrossR203To(testInst);

      // Formalizer rels
      Association_c testR201InstOne = new Association_c(modelRoot);
      testR201InstOne.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201InstOth.relateAcrossR201To(testInst);

      testInst.Dispose();

      // 
      // Rel R203
      ClassAsDerivedOtherSide_c testR203Inst2 = ClassAsDerivedOtherSide_c.getOneR_COTHOnR203(testInst);
      assertNull ( testR203Inst2 );


      testInst.delete();
	    }

   	    public void testClassAsSupertypeDispose() throws Exception
	    {
    	      ClassAsSupertype_c testInst = new ClassAsSupertype_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R212
      SubtypeSupertypeAssociation_c testR212Inst = new SubtypeSupertypeAssociation_c(modelRoot);
      testR212Inst.relateAcrossR212To(testInst);

      testInst.Dispose();

      // 

      SubtypeSupertypeAssociation_c testR212Inst2 = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR212(testInst);
      assertNull ( testR212Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsSubtypeDispose() throws Exception
	    {
    	      ClassAsSubtype_c testInst = createClassAsSubtype_c(null);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testClassAsSimpleParticipantDispose() throws Exception
	    {
    	      ClassAsSimpleParticipant_c testInst = new ClassAsSimpleParticipant_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testClassAsSimpleFormalizerDispose() throws Exception
	    {
    	      ClassAsSimpleFormalizer_c testInst = new ClassAsSimpleFormalizer_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R208
      SimpleAssociation_c testR208Inst = new SimpleAssociation_c(modelRoot);
      testR208Inst.relateAcrossR208To(testInst);

      testInst.Dispose();

      // 

      SimpleAssociation_c testR208Inst2 = SimpleAssociation_c.getOneR_SIMPOnR208(testInst);
      assertNull ( testR208Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsLinkDispose() throws Exception
	    {
    	      ClassAsLink_c testInst = new ClassAsLink_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R211
      LinkedAssociation_c testR211Inst = createLinkedAssociation_c(testInst);
      testR211Inst.relateAcrossR211To(testInst);

      testInst.Dispose();

      // 

      LinkedAssociation_c testR211Inst2 = LinkedAssociation_c.getOneR_ASSOCOnR211(testInst);
      assertNull ( testR211Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsDerivedOtherSideDispose() throws Exception
	    {
    	      ClassAsDerivedOtherSide_c testInst = new ClassAsDerivedOtherSide_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R215
      DerivedAssociation_c testR215Inst = new DerivedAssociation_c(modelRoot);
      testR215Inst.relateAcrossR215To(testInst);

      testInst.Dispose();

      // 

      DerivedAssociation_c testR215Inst2 = DerivedAssociation_c.getOneR_COMPOnR215(testInst);
      assertNull ( testR215Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsDerivedOneSideDispose() throws Exception
	    {
    	      ClassAsDerivedOneSide_c testInst = new ClassAsDerivedOneSide_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R214
      DerivedAssociation_c testR214Inst = new DerivedAssociation_c(modelRoot);
      testR214Inst.relateAcrossR214To(testInst);

      testInst.Dispose();

      // 

      DerivedAssociation_c testR214Inst2 = DerivedAssociation_c.getOneR_COMPOnR214(testInst);
      assertNull ( testR214Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsAssociatedOtherSideDispose() throws Exception
	    {
    	      ClassAsAssociatedOtherSide_c testInst = new ClassAsAssociatedOtherSide_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R210
      LinkedAssociation_c testR210Inst = createLinkedAssociation_c(testInst);
      testR210Inst.relateAcrossR210To(testInst);

      testInst.Dispose();

      // 

      LinkedAssociation_c testR210Inst2 = LinkedAssociation_c.getOneR_ASSOCOnR210(testInst);
      assertNull ( testR210Inst2 );

      testInst.delete();
	    }

   	    public void testClassAsAssociatedOneSideDispose() throws Exception
	    {
    	      ClassAsAssociatedOneSide_c testInst = new ClassAsAssociatedOneSide_c(modelRoot);
      // Participant rels

      // Formalizer rels
      // Rel R209
      LinkedAssociation_c testR209Inst = createLinkedAssociation_c(testInst);
      testR209Inst.relateAcrossR209To(testInst);

      testInst.Dispose();

      // 

      LinkedAssociation_c testR209Inst2 = LinkedAssociation_c.getOneR_ASSOCOnR209(testInst);
      assertNull ( testR209Inst2 );

      testInst.delete();
	    }

   	    public void testAssociationDisposeSimpleAssociation() throws Exception
	    {   
	            Association_c testInst = new Association_c(modelRoot);
      // Participant rels
      // Rel R201 - associative
      ClassInAssociation_c testR201Inst = createClassInAssociation_c();
      testR201Inst.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201Inst.relateAcrossR201To(testR201InstOth);
      // Rel R681
      ChainLink_c testR681Inst = new ChainLink_c(modelRoot);
      testR681Inst.relateAcrossR681To(testInst);
      // Rel R656
      UnrelateUsing_c testR656Inst = new UnrelateUsing_c(modelRoot);
      testR656Inst.relateAcrossR656To(testInst);
      // Rel R655
      Unrelate_c testR655Inst = new Unrelate_c(modelRoot);
      testR655Inst.relateAcrossR655To(testInst);
      // Rel R654
      RelateUsing_c testR654Inst = new RelateUsing_c(modelRoot);
      testR654Inst.relateAcrossR654To(testInst);
      // Rel R653
      Relate_c testR653Inst = new Relate_c(modelRoot);
      testR653Inst.relateAcrossR653To(testInst);
      // Rel R2959
      LinkParticipation_c testR2959Inst = new LinkParticipation_c(modelRoot);
      testR2959Inst.relateAcrossR2959To(testInst);
      // Rel R2904
      Link_c testR2904Inst = new Link_c(modelRoot);
      testR2904Inst.relateAcrossR2904To(testInst);
      // Rel R1128
      CommunicationLink_c testR1128Inst = new CommunicationLink_c(modelRoot);
      testR1128Inst.relateAcrossR1128To(testInst);
      // Rel R206 - supertype
      SimpleAssociation_c testR206Inst = new SimpleAssociation_c(modelRoot);
      testR206Inst.relateAcrossR206To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R201
      ClassInAssociation_c testR201Inst2 = ClassInAssociation_c.getOneR_OIROnR201(testInst);
      assertNull ( testR201Inst2 );
      // Rel R681
      ChainLink_c testR681Inst2 = ChainLink_c.getOneACT_LNKOnR681(testInst);
      assertNull ( testR681Inst2 );
      // Rel R656
      UnrelateUsing_c testR656Inst2 = UnrelateUsing_c.getOneACT_URUOnR656(testInst);
      assertNull ( testR656Inst2 );
      // Rel R655
      Unrelate_c testR655Inst2 = Unrelate_c.getOneACT_UNROnR655(testInst);
      assertNull ( testR655Inst2 );
      // Rel R654
      RelateUsing_c testR654Inst2 = RelateUsing_c.getOneACT_RUOnR654(testInst);
      assertNull ( testR654Inst2 );
      // Rel R653
      Relate_c testR653Inst2 = Relate_c.getOneACT_RELOnR653(testInst);
      assertNull ( testR653Inst2 );
      // Rel R2959
      LinkParticipation_c testR2959Inst2 = LinkParticipation_c.getOneI_LIPOnR2959(testInst);
      assertNull ( testR2959Inst2 );
      // Rel R2904
      Link_c testR2904Inst2 = Link_c.getOneI_LNKOnR2904(testInst);
      assertNull ( testR2904Inst2 );
      // Rel R1128
      CommunicationLink_c testR1128Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1128(testInst);
      assertNull ( testR1128Inst2 );
      // Rel R206
      SimpleAssociation_c testR206Inst2 = SimpleAssociation_c.getOneR_SIMPOnR206(testInst);
      assertNull ( testR206Inst2 );


      testInst.delete();
	    }
	    public void testAssociationDisposeDerivedAssociation() throws Exception
	    {   
	            Association_c testInst = new Association_c(modelRoot);
      // Participant rels
      // Rel R201 - associative
      ClassInAssociation_c testR201Inst = createClassInAssociation_c();
      testR201Inst.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201Inst.relateAcrossR201To(testR201InstOth);
      // Rel R681
      ChainLink_c testR681Inst = new ChainLink_c(modelRoot);
      testR681Inst.relateAcrossR681To(testInst);
      // Rel R656
      UnrelateUsing_c testR656Inst = new UnrelateUsing_c(modelRoot);
      testR656Inst.relateAcrossR656To(testInst);
      // Rel R655
      Unrelate_c testR655Inst = new Unrelate_c(modelRoot);
      testR655Inst.relateAcrossR655To(testInst);
      // Rel R654
      RelateUsing_c testR654Inst = new RelateUsing_c(modelRoot);
      testR654Inst.relateAcrossR654To(testInst);
      // Rel R653
      Relate_c testR653Inst = new Relate_c(modelRoot);
      testR653Inst.relateAcrossR653To(testInst);
      // Rel R2959
      LinkParticipation_c testR2959Inst = new LinkParticipation_c(modelRoot);
      testR2959Inst.relateAcrossR2959To(testInst);
      // Rel R2904
      Link_c testR2904Inst = new Link_c(modelRoot);
      testR2904Inst.relateAcrossR2904To(testInst);
      // Rel R1128
      CommunicationLink_c testR1128Inst = new CommunicationLink_c(modelRoot);
      testR1128Inst.relateAcrossR1128To(testInst);
      // Rel R206 - supertype
      DerivedAssociation_c testR206Inst = new DerivedAssociation_c(modelRoot);
      testR206Inst.relateAcrossR206To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R201
      ClassInAssociation_c testR201Inst2 = ClassInAssociation_c.getOneR_OIROnR201(testInst);
      assertNull ( testR201Inst2 );
      // Rel R681
      ChainLink_c testR681Inst2 = ChainLink_c.getOneACT_LNKOnR681(testInst);
      assertNull ( testR681Inst2 );
      // Rel R656
      UnrelateUsing_c testR656Inst2 = UnrelateUsing_c.getOneACT_URUOnR656(testInst);
      assertNull ( testR656Inst2 );
      // Rel R655
      Unrelate_c testR655Inst2 = Unrelate_c.getOneACT_UNROnR655(testInst);
      assertNull ( testR655Inst2 );
      // Rel R654
      RelateUsing_c testR654Inst2 = RelateUsing_c.getOneACT_RUOnR654(testInst);
      assertNull ( testR654Inst2 );
      // Rel R653
      Relate_c testR653Inst2 = Relate_c.getOneACT_RELOnR653(testInst);
      assertNull ( testR653Inst2 );
      // Rel R2959
      LinkParticipation_c testR2959Inst2 = LinkParticipation_c.getOneI_LIPOnR2959(testInst);
      assertNull ( testR2959Inst2 );
      // Rel R2904
      Link_c testR2904Inst2 = Link_c.getOneI_LNKOnR2904(testInst);
      assertNull ( testR2904Inst2 );
      // Rel R1128
      CommunicationLink_c testR1128Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1128(testInst);
      assertNull ( testR1128Inst2 );
      // Rel R206
      DerivedAssociation_c testR206Inst2 = DerivedAssociation_c.getOneR_COMPOnR206(testInst);
      assertNull ( testR206Inst2 );


      testInst.delete();
	    }
	    public void testAssociationDisposeLinkedAssociation() throws Exception
	    {   
	            Association_c testInst = new Association_c(modelRoot);
      // Participant rels
      // Rel R201 - associative
      ClassInAssociation_c testR201Inst = createClassInAssociation_c();
      testR201Inst.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201Inst.relateAcrossR201To(testR201InstOth);
      // Rel R681
      ChainLink_c testR681Inst = new ChainLink_c(modelRoot);
      testR681Inst.relateAcrossR681To(testInst);
      // Rel R656
      UnrelateUsing_c testR656Inst = new UnrelateUsing_c(modelRoot);
      testR656Inst.relateAcrossR656To(testInst);
      // Rel R655
      Unrelate_c testR655Inst = new Unrelate_c(modelRoot);
      testR655Inst.relateAcrossR655To(testInst);
      // Rel R654
      RelateUsing_c testR654Inst = new RelateUsing_c(modelRoot);
      testR654Inst.relateAcrossR654To(testInst);
      // Rel R653
      Relate_c testR653Inst = new Relate_c(modelRoot);
      testR653Inst.relateAcrossR653To(testInst);
      // Rel R2959
      LinkParticipation_c testR2959Inst = new LinkParticipation_c(modelRoot);
      testR2959Inst.relateAcrossR2959To(testInst);
      // Rel R2904
      Link_c testR2904Inst = new Link_c(modelRoot);
      testR2904Inst.relateAcrossR2904To(testInst);
      // Rel R1128
      CommunicationLink_c testR1128Inst = new CommunicationLink_c(modelRoot);
      testR1128Inst.relateAcrossR1128To(testInst);
      // Rel R206 - supertype
      LinkedAssociation_c testR206Inst = new LinkedAssociation_c(modelRoot);
      testR206Inst.relateAcrossR206To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R201
      ClassInAssociation_c testR201Inst2 = ClassInAssociation_c.getOneR_OIROnR201(testInst);
      assertNull ( testR201Inst2 );
      // Rel R681
      ChainLink_c testR681Inst2 = ChainLink_c.getOneACT_LNKOnR681(testInst);
      assertNull ( testR681Inst2 );
      // Rel R656
      UnrelateUsing_c testR656Inst2 = UnrelateUsing_c.getOneACT_URUOnR656(testInst);
      assertNull ( testR656Inst2 );
      // Rel R655
      Unrelate_c testR655Inst2 = Unrelate_c.getOneACT_UNROnR655(testInst);
      assertNull ( testR655Inst2 );
      // Rel R654
      RelateUsing_c testR654Inst2 = RelateUsing_c.getOneACT_RUOnR654(testInst);
      assertNull ( testR654Inst2 );
      // Rel R653
      Relate_c testR653Inst2 = Relate_c.getOneACT_RELOnR653(testInst);
      assertNull ( testR653Inst2 );
      // Rel R2959
      LinkParticipation_c testR2959Inst2 = LinkParticipation_c.getOneI_LIPOnR2959(testInst);
      assertNull ( testR2959Inst2 );
      // Rel R2904
      Link_c testR2904Inst2 = Link_c.getOneI_LNKOnR2904(testInst);
      assertNull ( testR2904Inst2 );
      // Rel R1128
      CommunicationLink_c testR1128Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1128(testInst);
      assertNull ( testR1128Inst2 );
      // Rel R206
      LinkedAssociation_c testR206Inst2 = LinkedAssociation_c.getOneR_ASSOCOnR206(testInst);
      assertNull ( testR206Inst2 );


      testInst.delete();
	    }
	    public void testAssociationDisposeSubtypeSupertypeAssociation() throws Exception
	    {   
	            Association_c testInst = new Association_c(modelRoot);
      // Participant rels
      // Rel R201 - associative
      ClassInAssociation_c testR201Inst = createClassInAssociation_c();
      testR201Inst.relateAcrossR201To(testInst);
      ModelClass_c testR201InstOth = new ModelClass_c(modelRoot);
      testR201Inst.relateAcrossR201To(testR201InstOth);
      // Rel R681
      ChainLink_c testR681Inst = new ChainLink_c(modelRoot);
      testR681Inst.relateAcrossR681To(testInst);
      // Rel R656
      UnrelateUsing_c testR656Inst = new UnrelateUsing_c(modelRoot);
      testR656Inst.relateAcrossR656To(testInst);
      // Rel R655
      Unrelate_c testR655Inst = new Unrelate_c(modelRoot);
      testR655Inst.relateAcrossR655To(testInst);
      // Rel R654
      RelateUsing_c testR654Inst = new RelateUsing_c(modelRoot);
      testR654Inst.relateAcrossR654To(testInst);
      // Rel R653
      Relate_c testR653Inst = new Relate_c(modelRoot);
      testR653Inst.relateAcrossR653To(testInst);
      // Rel R2959
      LinkParticipation_c testR2959Inst = new LinkParticipation_c(modelRoot);
      testR2959Inst.relateAcrossR2959To(testInst);
      // Rel R2904
      Link_c testR2904Inst = new Link_c(modelRoot);
      testR2904Inst.relateAcrossR2904To(testInst);
      // Rel R1128
      CommunicationLink_c testR1128Inst = new CommunicationLink_c(modelRoot);
      testR1128Inst.relateAcrossR1128To(testInst);
      // Rel R206 - supertype
      SubtypeSupertypeAssociation_c testR206Inst = new SubtypeSupertypeAssociation_c(modelRoot);
      testR206Inst.relateAcrossR206To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R201
      ClassInAssociation_c testR201Inst2 = ClassInAssociation_c.getOneR_OIROnR201(testInst);
      assertNull ( testR201Inst2 );
      // Rel R681
      ChainLink_c testR681Inst2 = ChainLink_c.getOneACT_LNKOnR681(testInst);
      assertNull ( testR681Inst2 );
      // Rel R656
      UnrelateUsing_c testR656Inst2 = UnrelateUsing_c.getOneACT_URUOnR656(testInst);
      assertNull ( testR656Inst2 );
      // Rel R655
      Unrelate_c testR655Inst2 = Unrelate_c.getOneACT_UNROnR655(testInst);
      assertNull ( testR655Inst2 );
      // Rel R654
      RelateUsing_c testR654Inst2 = RelateUsing_c.getOneACT_RUOnR654(testInst);
      assertNull ( testR654Inst2 );
      // Rel R653
      Relate_c testR653Inst2 = Relate_c.getOneACT_RELOnR653(testInst);
      assertNull ( testR653Inst2 );
      // Rel R2959
      LinkParticipation_c testR2959Inst2 = LinkParticipation_c.getOneI_LIPOnR2959(testInst);
      assertNull ( testR2959Inst2 );
      // Rel R2904
      Link_c testR2904Inst2 = Link_c.getOneI_LNKOnR2904(testInst);
      assertNull ( testR2904Inst2 );
      // Rel R1128
      CommunicationLink_c testR1128Inst2 = CommunicationLink_c.getOneCOMM_LNKOnR1128(testInst);
      assertNull ( testR1128Inst2 );
      // Rel R206
      SubtypeSupertypeAssociation_c testR206Inst2 = SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206(testInst);
      assertNull ( testR206Inst2 );


      testInst.delete();
	    }

   	    public void testSendSignalDispose() throws Exception
	    {
    	      SendSignal_c testInst = new SendSignal_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testObjectNodeDispose() throws Exception
	    {
    	      ObjectNode_c testInst = new ObjectNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testInitialNodeDispose() throws Exception
	    {
    	      InitialNode_c testInst = new InitialNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testForkJoinNodeDispose() throws Exception
	    {
    	      ForkJoinNode_c testInst = new ForkJoinNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testFlowFinalNodeDispose() throws Exception
	    {
    	      FlowFinalNode_c testInst = new FlowFinalNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testDecisionMergeNodeDispose() throws Exception
	    {
    	      DecisionMergeNode_c testInst = new DecisionMergeNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testControlNodeDisposeFlowFinalNode() throws Exception
	    {   
	            ControlNode_c testInst = new ControlNode_c(modelRoot);
      // Participant rels
      // Rel R1106 - supertype
      FlowFinalNode_c testR1106Inst = new FlowFinalNode_c(modelRoot);
      testR1106Inst.relateAcrossR1106To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1106
      FlowFinalNode_c testR1106Inst2 = FlowFinalNode_c.getOneA_FFOnR1106(testInst);
      assertNull ( testR1106Inst2 );


      testInst.delete();
	    }
	    public void testControlNodeDisposeActivityFinalNode() throws Exception
	    {   
	            ControlNode_c testInst = new ControlNode_c(modelRoot);
      // Participant rels
      // Rel R1106 - supertype
      ActivityFinalNode_c testR1106Inst = new ActivityFinalNode_c(modelRoot);
      testR1106Inst.relateAcrossR1106To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1106
      ActivityFinalNode_c testR1106Inst2 = ActivityFinalNode_c.getOneA_AFOnR1106(testInst);
      assertNull ( testR1106Inst2 );


      testInst.delete();
	    }
	    public void testControlNodeDisposeInitialNode() throws Exception
	    {   
	            ControlNode_c testInst = new ControlNode_c(modelRoot);
      // Participant rels
      // Rel R1106 - supertype
      InitialNode_c testR1106Inst = new InitialNode_c(modelRoot);
      testR1106Inst.relateAcrossR1106To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1106
      InitialNode_c testR1106Inst2 = InitialNode_c.getOneA_INIOnR1106(testInst);
      assertNull ( testR1106Inst2 );


      testInst.delete();
	    }
	    public void testControlNodeDisposeDecisionMergeNode() throws Exception
	    {   
	            ControlNode_c testInst = new ControlNode_c(modelRoot);
      // Participant rels
      // Rel R1106 - supertype
      DecisionMergeNode_c testR1106Inst = new DecisionMergeNode_c(modelRoot);
      testR1106Inst.relateAcrossR1106To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1106
      DecisionMergeNode_c testR1106Inst2 = DecisionMergeNode_c.getOneA_DMOnR1106(testInst);
      assertNull ( testR1106Inst2 );


      testInst.delete();
	    }
	    public void testControlNodeDisposeForkJoinNode() throws Exception
	    {   
	            ControlNode_c testInst = new ControlNode_c(modelRoot);
      // Participant rels
      // Rel R1106 - supertype
      ForkJoinNode_c testR1106Inst = new ForkJoinNode_c(modelRoot);
      testR1106Inst.relateAcrossR1106To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1106
      ForkJoinNode_c testR1106Inst2 = ForkJoinNode_c.getOneA_FJOnR1106(testInst);
      assertNull ( testR1106Inst2 );


      testInst.delete();
	    }

   	    public void testActivityPartitionDispose() throws Exception
	    {
    	      ActivityPartition_c testInst = new ActivityPartition_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testActivityNodeDisposeActionNode() throws Exception
	    {   
	            ActivityNode_c testInst = new ActivityNode_c(modelRoot);
      // Participant rels
      // Rel R1103
      ActivityEdge_c testR1103Inst = new ActivityEdge_c(modelRoot);
      testR1103Inst.relateAcrossR1103To(testInst);
      // Rel R1104
      ActivityEdge_c testR1104Inst = new ActivityEdge_c(modelRoot);
      testR1104Inst.relateAcrossR1104To(testInst);
      // Rel R1105 - supertype
      ActionNode_c testR1105Inst = new ActionNode_c(modelRoot);
      testR1105Inst.relateAcrossR1105To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1103
      ActivityEdge_c testR1103Inst2 = ActivityEdge_c.getOneA_EOnR1103(testInst);
      assertNull ( testR1103Inst2 );
      // Rel R1104
      ActivityEdge_c testR1104Inst2 = ActivityEdge_c.getOneA_EOnR1104(testInst);
      assertNull ( testR1104Inst2 );
      // Rel R1105
      ActionNode_c testR1105Inst2 = ActionNode_c.getOneA_ACTOnR1105(testInst);
      assertNull ( testR1105Inst2 );


      testInst.delete();
	    }
	    public void testActivityNodeDisposeObjectNode() throws Exception
	    {   
	            ActivityNode_c testInst = new ActivityNode_c(modelRoot);
      // Participant rels
      // Rel R1103
      ActivityEdge_c testR1103Inst = new ActivityEdge_c(modelRoot);
      testR1103Inst.relateAcrossR1103To(testInst);
      // Rel R1104
      ActivityEdge_c testR1104Inst = new ActivityEdge_c(modelRoot);
      testR1104Inst.relateAcrossR1104To(testInst);
      // Rel R1105 - supertype
      ObjectNode_c testR1105Inst = new ObjectNode_c(modelRoot);
      testR1105Inst.relateAcrossR1105To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1103
      ActivityEdge_c testR1103Inst2 = ActivityEdge_c.getOneA_EOnR1103(testInst);
      assertNull ( testR1103Inst2 );
      // Rel R1104
      ActivityEdge_c testR1104Inst2 = ActivityEdge_c.getOneA_EOnR1104(testInst);
      assertNull ( testR1104Inst2 );
      // Rel R1105
      ObjectNode_c testR1105Inst2 = ObjectNode_c.getOneA_OBJOnR1105(testInst);
      assertNull ( testR1105Inst2 );


      testInst.delete();
	    }
	    public void testActivityNodeDisposeControlNode() throws Exception
	    {   
	            ActivityNode_c testInst = new ActivityNode_c(modelRoot);
      // Participant rels
      // Rel R1103
      ActivityEdge_c testR1103Inst = new ActivityEdge_c(modelRoot);
      testR1103Inst.relateAcrossR1103To(testInst);
      // Rel R1104
      ActivityEdge_c testR1104Inst = new ActivityEdge_c(modelRoot);
      testR1104Inst.relateAcrossR1104To(testInst);
      // Rel R1105 - supertype
      ControlNode_c testR1105Inst = new ControlNode_c(modelRoot);
      testR1105Inst.relateAcrossR1105To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1103
      ActivityEdge_c testR1103Inst2 = ActivityEdge_c.getOneA_EOnR1103(testInst);
      assertNull ( testR1103Inst2 );
      // Rel R1104
      ActivityEdge_c testR1104Inst2 = ActivityEdge_c.getOneA_EOnR1104(testInst);
      assertNull ( testR1104Inst2 );
      // Rel R1105
      ControlNode_c testR1105Inst2 = ControlNode_c.getOneA_CTLOnR1105(testInst);
      assertNull ( testR1105Inst2 );


      testInst.delete();
	    }

   	    public void testActivityFinalNodeDispose() throws Exception
	    {
    	      ActivityFinalNode_c testInst = new ActivityFinalNode_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testActivityEdgeDispose() throws Exception
	    {
    	      ActivityEdge_c testInst = new ActivityEdge_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testActivityDiagramActionDispose() throws Exception
	    {
    	      ActivityDiagramAction_c testInst = new ActivityDiagramAction_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   
   	    public void testActionNodeDisposeAcceptEvent() throws Exception
	    {   
	            ActionNode_c testInst = new ActionNode_c(modelRoot);
      // Participant rels
      // Rel R1107 - supertype
      AcceptEvent_c testR1107Inst = new AcceptEvent_c(modelRoot);
      testR1107Inst.relateAcrossR1107To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1107
      AcceptEvent_c testR1107Inst2 = AcceptEvent_c.getOneA_AEOnR1107(testInst);
      assertNull ( testR1107Inst2 );


      testInst.delete();
	    }
	    public void testActionNodeDisposeActivityDiagramAction() throws Exception
	    {   
	            ActionNode_c testInst = new ActionNode_c(modelRoot);
      // Participant rels
      // Rel R1107 - supertype
      ActivityDiagramAction_c testR1107Inst = new ActivityDiagramAction_c(modelRoot);
      testR1107Inst.relateAcrossR1107To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1107
      ActivityDiagramAction_c testR1107Inst2 = ActivityDiagramAction_c.getOneA_GAOnR1107(testInst);
      assertNull ( testR1107Inst2 );


      testInst.delete();
	    }
	    public void testActionNodeDisposeSendSignal() throws Exception
	    {   
	            ActionNode_c testInst = new ActionNode_c(modelRoot);
      // Participant rels
      // Rel R1107 - supertype
      SendSignal_c testR1107Inst = new SendSignal_c(modelRoot);
      testR1107Inst.relateAcrossR1107To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1107
      SendSignal_c testR1107Inst2 = SendSignal_c.getOneA_SSOnR1107(testInst);
      assertNull ( testR1107Inst2 );


      testInst.delete();
	    }

   	    public void testAcceptTimeEventActionDispose() throws Exception
	    {
    	      AcceptTimeEventAction_c testInst = new AcceptTimeEventAction_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testAcceptEventActionDispose() throws Exception
	    {
    	      AcceptEventAction_c testInst = new AcceptEventAction_c(modelRoot);
      // Participant rels

      // Formalizer rels

      testInst.Dispose();

      // 


      testInst.delete();
	    }

   	    public void testAcceptEventDisposeAcceptTimeEventAction() throws Exception
	    {   
	            AcceptEvent_c testInst = new AcceptEvent_c(modelRoot);
      // Participant rels
      // Rel R1112 - supertype
      AcceptTimeEventAction_c testR1112Inst = new AcceptTimeEventAction_c(modelRoot);
      testR1112Inst.relateAcrossR1112To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1112
      AcceptTimeEventAction_c testR1112Inst2 = AcceptTimeEventAction_c.getOneA_ATEOnR1112(testInst);
      assertNull ( testR1112Inst2 );


      testInst.delete();
	    }
	    public void testAcceptEventDisposeAcceptEventAction() throws Exception
	    {   
	            AcceptEvent_c testInst = new AcceptEvent_c(modelRoot);
      // Participant rels
      // Rel R1112 - supertype
      AcceptEventAction_c testR1112Inst = new AcceptEventAction_c(modelRoot);
      testR1112Inst.relateAcrossR1112To(testInst);

      // Formalizer rels

      testInst.Dispose();

      // 
      // Rel R1112
      AcceptEventAction_c testR1112Inst2 = AcceptEventAction_c.getOneA_AEAOnR1112(testInst);
      assertNull ( testR1112Inst2 );


      testInst.delete();
	    }

    ClassAsSubtype_c createClassAsSubtype_c(ReferringClassInAssoc_c rcia) {
		ClassAsSubtype_c subtype = new ClassAsSubtype_c(modelRoot);
		ModelClass_c subtypeClass = new ModelClass_c(modelRoot);
		Association_c assoc = new Association_c(modelRoot);
		if (rcia == null)
			rcia = new ReferringClassInAssoc_c(modelRoot);
		ClassInAssociation_c cia = new ClassInAssociation_c(modelRoot);
		subtype.relateAcrossR205To(rcia);
		rcia.relateAcrossR203To(cia);
		cia.relateAcrossR201To(subtypeClass);
		ClassAsSupertype_c superType = new ClassAsSupertype_c(modelRoot);
		SubtypeSupertypeAssociation_c subsup = new SubtypeSupertypeAssociation_c(
				modelRoot);
		superType.relateAcrossR212To(subsup);
		subsup.relateAcrossR206To(assoc);
		subsup.relateAcrossR213To(subtype);
		ReferredToClassInAssoc_c rtcia = new ReferredToClassInAssoc_c(modelRoot);
		ClassInAssociation_c superCIA = new ClassInAssociation_c(modelRoot);
		ModelClass_c supertypeClass = new ModelClass_c(modelRoot);
		supertypeClass.relateAcrossR201To(superCIA);
		rtcia.relateAcrossR203To(superCIA);
		superType.relateAcrossR204To(rtcia);
		return subtype;
    }
    
    private DataType_c createDataType_c()
    {
        DataType_c retval = new DataType_c(modelRoot);
        EnumerationDataType_c edt = new EnumerationDataType_c(modelRoot);
        retval.relateAcrossR17To(edt);
        return retval;
    }



    private Attribute_c createAttribute_c()
    {
        Attribute_c retval = new Attribute_c(modelRoot);
        BaseAttribute_c battr = new BaseAttribute_c(modelRoot);
        retval.relateAcrossR106To(battr);
        NewBaseAttribute_c nbattr = new NewBaseAttribute_c(modelRoot);
        battr.relateAcrossR107To(nbattr);
        return retval;
    }
    private AttributeReferenceInClass_c createAttributeReferenceInClass_c()
    {
        AttributeReferenceInClass_c retval = new AttributeReferenceInClass_c(modelRoot);
        ReferringClassInAssoc_c rgo = new ReferringClassInAssoc_c(modelRoot);
        rgo.relateAcrossR111To(retval);
        ReferredToIdentifierAttribute_c rto = new ReferredToIdentifierAttribute_c(modelRoot);
        rto.relateAcrossR111To(retval);
        return retval;
    }
    private ClassInAssociation_c createClassInAssociation_c()
    {
        ClassInAssociation_c retval = new ClassInAssociation_c(modelRoot);
        ReferredToClassInAssoc_c rto = new ReferredToClassInAssoc_c(modelRoot);
        rto.relateAcrossR203To(retval);
        ClassAsSimpleParticipant_c part = new ClassAsSimpleParticipant_c(modelRoot);
        rto.relateAcrossR204To(part);
        return retval;
    }
    private LinkedAssociation_c createLinkedAssociation_c(Object inst)
    {
        LinkedAssociation_c retval = new LinkedAssociation_c(modelRoot);
        Association_c rel = new Association_c(modelRoot);
        retval.relateAcrossR206To(rel);
        if ( inst instanceof ClassAsAssociatedOneSide_c )
        {
            ClassAsAssociatedOtherSide_c oth = new ClassAsAssociatedOtherSide_c(modelRoot);
            retval.relateAcrossR210To(oth);
            ClassAsLink_c link = new ClassAsLink_c(modelRoot);
            retval.relateAcrossR211To(link);
        }
        else if ( inst instanceof ClassAsAssociatedOtherSide_c )
        {
            ClassAsAssociatedOneSide_c one = new ClassAsAssociatedOneSide_c(modelRoot);
            retval.relateAcrossR209To(one);
            ClassAsLink_c link = new ClassAsLink_c(modelRoot);
            retval.relateAcrossR211To(link);
        }
        else if ( inst instanceof ClassAsLink_c )
        {
            ReferringClassInAssoc_c rgo = new ReferringClassInAssoc_c(modelRoot);
            ((ClassAsLink_c)inst).relateAcrossR205To(rgo);
            ClassInAssociation_c oir = new ClassInAssociation_c(modelRoot);
            rgo.relateAcrossR203To(oir);
            ModelClass_c mc = new ModelClass_c(modelRoot);
            oir.relateAcrossR201To(mc);
            oir.relateAcrossR201To(rel);

            ClassAsAssociatedOneSide_c one = new ClassAsAssociatedOneSide_c(modelRoot);
            retval.relateAcrossR209To(one);
            ReferredToClassInAssoc_c rto1  = new ReferredToClassInAssoc_c(modelRoot);
            one.relateAcrossR204To(rto1);
            ClassInAssociation_c oir1 = new ClassInAssociation_c(modelRoot);
            rto1.relateAcrossR203To(oir1);
            ModelClass_c mc1 = new ModelClass_c(modelRoot);
            oir1.relateAcrossR201To(mc1);
            oir1.relateAcrossR201To(rel);

            ClassAsAssociatedOtherSide_c oth = new ClassAsAssociatedOtherSide_c(modelRoot);
            retval.relateAcrossR210To(oth);
            ReferredToClassInAssoc_c rto2  = new ReferredToClassInAssoc_c(modelRoot);
            oth.relateAcrossR204To(rto2);
            ClassInAssociation_c oir2 = new ClassInAssociation_c(modelRoot);
            rto2.relateAcrossR203To(oir2);
            ModelClass_c mc2 = new ModelClass_c(modelRoot);
            oir2.relateAcrossR201To(mc2);
            oir2.relateAcrossR201To(rel);
        }
        return retval;
    }
    private NewStateTransition_c createNewStateTransition_c()
    {
        NewStateTransition_c retval = new NewStateTransition_c(modelRoot);
        Transition_c t = new Transition_c(modelRoot);
        retval.relateAcrossR507To(t);
        StateEventMatrixEntry_c seme = new StateEventMatrixEntry_c(modelRoot);
        retval.relateAcrossR504To(seme);
        return retval;
    }
    private NoEventTransition_c createNoEventTransition_c()
    {
        NoEventTransition_c retval = new NoEventTransition_c(modelRoot);
        Transition_c t = new Transition_c(modelRoot);
        retval.relateAcrossR507To(t);
        return retval;
    }
    private MooreActionHome_c createMooreActionHome_c()
    {
        MooreActionHome_c retval = new MooreActionHome_c(modelRoot);

        Action_c a = new Action_c(modelRoot);
        ActionHome_c ah = new ActionHome_c(modelRoot);
        a.relateAcrossR514To(ah);
        ah.relateAcrossR513To(retval);
        return retval;
    }
    private Action_c createAction_c(StateMachine_c sm, StateMachineState_c st)
    {
        Action_c retval = new Action_c(modelRoot);
		ActionHome_c ah = new ActionHome_c(modelRoot);
        retval.relateAcrossR514To(ah);
        MooreStateMachine_c msm = MooreStateMachine_c.getOneSM_MOOREOnR510(sm);
        if(msm == null)
        	msm = new MooreStateMachine_c(modelRoot);
        if ( msm != null )
        {
            MooreActionHome_c moah = new MooreActionHome_c(modelRoot);
            ah.relateAcrossR513To(moah);
            moah.relateAcrossR511To(msm);
            moah.relateAcrossR511To(st);
        }
        return retval;
    }
    private OperationValue_c createOperationValue_c()
    {
        OperationValue_c retval = new OperationValue_c(modelRoot);
        Value_c v = new Value_c(modelRoot);
        v.relateAcrossR801To(retval);
        return retval;
    }
    private SmToEeAccessPath_c createSmToEeAccessPath_c()
    {
        SmToEeAccessPath_c retval = new SmToEeAccessPath_c(modelRoot);
        AccessPath_c ap = new AccessPath_c(modelRoot);
        ap.relateAcrossR415To(retval);
        return retval;
    }
    private SmToObjAccessPath_c createSmToObjAccessPath_c()
    {
        SmToObjAccessPath_c retval = new SmToObjAccessPath_c(modelRoot);
        AccessPath_c ap = new AccessPath_c(modelRoot);
        ap.relateAcrossR415To(retval);
        return retval;
    }
    private SmToObjAttributeAccess_c createSmToObjAttributeAccess_c()
    {
        SmToObjAttributeAccess_c retval = new SmToObjAttributeAccess_c(modelRoot);
        SmToObjAccessPath_c soap = new SmToObjAccessPath_c(modelRoot);
        soap.relateAcrossR418To(retval);
        AccessPath_c ap = new AccessPath_c(modelRoot);
        ap.relateAcrossR415To(soap);
        return retval;
    }
    private SmToEeDataItemAccess_c createSmToEeDataItemAccess_c()
    {
        SmToEeDataItemAccess_c retval = new SmToEeDataItemAccess_c(modelRoot);
        SmToEeAccessPath_c seap = new SmToEeAccessPath_c(modelRoot);
        seap.relateAcrossR422To(retval);
        AccessPath_c ap = new AccessPath_c(modelRoot);
        ap.relateAcrossR415To(seap);
        return retval;
    }
    private EeToSmCommPath_c createEeToSmCommPath_c()
    {
        EeToSmCommPath_c retval = new EeToSmCommPath_c(modelRoot);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(retval);
        return retval;
    }
    private SmToEeCommPath_c createSmToEeCommPath_c()
    {
        SmToEeCommPath_c retval = new SmToEeCommPath_c(modelRoot);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(retval);
        return retval;
    }
    private SmToSmCommPath_c createSmToSmCommPath_c()
    {
        SmToSmCommPath_c retval = new SmToSmCommPath_c(modelRoot);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(retval);
        return retval;
    }
    private SmToEeEventComm_c createSmToEeEventComm_c()
    {
        SmToEeEventComm_c retval = new SmToEeEventComm_c(modelRoot);
        SmToEeCommPath_c smeecp = new SmToEeCommPath_c(modelRoot);
        smeecp.relateAcrossR412To(retval);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(smeecp);
        return retval;
    }
    private SmToSmEventComm_c createSmToSmEventComm_c()
    {
        SmToSmEventComm_c retval = new SmToSmEventComm_c(modelRoot);
        SmToSmCommPath_c smsmcp = new SmToSmCommPath_c(modelRoot);
        smsmcp.relateAcrossR408To(retval);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(smsmcp);
        return retval;
    }
    private EeToSmEventComm_c createEeToSmEventComm_c()
    {
        EeToSmEventComm_c retval = new EeToSmEventComm_c(modelRoot);
        EeToSmCommPath_c eesmcp = new EeToSmCommPath_c(modelRoot);
        eesmcp.relateAcrossR404To(retval);
        CommunicationPath_c cp = new CommunicationPath_c(modelRoot);
        cp.relateAcrossR401To(eesmcp);
        return retval;
    }
	private AttributeValueReference_c createAttributeValueReference_c() {
		AttributeValueReference_c retval = new AttributeValueReference_c(
				modelRoot);
		Value_c v = new Value_c(modelRoot);
		v.relateAcrossR801To(retval);
		Attribute_c a = new Attribute_c(modelRoot);
		v.relateAcrossR801To(retval);
		return retval;
	}
	private InstanceReferenceDataType_c createInstanceReferenceDataType_c() {
		InstanceReferenceDataType_c retval = new InstanceReferenceDataType_c(
				modelRoot);
		DataType_c dt = new DataType_c(modelRoot);
		dt.relateAcrossR17To(retval);
		return retval;
    }
}
