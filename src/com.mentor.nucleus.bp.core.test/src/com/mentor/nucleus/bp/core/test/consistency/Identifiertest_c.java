package com.mentor.nucleus.bp.core.test.consistency;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.test.consistency.Identifiertest_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.test.CoreTestPlugin;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_IDENTIFIERTEST extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Identifiertest_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Identifiertest_c(ModelRoot modelRoot, int p_m_primaryid,
			int p_m_secondaryid, int p_m_tertiaryid) {
		super(modelRoot);
		m_primaryid = p_m_primaryid;
		m_secondaryid = p_m_secondaryid;
		m_tertiaryid = p_m_tertiaryid;

		Object[] key = {new UUID(0, new Long(m_primaryid))};
		addInstanceToMap(key);
	}
	static public Identifiertest_c createProxy(ModelRoot modelRoot,
			int p_m_primaryid, int p_m_secondaryid, int p_m_tertiaryid,
			String p_contentPath, IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Identifiertest_c.class);
		Identifiertest_c new_inst = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_primaryid))};
			new_inst = (Identifiertest_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_primaryid = p_m_primaryid;
				new_inst.m_secondaryid = p_m_secondaryid;
				new_inst.m_tertiaryid = p_m_tertiaryid;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Identifiertest_c(modelRoot, p_m_primaryid,
					p_m_secondaryid, p_m_tertiaryid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Identifiertest_c resolveInstance(ModelRoot modelRoot,
			int p_m_primaryid, int p_m_secondaryid, int p_m_tertiaryid) {
		InstanceList instances = modelRoot
				.getInstanceList(Identifiertest_c.class);
		Identifiertest_c source = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_primaryid))};
			source = (Identifiertest_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_primaryid = p_m_primaryid;
				source.m_secondaryid = p_m_secondaryid;
				source.m_tertiaryid = p_m_tertiaryid;

				return source;
			}
		}
		// there is no instance matching the id
		Identifiertest_c new_inst = new Identifiertest_c(modelRoot,
				p_m_primaryid, p_m_secondaryid, p_m_tertiaryid);
		return new_inst;
	}
	public Identifiertest_c(ModelRoot modelRoot) {
		super(modelRoot);
		Object[] key = {new UUID(0, new Long(m_primaryid))};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {new UUID(0, new Long(m_primaryid))};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p6
		// round p7
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Identifiertest_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Identifiertest_c)) {
			return false;
		}

		Identifiertest_c me = (Identifiertest_c) elem;
		if (getPrimaryid() != ((Identifiertest_c) elem).getPrimaryid())
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Identifiertest_c)) {
			return false;
		}

		Identifiertest_c me = (Identifiertest_c) elem;
		if (getPrimaryid() != ((Identifiertest_c) elem).getPrimaryid())
			return false;
		return true;
	}

	// Attributes
	private int m_primaryid;
	private int m_secondaryid;
	private int m_tertiaryid;

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
	}
	public void batchUnrelate(boolean notifyChanges) {
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots, boolean relateProxies) {

		// class has no referential attributes

	}

	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Identifiertest_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Identifiertest_c IdentifiertestInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test, boolean loadComponent) {
		Identifiertest_c result = findIdentifiertestInstance(modelRoot, test,
				loadComponent);
		return result;
	}
	private static Identifiertest_c findIdentifiertestInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Identifiertest_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Identifiertest_c x = (Identifiertest_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Identifiertest_c IdentifiertestInstance(ModelRoot modelRoot,
			ClassQueryInterface_c test) {
		return IdentifiertestInstance(modelRoot, test, true);
	}

	public static Identifiertest_c IdentifiertestInstance(ModelRoot modelRoot) {
		return IdentifiertestInstance(modelRoot, null, true);
	}

	public static Identifiertest_c[] IdentifiertestInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Identifiertest_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Identifiertest_c x = (Identifiertest_c) instances.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Identifiertest_c[] ret_set = new Identifiertest_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Identifiertest_c[0];
			}
		}
	}
	public static Identifiertest_c[] IdentifiertestInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return IdentifiertestInstances(modelRoot, test, true);
	}
	public static Identifiertest_c[] IdentifiertestInstances(ModelRoot modelRoot) {
		return IdentifiertestInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the identifierTest.dispose call: ";
		if (delete_error == true) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log.println(ILogger.DELETE, "identifierTest",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CoreTestPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		return false;
	}
	// declare attribute accessors
	public int getPrimaryid() {
		return m_primaryid;
	}

	public void setPrimaryid(int newValue) {
		if (m_primaryid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Primaryid", new Integer(m_primaryid), new Integer(newValue),
				true);

		m_primaryid = newValue;
		Consistency.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getSecondaryid() {
		return m_secondaryid;
	}

	public void setSecondaryid(int newValue) {
		if (m_secondaryid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Secondaryid", new Integer(m_secondaryid),
				new Integer(newValue), true);

		m_secondaryid = newValue;
		Consistency.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getTertiaryid() {
		return m_tertiaryid;
	}

	public void setTertiaryid(int newValue) {
		if (m_tertiaryid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this,
				"Tertiaryid", new Integer(m_tertiaryid), new Integer(newValue),
				true);

		m_tertiaryid = newValue;
		Consistency.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log.println(ILogger.OPERATION, "identifierTest", //$NON-NLS-1$
				" Operation entered: identifierTest::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Identifiertest_c[] objs = Identifiertest_c.IdentifiertestInstances(
				modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "identifierTest", //$NON-NLS-1$
				" Operation entered: identifierTest::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Identifiertest_c_test96_c implements ClassQueryInterface_c {
			Identifiertest_c_test96_c(int p97) {
				m_p97 = p97;
			}
			private int m_p97;
			public boolean evaluate(Object candidate) {
				Identifiertest_c selected = (Identifiertest_c) candidate;
				boolean retval = false;
				retval = (selected.getPrimaryid() == (m_p97));
				return retval;
			}
		}

		Identifiertest_c[] objs95 = Identifiertest_c.IdentifiertestInstances(
				modelRoot, new Identifiertest_c_test96_c(getPrimaryid()));

		if (((objs95.length) == 0)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs95.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin.logError(
						"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs95.length), e);
			}
			retval = false;

		}

		if (((objs95.length) > 1)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs95.length)
										+ " primaryID: " + Integer.toString(getPrimaryid())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs95.length)
										+ " primaryID: " + Integer.toString(getPrimaryid()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		class Identifiertest_c_test99_c implements ClassQueryInterface_c {
			Identifiertest_c_test99_c(int p100) {
				m_p100 = p100;
			}
			private int m_p100;
			public boolean evaluate(Object candidate) {
				Identifiertest_c selected = (Identifiertest_c) candidate;
				boolean retval = false;
				retval = (selected.getSecondaryid() == (m_p100));
				return retval;
			}
		}

		Identifiertest_c[] objs98 = Identifiertest_c.IdentifiertestInstances(
				modelRoot, new Identifiertest_c_test99_c(getSecondaryid()));

		if (((objs98.length) == 0)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs98.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin.logError(
						"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs98.length), e);
			}
			retval = false;

		}

		if (((objs98.length) > 1)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs98.length)
										+ " secondaryID: " + Integer.toString(getSecondaryid())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs98.length)
										+ " secondaryID: " + Integer.toString(getSecondaryid()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		class Identifiertest_c_test102_c implements ClassQueryInterface_c {
			Identifiertest_c_test102_c(int p103) {
				m_p103 = p103;
			}
			private int m_p103;
			public boolean evaluate(Object candidate) {
				Identifiertest_c selected = (Identifiertest_c) candidate;
				boolean retval = false;
				retval = (selected.getTertiaryid() == (m_p103));
				return retval;
			}
		}

		Identifiertest_c[] objs101 = Identifiertest_c.IdentifiertestInstances(
				modelRoot, new Identifiertest_c_test102_c(getTertiaryid()));

		if (((objs101.length) == 0)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs101.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin.logError(
						"Consistency: Object: identifierTest: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
								+ "Actual Value: " //$NON-NLS-1$
								+ Integer.toString(objs101.length), e);
			}
			retval = false;

		}

		if (((objs101.length) > 1)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"identifierTest", //$NON-NLS-1$
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs101.length)
										+ " tertiaryID: " + Integer.toString(getTertiaryid())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: identifierTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs101.length)
										+ " tertiaryID: " + Integer.toString(getTertiaryid()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end identifierTest
