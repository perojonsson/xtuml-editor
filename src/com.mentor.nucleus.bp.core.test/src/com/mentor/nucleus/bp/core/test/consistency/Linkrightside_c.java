      
package com.mentor.nucleus.bp.core.test.consistency ;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.test.consistency.Linkrightside_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.test.CoreTestPlugin;
import java.util.* ;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;      
abstract class EV_LINKRIGHTSIDE extends genericEvent_c 
{
  public abstract int getEvtcode() ;
}

public class Linkrightside_c extends NonRootModelElement implements IAdaptable, Cloneable
{
  // Public Constructors
  public Linkrightside_c(ModelRoot modelRoot,
       int          p_m_lrsid)
  {
    super(modelRoot);
       m_lrsid = p_m_lrsid;
        
    Object [] key = {new UUID(0, new Long(m_lrsid))};
    addInstanceToMap(key);
  }
  static public Linkrightside_c createProxy(ModelRoot modelRoot,
       int          p_m_lrsid, String p_contentPath, IPath p_localPath)
  {
	  ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot, p_contentPath, p_localPath);
	  // if a model root was not resolved it is most likely
	  // due to a missing file of the proxy, defualt back to
	  // the original model root
	  if(resolvedModelRoot != null)
	  	modelRoot = resolvedModelRoot;
      InstanceList instances = modelRoot.getInstanceList(Linkrightside_c.class);
      Linkrightside_c new_inst = null;
      synchronized(instances) {
          Object[] key = {new UUID(0, new Long(p_m_lrsid))};
          new_inst = (Linkrightside_c) instances.get(key) ;
        }
	String contentPath = PersistenceUtil.resolveRelativePath(
			p_localPath,
			new Path(p_contentPath));
	if(modelRoot.isNewCompareRoot()) {
	      // for comparisons we do not want to change
	      // the content path
	      contentPath = p_contentPath;
	}
	if ( new_inst != null && !modelRoot.isCompareRoot()) {
		PersistableModelComponent pmc = new_inst.getPersistableComponent();
		if (pmc == null) {
			// dangling reference, redo this instance
			new_inst.batchUnrelate();
       new_inst.m_lrsid = p_m_lrsid;
        
		}
	}
	if ( new_inst == null ) {
		// there is no instance matching the id, create a proxy
		// if the resource doesn't exist then this will be a dangling reference
    	new_inst = new Linkrightside_c(modelRoot,
p_m_lrsid
);
		new_inst.m_contentPath = contentPath;
	}
    return new_inst;
  }

  static public Linkrightside_c resolveInstance(ModelRoot modelRoot,
       int          p_m_lrsid){
    InstanceList instances = modelRoot.getInstanceList(Linkrightside_c.class);
    Linkrightside_c source = null;
    synchronized(instances) {
        Object [] key = {
        new UUID(0, new Long(p_m_lrsid))
            };
        source = (Linkrightside_c) instances.get(key);
        if (source != null && !modelRoot.isCompareRoot()) {
           source.convertFromProxy();
           source.batchUnrelate();
       source.m_lrsid = p_m_lrsid;
        
           return source ;
        }
      }
      // there is no instance matching the id
    Linkrightside_c new_inst = new Linkrightside_c(modelRoot,
p_m_lrsid
);
    return new_inst;
  }
  public Linkrightside_c(ModelRoot modelRoot)
  {
    super(modelRoot);
    Object [] key = {new UUID(0, new Long(m_lrsid))};
    addInstanceToMap(key);
  }

  public Object getInstanceKey() {
    Object [] key =  {new UUID(0, new Long(m_lrsid))};
		return key;
  }
  
  public boolean setInstanceKey(UUID p_newKey){
  
  	boolean changed = false;
		// round p1
		// round p2
		// round p3
			// round p6
		// round p7
  	return changed;
  }
  

  



  public boolean equals (Object elem) {
     if (!(elem instanceof Linkrightside_c)) {
         return false;
     }
	    // check that the model-roots are the same
    	if (((NonRootModelElement)elem).getModelRoot() != getModelRoot() && !getModelRoot().isCompareRoot()) {
    		return false;
    	}
    	
     return identityEquals(elem);
  }
  
   public boolean identityEquals(Object elem) {
       if (!(elem instanceof Linkrightside_c)) {
           return false;
       }
       
       Linkrightside_c me = (Linkrightside_c)elem;
      if (getLrsid() != ((Linkrightside_c)elem).getLrsid()) return false;
      return true;
    }

   public boolean cachedIdentityEquals(Object elem) {
       if (!(elem instanceof Linkrightside_c)) {
           return false;
       }
       
       Linkrightside_c me = (Linkrightside_c)elem;
      if (getLrsid() != ((Linkrightside_c)elem).getLrsid()) return false;
      return true;
    }


  // Attributes
  private int          m_lrsid ;

// declare associations referring to this class

    
  
  
// referred to navigation

ArrayList<Linktest_c> backPointer_Linktest_R2 = new ArrayList<Linktest_c>();

public void setLinktestOrderInChildListR2(Linktest_c target, int index) {
	unrelateAcrossR2From(target);
	Linktest_c[] elements = Linktest_c.getManyCST_LTsOnR2(this);
	int count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			unrelateAcrossR2From((Linktest_c) elements[i]); 
		}
		count++;
	}
	relateAcrossR2To(target);
	count = 0;
	for(int i = 0; i < elements.length; i++) {
		if(count >= index) {
			relateAcrossR2To((Linktest_c) elements[i]);
		}
		count++;
	}
}

public void relateAcrossR2To(Linktest_c target)
{
  if (target != null) {
    target.relateAcrossR2To(this, true) ;
  }
}

public void relateAcrossR2To(Linktest_c target, boolean notifyChanges)
{
  if (target != null) {
    target.relateAcrossR2To(this, notifyChanges) ;
  }
}

public void setBackPointerR2To(Linktest_c target)
{
  	synchronized (backPointer_Linktest_R2) {
		backPointer_Linktest_R2.add(target);
	}
}

public void unrelateAcrossR2From(Linktest_c target)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, true) ;
  }
}

public void unrelateAcrossR2From(Linktest_c target, boolean notifyChanges)
{
  if (target != null) {
    target.unrelateAcrossR2From(this, notifyChanges) ;
  }
}

public void clearBackPointerR2To(Linktest_c target)
{
  synchronized (backPointer_Linktest_R2) {
	    backPointer_Linktest_R2.remove(target);
	}
}

public static Linkrightside_c getOneCST_LRSOnR2(Linktest_c [] targets)
{
    return getOneCST_LRSOnR2(targets, null);
}

public static Linkrightside_c getOneCST_LRSOnR2(Linktest_c [] targets, ClassQueryInterface_c test)
{
    return getOneCST_LRSOnR2(targets, test, true);
}

public static Linkrightside_c getOneCST_LRSOnR2(Linktest_c [] targets, ClassQueryInterface_c test, boolean loadComponent)
{
    Linkrightside_c ret_val = null;
    if (targets != null)
    {
        for (int i = 0; i < targets.length && ret_val == null; ++i )
        {
           if (test != null) {
             Linkrightside_c candidate_val = getOneCST_LRSOnR2(targets[i],true);
             if ( candidate_val != null && test.evaluate(candidate_val) )
             {
               ret_val = candidate_val;
               break;
             }
           }
           else {
             ret_val = getOneCST_LRSOnR2(targets[i], loadComponent);
             if (ret_val != null) {
               break;
             }
           }
        }
    }
    return ret_val;
}

public static Linkrightside_c getOneCST_LRSOnR2(Linktest_c target)
{
	return getOneCST_LRSOnR2(target, true);
}
public static Linkrightside_c getOneCST_LRSOnR2(Linktest_c target, boolean loadComponent)
{
  if (target != null) {
	if(loadComponent){
	     target.loadProxy();
	}
    return target.Linkrightside ;
  } else {
    return null;
  }
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c [] targets,
    ClassQueryInterface_c test)
{
	return getManyCST_LRSsOnR2(targets, test, true);
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c [] targets,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if(targets == null || targets.length == 0 || targets[0] == null)
    return new Linkrightside_c[0];
  
  
  LinkedHashSet<Linkrightside_c> elementsSet = new LinkedHashSet<Linkrightside_c>();
  for (int i = 0; i < targets.length; i++) {
	if(loadComponent && targets[i] != null && targets[i].Linkrightside == null)
	  targets[i].loadProxy();
    Linkrightside_c associate = targets[i].Linkrightside;
    if (targets[i] != null && associate != null
    	&& (test == null || test.evaluate(associate))) {
        	if (elementsSet.add(associate)){ 
            }
    }
  }

  Linkrightside_c[] result = new Linkrightside_c[elementsSet.size()];
  elementsSet.toArray(result);
  return result;
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c [] targets)
{
  return getManyCST_LRSsOnR2(targets, null);
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c target,
    ClassQueryInterface_c test, boolean loadComponent)
{
  if (target != null) {
    Linktest_c [] targetArray = new Linktest_c[1];
    targetArray[0] = target;
    return getManyCST_LRSsOnR2(targetArray, test, loadComponent);
  } else {
    Linkrightside_c [] result = new Linkrightside_c [0] ;
    return result ;
  }
  
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c target,
    ClassQueryInterface_c test)
{
    return getManyCST_LRSsOnR2(target, null, true);
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c target)
{
    return getManyCST_LRSsOnR2(target, null, true);
}

public static Linkrightside_c [] getManyCST_LRSsOnR2(Linktest_c target, boolean loadComponent)
{
    return getManyCST_LRSsOnR2(target, null, loadComponent);
}

public static Linkrightside_c getOneCST_LRSOnR2(Linkleftside_c target)
{
  return Linkrightside_c.getOneCST_LRSOnR2(Linktest_c.getOneCST_LTOnR2(target)) ;
}

public static Linkrightside_c getOneCST_LRSOnR2(Linkleftside_c target,
    ClassQueryInterface_c test)
{
  return Linkrightside_c.getOneCST_LRSOnR2(Linktest_c.getManyCST_LTsOnR2(target), test) ;
}



      
  public void batchRelate(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots)
  {
      batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
  }
  
  public void batchRelate(ModelRoot modelRoot, boolean relateProxies, boolean notifyChanges, boolean searchAllRoots)
  {
	}
  public void batchUnrelate(boolean notifyChanges)
  {
	}
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
  }	  
  public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	    
      // class has no referential attributes
  
  }

  public static void clearInstances(ModelRoot modelRoot)
  {
    InstanceList instances = modelRoot.getInstanceList(Linkrightside_c.class);
    synchronized(instances) {
       for(int i=instances.size()-1; i>=0; i--){
              ((NonRootModelElement)instances.get(i)).delete_unchecked();
       }
    
    }
  }

  public static Linkrightside_c LinkrightsideInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {
  		Linkrightside_c result=findLinkrightsideInstance(modelRoot,test,loadComponent);
	  return result;  
  }
private static Linkrightside_c findLinkrightsideInstance(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
{
	InstanceList instances = modelRoot.getInstanceList(Linkrightside_c.class);
		synchronized (instances) {
            for (int i = 0; i < instances.size(); ++i) {
				Linkrightside_c x = (Linkrightside_c) instances.get(i);
				if (test==null || test.evaluate(x)){
					return x;
			}
		}
		}
			return null;
}
  public static Linkrightside_c LinkrightsideInstance(ModelRoot modelRoot, ClassQueryInterface_c test){
     return LinkrightsideInstance(modelRoot,test,true);
  }
  
  public static Linkrightside_c LinkrightsideInstance(ModelRoot modelRoot)
  {
	 return LinkrightsideInstance(modelRoot,null,true);
  }

  public static Linkrightside_c [] LinkrightsideInstances(ModelRoot modelRoot, ClassQueryInterface_c test, boolean loadComponent)
  {	
		    InstanceList instances = modelRoot.getInstanceList(Linkrightside_c.class);
			Vector matches = new Vector();
			synchronized (instances) {
                for (int i = 0; i < instances.size(); ++i) {
					Linkrightside_c x = (Linkrightside_c) instances.get(i);
					if (test==null ||test.evaluate(x)){
						matches.add(x);
			    }
				}
			if (matches.size() > 0) {
				Linkrightside_c[] ret_set = new Linkrightside_c[matches.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Linkrightside_c[0];
			}		
		} 
  }
  public static Linkrightside_c [] LinkrightsideInstances(ModelRoot modelRoot, ClassQueryInterface_c test){
    return  LinkrightsideInstances(modelRoot,test,true);
  }
  public static Linkrightside_c [] LinkrightsideInstances(ModelRoot modelRoot)
  {
	return LinkrightsideInstances(modelRoot,null,true);
  }

  public boolean delete()
  {
    boolean result = super.delete();
	boolean delete_error = false;
	String errorMsg = "The following relationships were not torn down by the linkRightSide.dispose call: ";
 	Linktest_c testR2Inst = Linktest_c.getOneCST_LTOnR2(this, false);

 	if ( testR2Inst != null )
	{
 	delete_error = true;
	errorMsg = errorMsg + "2 ";
 	}
	if(delete_error == true) {

		if(CoreTestPlugin.getDefault().isDebugging()) {
			Consistency.log.println(ILogger.DELETE, "linkRightSide", errorMsg);
		}
		else {
			Exception e = new Exception();
            e.fillInStackTrace();
			CoreTestPlugin.logError(errorMsg, e);
		}
	}
	return result;
  }

  // end declare instance pool

  // declare attribute accessors
  public boolean isUUID(String attributeName){
      return false;      
  }      
  // declare attribute accessors
  public int getLrsid()
  {
    return m_lrsid ;
  }


  public void setLrsid(int newValue)
  {
    if(m_lrsid == newValue){
        return;
    }
    AttributeChangeModelDelta change = new AttributeChangeModelDelta(Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Lrsid", new Integer(m_lrsid), new Integer(newValue),true);

   m_lrsid = newValue ;
    Consistency.getDefaultInstance().fireModelElementAttributeChanged(change);
  }
  // end declare accessors
  public static void checkClassConsistency (ModelRoot modelRoot) {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "linkRightSide", //$NON-NLS-1$
	  " Operation entered: linkRightSide::checkClassConsistency"); //$NON-NLS-1$
     if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
       return;
     }
     Linkrightside_c [] objs = Linkrightside_c.LinkrightsideInstances(modelRoot,null,false); 
     
     for ( int i = 0; i < objs.length; i++) {
       objs[i].checkConsistency();
     }  
  } 
  public boolean checkConsistency () {
    Ooaofooa.log.println(
	  ILogger.OPERATION,
	  "linkRightSide", //$NON-NLS-1$
	  " Operation entered: linkRightSide::checkConsistency");  //$NON-NLS-1$
    if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) {  //$NON-NLS-1$
      return true;
    }
	ModelRoot modelRoot = getModelRoot();
    boolean      retval = true;
    class Linkrightside_c_test78_c implements ClassQueryInterface_c
    {
	  Linkrightside_c_test78_c( int             p79 ) {
	  m_p79 = p79;
	  }
	  private int              m_p79; 
	  public boolean evaluate (Object candidate)
	  {
	      Linkrightside_c selected = (Linkrightside_c) candidate;
	      boolean retval = false;
	      retval = (selected.getLrsid() == (m_p79));
	      return retval;
	  }
    }

    Linkrightside_c [] objs77 = 
    Linkrightside_c.LinkrightsideInstances(modelRoot, new Linkrightside_c_test78_c(getLrsid())) ;

    if ( (  (objs77.length) == 0) )
    {

      if (CoreTestPlugin.getDefault().isDebugging()){
          Consistency.log.println(ILogger.CONSISTENCY, "linkRightSide", //$NON-NLS-1$
           "Consistency: Object: linkRightSide: Cardinality of an identifier is zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs77.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CoreTestPlugin.logError("Consistency: Object: linkRightSide: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs77.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs77.length) > 1) )
    {

      if (CoreTestPlugin.getDefault().isDebugging()){
          Consistency.log.println(ILogger.CONSISTENCY, "linkRightSide", //$NON-NLS-1$
           "Consistency: Object: linkRightSide: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
           + "Actual Value: " //$NON-NLS-1$ 
           + Integer.toString( objs77.length )  + " lrsID: " + Integer.toString(getLrsid()) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CoreTestPlugin.logError("Consistency: Object: linkRightSide: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs77.length )  + " lrsID: " + Integer.toString(getLrsid()) , e); //$NON-NLS-1$
      }
      retval = false;

    }

          // Associated Other Side: rel.Numb = 2
            // Link Object: linkTest
    class Linktest_c_test82_c implements ClassQueryInterface_c
    {
	  Linktest_c_test82_c( int             p83 ) {
	  m_p83 = p83;
	  }
	  private int              m_p83; 
	  public boolean evaluate (Object candidate)
	  {
	      Linktest_c selected = (Linktest_c) candidate;
	      boolean retval = false;
	      retval = (selected.getLrsid() == (m_p83));
	      return retval;
	  }
    }

    Linktest_c [] objs84 = 
    Linktest_c.LinktestInstances(modelRoot, new Linktest_c_test82_c(getLrsid())) ;

    if ( (  (objs84.length) == 0) )
    {

      if (CoreTestPlugin.getDefault().isDebugging()){
          Consistency.log.println(ILogger.CONSISTENCY, "linkRightSide", //$NON-NLS-1$
           "Consistency: Object: linkRightSide: Association: 2: Cardinality of a link is equal to zero. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs84.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CoreTestPlugin.logError("Consistency: Object: linkRightSide: Association: 2: Cardinality of a link is equal to zero. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs84.length )  , e); 
      }
      retval = false;

    }

    if ( (  (objs84.length) != 1) )
    {

      if (CoreTestPlugin.getDefault().isDebugging()){
          Consistency.log.println(ILogger.CONSISTENCY, "linkRightSide", //$NON-NLS-1$
           "Consistency: Object: linkRightSide: Association: 2: Cardinality of a link is not equal to 1. " //$NON-NLS-1$
           + "Actual Value: " + Integer.toString( objs84.length ) ); //$NON-NLS-1$
      }
      else {
          Exception e = new Exception();
          CoreTestPlugin.logError("Consistency: Object: linkRightSide: Association: 2: Cardinality of a link is not equal to 1. " //$NON-NLS-1$ 
          + "Actual Value: " //$NON-NLS-1$
          + Integer.toString( objs84.length )  , e); 
      }
      retval = false;

    }

    return retval;
  }



  public Object getAdapter(Class adapter) {
    Object superAdapter = super.getAdapter(adapter);
    if(superAdapter != null) {
    	return superAdapter;
    }
	  return null;
  }
} // end linkRightSide
