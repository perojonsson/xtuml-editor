//====================================================================
//
// File:      com.mentor.nucleus.bp.core.test.consistency.Consistency.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

package com.mentor.nucleus.bp.core.test.consistency;

import org.eclipse.core.runtime.IProgressMonitor;
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.core.util.*;
/**
 * The model-root of the domain.  
 */
public class Consistency extends ConsistencyBase {
	protected Consistency(String aRootId) {
		super(aRootId);
	}

	public void clearDatabase(IProgressMonitor pm) {
		pm.beginTask("Clearing database...", 9);
		Supertypetest_c.clearInstances(this);
		pm.worked(1);
		Subtyperight_c.clearInstances(this);
		pm.worked(1);
		Subtypeleft_c.clearInstances(this);
		pm.worked(1);
		Singleparticipanttest_c.clearInstances(this);
		pm.worked(1);
		Singleformalizertest_c.clearInstances(this);
		pm.worked(1);
		Linktest_c.clearInstances(this);
		pm.worked(1);
		Linkrightside_c.clearInstances(this);
		pm.worked(1);
		Linkleftside_c.clearInstances(this);
		pm.worked(1);
		Identifiertest_c.clearInstances(this);
		pm.worked(1);

	}
	//
	//
	public void checkDomainConsistency() {
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Supertypetest_c.checkClassConsistency(this);
		Subtyperight_c.checkClassConsistency(this);
		Subtypeleft_c.checkClassConsistency(this);
		Singleparticipanttest_c.checkClassConsistency(this);
		Singleformalizertest_c.checkClassConsistency(this);
		Linktest_c.checkClassConsistency(this);
		Linkrightside_c.checkClassConsistency(this);
		Linkleftside_c.checkClassConsistency(this);
		Identifiertest_c.checkClassConsistency(this);
	}

	//
	// Domain level functions

	// End Domain functions

	/**
	 * The single model-root that used to be accessed by most of the code
	 * back when only one domain could be loaded into the product at a time.
	 * 
	 * @deprecated  Since issue 684, all code should specifically identify 
	 *              which instance of this class it seeks to retrieve, by 
	 *              calling other access methods of this class like 
	 *              getInstance(id).
	 */
	protected static Consistency m_default_instance = null;

	public static Consistency getDefaultInstance() {
		if (m_default_instance == null) {
			m_default_instance = getInstance(DEFAULT_WORKING_MODELSPACE);
		}
		return m_default_instance;
	}

	public static Consistency getInstance(String id) {
		Consistency modelRoot = (Consistency) rootInstanceMap.get(id);
		if (modelRoot == null) {
			modelRoot = new Consistency(id);
			if (DEFAULT_WORKING_MODELSPACE.equals(id)) {
				m_default_instance = modelRoot;
				init();
			}
		}

		return modelRoot;
	}

	static private masterTimer_c m_myMasterTimer;
	protected static void init() {

		if (m_myMasterTimer != null) {
			m_myMasterTimer = new masterTimer_c();
			m_myMasterTimer.start();
		}

	}
	/****** end init() ******/

	public static void shutdown() {
		if (m_myMasterTimer != null) {
			m_myMasterTimer.halt();
		}
	}

}
