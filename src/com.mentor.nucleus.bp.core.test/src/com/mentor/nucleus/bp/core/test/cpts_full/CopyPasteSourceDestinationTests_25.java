//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrixFull.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts_full;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_25 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_25(String arg0) {
        super("CopyPasteSourceDestinationTests_25", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B20).
     * 
     */
    public void testA68_B20() {
        test_id = getTestId("A68", "B20", "1");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B21).
     * 
     */
    public void testA68_B21() {
        test_id = getTestId("A68", "B21", "2");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B22).
     * 
     */
    public void testA68_B22() {
        test_id = getTestId("A68", "B22", "3");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B23).
     * 
     */
    public void testA68_B23() {
        test_id = getTestId("A68", "B23", "4");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B24).
     * 
     */
    public void testA68_B24() {
        test_id = getTestId("A68", "B24", "5");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B25).
     * 
     */
    public void testA68_B25() {
        test_id = getTestId("A68", "B25", "6");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B26).
     * 
     */
    public void testA68_B26() {
        test_id = getTestId("A68", "B26", "7");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B27).
     * 
     */
    public void testA68_B27() {
        test_id = getTestId("A68", "B27", "8");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B28).
     * 
     */
    public void testA68_B28() {
        test_id = getTestId("A68", "B28", "9");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B29).
     * 
     */
    public void testA68_B29() {
        test_id = getTestId("A68", "B29", "10");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B30).
     * 
     */
    public void testA68_B30() {
        test_id = getTestId("A68", "B30", "11");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B31).
     * 
     */
    public void testA68_B31() {
        test_id = getTestId("A68", "B31", "12");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B32).
     * 
     */
    public void testA68_B32() {
        test_id = getTestId("A68", "B32", "13");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B33).
     * 
     */
    public void testA68_B33() {
        test_id = getTestId("A68", "B33", "14");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B34).
     * 
     */
    public void testA68_B34() {
        test_id = getTestId("A68", "B34", "15");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B35).
     * 
     */
    public void testA68_B35() {
        test_id = getTestId("A68", "B35", "16");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B36).
     * 
     */
    public void testA68_B36() {
        test_id = getTestId("A68", "B36", "17");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B37).
     * 
     */
    public void testA68_B37() {
        test_id = getTestId("A68", "B37", "18");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B38).
     * 
     */
    public void testA68_B38() {
        test_id = getTestId("A68", "B38", "19");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B39).
     * 
     */
    public void testA68_B39() {
        test_id = getTestId("A68", "B39", "20");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B40).
     * 
     */
    public void testA68_B40() {
        test_id = getTestId("A68", "B40", "21");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B41).
     * 
     */
    public void testA68_B41() {
        test_id = getTestId("A68", "B41", "22");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B42).
     * 
     */
    public void testA68_B42() {
        test_id = getTestId("A68", "B42", "23");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B43).
     * 
     */
    public void testA68_B43() {
        test_id = getTestId("A68", "B43", "24");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B44).
     * 
     */
    public void testA68_B44() {
        test_id = getTestId("A68", "B44", "25");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B45).
     * 
     */
    public void testA68_B45() {
        test_id = getTestId("A68", "B45", "26");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B46).
     * 
     */
    public void testA68_B46() {
        test_id = getTestId("A68", "B46", "27");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B47).
     * 
     */
    public void testA68_B47() {
        test_id = getTestId("A68", "B47", "28");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B48).
     * 
     */
    public void testA68_B48() {
        test_id = getTestId("A68", "B48", "29");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B49).
     * 
     */
    public void testA68_B49() {
        test_id = getTestId("A68", "B49", "30");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B50).
     * 
     */
    public void testA68_B50() {
        test_id = getTestId("A68", "B50", "31");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B51).
     * 
     */
    public void testA68_B51() {
        test_id = getTestId("A68", "B51", "32");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B52).
     * 
     */
    public void testA68_B52() {
        test_id = getTestId("A68", "B52", "33");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B53).
     * 
     */
    public void testA68_B53() {
        test_id = getTestId("A68", "B53", "34");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B54).
     * 
     */
    public void testA68_B54() {
        test_id = getTestId("A68", "B54", "35");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B55).
     * 
     */
    public void testA68_B55() {
        test_id = getTestId("A68", "B55", "36");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B56).
     * 
     */
    public void testA68_B56() {
        test_id = getTestId("A68", "B56", "37");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B57).
     * 
     */
    public void testA68_B57() {
        test_id = getTestId("A68", "B57", "38");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B58).
     * 
     */
    public void testA68_B58() {
        test_id = getTestId("A68", "B58", "39");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B59).
     * 
     */
    public void testA68_B59() {
        test_id = getTestId("A68", "B59", "40");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B60).
     * 
     */
    public void testA68_B60() {
        test_id = getTestId("A68", "B60", "41");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B61).
     * 
     */
    public void testA68_B61() {
        test_id = getTestId("A68", "B61", "42");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B62).
     * 
     */
    public void testA68_B62() {
        test_id = getTestId("A68", "B62", "43");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B63).
     * 
     */
    public void testA68_B63() {
        test_id = getTestId("A68", "B63", "44");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B64).
     * 
     */
    public void testA68_B64() {
        test_id = getTestId("A68", "B64", "45");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B65).
     * 
     */
    public void testA68_B65() {
        test_id = getTestId("A68", "B65", "46");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B66).
     * 
     */
    public void testA68_B66() {
        test_id = getTestId("A68", "B66", "47");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B67).
     * 
     */
    public void testA68_B67() {
        test_id = getTestId("A68", "B67", "48");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B68).
     * 
     */
    public void testA68_B68() {
        test_id = getTestId("A68", "B68", "49");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B69).
     * 
     */
    public void testA68_B69() {
        test_id = getTestId("A68", "B69", "50");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B70).
     * 
     */
    public void testA68_B70() {
        test_id = getTestId("A68", "B70", "51");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B71).
     * 
     */
    public void testA68_B71() {
        test_id = getTestId("A68", "B71", "52");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B72).
     * 
     */
    public void testA68_B72() {
        test_id = getTestId("A68", "B72", "53");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B73).
     * 
     */
    public void testA68_B73() {
        test_id = getTestId("A68", "B73", "54");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B74).
     * 
     */
    public void testA68_B74() {
        test_id = getTestId("A68", "B74", "55");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B75).
     * 
     */
    public void testA68_B75() {
        test_id = getTestId("A68", "B75", "56");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B76).
     * 
     */
    public void testA68_B76() {
        test_id = getTestId("A68", "B76", "57");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B77).
     * 
     */
    public void testA68_B77() {
        test_id = getTestId("A68", "B77", "58");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B78).
     * 
     */
    public void testA68_B78() {
        test_id = getTestId("A68", "B78", "59");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B79).
     * 
     */
    public void testA68_B79() {
        test_id = getTestId("A68", "B79", "60");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B80).
     * 
     */
    public void testA68_B80() {
        test_id = getTestId("A68", "B80", "61");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B81).
     * 
     */
    public void testA68_B81() {
        test_id = getTestId("A68", "B81", "62");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B82).
     * 
     */
    public void testA68_B82() {
        test_id = getTestId("A68", "B82", "63");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B83).
     * 
     */
    public void testA68_B83() {
        test_id = getTestId("A68", "B83", "64");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B84).
     * 
     */
    public void testA68_B84() {
        test_id = getTestId("A68", "B84", "65");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B85).
     * 
     */
    public void testA68_B85() {
        test_id = getTestId("A68", "B85", "66");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B86).
     * 
     */
    public void testA68_B86() {
        test_id = getTestId("A68", "B86", "67");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B87).
     * 
     */
    public void testA68_B87() {
        test_id = getTestId("A68", "B87", "68");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B88).
     * 
     */
    public void testA68_B88() {
        test_id = getTestId("A68", "B88", "69");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B89).
     * 
     */
    public void testA68_B89() {
        test_id = getTestId("A68", "B89", "70");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B90).
     * 
     */
    public void testA68_B90() {
        test_id = getTestId("A68", "B90", "71");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B91).
     * 
     */
    public void testA68_B91() {
        test_id = getTestId("A68", "B91", "72");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B92).
     * 
     */
    public void testA68_B92() {
        test_id = getTestId("A68", "B92", "73");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A68) and row (B93).
     * 
     */
    public void testA68_B93() {
        test_id = getTestId("A68", "B93", "74");

        NonRootModelElement src = selectA("A68");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B1).
     * 
     */
    public void testA69_B1() {
        test_id = getTestId("A69", "B1", "75");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B2).
     * 
     */
    public void testA69_B2() {
        test_id = getTestId("A69", "B2", "76");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B3).
     * 
     */
    public void testA69_B3() {
        test_id = getTestId("A69", "B3", "77");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B4).
     * 
     */
    public void testA69_B4() {
        test_id = getTestId("A69", "B4", "78");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B5).
     * 
     */
    public void testA69_B5() {
        test_id = getTestId("A69", "B5", "79");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B6).
     * 
     */
    public void testA69_B6() {
        test_id = getTestId("A69", "B6", "80");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B7).
     * 
     */
    public void testA69_B7() {
        test_id = getTestId("A69", "B7", "81");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B8).
     * 
     */
    public void testA69_B8() {
        test_id = getTestId("A69", "B8", "82");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B9).
     * 
     */
    public void testA69_B9() {
        test_id = getTestId("A69", "B9", "83");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B10).
     * 
     */
    public void testA69_B10() {
        test_id = getTestId("A69", "B10", "84");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B11).
     * 
     */
    public void testA69_B11() {
        test_id = getTestId("A69", "B11", "85");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B12).
     * 
     */
    public void testA69_B12() {
        test_id = getTestId("A69", "B12", "86");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B13).
     * 
     */
    public void testA69_B13() {
        test_id = getTestId("A69", "B13", "87");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B14).
     * 
     */
    public void testA69_B14() {
        test_id = getTestId("A69", "B14", "88");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B15).
     * 
     */
    public void testA69_B15() {
        test_id = getTestId("A69", "B15", "89");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B16).
     * 
     */
    public void testA69_B16() {
        test_id = getTestId("A69", "B16", "90");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B17).
     * 
     */
    public void testA69_B17() {
        test_id = getTestId("A69", "B17", "91");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B18).
     * 
     */
    public void testA69_B18() {
        test_id = getTestId("A69", "B18", "92");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B19).
     * 
     */
    public void testA69_B19() {
        test_id = getTestId("A69", "B19", "93");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B20).
     * 
     */
    public void testA69_B20() {
        test_id = getTestId("A69", "B20", "94");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B21).
     * 
     */
    public void testA69_B21() {
        test_id = getTestId("A69", "B21", "95");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B22).
     * 
     */
    public void testA69_B22() {
        test_id = getTestId("A69", "B22", "96");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B23).
     * 
     */
    public void testA69_B23() {
        test_id = getTestId("A69", "B23", "97");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B24).
     * 
     */
    public void testA69_B24() {
        test_id = getTestId("A69", "B24", "98");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B25).
     * 
     */
    public void testA69_B25() {
        test_id = getTestId("A69", "B25", "99");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B26).
     * 
     */
    public void testA69_B26() {
        test_id = getTestId("A69", "B26", "100");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B27).
     * 
     */
    public void testA69_B27() {
        test_id = getTestId("A69", "B27", "101");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B28).
     * 
     */
    public void testA69_B28() {
        test_id = getTestId("A69", "B28", "102");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B29).
     * 
     */
    public void testA69_B29() {
        test_id = getTestId("A69", "B29", "103");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B30).
     * 
     */
    public void testA69_B30() {
        test_id = getTestId("A69", "B30", "104");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B31).
     * 
     */
    public void testA69_B31() {
        test_id = getTestId("A69", "B31", "105");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B32).
     * 
     */
    public void testA69_B32() {
        test_id = getTestId("A69", "B32", "106");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B33).
     * 
     */
    public void testA69_B33() {
        test_id = getTestId("A69", "B33", "107");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B34).
     * 
     */
    public void testA69_B34() {
        test_id = getTestId("A69", "B34", "108");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B35).
     * 
     */
    public void testA69_B35() {
        test_id = getTestId("A69", "B35", "109");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B36).
     * 
     */
    public void testA69_B36() {
        test_id = getTestId("A69", "B36", "110");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B37).
     * 
     */
    public void testA69_B37() {
        test_id = getTestId("A69", "B37", "111");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B38).
     * 
     */
    public void testA69_B38() {
        test_id = getTestId("A69", "B38", "112");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B39).
     * 
     */
    public void testA69_B39() {
        test_id = getTestId("A69", "B39", "113");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B40).
     * 
     */
    public void testA69_B40() {
        test_id = getTestId("A69", "B40", "114");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B41).
     * 
     */
    public void testA69_B41() {
        test_id = getTestId("A69", "B41", "115");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B42).
     * 
     */
    public void testA69_B42() {
        test_id = getTestId("A69", "B42", "116");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B43).
     * 
     */
    public void testA69_B43() {
        test_id = getTestId("A69", "B43", "117");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B44).
     * 
     */
    public void testA69_B44() {
        test_id = getTestId("A69", "B44", "118");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B45).
     * 
     */
    public void testA69_B45() {
        test_id = getTestId("A69", "B45", "119");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B46).
     * 
     */
    public void testA69_B46() {
        test_id = getTestId("A69", "B46", "120");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B47).
     * 
     */
    public void testA69_B47() {
        test_id = getTestId("A69", "B47", "121");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B48).
     * 
     */
    public void testA69_B48() {
        test_id = getTestId("A69", "B48", "122");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B49).
     * 
     */
    public void testA69_B49() {
        test_id = getTestId("A69", "B49", "123");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B50).
     * 
     */
    public void testA69_B50() {
        test_id = getTestId("A69", "B50", "124");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B51).
     * 
     */
    public void testA69_B51() {
        test_id = getTestId("A69", "B51", "125");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B52).
     * 
     */
    public void testA69_B52() {
        test_id = getTestId("A69", "B52", "126");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B53).
     * 
     */
    public void testA69_B53() {
        test_id = getTestId("A69", "B53", "127");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B54).
     * 
     */
    public void testA69_B54() {
        test_id = getTestId("A69", "B54", "128");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B55).
     * 
     */
    public void testA69_B55() {
        test_id = getTestId("A69", "B55", "129");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B56).
     * 
     */
    public void testA69_B56() {
        test_id = getTestId("A69", "B56", "130");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B57).
     * 
     */
    public void testA69_B57() {
        test_id = getTestId("A69", "B57", "131");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B58).
     * 
     */
    public void testA69_B58() {
        test_id = getTestId("A69", "B58", "132");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B59).
     * 
     */
    public void testA69_B59() {
        test_id = getTestId("A69", "B59", "133");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B60).
     * 
     */
    public void testA69_B60() {
        test_id = getTestId("A69", "B60", "134");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B61).
     * 
     */
    public void testA69_B61() {
        test_id = getTestId("A69", "B61", "135");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B62).
     * 
     */
    public void testA69_B62() {
        test_id = getTestId("A69", "B62", "136");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B63).
     * 
     */
    public void testA69_B63() {
        test_id = getTestId("A69", "B63", "137");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B64).
     * 
     */
    public void testA69_B64() {
        test_id = getTestId("A69", "B64", "138");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B65).
     * 
     */
    public void testA69_B65() {
        test_id = getTestId("A69", "B65", "139");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B66).
     * 
     */
    public void testA69_B66() {
        test_id = getTestId("A69", "B66", "140");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B67).
     * 
     */
    public void testA69_B67() {
        test_id = getTestId("A69", "B67", "141");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B68).
     * 
     */
    public void testA69_B68() {
        test_id = getTestId("A69", "B68", "142");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B69).
     * 
     */
    public void testA69_B69() {
        test_id = getTestId("A69", "B69", "143");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B70).
     * 
     */
    public void testA69_B70() {
        test_id = getTestId("A69", "B70", "144");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B71).
     * 
     */
    public void testA69_B71() {
        test_id = getTestId("A69", "B71", "145");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B72).
     * 
     */
    public void testA69_B72() {
        test_id = getTestId("A69", "B72", "146");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B73).
     * 
     */
    public void testA69_B73() {
        test_id = getTestId("A69", "B73", "147");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B74).
     * 
     */
    public void testA69_B74() {
        test_id = getTestId("A69", "B74", "148");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B75).
     * 
     */
    public void testA69_B75() {
        test_id = getTestId("A69", "B75", "149");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B76).
     * 
     */
    public void testA69_B76() {
        test_id = getTestId("A69", "B76", "150");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B77).
     * 
     */
    public void testA69_B77() {
        test_id = getTestId("A69", "B77", "151");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B78).
     * 
     */
    public void testA69_B78() {
        test_id = getTestId("A69", "B78", "152");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B79).
     * 
     */
    public void testA69_B79() {
        test_id = getTestId("A69", "B79", "153");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B80).
     * 
     */
    public void testA69_B80() {
        test_id = getTestId("A69", "B80", "154");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B81).
     * 
     */
    public void testA69_B81() {
        test_id = getTestId("A69", "B81", "155");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B82).
     * 
     */
    public void testA69_B82() {
        test_id = getTestId("A69", "B82", "156");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B83).
     * 
     */
    public void testA69_B83() {
        test_id = getTestId("A69", "B83", "157");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B84).
     * 
     */
    public void testA69_B84() {
        test_id = getTestId("A69", "B84", "158");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B85).
     * 
     */
    public void testA69_B85() {
        test_id = getTestId("A69", "B85", "159");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B86).
     * 
     */
    public void testA69_B86() {
        test_id = getTestId("A69", "B86", "160");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B87).
     * 
     */
    public void testA69_B87() {
        test_id = getTestId("A69", "B87", "161");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B88).
     * 
     */
    public void testA69_B88() {
        test_id = getTestId("A69", "B88", "162");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B89).
     * 
     */
    public void testA69_B89() {
        test_id = getTestId("A69", "B89", "163");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B90).
     * 
     */
    public void testA69_B90() {
        test_id = getTestId("A69", "B90", "164");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B91).
     * 
     */
    public void testA69_B91() {
        test_id = getTestId("A69", "B91", "165");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B92).
     * 
     */
    public void testA69_B92() {
        test_id = getTestId("A69", "B92", "166");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A69) and row (B93).
     * 
     */
    public void testA69_B93() {
        test_id = getTestId("A69", "B93", "167");

        NonRootModelElement src = selectA("A69");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B1).
     * 
     */
    public void testA70_B1() {
        test_id = getTestId("A70", "B1", "168");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B2).
     * 
     */
    public void testA70_B2() {
        test_id = getTestId("A70", "B2", "169");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B3).
     * 
     */
    public void testA70_B3() {
        test_id = getTestId("A70", "B3", "170");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B4).
     * 
     */
    public void testA70_B4() {
        test_id = getTestId("A70", "B4", "171");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B5).
     * 
     */
    public void testA70_B5() {
        test_id = getTestId("A70", "B5", "172");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B6).
     * 
     */
    public void testA70_B6() {
        test_id = getTestId("A70", "B6", "173");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B7).
     * 
     */
    public void testA70_B7() {
        test_id = getTestId("A70", "B7", "174");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B8).
     * 
     */
    public void testA70_B8() {
        test_id = getTestId("A70", "B8", "175");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B9).
     * 
     */
    public void testA70_B9() {
        test_id = getTestId("A70", "B9", "176");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B10).
     * 
     */
    public void testA70_B10() {
        test_id = getTestId("A70", "B10", "177");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B11).
     * 
     */
    public void testA70_B11() {
        test_id = getTestId("A70", "B11", "178");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B12).
     * 
     */
    public void testA70_B12() {
        test_id = getTestId("A70", "B12", "179");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B13).
     * 
     */
    public void testA70_B13() {
        test_id = getTestId("A70", "B13", "180");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B14).
     * 
     */
    public void testA70_B14() {
        test_id = getTestId("A70", "B14", "181");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B15).
     * 
     */
    public void testA70_B15() {
        test_id = getTestId("A70", "B15", "182");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B16).
     * 
     */
    public void testA70_B16() {
        test_id = getTestId("A70", "B16", "183");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B17).
     * 
     */
    public void testA70_B17() {
        test_id = getTestId("A70", "B17", "184");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B18).
     * 
     */
    public void testA70_B18() {
        test_id = getTestId("A70", "B18", "185");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B19).
     * 
     */
    public void testA70_B19() {
        test_id = getTestId("A70", "B19", "186");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B20).
     * 
     */
    public void testA70_B20() {
        test_id = getTestId("A70", "B20", "187");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B21).
     * 
     */
    public void testA70_B21() {
        test_id = getTestId("A70", "B21", "188");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B22).
     * 
     */
    public void testA70_B22() {
        test_id = getTestId("A70", "B22", "189");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B23).
     * 
     */
    public void testA70_B23() {
        test_id = getTestId("A70", "B23", "190");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B24).
     * 
     */
    public void testA70_B24() {
        test_id = getTestId("A70", "B24", "191");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B25).
     * 
     */
    public void testA70_B25() {
        test_id = getTestId("A70", "B25", "192");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B26).
     * 
     */
    public void testA70_B26() {
        test_id = getTestId("A70", "B26", "193");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B27).
     * 
     */
    public void testA70_B27() {
        test_id = getTestId("A70", "B27", "194");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B28).
     * 
     */
    public void testA70_B28() {
        test_id = getTestId("A70", "B28", "195");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B29).
     * 
     */
    public void testA70_B29() {
        test_id = getTestId("A70", "B29", "196");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B30).
     * 
     */
    public void testA70_B30() {
        test_id = getTestId("A70", "B30", "197");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B31).
     * 
     */
    public void testA70_B31() {
        test_id = getTestId("A70", "B31", "198");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B32).
     * 
     */
    public void testA70_B32() {
        test_id = getTestId("A70", "B32", "199");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B33).
     * 
     */
    public void testA70_B33() {
        test_id = getTestId("A70", "B33", "200");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B34).
     * 
     */
    public void testA70_B34() {
        test_id = getTestId("A70", "B34", "201");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B35).
     * 
     */
    public void testA70_B35() {
        test_id = getTestId("A70", "B35", "202");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B36).
     * 
     */
    public void testA70_B36() {
        test_id = getTestId("A70", "B36", "203");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B37).
     * 
     */
    public void testA70_B37() {
        test_id = getTestId("A70", "B37", "204");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B38).
     * 
     */
    public void testA70_B38() {
        test_id = getTestId("A70", "B38", "205");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B39).
     * 
     */
    public void testA70_B39() {
        test_id = getTestId("A70", "B39", "206");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B40).
     * 
     */
    public void testA70_B40() {
        test_id = getTestId("A70", "B40", "207");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B41).
     * 
     */
    public void testA70_B41() {
        test_id = getTestId("A70", "B41", "208");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B42).
     * 
     */
    public void testA70_B42() {
        test_id = getTestId("A70", "B42", "209");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B43).
     * 
     */
    public void testA70_B43() {
        test_id = getTestId("A70", "B43", "210");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B44).
     * 
     */
    public void testA70_B44() {
        test_id = getTestId("A70", "B44", "211");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B45).
     * 
     */
    public void testA70_B45() {
        test_id = getTestId("A70", "B45", "212");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B46).
     * 
     */
    public void testA70_B46() {
        test_id = getTestId("A70", "B46", "213");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B47).
     * 
     */
    public void testA70_B47() {
        test_id = getTestId("A70", "B47", "214");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B48).
     * 
     */
    public void testA70_B48() {
        test_id = getTestId("A70", "B48", "215");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B49).
     * 
     */
    public void testA70_B49() {
        test_id = getTestId("A70", "B49", "216");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B50).
     * 
     */
    public void testA70_B50() {
        test_id = getTestId("A70", "B50", "217");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B51).
     * 
     */
    public void testA70_B51() {
        test_id = getTestId("A70", "B51", "218");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B52).
     * 
     */
    public void testA70_B52() {
        test_id = getTestId("A70", "B52", "219");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B53).
     * 
     */
    public void testA70_B53() {
        test_id = getTestId("A70", "B53", "220");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B54).
     * 
     */
    public void testA70_B54() {
        test_id = getTestId("A70", "B54", "221");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B55).
     * 
     */
    public void testA70_B55() {
        test_id = getTestId("A70", "B55", "222");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B56).
     * 
     */
    public void testA70_B56() {
        test_id = getTestId("A70", "B56", "223");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B57).
     * 
     */
    public void testA70_B57() {
        test_id = getTestId("A70", "B57", "224");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B58).
     * 
     */
    public void testA70_B58() {
        test_id = getTestId("A70", "B58", "225");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B59).
     * 
     */
    public void testA70_B59() {
        test_id = getTestId("A70", "B59", "226");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B60).
     * 
     */
    public void testA70_B60() {
        test_id = getTestId("A70", "B60", "227");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B61).
     * 
     */
    public void testA70_B61() {
        test_id = getTestId("A70", "B61", "228");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B62).
     * 
     */
    public void testA70_B62() {
        test_id = getTestId("A70", "B62", "229");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B63).
     * 
     */
    public void testA70_B63() {
        test_id = getTestId("A70", "B63", "230");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B64).
     * 
     */
    public void testA70_B64() {
        test_id = getTestId("A70", "B64", "231");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B65).
     * 
     */
    public void testA70_B65() {
        test_id = getTestId("A70", "B65", "232");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B66).
     * 
     */
    public void testA70_B66() {
        test_id = getTestId("A70", "B66", "233");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B67).
     * 
     */
    public void testA70_B67() {
        test_id = getTestId("A70", "B67", "234");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B68).
     * 
     */
    public void testA70_B68() {
        test_id = getTestId("A70", "B68", "235");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B69).
     * 
     */
    public void testA70_B69() {
        test_id = getTestId("A70", "B69", "236");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B70).
     * 
     */
    public void testA70_B70() {
        test_id = getTestId("A70", "B70", "237");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B71).
     * 
     */
    public void testA70_B71() {
        test_id = getTestId("A70", "B71", "238");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B72).
     * 
     */
    public void testA70_B72() {
        test_id = getTestId("A70", "B72", "239");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B73).
     * 
     */
    public void testA70_B73() {
        test_id = getTestId("A70", "B73", "240");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B74).
     * 
     */
    public void testA70_B74() {
        test_id = getTestId("A70", "B74", "241");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B75).
     * 
     */
    public void testA70_B75() {
        test_id = getTestId("A70", "B75", "242");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B76).
     * 
     */
    public void testA70_B76() {
        test_id = getTestId("A70", "B76", "243");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B77).
     * 
     */
    public void testA70_B77() {
        test_id = getTestId("A70", "B77", "244");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B78).
     * 
     */
    public void testA70_B78() {
        test_id = getTestId("A70", "B78", "245");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B79).
     * 
     */
    public void testA70_B79() {
        test_id = getTestId("A70", "B79", "246");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B80).
     * 
     */
    public void testA70_B80() {
        test_id = getTestId("A70", "B80", "247");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B81).
     * 
     */
    public void testA70_B81() {
        test_id = getTestId("A70", "B81", "248");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B82).
     * 
     */
    public void testA70_B82() {
        test_id = getTestId("A70", "B82", "249");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A70) and row (B83).
     * 
     */
    public void testA70_B83() {
        test_id = getTestId("A70", "B83", "250");

        NonRootModelElement src = selectA("A70");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
