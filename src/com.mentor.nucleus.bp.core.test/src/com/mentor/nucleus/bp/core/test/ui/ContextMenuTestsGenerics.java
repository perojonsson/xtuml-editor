//========================================================================
// 
// File: com.mentor.nucleus.bp.ui.canvas.test/src/com/mentor/nucleus/bp/ui/canvas/test/ContextMenuTestsGenerics.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_context_menu_tests.arc
// Version:      $Revision: 1.34 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//========================================================================

package com.mentor.nucleus.bp.core.test.ui;

import java.util.HashMap;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFileState;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.jface.action.Action;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.ui.PlatformUI;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.core.ui.Selection;
import com.mentor.nucleus.bp.test.TestUtil;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.test.common.UITestingUtilities;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.Connector_c;
import com.mentor.nucleus.bp.ui.canvas.GraphicalElement_c;
import com.mentor.nucleus.bp.ui.canvas.Shape_c;
import com.mentor.nucleus.bp.utilities.ui.CanvasUtilities;
import com.mentor.nucleus.bp.test.common.CanvasTestUtils;
import com.mentor.nucleus.bp.test.common.CanvasEditorUtils;

/**
 * Contains various tests involving context menu behavior
 */
public class ContextMenuTestsGenerics extends BaseTest
{
    /**
     * The editor upon which these tests operate.
     */
    private static GraphicalEditor editor = null;

    /**
     * A boolean to determine whether the test shall be performed
     * in a read only environment.
     */
    public boolean m_readonly;

    static protected boolean first_time = true;

    /**
     * Constructor.
     */

    public ContextMenuTestsGenerics(String name)
    {
        super(null, name);
    }

    /* (non-Javadoc)
     * @see junit.framework.TestCase#setUp()
     */
    public void setUp() throws Exception
    {
    	super.setUp();

    	if ( first_time ) {
    	    Ooaofooa.setPersistEnabled(true);
            CorePlugin.disableParseAllOnResourceChange();
	       loadProject("ContextMenuTests");
	    	project = ResourcesPlugin.getWorkspace().getRoot().getProject("ContextMenuTests");
	    	m_sys = getSystemModel("ContextMenuTests");
            // open a class diagram editor on any subsystem
            Package_c uut = Package_c.PackageInstance(modelRoot,new Package_by_name_c("Test Subsystem"));
            CanvasTestUtils.openDiagramEditor(uut);
            editor = ((ModelEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getGraphicalEditor();
        }
    }
    
    public void testComparePaletteWithCME(){
    	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Test Subsystem"));
    	IFile file = obj.getFile();
    	TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);

    	Menu menu = null;
    	if(editor == null) {
    		// this element does not have a diagram
    		// representation, add the element to the
    		// core selection and use the explorer
    		// context menu
    		Selection.getInstance().clear();
    		Selection.getInstance().addToSelection(obj);
    		menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    		// get the menu from the SWT Canvas
    		menu = editor.getCanvas().getMenu();
    	}

    	HashMap< String, Integer> CME = new HashMap<String,Integer>();
    	CME.put( "Activity",2);
    	CME.put( "Classes",3);
    	CME.put( "Components",4);
    	CME.put( "External",5);
    	CME.put( "Interaction",6);
    	CME.put( "Types",7);
    	CME.put( "Use Case",8);

    	HashMap< String, Integer> Activity = new HashMap<String,Integer>();
    	Activity.put( "Accept Event Action",2);
    	Activity.put( "Action",3);
    	Activity.put( "Object Node",4);
    	Activity.put( "Send Signal Action",5);
    	Activity.put( "Interaction",6);
    	Activity.put( "Accept Time Event Action",7);

    	HashMap< String, Integer> Classes = new HashMap<String,Integer>();
    	Classes.put( "Class",2);
    	Classes.put( "Imported Class",3);

    	HashMap< String, Integer> Components = new HashMap<String,Integer>();
    	Components.put( "Component",2);
    	Components.put( "Component Reference",3);
    	Components.put( "Interface",4);

    	HashMap< String, Integer> External = new HashMap<String,Integer>();
    	External.put( "External Entity",2);

    	HashMap< String, Integer> Types = new HashMap<String,Integer>();
    	Types.put( "Constant Specification",2);
    	Types.put( "Enumeration Data Type",3);
    	Types.put( "Structured Data Type",4);
    	Types.put( "User Data Type",5);
    	Types.put( "Interaction",6);

    	HashMap< String, Integer> Interaction = new HashMap<String,Integer>();
    	Interaction.put( "Actor",2);
    	Interaction.put( "Class",3);
    	Interaction.put( "Component",4);
    	Interaction.put( "Instance",5);
    	Interaction.put( "External Entity",6);
    	Interaction.put( "Package Participant",7);

    	HashMap< String, Integer> Usecase = new HashMap<String,Integer>();
    	Usecase.put( "Use Case",2);


    	boolean cme_label = false;
    	boolean found = false;
    	GraphicalEditor editor = ((ModelEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getGraphicalEditor();

    	PaletteRoot root = editor.getDomain().getPaletteViewer().getPaletteRoot();
    	List<?> children = root.getChildren();
    	for(Object paletteChild : children) {
    		if(paletteChild instanceof PaletteDrawer) {
    			PaletteDrawer drawer = (PaletteDrawer) paletteChild;
    			String drawerName = drawer.getLabel();
    			List<?> drawerChildren = drawer.getChildren();
    			for(Object drawerChild : drawerChildren) {
    				if(drawerChild instanceof ToolEntry) {
    					ToolEntry entry = (ToolEntry) drawerChild;
    					String toolName = entry.getLabel();
    					cme_label = false;
    					if (CME.get(drawerName) != null){
    						if ( drawerName.equalsIgnoreCase("Activity")){
    							if ( Activity.get(toolName)!= null){
    								cme_label = true;
    							}


    						}else if (drawerName.equalsIgnoreCase( "Classes")){
    							if ( Classes.get(toolName)!= null){
    								cme_label = true;
    							}

    						}else if (drawerName.equalsIgnoreCase( "Components")){
    							if ( Components.get(toolName)!= null){
    								cme_label = true;
    							}
    						}
    						else if (drawerName.equalsIgnoreCase( "External")){
    							if ( External.get(toolName)!= null){
    								cme_label = true;
    							}
    						}
    						else if (drawerName.equalsIgnoreCase( "Interaction")){
    							if ( Interaction.get(toolName)!= null){
    								cme_label = true;
    							}
    						}
    						else if (drawerName.equalsIgnoreCase( "Types")){
    							if ( Types.get(toolName)!= null){
    								cme_label = true;
    							}
    						}

    						else if (drawerName.equalsIgnoreCase( "Use Case")){
    							if ( Usecase.get(toolName)!= null){
    								cme_label = true;
    							}
    						}

    						if (cme_label){
    							CanvasUtilities.checkItemStatusInContextMenu(menu,
    									toolName, "", false);

    							MenuItem[] items2 = UITestingUtilities.getMenuItems(menu, "New");
    							Menu menu2 = items2[CME.get(drawerName) ].getMenu();
    							MenuItem[] items3 = UITestingUtilities.getMenuItems(menu2, "");
    							for ( int i = 0; i < items3.length; i++){
    								if ( items3[i].getText().replace(" ", "").equalsIgnoreCase(toolName.replace(" ", ""))){
    									found = true;
    									break;
    								}
    							}
    							assertTrue(found);
    							found = false;
    						}
    					}
    				}
    			}
    		} else if(paletteChild instanceof ToolEntry) {
    			String toolName = ((ToolEntry) paletteChild).getLabel();
    		}
    	}
    }
    public void testContextMenuDeleteActionOnS_DOM() {
   
        Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("ContextMenuTests"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_DOM() {
   
        Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("ContextMenuTests"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_DPK() {
   
     	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("TestElementS_DPKforDelete"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_DPK() {
   
     	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("TestElementS_DPKforDelete"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_UDT() {
   
    
		UserDataType_c obj  = UserDataType_c.UserDataTypeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((UserDataType_c) candidate).Get_name().equals("TestElementS_UDTforDelete")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_UDT() {
   
    
		UserDataType_c obj  = UserDataType_c.UserDataTypeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((UserDataType_c) candidate).Get_name().equals("TestElementS_UDTforRename")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_EDT() {
   
    
		 EnumerationDataType_c obj = EnumerationDataType_c.EnumerationDataTypeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_EDT() {
   
    
		 EnumerationDataType_c obj = EnumerationDataType_c.EnumerationDataTypeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_ENUM() {
   
    
         Enumerator_c obj = null;
         if (BaseTest.testGlobals)
         	obj = Enumerator_c.EnumeratorInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = Enumerator_c.EnumeratorInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_ENUM() {
   
    
         Enumerator_c obj = null;
         if (BaseTest.testGlobals)
         	obj = Enumerator_c.EnumeratorInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = Enumerator_c.EnumeratorInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnCNST_CSP() {
   
    
         ConstantSpecification_c obj = null;
         if (BaseTest.testGlobals)
         	obj = ConstantSpecification_c.ConstantSpecificationInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = ConstantSpecification_c.ConstantSpecificationInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnCNST_CSP() {
   
    
         ConstantSpecification_c obj = null;
         if (BaseTest.testGlobals)
         	obj = ConstantSpecification_c.ConstantSpecificationInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = ConstantSpecification_c.ConstantSpecificationInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnCNST_LSC() {
   
    
         LiteralSymbolicConstant_c obj = null;
         if (BaseTest.testGlobals)
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnCNST_LSC() {
   
    
         LiteralSymbolicConstant_c obj = null;
         if (BaseTest.testGlobals)
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_FPK() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("TestFunctionPKG"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_FPK() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("TestFunctionPKG"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_SYNC() {
   
    
		 Function_c obj = Function_c.FunctionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_SYNC() {
   
    
		 Function_c obj = Function_c.FunctionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_SPARM() {
   
    
		 FunctionParameter_c obj = FunctionParameter_c.FunctionParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_SPARM() {
   
    
		 FunctionParameter_c obj = FunctionParameter_c.FunctionParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_EEPK() {
   
     	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("External Entities"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_EEPK() {
   
     	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("External Entities"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_EE() {
   
    
		 ExternalEntity_c obj = ExternalEntity_c.ExternalEntityInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_EE() {
   
    
		 ExternalEntity_c obj = ExternalEntity_c.ExternalEntityInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_BRG() {
   
    
		 Bridge_c obj = Bridge_c.BridgeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_BRG() {
   
    
		 Bridge_c obj = Bridge_c.BridgeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_BPARM() {
   
    
		 BridgeParameter_c obj = BridgeParameter_c.BridgeParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_BPARM() {
   
    
		 BridgeParameter_c obj = BridgeParameter_c.BridgeParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_SS() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Formalize Menu Tests"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_SS() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Formalize Menu Tests"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnO_OBJ() {
   
    
		 ModelClass_c obj = ModelClass_c.ModelClassInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnO_OBJ() {
   
    
		 ModelClass_c obj = ModelClass_c.ModelClassInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforDelete")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforRename")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnO_TFR() {
   
    
		 Operation_c obj = Operation_c.OperationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnO_TFR() {
   
    
		 Operation_c obj = Operation_c.OperationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnO_TPARM() {
   
    
		 OperationParameter_c obj = OperationParameter_c.OperationParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnO_TPARM() {
   
    
		 OperationParameter_c obj = OperationParameter_c.OperationParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_ISM() {
   
    
		 InstanceStateMachine_c obj = InstanceStateMachine_c.InstanceStateMachineInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_NLEVT() {
   
    
		 NonLocalEvent_c obj = NonLocalEvent_c.NonLocalEventInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_EVT() {
   
    
		StateMachineEvent_c obj  = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEvent_c) candidate).getMning().equals("TestElementSM_EVTforDelete")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnSM_EVT() {
   
    
		StateMachineEvent_c obj  = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEvent_c) candidate).getMning().equals("TestElementSM_EVTforRename")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_EVTDI() {
   
    
		 StateMachineEventDataItem_c obj = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnSM_EVTDI() {
   
    
		 StateMachineEventDataItem_c obj = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_ASM() {
   
    
		 ClassStateMachine_c obj = ClassStateMachine_c.ClassStateMachineInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_STATE() {
   
    
		StateMachineState_c obj  = StateMachineState_c.StateMachineStateInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineState_c) candidate).getName().equals("TestElementSM_STATEforDelete")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnSM_STATE() {
   
    
		StateMachineState_c obj  = StateMachineState_c.StateMachineStateInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineState_c) candidate).getName().equals("TestElementSM_STATEforRename")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnO_IOBJ() {
   
    
		 ImportedClass_c obj = ImportedClass_c.ImportedClassInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnR_REL() {
   
    
		 Association_c obj = Association_c.AssociationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_TXN() {
   
    
		 Transition_c obj = Transition_c.TransitionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnSM_CRTXN() {
   
    
		 CreationTransition_c obj = CreationTransition_c.CreationTransitionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnR_ASSR() {
   
    
		 ClassAsLink_c obj = ClassAsLink_c.ClassAsLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnR_SUB() {
   
    
		 ClassAsSubtype_c obj = ClassAsSubtype_c.ClassAsSubtypeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuAddtoIdentifierActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforAddtoIdentifier")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Add to Identifier", "", m_readonly));
    }
    public void testContextMenuRemovefromIdentifierActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforRemovefromIdentifier")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Remove from Identifier", "", m_readonly));
    }
    public void testContextMenuSetasDerivedAttributeActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforSetasDerivedAttribute")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Set as Derived Attribute", "", m_readonly));
    }
    public void testContextMenuSetasBaseAttributeActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforSetasBaseAttribute")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Set as Base Attribute", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforMoveUp")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforMoveDown")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuCombineWithActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforCombineWith")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Combine With", "", m_readonly));
    }
    public void testContextMenuSplitActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforSplit")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Split", "", m_readonly));
    }
    public void testContextMenuBinaryFormalizeActionOnR_REL() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
					return true;
				}
				return false;
			}

		});
		Association_c obj = Association_c.getOneR_RELOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuLinkedFormalizeActionOnR_REL() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
					return true;
				}
				return false;
			}

		});
		Association_c obj = Association_c.getOneR_RELOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuLinkedFormalizeActionOnR_ASSR() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
					return true;
				}
				return false;
			}

		});
		ClassAsLink_c obj = ClassAsLink_c.getOneR_ASSROnR211(LinkedAssociation_c.getOneR_ASSOCOnR206(Association_c.getManyR_RELsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuInheritanceFormalizeActionOnR_REL() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
					return true;
				}
				return false;
			}

		});
		Association_c obj = Association_c.getOneR_RELOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuInheritanceFormalizeActionOnR_SUB() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
					return true;
				}
				return false;
			}

		});
	  	ClassAsSubtype_c obj = ClassAsSubtype_c.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206(Association_c.getManyR_RELsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuUnformalizeActionOnR_REL() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		Association_c obj = Association_c.getOneR_RELOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Unformalize", "", m_readonly));
    }
    public void testContextMenuUnformalizeActionOnR_ASSR() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		ClassAsLink_c obj = ClassAsLink_c.getOneR_ASSROnR211(LinkedAssociation_c.getOneR_ASSOCOnR206(Association_c.getManyR_RELsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Unformalize", "", m_readonly));
    }
    public void testContextMenuUnformalizeActionOnR_SUB() {
   
    
	  Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {
  
			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
	  	ClassAsSubtype_c obj = ClassAsSubtype_c.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c.getOneR_SUBSUPOnR206(Association_c.getManyR_RELsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Unformalize", "", m_readonly));
    }
    public void testContextMenuGenericPackageAssignEventActionOnSM_TXN() {
   
    
Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		ModelClass_c mc = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem), new ClassQueryInterface_c() {
			public boolean evaluate(Object candidate) {
				if(((ModelClass_c)candidate).getName().equals("Class B")) {
					return true;
				}
    			return false;
			}

		});
		Transition_c obj = Transition_c.getOneSM_TXNOnR505(StateMachine_c.getOneSM_SMOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(mc)));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Assign Event", "", m_readonly));
    }
    public void testContextMenuRemoveEventActionOnSM_TXN() {
   
    
Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		ModelClass_c mc = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem), new ClassQueryInterface_c() {
			public boolean evaluate(Object candidate) {
				if(((ModelClass_c)candidate).getName().equals("Class A")) {
					return true;
				}
    			return false;
			}

		});
		Transition_c obj = Transition_c.getOneSM_TXNOnR505(StateMachine_c.getOneSM_SMOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(mc)));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Remove Event", "", m_readonly));
    }
    public void testContextMenuGenericPackageAssignEventActionOnSM_CRTXN() {
   
    
Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		ModelClass_c mc = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem), new ClassQueryInterface_c() {
			public boolean evaluate(Object candidate) {
				if(((ModelClass_c)candidate).getName().equals("Class B")) {
					return true;
				}
    			return false;
			}

		});
    CreationTransition_c obj = CreationTransition_c.getOneSM_CRTXNOnR507(Transition_c.getManySM_TXNsOnR505(StateMachine_c.getOneSM_SMOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(mc))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Assign Event", "", m_readonly));
    }
    public void testContextMenuRemoveEventActionOnSM_CRTXN() {
   
    
Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Package_c)candidate).getName().equals("Test Subsystem")) {
					return true;
				}
				return false;
			}

		});
		ModelClass_c mc = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem), new ClassQueryInterface_c() {
			public boolean evaluate(Object candidate) {
				if(((ModelClass_c)candidate).getName().equals("Class A")) {
					return true;
				}
    			return false;
			}

		});
    CreationTransition_c obj = CreationTransition_c.getOneSM_CRTXNOnR507(Transition_c.getManySM_TXNsOnR505(StateMachine_c.getOneSM_SMOnR517(InstanceStateMachine_c.getManySM_ISMsOnR518(mc))));

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Remove Event", "", m_readonly));
    }
    public void testContextMenuGenericPackageIgnoreinStateActionOnSM_EVT() {
   
    
		StateMachineEvent_c obj  = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEvent_c) candidate).getMning().equals("TestElementSM_EVTforIgnoreinState")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Ignore in State", "", m_readonly));
    }
    public void testContextMenuGenericPackageCantHappeninStateActionOnSM_EVT() {
   
    
		StateMachineEvent_c obj  = StateMachineEvent_c.StateMachineEventInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEvent_c) candidate).getMning().equals("TestElementSM_EVTforCantHappeninState")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Cant Happen in State", "", m_readonly));
    }
    public void testContextMenuGenericPackageIgnoreEventActionOnSM_STATE() {
   
    
		StateMachineState_c obj  = StateMachineState_c.StateMachineStateInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineState_c) candidate).getName().equals("TestElementSM_STATEforIgnoreEvent")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Ignore Event", "", m_readonly));
    }
    public void testContextMenuGenericPackageCantHappenEventActionOnSM_STATE() {
   
    
		StateMachineState_c obj  = StateMachineState_c.StateMachineStateInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineState_c) candidate).getName().equals("TestElementSM_STATEforCantHappenEvent")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Cant Happen Event", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnCOMM_COMM() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Communication"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnCOMM_COMM() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Communication"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnCOMM_LNK() {
   
    
		 CommunicationLink_c obj = CommunicationLink_c.CommunicationLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnUC_UCC() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("UC Package"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnUC_UCC() {
   
      	Package_c obj = Package_c.PackageInstance(modelRoot , new Package_by_name_c("UC Package"));
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnIA_UCP() {
   
    
		 UseCaseParticipant_c obj = UseCaseParticipant_c.UseCaseParticipantInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnIA_UCP() {
   
    
		 UseCaseParticipant_c obj = UseCaseParticipant_c.UseCaseParticipantInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnUC_BA() {
   
    
		 BinaryAssociation_c obj = BinaryAssociation_c.BinaryAssociationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnUC_G() {
   
    
		 Generalization_c obj = Generalization_c.GeneralizationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnUC_I() {
   
    
		 Include_c obj = Include_c.IncludeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnUC_E() {
   
    
		 Extend_c obj = Extend_c.ExtendInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_FJ() {
   
    
		 ForkJoinNode_c obj = ForkJoinNode_c.ForkJoinNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_FJ() {
   
    
		 ForkJoinNode_c obj = ForkJoinNode_c.ForkJoinNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_INI() {
   
    
		 InitialNode_c obj = InitialNode_c.InitialNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_E() {
   
    
		 ActivityEdge_c obj = ActivityEdge_c.ActivityEdgeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_E() {
   
    
		 ActivityEdge_c obj = ActivityEdge_c.ActivityEdgeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_AF() {
   
    
		 ActivityFinalNode_c obj = ActivityFinalNode_c.ActivityFinalNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_FF() {
   
    
		 FlowFinalNode_c obj = FlowFinalNode_c.FlowFinalNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_GA() {
   
    
		 ActivityDiagramAction_c obj = ActivityDiagramAction_c.ActivityDiagramActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_GA() {
   
    
		 ActivityDiagramAction_c obj = ActivityDiagramAction_c.ActivityDiagramActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_DM() {
   
    
		 DecisionMergeNode_c obj = DecisionMergeNode_c.DecisionMergeNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_DM() {
   
    
		 DecisionMergeNode_c obj = DecisionMergeNode_c.DecisionMergeNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_OBJ() {
   
    
		 ObjectNode_c obj = ObjectNode_c.ObjectNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_OBJ() {
   
    
		 ObjectNode_c obj = ObjectNode_c.ObjectNodeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_AEA() {
   
    
		 AcceptEventAction_c obj = AcceptEventAction_c.AcceptEventActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_AEA() {
   
    
		 AcceptEventAction_c obj = AcceptEventAction_c.AcceptEventActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_ATE() {
   
    
		 AcceptTimeEventAction_c obj = AcceptTimeEventAction_c.AcceptTimeEventActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_ATE() {
   
    
		 AcceptTimeEventAction_c obj = AcceptTimeEventAction_c.AcceptTimeEventActionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_SS() {
   
    
		 SendSignal_c obj = SendSignal_c.SendSignalInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_SS() {
   
    
		 SendSignal_c obj = SendSignal_c.SendSignalInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnA_AP() {
   
    
		 ActivityPartition_c obj = ActivityPartition_c.ActivityPartitionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnA_AP() {
   
    
		 ActivityPartition_c obj = ActivityPartition_c.ActivityPartitionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_SDT() {
   
    
         StructuredDataType_c obj = null;
         if (BaseTest.testGlobals)
         	obj = StructuredDataType_c.StructuredDataTypeInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = StructuredDataType_c.StructuredDataTypeInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_SDT() {
   
    
         StructuredDataType_c obj = null;
         if (BaseTest.testGlobals)
         	obj = StructuredDataType_c.StructuredDataTypeInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = StructuredDataType_c.StructuredDataTypeInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuDeleteActionOnS_MBR() {
   
    
         StructureMember_c obj = null;
         if (BaseTest.testGlobals)
         	obj = StructureMember_c.StructureMemberInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = StructureMember_c.StructureMemberInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuRenameActionOnS_MBR() {
   
    
         StructureMember_c obj = null;
         if (BaseTest.testGlobals)
         	obj = StructureMember_c.StructureMemberInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = StructureMember_c.StructureMemberInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnS_MBR() {
   
    
        StructureMember_c obj = null;
        if (BaseTest.testGlobals)
        	obj  = StructureMember_c.StructureMemberInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot(), new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StructureMember_c) candidate).getName().equals("TestElementS_MBRforMoveUp")) {
					return true;
				}
				return false;
			}
		});
        else 
	        obj  = StructureMember_c.StructureMemberInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot(), new ClassQueryInterface_c() {
	
				public boolean evaluate(Object candidate) {
					if(((StructureMember_c) candidate).getName().equals("TestElementS_MBRforMoveUp")) {
						return true;
					}
					return false;
				}
	
			});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnS_MBR() {
   
    
        StructureMember_c obj = null;
        if (BaseTest.testGlobals)
        	obj  = StructureMember_c.StructureMemberInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot(), new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StructureMember_c) candidate).getName().equals("TestElementS_MBRforMoveDown")) {
					return true;
				}
				return false;
			}
		});
        else 
	        obj  = StructureMember_c.StructureMemberInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot(), new ClassQueryInterface_c() {
	
				public boolean evaluate(Object candidate) {
					if(((StructureMember_c) candidate).getName().equals("TestElementS_MBRforMoveDown")) {
						return true;
					}
					return false;
				}
	
			});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuPublishReferencesActionOnO_OBJ() {
   
    
        String v_prefEnableInstanceReferences = "bridgepoint_prefs_enable_instance_references";
        if ((Pref_c.Getboolean(v_prefEnableInstanceReferences) == false)) {
          return;
        }
  
        ModelClass_c obj = ModelClass_c.ModelClassInstance(modelRoot);

			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Publish References", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnO_TPARM() {
   
    
		OperationParameter_c obj  = OperationParameter_c.OperationParameterInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((OperationParameter_c) candidate).getName().equals("TestElementO_TPARMforMoveUp")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnO_TPARM() {
   
    
		OperationParameter_c obj  = OperationParameter_c.OperationParameterInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((OperationParameter_c) candidate).getName().equals("TestElementO_TPARMforMoveDown")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnS_SPARM() {
   
    
		FunctionParameter_c obj  = FunctionParameter_c.FunctionParameterInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((FunctionParameter_c) candidate).getName().equals("TestElementS_SPARMforMoveUp")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnS_SPARM() {
   
    
		FunctionParameter_c obj  = FunctionParameter_c.FunctionParameterInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((FunctionParameter_c) candidate).getName().equals("TestElementS_SPARMforMoveDown")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnS_BPARM() {
   
    
		 BridgeParameter_c obj = BridgeParameter_c.BridgeParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnS_BPARM() {
   
    
		 BridgeParameter_c obj = BridgeParameter_c.BridgeParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnSM_EVTDI() {
   
    
		StateMachineEventDataItem_c obj  = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEventDataItem_c) candidate).getName().equals("TestElementSM_EVTDIforMoveUp")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnSM_EVTDI() {
   
    
		StateMachineEventDataItem_c obj  = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((StateMachineEventDataItem_c) candidate).getName().equals("TestElementSM_EVTDIforMoveDown")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnO_TFR() {
   
    
		Operation_c obj  = Operation_c.OperationInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Operation_c) candidate).getName().equals("TestElementO_TFRforMoveUp")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnO_TFR() {
   
    
		Operation_c obj  = Operation_c.OperationInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Operation_c) candidate).getName().equals("TestElementO_TFRforMoveDown")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuMoveUpActionOnS_ENUM() {
   
    
        Enumerator_c obj = null;
        if (BaseTest.testGlobals)
        	obj  = Enumerator_c.EnumeratorInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot(), new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Enumerator_c) candidate).getName().equals("TestElementS_ENUMforMoveUp")) {
					return true;
				}
				return false;
			}
		});
        else 
	        obj  = Enumerator_c.EnumeratorInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot(), new ClassQueryInterface_c() {
	
				public boolean evaluate(Object candidate) {
					if(((Enumerator_c) candidate).getName().equals("TestElementS_ENUMforMoveUp")) {
						return true;
					}
					return false;
				}
	
			});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Up", "", m_readonly));
    }
    public void testContextMenuMoveDownActionOnS_ENUM() {
   
    
        Enumerator_c obj = null;
        if (BaseTest.testGlobals)
        	obj  = Enumerator_c.EnumeratorInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot(), new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Enumerator_c) candidate).getName().equals("TestElementS_ENUMforMoveDown")) {
					return true;
				}
				return false;
			}
		});
        else 
	        obj  = Enumerator_c.EnumeratorInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot(), new ClassQueryInterface_c() {
	
				public boolean evaluate(Object candidate) {
					if(((Enumerator_c) candidate).getName().equals("TestElementS_ENUMforMoveDown")) {
						return true;
					}
					return false;
				}
	
			});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Move Down", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnS_BPARM() {
   
    
		 BridgeParameter_c obj = BridgeParameter_c.BridgeParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetReturnTypeActionOnS_BRG() {
   
    
		 Bridge_c obj = Bridge_c.BridgeInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Return Type", "", m_readonly));
    }
    public void testContextMenuSetReturnTypeActionOnS_SYNC() {
   
    
		 Function_c obj = Function_c.FunctionInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Return Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnS_SPARM() {
   
    
		 FunctionParameter_c obj = FunctionParameter_c.FunctionParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnS_MBR() {
   
    
         StructureMember_c obj = null;
         if (BaseTest.testGlobals)
         	obj = StructureMember_c.StructureMemberInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = StructureMember_c.StructureMemberInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnSM_EVTDI() {
   
    
		 StateMachineEventDataItem_c obj = StateMachineEventDataItem_c.StateMachineEventDataItemInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnO_TPARM() {
   
    
		 OperationParameter_c obj = OperationParameter_c.OperationParameterInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetReturnTypeActionOnO_TFR() {
   
    
		 Operation_c obj = Operation_c.OperationInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Return Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnO_ATTR() {
   
    
		Attribute_c obj  = Attribute_c.AttributeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((Attribute_c) candidate).getName().equals("TestElementO_ATTRforSetType")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnS_UDT() {
   
    
		UserDataType_c obj  = UserDataType_c.UserDataTypeInstance(modelRoot, new ClassQueryInterface_c() {

			public boolean evaluate(Object candidate) {
				if(((UserDataType_c) candidate).Get_name().equals("TestElementS_UDTforSetType")) {
					return true;
				}
				return false;
			}

		});
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuSetTypeActionOnCNST_LSC() {
   
    
         LiteralSymbolicConstant_c obj = null;
         if (BaseTest.testGlobals)
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(Package_c.getOneEP_PKGOnR1401(m_sys,new ClassQueryInterface_c() {

                public boolean evaluate(Object candidate) {
                    if(((Package_c)candidate).getName().equals("Datatypes")) {
                        return true;
                    }
                    return false;
                }

            }).getModelRoot());
         else	
         	obj = LiteralSymbolicConstant_c.LiteralSymbolicConstantInstance(DataTypePackage_c.getOneS_DPKOnR4400(m_sys).getModelRoot());
         
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Type", "", m_readonly));
    }
    public void testContextMenuGenericPackageAssignClassActionOnO_IOBJ() {
   
    
		 ImportedClass_c obj = ImportedClass_c.ImportedClassInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Assign Class", "", m_readonly));
    }
    public void testContextMenuLinkFormalizeActionOnCOMM_LNK() {
   
    
		 CommunicationLink_c obj = CommunicationLink_c.CommunicationLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Formalize", "", m_readonly));
    }
    public void testContextMenuUnformalizeActionOnCOMM_LNK() {
   
    
		 CommunicationLink_c obj = CommunicationLink_c.CommunicationLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Unformalize", "", m_readonly));
    }
    public void testContextMenuToggleStartVisibilityActionOnCOMM_LNK() {
   
    
		 CommunicationLink_c obj = CommunicationLink_c.CommunicationLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Toggle Start Visibility", "", m_readonly));
    }
    public void testContextMenuToggleEndVisibilityActionOnCOMM_LNK() {
   
    
		 CommunicationLink_c obj = CommunicationLink_c.CommunicationLinkInstance(modelRoot);
			IFile file = obj.getFile();
			TestUtil.changeFileReadonlyStatus(m_readonly, file);

    	UITestingUtilities.clearGraphicalSelection();
    	editor = UITestingUtilities.addElementToGraphicalSelection(obj);
    	
    	Menu menu = null;
    	
    	if(editor == null) {
    	  // this element does not have a diagram
    	  // representation, add the element to the
    	  // core selection and use the explorer
    	  // context menu
    	  Selection.getInstance().clear();
    	  Selection.getInstance().addToSelection(obj);
    	  menu = getExplorerView().getTreeViewer().getControl().getMenu();
    	} else {
    	  // get the menu from the SWT Canvas
    	  menu = editor.getCanvas().getMenu();
		}

    	// check the status of the action
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Toggle End Visibility", "", m_readonly));
    }
    /**
     * Test the clearing of redo/undo stacks
     * after using replace with functionality
     */
    public void testClearingUndoRedoStacksAfterReplaceWith() throws CoreException {
        if(m_readonly){
            //Under MFP, this unit test is disabled as all the editors dont
            //allow editing if under lying file is read-only. This test was
            //written with respect to single file persistence, which allowed
            //editing thru the editor even if underlying file is marked as read-
            //only. The persistence code used to remove the read-only attribute
            //before writing the file.
            return;
        }
        
       Package_c uut = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Formalize Menu Tests"));
        CanvasTestUtils.openDiagramEditor(uut);
        editor = ((ModelEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getGraphicalEditor();

        // get the menu from the SWT Canvas
    	Menu menu = editor.getCanvas().getMenu();

    	// bend an association
    	    	Package_c subsystem = Package_c.PackageInstance(modelRoot, new ClassQueryInterface_c() {

            public boolean evaluate(Object candidate) {
                if(((Package_c)candidate).getName().equals("Formalize Menu Tests")) {
                    return true;
                }
                return false;
            }

        }); 

        ModelClass_c mc = ModelClass_c.getOneO_OBJOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(subsystem), new ClassQueryInterface_c() {
            public boolean evaluate(Object candidate) {
                if(((ModelClass_c)candidate).getName().equals("Class A")) {
                    return true;
                }
                return false;
            }

        });
    	Shape_c shp = CanvasEditorUtils.getShape(mc, true);
    	Connector_c con = CanvasTestUtils.getAnyConnectorAttachedToShape(shp);
    	GraphicalElement_c element = GraphicalElement_c.getOneGD_GEOnR2(con);
    	UITestingUtilities.addElementToGraphicalSelection(element.getRepresents());
    	editor.zoomSelected();
        while(PlatformUI.getWorkbench().getDisplay().readAndDispatch());
    	Point center = CanvasTestUtils.getConnectorCenter(con);
    	center = CanvasTestUtils.convertToMouseCoor(center, editor.getModel());
    	CanvasTestUtils.doMousePress(center.x, center.y);
    	CanvasTestUtils.doMouseMove(center.x, center.y + 20);
    	CanvasTestUtils.doMouseRelease(center.x, center.y + 20);
    	// bend the line again
    	CanvasTestUtils.doMousePress(center.x, center.y + 20);
    	CanvasTestUtils.doMouseMove(center.x + 20, center.y + 20);
    	CanvasTestUtils.doMouseRelease(center.x + 20, center.y + 20);
    	// assert that the undo item is available
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Undo", "", m_readonly));

    	// undo the last transaction to populate the redo stack
    	// get the top level menu items
    	Action undo = mc.getTransactionManager().getUndoAction();
    	undo.run();

    	// assert that the redo item is available
    	assertTrue(UITestingUtilities.checkItemStatusInContextMenu(menu, "Redo", "", m_readonly));

        // Replace model file contents with the local history
        Package_c ss = Package_c.PackageInstance(modelRoot , new Package_by_name_c("Formalize Menu Tests"));
        if ( m_readonly ) {
            IFile file = ss.getFile();
            TestUtil.changeFileReadonlyStatus(!m_readonly, file);
        }

        IFileState[] fh = ss.getFile().getHistory(null);
        ss.getFile().setContents(fh[0], true, true, null);

    	assertTrue("The undo menu item was still available after a Replace With", UITestingUtilities.checkItemStatusInContextMenu(menu, "Undo", "", true));
    	assertTrue("The redo menu item was still available after a Replace With", UITestingUtilities.checkItemStatusInContextMenu(menu, "Redo", "", true));
    }
 }
