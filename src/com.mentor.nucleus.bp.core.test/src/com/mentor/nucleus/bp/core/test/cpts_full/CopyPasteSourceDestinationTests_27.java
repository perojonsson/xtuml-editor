//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrixFull.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts_full;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_27 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_27(String arg0) {
        super("CopyPasteSourceDestinationTests_27", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B55).
     * 
     */
    public void testA73_B55() {
        test_id = getTestId("A73", "B55", "1");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B56).
     * 
     */
    public void testA73_B56() {
        test_id = getTestId("A73", "B56", "2");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B57).
     * 
     */
    public void testA73_B57() {
        test_id = getTestId("A73", "B57", "3");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B58).
     * 
     */
    public void testA73_B58() {
        test_id = getTestId("A73", "B58", "4");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B59).
     * 
     */
    public void testA73_B59() {
        test_id = getTestId("A73", "B59", "5");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B60).
     * 
     */
    public void testA73_B60() {
        test_id = getTestId("A73", "B60", "6");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B61).
     * 
     */
    public void testA73_B61() {
        test_id = getTestId("A73", "B61", "7");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B62).
     * 
     */
    public void testA73_B62() {
        test_id = getTestId("A73", "B62", "8");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B63).
     * 
     */
    public void testA73_B63() {
        test_id = getTestId("A73", "B63", "9");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B64).
     * 
     */
    public void testA73_B64() {
        test_id = getTestId("A73", "B64", "10");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B65).
     * 
     */
    public void testA73_B65() {
        test_id = getTestId("A73", "B65", "11");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B66).
     * 
     */
    public void testA73_B66() {
        test_id = getTestId("A73", "B66", "12");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B67).
     * 
     */
    public void testA73_B67() {
        test_id = getTestId("A73", "B67", "13");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B68).
     * 
     */
    public void testA73_B68() {
        test_id = getTestId("A73", "B68", "14");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B69).
     * 
     */
    public void testA73_B69() {
        test_id = getTestId("A73", "B69", "15");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B70).
     * 
     */
    public void testA73_B70() {
        test_id = getTestId("A73", "B70", "16");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B71).
     * 
     */
    public void testA73_B71() {
        test_id = getTestId("A73", "B71", "17");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B72).
     * 
     */
    public void testA73_B72() {
        test_id = getTestId("A73", "B72", "18");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B73).
     * 
     */
    public void testA73_B73() {
        test_id = getTestId("A73", "B73", "19");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B74).
     * 
     */
    public void testA73_B74() {
        test_id = getTestId("A73", "B74", "20");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B75).
     * 
     */
    public void testA73_B75() {
        test_id = getTestId("A73", "B75", "21");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B76).
     * 
     */
    public void testA73_B76() {
        test_id = getTestId("A73", "B76", "22");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B77).
     * 
     */
    public void testA73_B77() {
        test_id = getTestId("A73", "B77", "23");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B78).
     * 
     */
    public void testA73_B78() {
        test_id = getTestId("A73", "B78", "24");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B79).
     * 
     */
    public void testA73_B79() {
        test_id = getTestId("A73", "B79", "25");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B80).
     * 
     */
    public void testA73_B80() {
        test_id = getTestId("A73", "B80", "26");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B81).
     * 
     */
    public void testA73_B81() {
        test_id = getTestId("A73", "B81", "27");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B82).
     * 
     */
    public void testA73_B82() {
        test_id = getTestId("A73", "B82", "28");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B83).
     * 
     */
    public void testA73_B83() {
        test_id = getTestId("A73", "B83", "29");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B84).
     * 
     */
    public void testA73_B84() {
        test_id = getTestId("A73", "B84", "30");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B85).
     * 
     */
    public void testA73_B85() {
        test_id = getTestId("A73", "B85", "31");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B86).
     * 
     */
    public void testA73_B86() {
        test_id = getTestId("A73", "B86", "32");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B87).
     * 
     */
    public void testA73_B87() {
        test_id = getTestId("A73", "B87", "33");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B88).
     * 
     */
    public void testA73_B88() {
        test_id = getTestId("A73", "B88", "34");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B89).
     * 
     */
    public void testA73_B89() {
        test_id = getTestId("A73", "B89", "35");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B90).
     * 
     */
    public void testA73_B90() {
        test_id = getTestId("A73", "B90", "36");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B91).
     * 
     */
    public void testA73_B91() {
        test_id = getTestId("A73", "B91", "37");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B92).
     * 
     */
    public void testA73_B92() {
        test_id = getTestId("A73", "B92", "38");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A73) and row (B93).
     * 
     */
    public void testA73_B93() {
        test_id = getTestId("A73", "B93", "39");

        NonRootModelElement src = selectA("A73");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B1).
     * 
     */
    public void testA74_B1() {
        test_id = getTestId("A74", "B1", "40");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B2).
     * 
     */
    public void testA74_B2() {
        test_id = getTestId("A74", "B2", "41");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B3).
     * 
     */
    public void testA74_B3() {
        test_id = getTestId("A74", "B3", "42");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B4).
     * 
     */
    public void testA74_B4() {
        test_id = getTestId("A74", "B4", "43");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B5).
     * 
     */
    public void testA74_B5() {
        test_id = getTestId("A74", "B5", "44");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B6).
     * 
     */
    public void testA74_B6() {
        test_id = getTestId("A74", "B6", "45");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B7).
     * 
     */
    public void testA74_B7() {
        test_id = getTestId("A74", "B7", "46");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B8).
     * 
     */
    public void testA74_B8() {
        test_id = getTestId("A74", "B8", "47");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B9).
     * 
     */
    public void testA74_B9() {
        test_id = getTestId("A74", "B9", "48");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B10).
     * 
     */
    public void testA74_B10() {
        test_id = getTestId("A74", "B10", "49");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B11).
     * 
     */
    public void testA74_B11() {
        test_id = getTestId("A74", "B11", "50");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B12).
     * 
     */
    public void testA74_B12() {
        test_id = getTestId("A74", "B12", "51");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B13).
     * 
     */
    public void testA74_B13() {
        test_id = getTestId("A74", "B13", "52");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B14).
     * 
     */
    public void testA74_B14() {
        test_id = getTestId("A74", "B14", "53");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B15).
     * 
     */
    public void testA74_B15() {
        test_id = getTestId("A74", "B15", "54");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B16).
     * 
     */
    public void testA74_B16() {
        test_id = getTestId("A74", "B16", "55");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B17).
     * 
     */
    public void testA74_B17() {
        test_id = getTestId("A74", "B17", "56");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B18).
     * 
     */
    public void testA74_B18() {
        test_id = getTestId("A74", "B18", "57");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B19).
     * 
     */
    public void testA74_B19() {
        test_id = getTestId("A74", "B19", "58");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B20).
     * 
     */
    public void testA74_B20() {
        test_id = getTestId("A74", "B20", "59");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B21).
     * 
     */
    public void testA74_B21() {
        test_id = getTestId("A74", "B21", "60");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B22).
     * 
     */
    public void testA74_B22() {
        test_id = getTestId("A74", "B22", "61");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B23).
     * 
     */
    public void testA74_B23() {
        test_id = getTestId("A74", "B23", "62");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B24).
     * 
     */
    public void testA74_B24() {
        test_id = getTestId("A74", "B24", "63");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B25).
     * 
     */
    public void testA74_B25() {
        test_id = getTestId("A74", "B25", "64");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B26).
     * 
     */
    public void testA74_B26() {
        test_id = getTestId("A74", "B26", "65");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B27).
     * 
     */
    public void testA74_B27() {
        test_id = getTestId("A74", "B27", "66");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B28).
     * 
     */
    public void testA74_B28() {
        test_id = getTestId("A74", "B28", "67");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B29).
     * 
     */
    public void testA74_B29() {
        test_id = getTestId("A74", "B29", "68");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B30).
     * 
     */
    public void testA74_B30() {
        test_id = getTestId("A74", "B30", "69");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B31).
     * 
     */
    public void testA74_B31() {
        test_id = getTestId("A74", "B31", "70");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B32).
     * 
     */
    public void testA74_B32() {
        test_id = getTestId("A74", "B32", "71");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B33).
     * 
     */
    public void testA74_B33() {
        test_id = getTestId("A74", "B33", "72");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B34).
     * 
     */
    public void testA74_B34() {
        test_id = getTestId("A74", "B34", "73");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B35).
     * 
     */
    public void testA74_B35() {
        test_id = getTestId("A74", "B35", "74");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B36).
     * 
     */
    public void testA74_B36() {
        test_id = getTestId("A74", "B36", "75");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B37).
     * 
     */
    public void testA74_B37() {
        test_id = getTestId("A74", "B37", "76");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B38).
     * 
     */
    public void testA74_B38() {
        test_id = getTestId("A74", "B38", "77");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B39).
     * 
     */
    public void testA74_B39() {
        test_id = getTestId("A74", "B39", "78");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B40).
     * 
     */
    public void testA74_B40() {
        test_id = getTestId("A74", "B40", "79");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B41).
     * 
     */
    public void testA74_B41() {
        test_id = getTestId("A74", "B41", "80");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B42).
     * 
     */
    public void testA74_B42() {
        test_id = getTestId("A74", "B42", "81");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B43).
     * 
     */
    public void testA74_B43() {
        test_id = getTestId("A74", "B43", "82");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B44).
     * 
     */
    public void testA74_B44() {
        test_id = getTestId("A74", "B44", "83");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B45).
     * 
     */
    public void testA74_B45() {
        test_id = getTestId("A74", "B45", "84");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B46).
     * 
     */
    public void testA74_B46() {
        test_id = getTestId("A74", "B46", "85");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B47).
     * 
     */
    public void testA74_B47() {
        test_id = getTestId("A74", "B47", "86");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B48).
     * 
     */
    public void testA74_B48() {
        test_id = getTestId("A74", "B48", "87");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B49).
     * 
     */
    public void testA74_B49() {
        test_id = getTestId("A74", "B49", "88");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B50).
     * 
     */
    public void testA74_B50() {
        test_id = getTestId("A74", "B50", "89");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B51).
     * 
     */
    public void testA74_B51() {
        test_id = getTestId("A74", "B51", "90");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B52).
     * 
     */
    public void testA74_B52() {
        test_id = getTestId("A74", "B52", "91");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B53).
     * 
     */
    public void testA74_B53() {
        test_id = getTestId("A74", "B53", "92");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B54).
     * 
     */
    public void testA74_B54() {
        test_id = getTestId("A74", "B54", "93");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B55).
     * 
     */
    public void testA74_B55() {
        test_id = getTestId("A74", "B55", "94");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B56).
     * 
     */
    public void testA74_B56() {
        test_id = getTestId("A74", "B56", "95");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B57).
     * 
     */
    public void testA74_B57() {
        test_id = getTestId("A74", "B57", "96");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B58).
     * 
     */
    public void testA74_B58() {
        test_id = getTestId("A74", "B58", "97");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B59).
     * 
     */
    public void testA74_B59() {
        test_id = getTestId("A74", "B59", "98");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B60).
     * 
     */
    public void testA74_B60() {
        test_id = getTestId("A74", "B60", "99");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B61).
     * 
     */
    public void testA74_B61() {
        test_id = getTestId("A74", "B61", "100");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B62).
     * 
     */
    public void testA74_B62() {
        test_id = getTestId("A74", "B62", "101");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B63).
     * 
     */
    public void testA74_B63() {
        test_id = getTestId("A74", "B63", "102");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B64).
     * 
     */
    public void testA74_B64() {
        test_id = getTestId("A74", "B64", "103");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B65).
     * 
     */
    public void testA74_B65() {
        test_id = getTestId("A74", "B65", "104");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B66).
     * 
     */
    public void testA74_B66() {
        test_id = getTestId("A74", "B66", "105");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B67).
     * 
     */
    public void testA74_B67() {
        test_id = getTestId("A74", "B67", "106");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B68).
     * 
     */
    public void testA74_B68() {
        test_id = getTestId("A74", "B68", "107");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B69).
     * 
     */
    public void testA74_B69() {
        test_id = getTestId("A74", "B69", "108");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B70).
     * 
     */
    public void testA74_B70() {
        test_id = getTestId("A74", "B70", "109");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B71).
     * 
     */
    public void testA74_B71() {
        test_id = getTestId("A74", "B71", "110");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B72).
     * 
     */
    public void testA74_B72() {
        test_id = getTestId("A74", "B72", "111");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B73).
     * 
     */
    public void testA74_B73() {
        test_id = getTestId("A74", "B73", "112");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B74).
     * 
     */
    public void testA74_B74() {
        test_id = getTestId("A74", "B74", "113");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B75).
     * 
     */
    public void testA74_B75() {
        test_id = getTestId("A74", "B75", "114");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B76).
     * 
     */
    public void testA74_B76() {
        test_id = getTestId("A74", "B76", "115");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B77).
     * 
     */
    public void testA74_B77() {
        test_id = getTestId("A74", "B77", "116");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B78).
     * 
     */
    public void testA74_B78() {
        test_id = getTestId("A74", "B78", "117");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B79).
     * 
     */
    public void testA74_B79() {
        test_id = getTestId("A74", "B79", "118");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B80).
     * 
     */
    public void testA74_B80() {
        test_id = getTestId("A74", "B80", "119");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B81).
     * 
     */
    public void testA74_B81() {
        test_id = getTestId("A74", "B81", "120");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B82).
     * 
     */
    public void testA74_B82() {
        test_id = getTestId("A74", "B82", "121");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B83).
     * 
     */
    public void testA74_B83() {
        test_id = getTestId("A74", "B83", "122");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B84).
     * 
     */
    public void testA74_B84() {
        test_id = getTestId("A74", "B84", "123");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B85).
     * 
     */
    public void testA74_B85() {
        test_id = getTestId("A74", "B85", "124");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B86).
     * 
     */
    public void testA74_B86() {
        test_id = getTestId("A74", "B86", "125");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B87).
     * 
     */
    public void testA74_B87() {
        test_id = getTestId("A74", "B87", "126");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B88).
     * 
     */
    public void testA74_B88() {
        test_id = getTestId("A74", "B88", "127");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B89).
     * 
     */
    public void testA74_B89() {
        test_id = getTestId("A74", "B89", "128");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B90).
     * 
     */
    public void testA74_B90() {
        test_id = getTestId("A74", "B90", "129");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B91).
     * 
     */
    public void testA74_B91() {
        test_id = getTestId("A74", "B91", "130");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B92).
     * 
     */
    public void testA74_B92() {
        test_id = getTestId("A74", "B92", "131");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A74) and row (B93).
     * 
     */
    public void testA74_B93() {
        test_id = getTestId("A74", "B93", "132");

        NonRootModelElement src = selectA("A74");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B1).
     * 
     */
    public void testA75_B1() {
        test_id = getTestId("A75", "B1", "133");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B2).
     * 
     */
    public void testA75_B2() {
        test_id = getTestId("A75", "B2", "134");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B3).
     * 
     */
    public void testA75_B3() {
        test_id = getTestId("A75", "B3", "135");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B4).
     * 
     */
    public void testA75_B4() {
        test_id = getTestId("A75", "B4", "136");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B5).
     * 
     */
    public void testA75_B5() {
        test_id = getTestId("A75", "B5", "137");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B6).
     * 
     */
    public void testA75_B6() {
        test_id = getTestId("A75", "B6", "138");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B7).
     * 
     */
    public void testA75_B7() {
        test_id = getTestId("A75", "B7", "139");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B8).
     * 
     */
    public void testA75_B8() {
        test_id = getTestId("A75", "B8", "140");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B9).
     * 
     */
    public void testA75_B9() {
        test_id = getTestId("A75", "B9", "141");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B10).
     * 
     */
    public void testA75_B10() {
        test_id = getTestId("A75", "B10", "142");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B11).
     * 
     */
    public void testA75_B11() {
        test_id = getTestId("A75", "B11", "143");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B12).
     * 
     */
    public void testA75_B12() {
        test_id = getTestId("A75", "B12", "144");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B13).
     * 
     */
    public void testA75_B13() {
        test_id = getTestId("A75", "B13", "145");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B14).
     * 
     */
    public void testA75_B14() {
        test_id = getTestId("A75", "B14", "146");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B15).
     * 
     */
    public void testA75_B15() {
        test_id = getTestId("A75", "B15", "147");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B16).
     * 
     */
    public void testA75_B16() {
        test_id = getTestId("A75", "B16", "148");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B17).
     * 
     */
    public void testA75_B17() {
        test_id = getTestId("A75", "B17", "149");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B18).
     * 
     */
    public void testA75_B18() {
        test_id = getTestId("A75", "B18", "150");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B19).
     * 
     */
    public void testA75_B19() {
        test_id = getTestId("A75", "B19", "151");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B20).
     * 
     */
    public void testA75_B20() {
        test_id = getTestId("A75", "B20", "152");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B21).
     * 
     */
    public void testA75_B21() {
        test_id = getTestId("A75", "B21", "153");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B22).
     * 
     */
    public void testA75_B22() {
        test_id = getTestId("A75", "B22", "154");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B23).
     * 
     */
    public void testA75_B23() {
        test_id = getTestId("A75", "B23", "155");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B24).
     * 
     */
    public void testA75_B24() {
        test_id = getTestId("A75", "B24", "156");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B25).
     * 
     */
    public void testA75_B25() {
        test_id = getTestId("A75", "B25", "157");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B26).
     * 
     */
    public void testA75_B26() {
        test_id = getTestId("A75", "B26", "158");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B27).
     * 
     */
    public void testA75_B27() {
        test_id = getTestId("A75", "B27", "159");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B28).
     * 
     */
    public void testA75_B28() {
        test_id = getTestId("A75", "B28", "160");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B29).
     * 
     */
    public void testA75_B29() {
        test_id = getTestId("A75", "B29", "161");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B30).
     * 
     */
    public void testA75_B30() {
        test_id = getTestId("A75", "B30", "162");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B31).
     * 
     */
    public void testA75_B31() {
        test_id = getTestId("A75", "B31", "163");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B32).
     * 
     */
    public void testA75_B32() {
        test_id = getTestId("A75", "B32", "164");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B33).
     * 
     */
    public void testA75_B33() {
        test_id = getTestId("A75", "B33", "165");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B34).
     * 
     */
    public void testA75_B34() {
        test_id = getTestId("A75", "B34", "166");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B35).
     * 
     */
    public void testA75_B35() {
        test_id = getTestId("A75", "B35", "167");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B36).
     * 
     */
    public void testA75_B36() {
        test_id = getTestId("A75", "B36", "168");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B37).
     * 
     */
    public void testA75_B37() {
        test_id = getTestId("A75", "B37", "169");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B38).
     * 
     */
    public void testA75_B38() {
        test_id = getTestId("A75", "B38", "170");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B39).
     * 
     */
    public void testA75_B39() {
        test_id = getTestId("A75", "B39", "171");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B40).
     * 
     */
    public void testA75_B40() {
        test_id = getTestId("A75", "B40", "172");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B41).
     * 
     */
    public void testA75_B41() {
        test_id = getTestId("A75", "B41", "173");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B42).
     * 
     */
    public void testA75_B42() {
        test_id = getTestId("A75", "B42", "174");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B43).
     * 
     */
    public void testA75_B43() {
        test_id = getTestId("A75", "B43", "175");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B44).
     * 
     */
    public void testA75_B44() {
        test_id = getTestId("A75", "B44", "176");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B45).
     * 
     */
    public void testA75_B45() {
        test_id = getTestId("A75", "B45", "177");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B46).
     * 
     */
    public void testA75_B46() {
        test_id = getTestId("A75", "B46", "178");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B47).
     * 
     */
    public void testA75_B47() {
        test_id = getTestId("A75", "B47", "179");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B48).
     * 
     */
    public void testA75_B48() {
        test_id = getTestId("A75", "B48", "180");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B49).
     * 
     */
    public void testA75_B49() {
        test_id = getTestId("A75", "B49", "181");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B50).
     * 
     */
    public void testA75_B50() {
        test_id = getTestId("A75", "B50", "182");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B51).
     * 
     */
    public void testA75_B51() {
        test_id = getTestId("A75", "B51", "183");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B52).
     * 
     */
    public void testA75_B52() {
        test_id = getTestId("A75", "B52", "184");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B53).
     * 
     */
    public void testA75_B53() {
        test_id = getTestId("A75", "B53", "185");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B54).
     * 
     */
    public void testA75_B54() {
        test_id = getTestId("A75", "B54", "186");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B55).
     * 
     */
    public void testA75_B55() {
        test_id = getTestId("A75", "B55", "187");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B56).
     * 
     */
    public void testA75_B56() {
        test_id = getTestId("A75", "B56", "188");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B57).
     * 
     */
    public void testA75_B57() {
        test_id = getTestId("A75", "B57", "189");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B58).
     * 
     */
    public void testA75_B58() {
        test_id = getTestId("A75", "B58", "190");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B59).
     * 
     */
    public void testA75_B59() {
        test_id = getTestId("A75", "B59", "191");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B60).
     * 
     */
    public void testA75_B60() {
        test_id = getTestId("A75", "B60", "192");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B61).
     * 
     */
    public void testA75_B61() {
        test_id = getTestId("A75", "B61", "193");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B62).
     * 
     */
    public void testA75_B62() {
        test_id = getTestId("A75", "B62", "194");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B63).
     * 
     */
    public void testA75_B63() {
        test_id = getTestId("A75", "B63", "195");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B64).
     * 
     */
    public void testA75_B64() {
        test_id = getTestId("A75", "B64", "196");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B65).
     * 
     */
    public void testA75_B65() {
        test_id = getTestId("A75", "B65", "197");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B66).
     * 
     */
    public void testA75_B66() {
        test_id = getTestId("A75", "B66", "198");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B67).
     * 
     */
    public void testA75_B67() {
        test_id = getTestId("A75", "B67", "199");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B68).
     * 
     */
    public void testA75_B68() {
        test_id = getTestId("A75", "B68", "200");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B69).
     * 
     */
    public void testA75_B69() {
        test_id = getTestId("A75", "B69", "201");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B70).
     * 
     */
    public void testA75_B70() {
        test_id = getTestId("A75", "B70", "202");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B71).
     * 
     */
    public void testA75_B71() {
        test_id = getTestId("A75", "B71", "203");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B72).
     * 
     */
    public void testA75_B72() {
        test_id = getTestId("A75", "B72", "204");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B73).
     * 
     */
    public void testA75_B73() {
        test_id = getTestId("A75", "B73", "205");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B74).
     * 
     */
    public void testA75_B74() {
        test_id = getTestId("A75", "B74", "206");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B75).
     * 
     */
    public void testA75_B75() {
        test_id = getTestId("A75", "B75", "207");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B76).
     * 
     */
    public void testA75_B76() {
        test_id = getTestId("A75", "B76", "208");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B77).
     * 
     */
    public void testA75_B77() {
        test_id = getTestId("A75", "B77", "209");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B78).
     * 
     */
    public void testA75_B78() {
        test_id = getTestId("A75", "B78", "210");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B79).
     * 
     */
    public void testA75_B79() {
        test_id = getTestId("A75", "B79", "211");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B80).
     * 
     */
    public void testA75_B80() {
        test_id = getTestId("A75", "B80", "212");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B81).
     * 
     */
    public void testA75_B81() {
        test_id = getTestId("A75", "B81", "213");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B82).
     * 
     */
    public void testA75_B82() {
        test_id = getTestId("A75", "B82", "214");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B83).
     * 
     */
    public void testA75_B83() {
        test_id = getTestId("A75", "B83", "215");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B84).
     * 
     */
    public void testA75_B84() {
        test_id = getTestId("A75", "B84", "216");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B85).
     * 
     */
    public void testA75_B85() {
        test_id = getTestId("A75", "B85", "217");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B86).
     * 
     */
    public void testA75_B86() {
        test_id = getTestId("A75", "B86", "218");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B87).
     * 
     */
    public void testA75_B87() {
        test_id = getTestId("A75", "B87", "219");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B88).
     * 
     */
    public void testA75_B88() {
        test_id = getTestId("A75", "B88", "220");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B89).
     * 
     */
    public void testA75_B89() {
        test_id = getTestId("A75", "B89", "221");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B90).
     * 
     */
    public void testA75_B90() {
        test_id = getTestId("A75", "B90", "222");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B91).
     * 
     */
    public void testA75_B91() {
        test_id = getTestId("A75", "B91", "223");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B92).
     * 
     */
    public void testA75_B92() {
        test_id = getTestId("A75", "B92", "224");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A75) and row (B93).
     * 
     */
    public void testA75_B93() {
        test_id = getTestId("A75", "B93", "225");

        NonRootModelElement src = selectA("A75");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B1).
     * 
     */
    public void testA76_B1() {
        test_id = getTestId("A76", "B1", "226");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B2).
     * 
     */
    public void testA76_B2() {
        test_id = getTestId("A76", "B2", "227");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B3).
     * 
     */
    public void testA76_B3() {
        test_id = getTestId("A76", "B3", "228");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B4).
     * 
     */
    public void testA76_B4() {
        test_id = getTestId("A76", "B4", "229");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B5).
     * 
     */
    public void testA76_B5() {
        test_id = getTestId("A76", "B5", "230");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B6).
     * 
     */
    public void testA76_B6() {
        test_id = getTestId("A76", "B6", "231");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B7).
     * 
     */
    public void testA76_B7() {
        test_id = getTestId("A76", "B7", "232");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B8).
     * 
     */
    public void testA76_B8() {
        test_id = getTestId("A76", "B8", "233");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B9).
     * 
     */
    public void testA76_B9() {
        test_id = getTestId("A76", "B9", "234");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B10).
     * 
     */
    public void testA76_B10() {
        test_id = getTestId("A76", "B10", "235");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B11).
     * 
     */
    public void testA76_B11() {
        test_id = getTestId("A76", "B11", "236");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B12).
     * 
     */
    public void testA76_B12() {
        test_id = getTestId("A76", "B12", "237");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B13).
     * 
     */
    public void testA76_B13() {
        test_id = getTestId("A76", "B13", "238");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B14).
     * 
     */
    public void testA76_B14() {
        test_id = getTestId("A76", "B14", "239");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B15).
     * 
     */
    public void testA76_B15() {
        test_id = getTestId("A76", "B15", "240");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B16).
     * 
     */
    public void testA76_B16() {
        test_id = getTestId("A76", "B16", "241");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B17).
     * 
     */
    public void testA76_B17() {
        test_id = getTestId("A76", "B17", "242");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B18).
     * 
     */
    public void testA76_B18() {
        test_id = getTestId("A76", "B18", "243");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B19).
     * 
     */
    public void testA76_B19() {
        test_id = getTestId("A76", "B19", "244");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B20).
     * 
     */
    public void testA76_B20() {
        test_id = getTestId("A76", "B20", "245");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B21).
     * 
     */
    public void testA76_B21() {
        test_id = getTestId("A76", "B21", "246");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B22).
     * 
     */
    public void testA76_B22() {
        test_id = getTestId("A76", "B22", "247");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B23).
     * 
     */
    public void testA76_B23() {
        test_id = getTestId("A76", "B23", "248");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B24).
     * 
     */
    public void testA76_B24() {
        test_id = getTestId("A76", "B24", "249");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A76) and row (B25).
     * 
     */
    public void testA76_B25() {
        test_id = getTestId("A76", "B25", "250");

        NonRootModelElement src = selectA("A76");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
