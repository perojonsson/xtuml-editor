//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       RTOMoveMatrix.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.rtomove;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class RTOMoveTests_0 extends RTOMoveTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public RTOMoveTests_0(String arg0) {
        super("RTOMoveTests_0", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B1D1).
     * 
     */
    public void testA1C1_B1D1() {
        test_id = getTestId("A1C1", "B1D1", "1");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B1D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B1D2).
     * 
     */
    public void testA1C1_B1D2() {
        test_id = getTestId("A1C1", "B1D2", "2");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B1D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B2D1).
     * 
     */
    public void testA1C1_B2D1() {
        test_id = getTestId("A1C1", "B2D1", "3");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B2D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B2D2).
     * 
     */
    public void testA1C1_B2D2() {
        test_id = getTestId("A1C1", "B2D2", "4");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B2D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B3D1).
     * 
     */
    public void testA1C1_B3D1() {
        test_id = getTestId("A1C1", "B3D1", "5");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B3D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B3D2).
     * 
     */
    public void testA1C1_B3D2() {
        test_id = getTestId("A1C1", "B3D2", "6");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B3D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B4D1).
     * 
     */
    public void testA1C1_B4D1() {
        test_id = getTestId("A1C1", "B4D1", "7");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B4D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B4D2).
     * 
     */
    public void testA1C1_B4D2() {
        test_id = getTestId("A1C1", "B4D2", "8");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B4D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B5D1).
     * 
     */
    public void testA1C1_B5D1() {
        test_id = getTestId("A1C1", "B5D1", "9");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B5D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B5D2).
     * 
     */
    public void testA1C1_B5D2() {
        test_id = getTestId("A1C1", "B5D2", "10");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B5D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B6D1).
     * 
     */
    public void testA1C1_B6D1() {
        test_id = getTestId("A1C1", "B6D1", "11");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B6D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B6D2).
     * 
     */
    public void testA1C1_B6D2() {
        test_id = getTestId("A1C1", "B6D2", "12");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B6D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B7D1).
     * 
     */
    public void testA1C1_B7D1() {
        test_id = getTestId("A1C1", "B7D1", "13");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B7D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B7D2).
     * 
     */
    public void testA1C1_B7D2() {
        test_id = getTestId("A1C1", "B7D2", "14");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B7D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B8D1).
     * 
     */
    public void testA1C1_B8D1() {
        test_id = getTestId("A1C1", "B8D1", "15");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B8D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B8D2).
     * 
     */
    public void testA1C1_B8D2() {
        test_id = getTestId("A1C1", "B8D2", "16");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B8D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B9D1).
     * 
     */
    public void testA1C1_B9D1() {
        test_id = getTestId("A1C1", "B9D1", "17");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B9D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B9D2).
     * 
     */
    public void testA1C1_B9D2() {
        test_id = getTestId("A1C1", "B9D2", "18");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B9D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B10D1).
     * 
     */
    public void testA1C1_B10D1() {
        test_id = getTestId("A1C1", "B10D1", "19");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B10D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B10D2).
     * 
     */
    public void testA1C1_B10D2() {
        test_id = getTestId("A1C1", "B10D2", "20");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B10D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B11D1).
     * 
     */
    public void testA1C1_B11D1() {
        test_id = getTestId("A1C1", "B11D1", "21");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B11D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B11D2).
     * 
     */
    public void testA1C1_B11D2() {
        test_id = getTestId("A1C1", "B11D2", "22");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B11D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B12D1).
     * 
     */
    public void testA1C1_B12D1() {
        test_id = getTestId("A1C1", "B12D1", "23");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B12D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C1) and row (B12D2).
     * 
     */
    public void testA1C1_B12D2() {
        test_id = getTestId("A1C1", "B12D2", "24");

        NonRootModelElement src = selectAC("A1C1");

        NonRootModelElement dest = selectBD("B12D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B1D1).
     * 
     */
    public void testA1C2_B1D1() {
        test_id = getTestId("A1C2", "B1D1", "25");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B1D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B1D2).
     * 
     */
    public void testA1C2_B1D2() {
        test_id = getTestId("A1C2", "B1D2", "26");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B1D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B2D1).
     * 
     */
    public void testA1C2_B2D1() {
        test_id = getTestId("A1C2", "B2D1", "27");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B2D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B2D2).
     * 
     */
    public void testA1C2_B2D2() {
        test_id = getTestId("A1C2", "B2D2", "28");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B2D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B3D1).
     * 
     */
    public void testA1C2_B3D1() {
        test_id = getTestId("A1C2", "B3D1", "29");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B3D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B3D2).
     * 
     */
    public void testA1C2_B3D2() {
        test_id = getTestId("A1C2", "B3D2", "30");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B3D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B4D1).
     * 
     */
    public void testA1C2_B4D1() {
        test_id = getTestId("A1C2", "B4D1", "31");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B4D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B4D2).
     * 
     */
    public void testA1C2_B4D2() {
        test_id = getTestId("A1C2", "B4D2", "32");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B4D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B5D1).
     * 
     */
    public void testA1C2_B5D1() {
        test_id = getTestId("A1C2", "B5D1", "33");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B5D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B5D2).
     * 
     */
    public void testA1C2_B5D2() {
        test_id = getTestId("A1C2", "B5D2", "34");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B5D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B6D1).
     * 
     */
    public void testA1C2_B6D1() {
        test_id = getTestId("A1C2", "B6D1", "35");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B6D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B6D2).
     * 
     */
    public void testA1C2_B6D2() {
        test_id = getTestId("A1C2", "B6D2", "36");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B6D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B7D1).
     * 
     */
    public void testA1C2_B7D1() {
        test_id = getTestId("A1C2", "B7D1", "37");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B7D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B7D2).
     * 
     */
    public void testA1C2_B7D2() {
        test_id = getTestId("A1C2", "B7D2", "38");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B7D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B8D1).
     * 
     */
    public void testA1C2_B8D1() {
        test_id = getTestId("A1C2", "B8D1", "39");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B8D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B8D2).
     * 
     */
    public void testA1C2_B8D2() {
        test_id = getTestId("A1C2", "B8D2", "40");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B8D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B9D1).
     * 
     */
    public void testA1C2_B9D1() {
        test_id = getTestId("A1C2", "B9D1", "41");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B9D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B9D2).
     * 
     */
    public void testA1C2_B9D2() {
        test_id = getTestId("A1C2", "B9D2", "42");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B9D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B10D1).
     * 
     */
    public void testA1C2_B10D1() {
        test_id = getTestId("A1C2", "B10D1", "43");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B10D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B10D2).
     * 
     */
    public void testA1C2_B10D2() {
        test_id = getTestId("A1C2", "B10D2", "44");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B10D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B11D1).
     * 
     */
    public void testA1C2_B11D1() {
        test_id = getTestId("A1C2", "B11D1", "45");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B11D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B11D2).
     * 
     */
    public void testA1C2_B11D2() {
        test_id = getTestId("A1C2", "B11D2", "46");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B11D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B12D1).
     * 
     */
    public void testA1C2_B12D1() {
        test_id = getTestId("A1C2", "B12D1", "47");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B12D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C2) and row (B12D2).
     * 
     */
    public void testA1C2_B12D2() {
        test_id = getTestId("A1C2", "B12D2", "48");

        NonRootModelElement src = selectAC("A1C2");

        NonRootModelElement dest = selectBD("B12D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B1D1).
     * 
     */
    public void testA1C3_B1D1() {
        test_id = getTestId("A1C3", "B1D1", "49");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B1D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B1D2).
     * 
     */
    public void testA1C3_B1D2() {
        test_id = getTestId("A1C3", "B1D2", "50");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B1D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B2D1).
     * 
     */
    public void testA1C3_B2D1() {
        test_id = getTestId("A1C3", "B2D1", "51");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B2D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B2D2).
     * 
     */
    public void testA1C3_B2D2() {
        test_id = getTestId("A1C3", "B2D2", "52");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B2D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B3D1).
     * 
     */
    public void testA1C3_B3D1() {
        test_id = getTestId("A1C3", "B3D1", "53");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B3D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B3D2).
     * 
     */
    public void testA1C3_B3D2() {
        test_id = getTestId("A1C3", "B3D2", "54");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B3D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B4D1).
     * 
     */
    public void testA1C3_B4D1() {
        test_id = getTestId("A1C3", "B4D1", "55");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B4D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B4D2).
     * 
     */
    public void testA1C3_B4D2() {
        test_id = getTestId("A1C3", "B4D2", "56");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B4D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B5D1).
     * 
     */
    public void testA1C3_B5D1() {
        test_id = getTestId("A1C3", "B5D1", "57");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B5D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B5D2).
     * 
     */
    public void testA1C3_B5D2() {
        test_id = getTestId("A1C3", "B5D2", "58");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B5D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B6D1).
     * 
     */
    public void testA1C3_B6D1() {
        test_id = getTestId("A1C3", "B6D1", "59");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B6D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B6D2).
     * 
     */
    public void testA1C3_B6D2() {
        test_id = getTestId("A1C3", "B6D2", "60");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B6D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B7D1).
     * 
     */
    public void testA1C3_B7D1() {
        test_id = getTestId("A1C3", "B7D1", "61");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B7D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B7D2).
     * 
     */
    public void testA1C3_B7D2() {
        test_id = getTestId("A1C3", "B7D2", "62");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B7D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B8D1).
     * 
     */
    public void testA1C3_B8D1() {
        test_id = getTestId("A1C3", "B8D1", "63");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B8D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B8D2).
     * 
     */
    public void testA1C3_B8D2() {
        test_id = getTestId("A1C3", "B8D2", "64");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B8D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B9D1).
     * 
     */
    public void testA1C3_B9D1() {
        test_id = getTestId("A1C3", "B9D1", "65");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B9D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B9D2).
     * 
     */
    public void testA1C3_B9D2() {
        test_id = getTestId("A1C3", "B9D2", "66");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B9D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B10D1).
     * 
     */
    public void testA1C3_B10D1() {
        test_id = getTestId("A1C3", "B10D1", "67");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B10D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B10D2).
     * 
     */
    public void testA1C3_B10D2() {
        test_id = getTestId("A1C3", "B10D2", "68");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B10D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B11D1).
     * 
     */
    public void testA1C3_B11D1() {
        test_id = getTestId("A1C3", "B11D1", "69");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B11D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B11D2).
     * 
     */
    public void testA1C3_B11D2() {
        test_id = getTestId("A1C3", "B11D2", "70");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B11D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B12D1).
     * 
     */
    public void testA1C3_B12D1() {
        test_id = getTestId("A1C3", "B12D1", "71");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B12D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C3) and row (B12D2).
     * 
     */
    public void testA1C3_B12D2() {
        test_id = getTestId("A1C3", "B12D2", "72");

        NonRootModelElement src = selectAC("A1C3");

        NonRootModelElement dest = selectBD("B12D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B1D1).
     * 
     */
    public void testA1C4_B1D1() {
        test_id = getTestId("A1C4", "B1D1", "73");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B1D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B1D2).
     * 
     */
    public void testA1C4_B1D2() {
        test_id = getTestId("A1C4", "B1D2", "74");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B1D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B2D1).
     * 
     */
    public void testA1C4_B2D1() {
        test_id = getTestId("A1C4", "B2D1", "75");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B2D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B2D2).
     * 
     */
    public void testA1C4_B2D2() {
        test_id = getTestId("A1C4", "B2D2", "76");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B2D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B3D1).
     * 
     */
    public void testA1C4_B3D1() {
        test_id = getTestId("A1C4", "B3D1", "77");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B3D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B3D2).
     * 
     */
    public void testA1C4_B3D2() {
        test_id = getTestId("A1C4", "B3D2", "78");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B3D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B4D1).
     * 
     */
    public void testA1C4_B4D1() {
        test_id = getTestId("A1C4", "B4D1", "79");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B4D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B4D2).
     * 
     */
    public void testA1C4_B4D2() {
        test_id = getTestId("A1C4", "B4D2", "80");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B4D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B5D1).
     * 
     */
    public void testA1C4_B5D1() {
        test_id = getTestId("A1C4", "B5D1", "81");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B5D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B5D2).
     * 
     */
    public void testA1C4_B5D2() {
        test_id = getTestId("A1C4", "B5D2", "82");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B5D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B6D1).
     * 
     */
    public void testA1C4_B6D1() {
        test_id = getTestId("A1C4", "B6D1", "83");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B6D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B6D2).
     * 
     */
    public void testA1C4_B6D2() {
        test_id = getTestId("A1C4", "B6D2", "84");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B6D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B7D1).
     * 
     */
    public void testA1C4_B7D1() {
        test_id = getTestId("A1C4", "B7D1", "85");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B7D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B7D2).
     * 
     */
    public void testA1C4_B7D2() {
        test_id = getTestId("A1C4", "B7D2", "86");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B7D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B8D1).
     * 
     */
    public void testA1C4_B8D1() {
        test_id = getTestId("A1C4", "B8D1", "87");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B8D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B8D2).
     * 
     */
    public void testA1C4_B8D2() {
        test_id = getTestId("A1C4", "B8D2", "88");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B8D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B9D1).
     * 
     */
    public void testA1C4_B9D1() {
        test_id = getTestId("A1C4", "B9D1", "89");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B9D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B9D2).
     * 
     */
    public void testA1C4_B9D2() {
        test_id = getTestId("A1C4", "B9D2", "90");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B9D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B10D1).
     * 
     */
    public void testA1C4_B10D1() {
        test_id = getTestId("A1C4", "B10D1", "91");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B10D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B10D2).
     * 
     */
    public void testA1C4_B10D2() {
        test_id = getTestId("A1C4", "B10D2", "92");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B10D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B11D1).
     * 
     */
    public void testA1C4_B11D1() {
        test_id = getTestId("A1C4", "B11D1", "93");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B11D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B11D2).
     * 
     */
    public void testA1C4_B11D2() {
        test_id = getTestId("A1C4", "B11D2", "94");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B11D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B12D1).
     * 
     */
    public void testA1C4_B12D1() {
        test_id = getTestId("A1C4", "B12D1", "95");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B12D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A1C4) and row (B12D2).
     * 
     */
    public void testA1C4_B12D2() {
        test_id = getTestId("A1C4", "B12D2", "96");

        NonRootModelElement src = selectAC("A1C4");

        NonRootModelElement dest = selectBD("B12D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C1) and row (B13D1).
     * 
     */
    public void testA2C1_B13D1() {
        test_id = getTestId("A2C1", "B13D1", "97");

        NonRootModelElement src = selectAC("A2C1");

        NonRootModelElement dest = selectBD("B13D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C1) and row (B13D2).
     * 
     */
    public void testA2C1_B13D2() {
        test_id = getTestId("A2C1", "B13D2", "98");

        NonRootModelElement src = selectAC("A2C1");

        NonRootModelElement dest = selectBD("B13D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C2) and row (B13D1).
     * 
     */
    public void testA2C2_B13D1() {
        test_id = getTestId("A2C2", "B13D1", "99");

        NonRootModelElement src = selectAC("A2C2");

        NonRootModelElement dest = selectBD("B13D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C2) and row (B13D2).
     * 
     */
    public void testA2C2_B13D2() {
        test_id = getTestId("A2C2", "B13D2", "100");

        NonRootModelElement src = selectAC("A2C2");

        NonRootModelElement dest = selectBD("B13D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C3) and row (B13D1).
     * 
     */
    public void testA2C3_B13D1() {
        test_id = getTestId("A2C3", "B13D1", "101");

        NonRootModelElement src = selectAC("A2C3");

        NonRootModelElement dest = selectBD("B13D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C3) and row (B13D2).
     * 
     */
    public void testA2C3_B13D2() {
        test_id = getTestId("A2C3", "B13D2", "102");

        NonRootModelElement src = selectAC("A2C3");

        NonRootModelElement dest = selectBD("B13D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C4) and row (B13D1).
     * 
     */
    public void testA2C4_B13D1() {
        test_id = getTestId("A2C4", "B13D1", "103");

        NonRootModelElement src = selectAC("A2C4");

        NonRootModelElement dest = selectBD("B13D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A2C4) and row (B13D2).
     * 
     */
    public void testA2C4_B13D2() {
        test_id = getTestId("A2C4", "B13D2", "104");

        NonRootModelElement src = selectAC("A2C4");

        NonRootModelElement dest = selectBD("B13D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C1) and row (B14D1).
     * 
     */
    public void testA3C1_B14D1() {
        test_id = getTestId("A3C1", "B14D1", "105");

        NonRootModelElement src = selectAC("A3C1");

        NonRootModelElement dest = selectBD("B14D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C1) and row (B14D2).
     * 
     */
    public void testA3C1_B14D2() {
        test_id = getTestId("A3C1", "B14D2", "106");

        NonRootModelElement src = selectAC("A3C1");

        NonRootModelElement dest = selectBD("B14D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C2) and row (B14D1).
     * 
     */
    public void testA3C2_B14D1() {
        test_id = getTestId("A3C2", "B14D1", "107");

        NonRootModelElement src = selectAC("A3C2");

        NonRootModelElement dest = selectBD("B14D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C2) and row (B14D2).
     * 
     */
    public void testA3C2_B14D2() {
        test_id = getTestId("A3C2", "B14D2", "108");

        NonRootModelElement src = selectAC("A3C2");

        NonRootModelElement dest = selectBD("B14D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C3) and row (B14D1).
     * 
     */
    public void testA3C3_B14D1() {
        test_id = getTestId("A3C3", "B14D1", "109");

        NonRootModelElement src = selectAC("A3C3");

        NonRootModelElement dest = selectBD("B14D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C3) and row (B14D2).
     * 
     */
    public void testA3C3_B14D2() {
        test_id = getTestId("A3C3", "B14D2", "110");

        NonRootModelElement src = selectAC("A3C3");

        NonRootModelElement dest = selectBD("B14D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C4) and row (B14D1).
     * 
     */
    public void testA3C4_B14D1() {
        test_id = getTestId("A3C4", "B14D1", "111");

        NonRootModelElement src = selectAC("A3C4");

        NonRootModelElement dest = selectBD("B14D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A3C4) and row (B14D2).
     * 
     */
    public void testA3C4_B14D2() {
        test_id = getTestId("A3C4", "B14D2", "112");

        NonRootModelElement src = selectAC("A3C4");

        NonRootModelElement dest = selectBD("B14D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C1) and row (B15D1).
     * 
     */
    public void testA4C1_B15D1() {
        test_id = getTestId("A4C1", "B15D1", "113");

        NonRootModelElement src = selectAC("A4C1");

        NonRootModelElement dest = selectBD("B15D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C1) and row (B15D2).
     * 
     */
    public void testA4C1_B15D2() {
        test_id = getTestId("A4C1", "B15D2", "114");

        NonRootModelElement src = selectAC("A4C1");

        NonRootModelElement dest = selectBD("B15D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C1) and row (B16D1).
     * 
     */
    public void testA4C1_B16D1() {
        test_id = getTestId("A4C1", "B16D1", "115");

        NonRootModelElement src = selectAC("A4C1");

        NonRootModelElement dest = selectBD("B16D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C1) and row (B16D2).
     * 
     */
    public void testA4C1_B16D2() {
        test_id = getTestId("A4C1", "B16D2", "116");

        NonRootModelElement src = selectAC("A4C1");

        NonRootModelElement dest = selectBD("B16D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C2) and row (B15D1).
     * 
     */
    public void testA4C2_B15D1() {
        test_id = getTestId("A4C2", "B15D1", "117");

        NonRootModelElement src = selectAC("A4C2");

        NonRootModelElement dest = selectBD("B15D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C2) and row (B15D2).
     * 
     */
    public void testA4C2_B15D2() {
        test_id = getTestId("A4C2", "B15D2", "118");

        NonRootModelElement src = selectAC("A4C2");

        NonRootModelElement dest = selectBD("B15D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C2) and row (B16D1).
     * 
     */
    public void testA4C2_B16D1() {
        test_id = getTestId("A4C2", "B16D1", "119");

        NonRootModelElement src = selectAC("A4C2");

        NonRootModelElement dest = selectBD("B16D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C2) and row (B16D2).
     * 
     */
    public void testA4C2_B16D2() {
        test_id = getTestId("A4C2", "B16D2", "120");

        NonRootModelElement src = selectAC("A4C2");

        NonRootModelElement dest = selectBD("B16D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C3) and row (B15D1).
     * 
     */
    public void testA4C3_B15D1() {
        test_id = getTestId("A4C3", "B15D1", "121");

        NonRootModelElement src = selectAC("A4C3");

        NonRootModelElement dest = selectBD("B15D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C3) and row (B15D2).
     * 
     */
    public void testA4C3_B15D2() {
        test_id = getTestId("A4C3", "B15D2", "122");

        NonRootModelElement src = selectAC("A4C3");

        NonRootModelElement dest = selectBD("B15D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C3) and row (B16D1).
     * 
     */
    public void testA4C3_B16D1() {
        test_id = getTestId("A4C3", "B16D1", "123");

        NonRootModelElement src = selectAC("A4C3");

        NonRootModelElement dest = selectBD("B16D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C3) and row (B16D2).
     * 
     */
    public void testA4C3_B16D2() {
        test_id = getTestId("A4C3", "B16D2", "124");

        NonRootModelElement src = selectAC("A4C3");

        NonRootModelElement dest = selectBD("B16D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C4) and row (B15D1).
     * 
     */
    public void testA4C4_B15D1() {
        test_id = getTestId("A4C4", "B15D1", "125");

        NonRootModelElement src = selectAC("A4C4");

        NonRootModelElement dest = selectBD("B15D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C4) and row (B15D2).
     * 
     */
    public void testA4C4_B15D2() {
        test_id = getTestId("A4C4", "B15D2", "126");

        NonRootModelElement src = selectAC("A4C4");

        NonRootModelElement dest = selectBD("B15D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C4) and row (B16D1).
     * 
     */
    public void testA4C4_B16D1() {
        test_id = getTestId("A4C4", "B16D1", "127");

        NonRootModelElement src = selectAC("A4C4");

        NonRootModelElement dest = selectBD("B16D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A4C4) and row (B16D2).
     * 
     */
    public void testA4C4_B16D2() {
        test_id = getTestId("A4C4", "B16D2", "128");

        NonRootModelElement src = selectAC("A4C4");

        NonRootModelElement dest = selectBD("B16D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C1) and row (B17D1).
     * 
     */
    public void testA5C1_B17D1() {
        test_id = getTestId("A5C1", "B17D1", "129");

        NonRootModelElement src = selectAC("A5C1");

        NonRootModelElement dest = selectBD("B17D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C1) and row (B17D2).
     * 
     */
    public void testA5C1_B17D2() {
        test_id = getTestId("A5C1", "B17D2", "130");

        NonRootModelElement src = selectAC("A5C1");

        NonRootModelElement dest = selectBD("B17D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C2) and row (B17D1).
     * 
     */
    public void testA5C2_B17D1() {
        test_id = getTestId("A5C2", "B17D1", "131");

        NonRootModelElement src = selectAC("A5C2");

        NonRootModelElement dest = selectBD("B17D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not set back to cut rto", checkResult_rgoResolvedChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C2) and row (B17D2).
     * 
     */
    public void testA5C2_B17D2() {
        test_id = getTestId("A5C2", "B17D2", "132");

        NonRootModelElement src = selectAC("A5C2");

        NonRootModelElement dest = selectBD("B17D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C3) and row (B17D1).
     * 
     */
    public void testA5C3_B17D1() {
        test_id = getTestId("A5C3", "B17D1", "133");

        NonRootModelElement src = selectAC("A5C3");

        NonRootModelElement dest = selectBD("B17D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C3) and row (B17D2).
     * 
     */
    public void testA5C3_B17D2() {
        test_id = getTestId("A5C3", "B17D2", "134");

        NonRootModelElement src = selectAC("A5C3");

        NonRootModelElement dest = selectBD("B17D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C4) and row (B17D1).
     * 
     */
    public void testA5C4_B17D1() {
        test_id = getTestId("A5C4", "B17D1", "135");

        NonRootModelElement src = selectAC("A5C4");

        NonRootModelElement dest = selectBD("B17D1");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as default rto", checkResult_rgoUnresolved(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A5C4) and row (B17D2).
     * 
     */
    public void testA5C4_B17D2() {
        test_id = getTestId("A5C4", "B17D2", "136");

        NonRootModelElement src = selectAC("A5C4");

        NonRootModelElement dest = selectBD("B17D2");

        AC_BD_Action(src, dest);
        assertTrue("Referring element was not left as existing rto", checkResult_rgoResolvedNotChanged(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
