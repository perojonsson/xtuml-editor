//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrixFull.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts_full;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_33 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_33(String arg0) {
        super("CopyPasteSourceDestinationTests_33", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B67).
     * 
     */
    public void testA89_B67() {
        test_id = getTestId("A89", "B67", "1");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B68).
     * 
     */
    public void testA89_B68() {
        test_id = getTestId("A89", "B68", "2");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B69).
     * 
     */
    public void testA89_B69() {
        test_id = getTestId("A89", "B69", "3");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B70).
     * 
     */
    public void testA89_B70() {
        test_id = getTestId("A89", "B70", "4");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B71).
     * 
     */
    public void testA89_B71() {
        test_id = getTestId("A89", "B71", "5");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B72).
     * 
     */
    public void testA89_B72() {
        test_id = getTestId("A89", "B72", "6");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B73).
     * 
     */
    public void testA89_B73() {
        test_id = getTestId("A89", "B73", "7");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B74).
     * 
     */
    public void testA89_B74() {
        test_id = getTestId("A89", "B74", "8");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B75).
     * 
     */
    public void testA89_B75() {
        test_id = getTestId("A89", "B75", "9");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B76).
     * 
     */
    public void testA89_B76() {
        test_id = getTestId("A89", "B76", "10");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B77).
     * 
     */
    public void testA89_B77() {
        test_id = getTestId("A89", "B77", "11");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B78).
     * 
     */
    public void testA89_B78() {
        test_id = getTestId("A89", "B78", "12");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B79).
     * 
     */
    public void testA89_B79() {
        test_id = getTestId("A89", "B79", "13");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B80).
     * 
     */
    public void testA89_B80() {
        test_id = getTestId("A89", "B80", "14");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B81).
     * 
     */
    public void testA89_B81() {
        test_id = getTestId("A89", "B81", "15");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B82).
     * 
     */
    public void testA89_B82() {
        test_id = getTestId("A89", "B82", "16");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B83).
     * 
     */
    public void testA89_B83() {
        test_id = getTestId("A89", "B83", "17");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B84).
     * 
     */
    public void testA89_B84() {
        test_id = getTestId("A89", "B84", "18");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B85).
     * 
     */
    public void testA89_B85() {
        test_id = getTestId("A89", "B85", "19");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B86).
     * 
     */
    public void testA89_B86() {
        test_id = getTestId("A89", "B86", "20");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B87).
     * 
     */
    public void testA89_B87() {
        test_id = getTestId("A89", "B87", "21");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B88).
     * 
     */
    public void testA89_B88() {
        test_id = getTestId("A89", "B88", "22");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B89).
     * 
     */
    public void testA89_B89() {
        test_id = getTestId("A89", "B89", "23");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B90).
     * 
     */
    public void testA89_B90() {
        test_id = getTestId("A89", "B90", "24");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B91).
     * 
     */
    public void testA89_B91() {
        test_id = getTestId("A89", "B91", "25");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B92).
     * 
     */
    public void testA89_B92() {
        test_id = getTestId("A89", "B92", "26");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A89) and row (B93).
     * 
     */
    public void testA89_B93() {
        test_id = getTestId("A89", "B93", "27");

        NonRootModelElement src = selectA("A89");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B1).
     * 
     */
    public void testA90_B1() {
        test_id = getTestId("A90", "B1", "28");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B2).
     * 
     */
    public void testA90_B2() {
        test_id = getTestId("A90", "B2", "29");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B3).
     * 
     */
    public void testA90_B3() {
        test_id = getTestId("A90", "B3", "30");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B4).
     * 
     */
    public void testA90_B4() {
        test_id = getTestId("A90", "B4", "31");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B5).
     * 
     */
    public void testA90_B5() {
        test_id = getTestId("A90", "B5", "32");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B6).
     * 
     */
    public void testA90_B6() {
        test_id = getTestId("A90", "B6", "33");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B7).
     * 
     */
    public void testA90_B7() {
        test_id = getTestId("A90", "B7", "34");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B8).
     * 
     */
    public void testA90_B8() {
        test_id = getTestId("A90", "B8", "35");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B9).
     * 
     */
    public void testA90_B9() {
        test_id = getTestId("A90", "B9", "36");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B10).
     * 
     */
    public void testA90_B10() {
        test_id = getTestId("A90", "B10", "37");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B11).
     * 
     */
    public void testA90_B11() {
        test_id = getTestId("A90", "B11", "38");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B12).
     * 
     */
    public void testA90_B12() {
        test_id = getTestId("A90", "B12", "39");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B13).
     * 
     */
    public void testA90_B13() {
        test_id = getTestId("A90", "B13", "40");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B14).
     * 
     */
    public void testA90_B14() {
        test_id = getTestId("A90", "B14", "41");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B15).
     * 
     */
    public void testA90_B15() {
        test_id = getTestId("A90", "B15", "42");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B16).
     * 
     */
    public void testA90_B16() {
        test_id = getTestId("A90", "B16", "43");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B17).
     * 
     */
    public void testA90_B17() {
        test_id = getTestId("A90", "B17", "44");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B18).
     * 
     */
    public void testA90_B18() {
        test_id = getTestId("A90", "B18", "45");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B19).
     * 
     */
    public void testA90_B19() {
        test_id = getTestId("A90", "B19", "46");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B20).
     * 
     */
    public void testA90_B20() {
        test_id = getTestId("A90", "B20", "47");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B21).
     * 
     */
    public void testA90_B21() {
        test_id = getTestId("A90", "B21", "48");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B22).
     * 
     */
    public void testA90_B22() {
        test_id = getTestId("A90", "B22", "49");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B23).
     * 
     */
    public void testA90_B23() {
        test_id = getTestId("A90", "B23", "50");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B24).
     * 
     */
    public void testA90_B24() {
        test_id = getTestId("A90", "B24", "51");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B25).
     * 
     */
    public void testA90_B25() {
        test_id = getTestId("A90", "B25", "52");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B26).
     * 
     */
    public void testA90_B26() {
        test_id = getTestId("A90", "B26", "53");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B27).
     * 
     */
    public void testA90_B27() {
        test_id = getTestId("A90", "B27", "54");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B28).
     * 
     */
    public void testA90_B28() {
        test_id = getTestId("A90", "B28", "55");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B29).
     * 
     */
    public void testA90_B29() {
        test_id = getTestId("A90", "B29", "56");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B30).
     * 
     */
    public void testA90_B30() {
        test_id = getTestId("A90", "B30", "57");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B31).
     * 
     */
    public void testA90_B31() {
        test_id = getTestId("A90", "B31", "58");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B32).
     * 
     */
    public void testA90_B32() {
        test_id = getTestId("A90", "B32", "59");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B33).
     * 
     */
    public void testA90_B33() {
        test_id = getTestId("A90", "B33", "60");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B34).
     * 
     */
    public void testA90_B34() {
        test_id = getTestId("A90", "B34", "61");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B35).
     * 
     */
    public void testA90_B35() {
        test_id = getTestId("A90", "B35", "62");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B36).
     * 
     */
    public void testA90_B36() {
        test_id = getTestId("A90", "B36", "63");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B37).
     * 
     */
    public void testA90_B37() {
        test_id = getTestId("A90", "B37", "64");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B38).
     * 
     */
    public void testA90_B38() {
        test_id = getTestId("A90", "B38", "65");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B39).
     * 
     */
    public void testA90_B39() {
        test_id = getTestId("A90", "B39", "66");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B40).
     * 
     */
    public void testA90_B40() {
        test_id = getTestId("A90", "B40", "67");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B41).
     * 
     */
    public void testA90_B41() {
        test_id = getTestId("A90", "B41", "68");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B42).
     * 
     */
    public void testA90_B42() {
        test_id = getTestId("A90", "B42", "69");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B43).
     * 
     */
    public void testA90_B43() {
        test_id = getTestId("A90", "B43", "70");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B44).
     * 
     */
    public void testA90_B44() {
        test_id = getTestId("A90", "B44", "71");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B45).
     * 
     */
    public void testA90_B45() {
        test_id = getTestId("A90", "B45", "72");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B46).
     * 
     */
    public void testA90_B46() {
        test_id = getTestId("A90", "B46", "73");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B47).
     * 
     */
    public void testA90_B47() {
        test_id = getTestId("A90", "B47", "74");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B48).
     * 
     */
    public void testA90_B48() {
        test_id = getTestId("A90", "B48", "75");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B49).
     * 
     */
    public void testA90_B49() {
        test_id = getTestId("A90", "B49", "76");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B50).
     * 
     */
    public void testA90_B50() {
        test_id = getTestId("A90", "B50", "77");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B51).
     * 
     */
    public void testA90_B51() {
        test_id = getTestId("A90", "B51", "78");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B52).
     * 
     */
    public void testA90_B52() {
        test_id = getTestId("A90", "B52", "79");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B53).
     * 
     */
    public void testA90_B53() {
        test_id = getTestId("A90", "B53", "80");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B54).
     * 
     */
    public void testA90_B54() {
        test_id = getTestId("A90", "B54", "81");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B55).
     * 
     */
    public void testA90_B55() {
        test_id = getTestId("A90", "B55", "82");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B56).
     * 
     */
    public void testA90_B56() {
        test_id = getTestId("A90", "B56", "83");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B57).
     * 
     */
    public void testA90_B57() {
        test_id = getTestId("A90", "B57", "84");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B58).
     * 
     */
    public void testA90_B58() {
        test_id = getTestId("A90", "B58", "85");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B59).
     * 
     */
    public void testA90_B59() {
        test_id = getTestId("A90", "B59", "86");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B60).
     * 
     */
    public void testA90_B60() {
        test_id = getTestId("A90", "B60", "87");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B61).
     * 
     */
    public void testA90_B61() {
        test_id = getTestId("A90", "B61", "88");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B62).
     * 
     */
    public void testA90_B62() {
        test_id = getTestId("A90", "B62", "89");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B63).
     * 
     */
    public void testA90_B63() {
        test_id = getTestId("A90", "B63", "90");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B64).
     * 
     */
    public void testA90_B64() {
        test_id = getTestId("A90", "B64", "91");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B65).
     * 
     */
    public void testA90_B65() {
        test_id = getTestId("A90", "B65", "92");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B66).
     * 
     */
    public void testA90_B66() {
        test_id = getTestId("A90", "B66", "93");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B67).
     * 
     */
    public void testA90_B67() {
        test_id = getTestId("A90", "B67", "94");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B68).
     * 
     */
    public void testA90_B68() {
        test_id = getTestId("A90", "B68", "95");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B69).
     * 
     */
    public void testA90_B69() {
        test_id = getTestId("A90", "B69", "96");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B70).
     * 
     */
    public void testA90_B70() {
        test_id = getTestId("A90", "B70", "97");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B71).
     * 
     */
    public void testA90_B71() {
        test_id = getTestId("A90", "B71", "98");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B72).
     * 
     */
    public void testA90_B72() {
        test_id = getTestId("A90", "B72", "99");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B73).
     * 
     */
    public void testA90_B73() {
        test_id = getTestId("A90", "B73", "100");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B74).
     * 
     */
    public void testA90_B74() {
        test_id = getTestId("A90", "B74", "101");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B75).
     * 
     */
    public void testA90_B75() {
        test_id = getTestId("A90", "B75", "102");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B76).
     * 
     */
    public void testA90_B76() {
        test_id = getTestId("A90", "B76", "103");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B77).
     * 
     */
    public void testA90_B77() {
        test_id = getTestId("A90", "B77", "104");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B78).
     * 
     */
    public void testA90_B78() {
        test_id = getTestId("A90", "B78", "105");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B79).
     * 
     */
    public void testA90_B79() {
        test_id = getTestId("A90", "B79", "106");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B80).
     * 
     */
    public void testA90_B80() {
        test_id = getTestId("A90", "B80", "107");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B81).
     * 
     */
    public void testA90_B81() {
        test_id = getTestId("A90", "B81", "108");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B82).
     * 
     */
    public void testA90_B82() {
        test_id = getTestId("A90", "B82", "109");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B83).
     * 
     */
    public void testA90_B83() {
        test_id = getTestId("A90", "B83", "110");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B84).
     * 
     */
    public void testA90_B84() {
        test_id = getTestId("A90", "B84", "111");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B85).
     * 
     */
    public void testA90_B85() {
        test_id = getTestId("A90", "B85", "112");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B86).
     * 
     */
    public void testA90_B86() {
        test_id = getTestId("A90", "B86", "113");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B87).
     * 
     */
    public void testA90_B87() {
        test_id = getTestId("A90", "B87", "114");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B88).
     * 
     */
    public void testA90_B88() {
        test_id = getTestId("A90", "B88", "115");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B89).
     * 
     */
    public void testA90_B89() {
        test_id = getTestId("A90", "B89", "116");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B90).
     * 
     */
    public void testA90_B90() {
        test_id = getTestId("A90", "B90", "117");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B91).
     * 
     */
    public void testA90_B91() {
        test_id = getTestId("A90", "B91", "118");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B92).
     * 
     */
    public void testA90_B92() {
        test_id = getTestId("A90", "B92", "119");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A90) and row (B93).
     * 
     */
    public void testA90_B93() {
        test_id = getTestId("A90", "B93", "120");

        NonRootModelElement src = selectA("A90");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B1).
     * 
     */
    public void testA91_B1() {
        test_id = getTestId("A91", "B1", "121");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B2).
     * 
     */
    public void testA91_B2() {
        test_id = getTestId("A91", "B2", "122");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B3).
     * 
     */
    public void testA91_B3() {
        test_id = getTestId("A91", "B3", "123");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B4).
     * 
     */
    public void testA91_B4() {
        test_id = getTestId("A91", "B4", "124");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B5).
     * 
     */
    public void testA91_B5() {
        test_id = getTestId("A91", "B5", "125");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B6).
     * 
     */
    public void testA91_B6() {
        test_id = getTestId("A91", "B6", "126");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B7).
     * 
     */
    public void testA91_B7() {
        test_id = getTestId("A91", "B7", "127");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B8).
     * 
     */
    public void testA91_B8() {
        test_id = getTestId("A91", "B8", "128");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B9).
     * 
     */
    public void testA91_B9() {
        test_id = getTestId("A91", "B9", "129");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B10).
     * 
     */
    public void testA91_B10() {
        test_id = getTestId("A91", "B10", "130");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B11).
     * 
     */
    public void testA91_B11() {
        test_id = getTestId("A91", "B11", "131");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B12).
     * 
     */
    public void testA91_B12() {
        test_id = getTestId("A91", "B12", "132");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B13).
     * 
     */
    public void testA91_B13() {
        test_id = getTestId("A91", "B13", "133");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B14).
     * 
     */
    public void testA91_B14() {
        test_id = getTestId("A91", "B14", "134");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B15).
     * 
     */
    public void testA91_B15() {
        test_id = getTestId("A91", "B15", "135");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B16).
     * 
     */
    public void testA91_B16() {
        test_id = getTestId("A91", "B16", "136");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B17).
     * 
     */
    public void testA91_B17() {
        test_id = getTestId("A91", "B17", "137");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B18).
     * 
     */
    public void testA91_B18() {
        test_id = getTestId("A91", "B18", "138");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B19).
     * 
     */
    public void testA91_B19() {
        test_id = getTestId("A91", "B19", "139");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B20).
     * 
     */
    public void testA91_B20() {
        test_id = getTestId("A91", "B20", "140");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B21).
     * 
     */
    public void testA91_B21() {
        test_id = getTestId("A91", "B21", "141");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B22).
     * 
     */
    public void testA91_B22() {
        test_id = getTestId("A91", "B22", "142");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B23).
     * 
     */
    public void testA91_B23() {
        test_id = getTestId("A91", "B23", "143");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B24).
     * 
     */
    public void testA91_B24() {
        test_id = getTestId("A91", "B24", "144");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B25).
     * 
     */
    public void testA91_B25() {
        test_id = getTestId("A91", "B25", "145");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B26).
     * 
     */
    public void testA91_B26() {
        test_id = getTestId("A91", "B26", "146");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B27).
     * 
     */
    public void testA91_B27() {
        test_id = getTestId("A91", "B27", "147");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B28).
     * 
     */
    public void testA91_B28() {
        test_id = getTestId("A91", "B28", "148");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B29).
     * 
     */
    public void testA91_B29() {
        test_id = getTestId("A91", "B29", "149");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B30).
     * 
     */
    public void testA91_B30() {
        test_id = getTestId("A91", "B30", "150");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B31).
     * 
     */
    public void testA91_B31() {
        test_id = getTestId("A91", "B31", "151");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B32).
     * 
     */
    public void testA91_B32() {
        test_id = getTestId("A91", "B32", "152");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B33).
     * 
     */
    public void testA91_B33() {
        test_id = getTestId("A91", "B33", "153");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B34).
     * 
     */
    public void testA91_B34() {
        test_id = getTestId("A91", "B34", "154");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B35).
     * 
     */
    public void testA91_B35() {
        test_id = getTestId("A91", "B35", "155");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B36).
     * 
     */
    public void testA91_B36() {
        test_id = getTestId("A91", "B36", "156");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B37).
     * 
     */
    public void testA91_B37() {
        test_id = getTestId("A91", "B37", "157");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B38).
     * 
     */
    public void testA91_B38() {
        test_id = getTestId("A91", "B38", "158");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B39).
     * 
     */
    public void testA91_B39() {
        test_id = getTestId("A91", "B39", "159");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B40).
     * 
     */
    public void testA91_B40() {
        test_id = getTestId("A91", "B40", "160");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B41).
     * 
     */
    public void testA91_B41() {
        test_id = getTestId("A91", "B41", "161");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B42).
     * 
     */
    public void testA91_B42() {
        test_id = getTestId("A91", "B42", "162");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B43).
     * 
     */
    public void testA91_B43() {
        test_id = getTestId("A91", "B43", "163");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B44).
     * 
     */
    public void testA91_B44() {
        test_id = getTestId("A91", "B44", "164");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B45).
     * 
     */
    public void testA91_B45() {
        test_id = getTestId("A91", "B45", "165");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B46).
     * 
     */
    public void testA91_B46() {
        test_id = getTestId("A91", "B46", "166");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B47).
     * 
     */
    public void testA91_B47() {
        test_id = getTestId("A91", "B47", "167");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B48).
     * 
     */
    public void testA91_B48() {
        test_id = getTestId("A91", "B48", "168");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B49).
     * 
     */
    public void testA91_B49() {
        test_id = getTestId("A91", "B49", "169");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B50).
     * 
     */
    public void testA91_B50() {
        test_id = getTestId("A91", "B50", "170");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B51).
     * 
     */
    public void testA91_B51() {
        test_id = getTestId("A91", "B51", "171");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B52).
     * 
     */
    public void testA91_B52() {
        test_id = getTestId("A91", "B52", "172");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B53).
     * 
     */
    public void testA91_B53() {
        test_id = getTestId("A91", "B53", "173");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B54).
     * 
     */
    public void testA91_B54() {
        test_id = getTestId("A91", "B54", "174");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B55).
     * 
     */
    public void testA91_B55() {
        test_id = getTestId("A91", "B55", "175");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B56).
     * 
     */
    public void testA91_B56() {
        test_id = getTestId("A91", "B56", "176");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B57).
     * 
     */
    public void testA91_B57() {
        test_id = getTestId("A91", "B57", "177");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B58).
     * 
     */
    public void testA91_B58() {
        test_id = getTestId("A91", "B58", "178");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B59).
     * 
     */
    public void testA91_B59() {
        test_id = getTestId("A91", "B59", "179");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B60).
     * 
     */
    public void testA91_B60() {
        test_id = getTestId("A91", "B60", "180");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B61).
     * 
     */
    public void testA91_B61() {
        test_id = getTestId("A91", "B61", "181");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B62).
     * 
     */
    public void testA91_B62() {
        test_id = getTestId("A91", "B62", "182");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B63).
     * 
     */
    public void testA91_B63() {
        test_id = getTestId("A91", "B63", "183");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B64).
     * 
     */
    public void testA91_B64() {
        test_id = getTestId("A91", "B64", "184");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B65).
     * 
     */
    public void testA91_B65() {
        test_id = getTestId("A91", "B65", "185");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B66).
     * 
     */
    public void testA91_B66() {
        test_id = getTestId("A91", "B66", "186");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B67).
     * 
     */
    public void testA91_B67() {
        test_id = getTestId("A91", "B67", "187");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B68).
     * 
     */
    public void testA91_B68() {
        test_id = getTestId("A91", "B68", "188");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B69).
     * 
     */
    public void testA91_B69() {
        test_id = getTestId("A91", "B69", "189");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B70).
     * 
     */
    public void testA91_B70() {
        test_id = getTestId("A91", "B70", "190");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B71).
     * 
     */
    public void testA91_B71() {
        test_id = getTestId("A91", "B71", "191");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B72).
     * 
     */
    public void testA91_B72() {
        test_id = getTestId("A91", "B72", "192");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B73).
     * 
     */
    public void testA91_B73() {
        test_id = getTestId("A91", "B73", "193");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B74).
     * 
     */
    public void testA91_B74() {
        test_id = getTestId("A91", "B74", "194");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B75).
     * 
     */
    public void testA91_B75() {
        test_id = getTestId("A91", "B75", "195");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B76).
     * 
     */
    public void testA91_B76() {
        test_id = getTestId("A91", "B76", "196");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B77).
     * 
     */
    public void testA91_B77() {
        test_id = getTestId("A91", "B77", "197");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B78).
     * 
     */
    public void testA91_B78() {
        test_id = getTestId("A91", "B78", "198");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B79).
     * 
     */
    public void testA91_B79() {
        test_id = getTestId("A91", "B79", "199");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B80).
     * 
     */
    public void testA91_B80() {
        test_id = getTestId("A91", "B80", "200");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B81).
     * 
     */
    public void testA91_B81() {
        test_id = getTestId("A91", "B81", "201");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B82).
     * 
     */
    public void testA91_B82() {
        test_id = getTestId("A91", "B82", "202");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B83).
     * 
     */
    public void testA91_B83() {
        test_id = getTestId("A91", "B83", "203");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B84).
     * 
     */
    public void testA91_B84() {
        test_id = getTestId("A91", "B84", "204");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B85).
     * 
     */
    public void testA91_B85() {
        test_id = getTestId("A91", "B85", "205");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B86).
     * 
     */
    public void testA91_B86() {
        test_id = getTestId("A91", "B86", "206");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B87).
     * 
     */
    public void testA91_B87() {
        test_id = getTestId("A91", "B87", "207");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B88).
     * 
     */
    public void testA91_B88() {
        test_id = getTestId("A91", "B88", "208");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B89).
     * 
     */
    public void testA91_B89() {
        test_id = getTestId("A91", "B89", "209");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B90).
     * 
     */
    public void testA91_B90() {
        test_id = getTestId("A91", "B90", "210");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B91).
     * 
     */
    public void testA91_B91() {
        test_id = getTestId("A91", "B91", "211");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B92).
     * 
     */
    public void testA91_B92() {
        test_id = getTestId("A91", "B92", "212");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A91) and row (B93).
     * 
     */
    public void testA91_B93() {
        test_id = getTestId("A91", "B93", "213");

        NonRootModelElement src = selectA("A91");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B1).
     * 
     */
    public void testA92_B1() {
        test_id = getTestId("A92", "B1", "214");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B2).
     * 
     */
    public void testA92_B2() {
        test_id = getTestId("A92", "B2", "215");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B3).
     * 
     */
    public void testA92_B3() {
        test_id = getTestId("A92", "B3", "216");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B4).
     * 
     */
    public void testA92_B4() {
        test_id = getTestId("A92", "B4", "217");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B5).
     * 
     */
    public void testA92_B5() {
        test_id = getTestId("A92", "B5", "218");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B6).
     * 
     */
    public void testA92_B6() {
        test_id = getTestId("A92", "B6", "219");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B7).
     * 
     */
    public void testA92_B7() {
        test_id = getTestId("A92", "B7", "220");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B8).
     * 
     */
    public void testA92_B8() {
        test_id = getTestId("A92", "B8", "221");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B9).
     * 
     */
    public void testA92_B9() {
        test_id = getTestId("A92", "B9", "222");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B10).
     * 
     */
    public void testA92_B10() {
        test_id = getTestId("A92", "B10", "223");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B11).
     * 
     */
    public void testA92_B11() {
        test_id = getTestId("A92", "B11", "224");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B12).
     * 
     */
    public void testA92_B12() {
        test_id = getTestId("A92", "B12", "225");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B13).
     * 
     */
    public void testA92_B13() {
        test_id = getTestId("A92", "B13", "226");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B14).
     * 
     */
    public void testA92_B14() {
        test_id = getTestId("A92", "B14", "227");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B15).
     * 
     */
    public void testA92_B15() {
        test_id = getTestId("A92", "B15", "228");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B16).
     * 
     */
    public void testA92_B16() {
        test_id = getTestId("A92", "B16", "229");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B17).
     * 
     */
    public void testA92_B17() {
        test_id = getTestId("A92", "B17", "230");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B18).
     * 
     */
    public void testA92_B18() {
        test_id = getTestId("A92", "B18", "231");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B19).
     * 
     */
    public void testA92_B19() {
        test_id = getTestId("A92", "B19", "232");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B20).
     * 
     */
    public void testA92_B20() {
        test_id = getTestId("A92", "B20", "233");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B21).
     * 
     */
    public void testA92_B21() {
        test_id = getTestId("A92", "B21", "234");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B22).
     * 
     */
    public void testA92_B22() {
        test_id = getTestId("A92", "B22", "235");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B23).
     * 
     */
    public void testA92_B23() {
        test_id = getTestId("A92", "B23", "236");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B24).
     * 
     */
    public void testA92_B24() {
        test_id = getTestId("A92", "B24", "237");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B25).
     * 
     */
    public void testA92_B25() {
        test_id = getTestId("A92", "B25", "238");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B26).
     * 
     */
    public void testA92_B26() {
        test_id = getTestId("A92", "B26", "239");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B27).
     * 
     */
    public void testA92_B27() {
        test_id = getTestId("A92", "B27", "240");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B28).
     * 
     */
    public void testA92_B28() {
        test_id = getTestId("A92", "B28", "241");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B29).
     * 
     */
    public void testA92_B29() {
        test_id = getTestId("A92", "B29", "242");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B30).
     * 
     */
    public void testA92_B30() {
        test_id = getTestId("A92", "B30", "243");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B31).
     * 
     */
    public void testA92_B31() {
        test_id = getTestId("A92", "B31", "244");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B32).
     * 
     */
    public void testA92_B32() {
        test_id = getTestId("A92", "B32", "245");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B33).
     * 
     */
    public void testA92_B33() {
        test_id = getTestId("A92", "B33", "246");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B34).
     * 
     */
    public void testA92_B34() {
        test_id = getTestId("A92", "B34", "247");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B35).
     * 
     */
    public void testA92_B35() {
        test_id = getTestId("A92", "B35", "248");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B36).
     * 
     */
    public void testA92_B36() {
        test_id = getTestId("A92", "B36", "249");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A92) and row (B37).
     * 
     */
    public void testA92_B37() {
        test_id = getTestId("A92", "B37", "250");

        NonRootModelElement src = selectA("A92");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
