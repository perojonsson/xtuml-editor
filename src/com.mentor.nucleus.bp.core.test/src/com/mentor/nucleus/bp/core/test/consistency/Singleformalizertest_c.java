package com.mentor.nucleus.bp.core.test.consistency;
//====================================================================
//
// File:      com.mentor.nucleus.bp.core.test.consistency.Singleformalizertest_c.java
//
// WARNING: Do not edit this generated file
// Generated by ../MC-Java/java.arc, $Revision: 1.111 $
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//====================================================================

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.test.CoreTestPlugin;
import java.util.*;
import java.lang.reflect.*;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import com.mentor.nucleus.bp.core.util.PersistenceUtil;
import org.eclipse.core.runtime.NullProgressMonitor;
import com.mentor.nucleus.bp.core.ui.marker.UmlProblem;
import com.mentor.nucleus.bp.core.common.*;
abstract class EV_SINGLEFORMALIZERTEST extends genericEvent_c {
	public abstract int getEvtcode();
}

public class Singleformalizertest_c extends NonRootModelElement
		implements
			IAdaptable,
			Cloneable {
	// Public Constructors
	public Singleformalizertest_c(ModelRoot modelRoot, int p_m_sftid,
			int p_m_sptid) {
		super(modelRoot);
		m_sftid = p_m_sftid;
		m_sptid = p_m_sptid;

		Object[] key = {new UUID(0, new Long(m_sftid))};
		addInstanceToMap(key);
	}
	static public Singleformalizertest_c createProxy(ModelRoot modelRoot,
			int p_m_sftid, int p_m_sptid, String p_contentPath,
			IPath p_localPath) {
		ModelRoot resolvedModelRoot = ModelRoot.findModelRoot(modelRoot,
				p_contentPath, p_localPath);
		// if a model root was not resolved it is most likely
		// due to a missing file of the proxy, defualt back to
		// the original model root
		if (resolvedModelRoot != null)
			modelRoot = resolvedModelRoot;
		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);
		Singleformalizertest_c new_inst = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_sftid))};
			new_inst = (Singleformalizertest_c) instances.get(key);
		}
		String contentPath = PersistenceUtil.resolveRelativePath(p_localPath,
				new Path(p_contentPath));
		if (modelRoot.isNewCompareRoot()) {
			// for comparisons we do not want to change
			// the content path
			contentPath = p_contentPath;
		}
		if (new_inst != null && !modelRoot.isCompareRoot()) {
			PersistableModelComponent pmc = new_inst.getPersistableComponent();
			if (pmc == null) {
				// dangling reference, redo this instance
				new_inst.batchUnrelate();
				new_inst.m_sftid = p_m_sftid;
				new_inst.m_sptid = p_m_sptid;

			}
		}
		if (new_inst == null) {
			// there is no instance matching the id, create a proxy
			// if the resource doesn't exist then this will be a dangling reference
			new_inst = new Singleformalizertest_c(modelRoot, p_m_sftid,
					p_m_sptid);
			new_inst.m_contentPath = contentPath;
		}
		return new_inst;
	}

	static public Singleformalizertest_c resolveInstance(ModelRoot modelRoot,
			int p_m_sftid, int p_m_sptid) {
		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);
		Singleformalizertest_c source = null;
		synchronized (instances) {
			Object[] key = {new UUID(0, new Long(p_m_sftid))};
			source = (Singleformalizertest_c) instances.get(key);
			if (source != null && !modelRoot.isCompareRoot()) {
				source.convertFromProxy();
				source.batchUnrelate();
				source.m_sftid = p_m_sftid;
				source.m_sptid = p_m_sptid;

				return source;
			}
		}
		// there is no instance matching the id
		Singleformalizertest_c new_inst = new Singleformalizertest_c(modelRoot,
				p_m_sftid, p_m_sptid);
		return new_inst;
	}
	public Singleformalizertest_c(ModelRoot modelRoot) {
		super(modelRoot);
		Object[] key = {new UUID(0, new Long(m_sftid))};
		addInstanceToMap(key);
	}

	public Object getInstanceKey() {
		Object[] key = {new UUID(0, new Long(m_sftid))};
		return key;
	}

	public boolean setInstanceKey(UUID p_newKey) {

		boolean changed = false;
		// round p1
		// round p2
		// round p3
		// round p6
		// round p7
		return changed;
	}

	public boolean equals(Object elem) {
		if (!(elem instanceof Singleformalizertest_c)) {
			return false;
		}
		// check that the model-roots are the same
		if (((NonRootModelElement) elem).getModelRoot() != getModelRoot()
				&& !getModelRoot().isCompareRoot()) {
			return false;
		}

		return identityEquals(elem);
	}

	public boolean identityEquals(Object elem) {
		if (!(elem instanceof Singleformalizertest_c)) {
			return false;
		}

		Singleformalizertest_c me = (Singleformalizertest_c) elem;
		if (getSftid() != ((Singleformalizertest_c) elem).getSftid())
			return false;
		return true;
	}

	public boolean cachedIdentityEquals(Object elem) {
		if (!(elem instanceof Singleformalizertest_c)) {
			return false;
		}

		Singleformalizertest_c me = (Singleformalizertest_c) elem;
		if (getSftid() != ((Singleformalizertest_c) elem).getSftid())
			return false;
		return true;
	}

	// Attributes
	private int m_sftid;
	private int m_sptid;

	// declare association references from this class

	// referring navigation

	Singleparticipanttest_c Singleparticipanttest;
	public void relateAcrossR1To(Singleparticipanttest_c target) {
		relateAcrossR1To(target, true);
	}
	public void relateAcrossR1To(Singleparticipanttest_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (target == Singleparticipanttest)
			return; // already related

		if (Singleparticipanttest != target) {

			Object oldKey = getInstanceKey();

			if (Singleparticipanttest != null) {

				Singleparticipanttest.clearBackPointerR1To(this);

				if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == true) { //$NON-NLS-1$
					Consistency.log
							.println(
									ILogger.CONSISTENCY,
									"Singleformalizertest_c.relateAcrossR1To(Singleparticipanttest_c target)",
									"Relate performed across R1 from singleFormalizerTest to singleParticipantTest without unrelate of prior instance.");
				}
			}

			Singleparticipanttest = target;
			m_sptid = target.getSptid();
			updateInstanceKey(oldKey, getInstanceKey());
			target.setBackPointerR1To(this);
			target.addRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_RELATED, this,
						target, "1", "");
				Consistency.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}
	public void unrelateAcrossR1From(Singleparticipanttest_c target) {
		unrelateAcrossR1From(target, true);
	}
	public void unrelateAcrossR1From(Singleparticipanttest_c target,
			boolean notifyChanges) {
		if (target == null)
			return;

		if (Singleparticipanttest == null)
			return; // already unrelated

		if (target != Singleparticipanttest) {
			Exception e = new Exception();
			e.fillInStackTrace();
			CoreTestPlugin.logError(
					"Tried to unrelate from non-related instance across R1", e);
			return;
		}

		if (target != null) {
			target.clearBackPointerR1To(this);
		}

		if (Singleparticipanttest != null) {

			m_sptid = Singleparticipanttest.getSptid();
			Singleparticipanttest = null;
			target.removeRef();
			if (notifyChanges) {
				RelationshipChangeModelDelta change = new RelationshipChangeModelDelta(
						Modeleventnotification_c.DELTA_ELEMENT_UNRELATED, this,
						target, "1", "");
				Consistency.getDefaultInstance()
						.fireModelElementRelationChanged(change);
			}
		}
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(
			Singleparticipanttest_c[] targets) {
		return getOneCST_SFTOnR1(targets, null);
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(
			Singleparticipanttest_c[] targets, ClassQueryInterface_c test) {
		Singleformalizertest_c ret_val = null;
		if (targets != null) {
			for (int i = 0; i < targets.length && ret_val == null; ++i) {
				ret_val = getOneCST_SFTOnR1(targets[i], test);
			}
		}

		return ret_val;
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(
			Singleparticipanttest_c target) {
		return getOneCST_SFTOnR1(target, null);
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(
			Singleparticipanttest_c target, boolean loadComponent) {
		return getOneCST_SFTOnR1(target.getModelRoot(), target, null,
				loadComponent);
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(
			Singleparticipanttest_c target, ClassQueryInterface_c test) {
		if (target != null) {
			return getOneCST_SFTOnR1(target.getModelRoot(), target, test);
		}
		return null;
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(ModelRoot modelRoot,
			Singleparticipanttest_c target, ClassQueryInterface_c test) {
		return getOneCST_SFTOnR1(modelRoot, target, test, true);
	}

	public static Singleformalizertest_c getOneCST_SFTOnR1(ModelRoot modelRoot,
			Singleparticipanttest_c target, ClassQueryInterface_c test,
			boolean loadComponent) {
		return find_getOneCST_SFTOnR1(modelRoot, target, test);
	}
	private static Singleformalizertest_c find_getOneCST_SFTOnR1(
			ModelRoot modelRoot, Singleparticipanttest_c target,
			ClassQueryInterface_c test) {
		if (target != null) {
			Singleformalizertest_c source = (Singleformalizertest_c) target.backPointer_Singleformalizertest_R1;
			if (source != null && (test == null || test.evaluate(source))) {
				return source;
			}
		}
		// not found
		return null;
	}

	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c[] targets) {
		return getManyCST_SFTsOnR1(targets, null);
	}
	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c[] targets, boolean loadComponent) {
		return getManyCST_SFTsOnR1(targets, null, loadComponent);
	}
	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c[] targets, ClassQueryInterface_c test) {
		return getManyCST_SFTsOnR1(targets, test, true);
	}

	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c[] targets, ClassQueryInterface_c test,
			boolean loadComponent) {

		if (targets == null || targets.length == 0 || targets[0] == null)
			return new Singleformalizertest_c[0];

		ModelRoot modelRoot = targets[0].getModelRoot();

		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);

		Vector matches = new Vector();
		for (int i = 0; i < targets.length; i++) {
			Singleformalizertest_c source = (Singleformalizertest_c) targets[i].backPointer_Singleformalizertest_R1;
			if (source != null && (test == null || test.evaluate(source))) {
				matches.add(source);
			}
		}
		if (matches.size() > 0) {
			Singleformalizertest_c[] ret_set = new Singleformalizertest_c[matches
					.size()];
			matches.copyInto(ret_set);
			return ret_set;
		} else {
			return new Singleformalizertest_c[0];
		}
	}

	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c target) {
		if (target != null) {
			Singleparticipanttest_c[] targetArray = new Singleparticipanttest_c[1];
			targetArray[0] = target;
			return getManyCST_SFTsOnR1(targetArray);
		} else {
			Singleformalizertest_c[] result = new Singleformalizertest_c[0];
			return result;
		}
	}

	public static Singleformalizertest_c[] getManyCST_SFTsOnR1(
			Singleparticipanttest_c target, boolean loadComponent) {
		if (target != null) {
			Singleparticipanttest_c[] targetArray = new Singleparticipanttest_c[1];
			targetArray[0] = target;
			return getManyCST_SFTsOnR1(targetArray, loadComponent);
		} else {
			Singleformalizertest_c[] result = new Singleformalizertest_c[0];
			return result;
		}
	}

	public void batchRelate(ModelRoot modelRoot, boolean notifyChanges,
			boolean searchAllRoots) {
		batchRelate(modelRoot, false, notifyChanges, searchAllRoots);
	}

	public void batchRelate(ModelRoot modelRoot, boolean relateProxies,
			boolean notifyChanges, boolean searchAllRoots) {
		InstanceList instances = null;
		ModelRoot baseRoot = modelRoot;

		if (Singleparticipanttest == null) {
			// R1
			Singleparticipanttest_c relInst54 = (Singleparticipanttest_c) baseRoot
					.getInstanceList(Singleparticipanttest_c.class).get(
							new Object[]{new UUID(0, new Long(m_sptid))});
			// if there was no local element, check for any global elements
			// failing that proceed to check other model roots
			if (relInst54 == null) {
				relInst54 = (Singleparticipanttest_c) Ooaofooa
						.getDefaultInstance()
						.getInstanceList(Singleparticipanttest_c.class)
						.get(new Object[]{new UUID(0, new Long(m_sptid))});
			}
			if (relInst54 == null && searchAllRoots
					&& !baseRoot.isCompareRoot()) {
				Consistency[] roots = Consistency.getInstances();
				for (int i = 0; i < roots.length; i++) {
					if (roots[i].isCompareRoot()) {
						// never use elements from any compare root
						continue;
					}
					relInst54 = (Singleparticipanttest_c) roots[i]
							.getInstanceList(Singleparticipanttest_c.class)
							.get(new Object[]{new UUID(0, new Long(m_sptid))});
					if (relInst54 != null)
						break;
				}
			}
			//synchronized
			if (relInst54 != null) {
				if (relateProxies || !isProxy()
						|| (inSameComponent(this, relInst54) && !isProxy())) {
					relInst54.relateAcrossR1To(this, notifyChanges);
				}
			}
		}

	}
	public void batchUnrelate(boolean notifyChanges) {
		NonRootModelElement inst = null;
		// R1
		// CST_SPT
		inst = Singleparticipanttest;
		unrelateAcrossR1From(Singleparticipanttest, notifyChanges);
		if (inst != null) {
			inst.removeRef();
		}
	}
	public static void batchRelateAll(ModelRoot modelRoot,
			boolean notifyChanges, boolean searchAllRoots) {
		batchRelateAll(modelRoot, notifyChanges, searchAllRoots, false);
	}
	public static void batchRelateAll(ModelRoot modelRoot, boolean notifyChanges, boolean searchAllRoots, boolean relateProxies)
  {
	InstanceList instances = modelRoot.getInstanceList(Singleformalizertest_c.class);
    synchronized(instances) {
        Iterator<NonRootModelElement> cursor = instances.iterator() ;
    	while (cursor.hasNext())
	    {
            final Singleformalizertest_c inst = (Singleformalizertest_c)cursor.next() ;
	        inst.batchRelate(modelRoot, relateProxies, notifyChanges, searchAllRoots );
	    }
	}
  }
	public static void clearInstances(ModelRoot modelRoot) {
		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);
		synchronized (instances) {
			for (int i = instances.size() - 1; i >= 0; i--) {
				((NonRootModelElement) instances.get(i)).delete_unchecked();
			}

		}
	}

	public static Singleformalizertest_c SingleformalizertestInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		Singleformalizertest_c result = findSingleformalizertestInstance(
				modelRoot, test, loadComponent);
		return result;
	}
	private static Singleformalizertest_c findSingleformalizertestInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Singleformalizertest_c x = (Singleformalizertest_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					return x;
				}
			}
		}
		return null;
	}
	public static Singleformalizertest_c SingleformalizertestInstance(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SingleformalizertestInstance(modelRoot, test, true);
	}

	public static Singleformalizertest_c SingleformalizertestInstance(
			ModelRoot modelRoot) {
		return SingleformalizertestInstance(modelRoot, null, true);
	}

	public static Singleformalizertest_c[] SingleformalizertestInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test,
			boolean loadComponent) {
		InstanceList instances = modelRoot
				.getInstanceList(Singleformalizertest_c.class);
		Vector matches = new Vector();
		synchronized (instances) {
			for (int i = 0; i < instances.size(); ++i) {
				Singleformalizertest_c x = (Singleformalizertest_c) instances
						.get(i);
				if (test == null || test.evaluate(x)) {
					matches.add(x);
				}
			}
			if (matches.size() > 0) {
				Singleformalizertest_c[] ret_set = new Singleformalizertest_c[matches
						.size()];
				matches.copyInto(ret_set);
				return ret_set;
			} else {
				return new Singleformalizertest_c[0];
			}
		}
	}
	public static Singleformalizertest_c[] SingleformalizertestInstances(
			ModelRoot modelRoot, ClassQueryInterface_c test) {
		return SingleformalizertestInstances(modelRoot, test, true);
	}
	public static Singleformalizertest_c[] SingleformalizertestInstances(
			ModelRoot modelRoot) {
		return SingleformalizertestInstances(modelRoot, null, true);
	}

	public boolean delete() {
		boolean result = super.delete();
		boolean delete_error = false;
		String errorMsg = "The following relationships were not torn down by the singleFormalizerTest.dispose call: ";
		Singleparticipanttest_c testR1Inst = Singleparticipanttest_c
				.getOneCST_SPTOnR1(this, false);

		if (testR1Inst != null) {
			delete_error = true;
			errorMsg = errorMsg + "1 ";
		}
		if (delete_error == true) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log.println(ILogger.DELETE, "singleFormalizerTest",
						errorMsg);
			} else {
				Exception e = new Exception();
				e.fillInStackTrace();
				CoreTestPlugin.logError(errorMsg, e);
			}
		}
		return result;
	}

	// end declare instance pool

	// declare attribute accessors
	public boolean isUUID(String attributeName) {
		return false;
	}
	// declare attribute accessors
	public int getSftid() {
		return m_sftid;
	}

	public void setSftid(int newValue) {
		if (m_sftid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sftid",
				new Integer(m_sftid), new Integer(newValue), true);

		m_sftid = newValue;
		Consistency.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	public int getSptid() {
		if (Singleparticipanttest != null) {
			return Singleparticipanttest.getSptid();
		}
		return 0;
	}

	public int getSptidCachedValue() {
		return m_sptid;
	}

	public void setSptid(int newValue) {
		if (m_sptid == newValue) {
			return;
		}
		AttributeChangeModelDelta change = new AttributeChangeModelDelta(
				Modeleventnotification_c.DELTA_ATTRIBUTE_CHANGE, this, "Sptid",
				new Integer(m_sptid), new Integer(newValue), true);

		m_sptid = newValue;
		Consistency.getDefaultInstance().fireModelElementAttributeChanged(
				change);
	}
	// end declare accessors
	public static void checkClassConsistency(ModelRoot modelRoot) {
		Ooaofooa.log
				.println(ILogger.OPERATION, "singleFormalizerTest", //$NON-NLS-1$
						" Operation entered: singleFormalizerTest::checkClassConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return;
		}
		Singleformalizertest_c[] objs = Singleformalizertest_c
				.SingleformalizertestInstances(modelRoot, null, false);

		for (int i = 0; i < objs.length; i++) {
			objs[i].checkConsistency();
		}
	}
	public boolean checkConsistency() {
		Ooaofooa.log.println(ILogger.OPERATION, "singleFormalizerTest", //$NON-NLS-1$
				" Operation entered: singleFormalizerTest::checkConsistency"); //$NON-NLS-1$
		if (Boolean.valueOf(System.getenv("PTC_MCC_ENABLED")) == false) { //$NON-NLS-1$
			return true;
		}
		ModelRoot modelRoot = getModelRoot();
		boolean retval = true;
		class Singleformalizertest_c_test56_c implements ClassQueryInterface_c {
			Singleformalizertest_c_test56_c(int p57) {
				m_p57 = p57;
			}
			private int m_p57;
			public boolean evaluate(Object candidate) {
				Singleformalizertest_c selected = (Singleformalizertest_c) candidate;
				boolean retval = false;
				retval = (selected.getSftid() == (m_p57));
				return retval;
			}
		}

		Singleformalizertest_c[] objs55 = Singleformalizertest_c
				.SingleformalizertestInstances(modelRoot,
						new Singleformalizertest_c_test56_c(getSftid()));

		if (((objs55.length) == 0)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"singleFormalizerTest", //$NON-NLS-1$
								"Consistency: Object: singleFormalizerTest: Cardinality of an identifier is zero. " //$NON-NLS-1$
										+ "Actual Value: " + Integer.toString(objs55.length)); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: singleFormalizerTest: Cardinality of an identifier is zero. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55.length), e);
			}
			retval = false;

		}

		if (((objs55.length) > 1)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"singleFormalizerTest", //$NON-NLS-1$
								"Consistency: Object: singleFormalizerTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs55.length)
										+ " sftID: " + Integer.toString(getSftid())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: singleFormalizerTest: Cardinality of an identifier is greater than 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs55.length)
										+ " sftID: " + Integer.toString(getSftid()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		// singleFormalizerTest is a referring class in association: rel.Numb = 1
		// The participating class is: singleParticipantTest
		class Singleparticipanttest_c_test61_c implements ClassQueryInterface_c {
			Singleparticipanttest_c_test61_c(int p62) {
				m_p62 = p62;
			}
			private int m_p62;
			public boolean evaluate(Object candidate) {
				Singleparticipanttest_c selected = (Singleparticipanttest_c) candidate;
				boolean retval = false;
				retval = (selected.getSptid() == (m_p62));
				return retval;
			}
		}

		Singleparticipanttest_c[] objs60 = Singleparticipanttest_c
				.SingleparticipanttestInstances(modelRoot,
						new Singleparticipanttest_c_test61_c(getSptid()));

		// The participant is unconditional
		// The multiplicity of the participant is one
		if (((objs60.length) != 1)) {

			if (CoreTestPlugin.getDefault().isDebugging()) {
				Consistency.log
						.println(ILogger.CONSISTENCY,
								"singleFormalizerTest", //$NON-NLS-1$
								"Consistency: Object: singleFormalizerTest: Association: 1: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$
										+ "Actual Value: " //$NON-NLS-1$ 
										+ Integer.toString(objs60.length)
										+ " sptID: " + Integer.toString(getSptid())); //$NON-NLS-1$
			} else {
				Exception e = new Exception();
				CoreTestPlugin
						.logError(
								"Consistency: Object: singleFormalizerTest: Association: 1: Cardinality of a participant is not equal to 1. " //$NON-NLS-1$ 
										+ "Actual Value: " //$NON-NLS-1$
										+ Integer.toString(objs60.length)
										+ " sptID: " + Integer.toString(getSptid()), e); //$NON-NLS-1$
			}
			retval = false;

		}

		return retval;
	}

	public Object getAdapter(Class adapter) {
		Object superAdapter = super.getAdapter(adapter);
		if (superAdapter != null) {
			return superAdapter;
		}
		return null;
	}
} // end singleFormalizerTest
