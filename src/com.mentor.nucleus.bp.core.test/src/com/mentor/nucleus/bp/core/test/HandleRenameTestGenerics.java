///////////////////

package com.mentor.nucleus.bp.core.test;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/test/HandleRenameTestGenerics.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_action_test.arc
// Version:      $Revision: 1.73 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationsDialog;
import org.eclipse.gef.tools.AbstractTool;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.internal.handlers.WizardHandler.New;
import org.eclipse.ui.internal.progress.BlockedJobsDialog;

import com.mentor.nucleus.bp.core.common.BridgePointPreferencesStore;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.core.test.CoreTest;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.test.TestUtil;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.test.common.CanvasTestUtils;
import com.mentor.nucleus.bp.test.common.TestingUtilities;
import com.mentor.nucleus.bp.test.common.UITestingUtilities;
import com.mentor.nucleus.bp.ui.canvas.Model_c;
import com.mentor.nucleus.bp.ui.graphics.editor.GraphicalEditor;
import com.mentor.nucleus.bp.ui.graphics.editor.ModelEditor;
import com.mentor.nucleus.bp.utilities.ui.CanvasUtilities;
import com.mentor.nucleus.bp.utilities.ui.ProjectUtilities;
import com.mentor.nucleus.bp.core.util.OoaofgraphicsUtil;
import com.mentor.nucleus.bp.core.util.WorkspaceUtil;

public class HandleRenameTestGenerics extends CoreTest {
	private static boolean initialized = false;
	private static GraphicalEditor editor = null;
	private Ooaofooa modelRoot = BaseTest.getDefaultTestInstance();

	protected void setUp() throws Exception {
		super.setUp();
		Ooaofooa.setPersistEnabled(true);
		modelRoot.clearDatabase(new NullProgressMonitor());
		m_sys = ProjectUtilities.getSystemModel(project);
		CanvasTestUtils.openDiagramEditor(m_sys);
		editor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();

	}
	protected void tearDown() throws Exception {
		PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
				.closeAllEditors(false);
		Package_c[] pkgs = Package_c.getManyEP_PKGsOnR1401(m_sys);
		for (int i = 0; i < pkgs.length; i++) {
			pkgs[i].Dispose();
		}
		Ooaofooa[] mdlroots = Ooaofooa.getInstances();
		for (int i = 0; i < mdlroots.length; i++) {
			mdlroots[i].delete();

		}
		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
	}
	private Package_c createRootPackge() {
		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		StructuredSelection sel = new StructuredSelection(m_sys);
		Selection.getInstance().setSelection(sel, true);
		NewPackageOnS_SYSAction act = new NewPackageOnS_SYSAction();
		Action a = new Action() {
		};
		act.run(a);
		Package_c root = Package_c.getOneEP_PKGOnR1401(m_sys);
		root.setName("Root");
		return root;

	}
	private Operation_c createClassOperation(ModelClass_c mdlClass) {
		mdlClass.Newoperation();
		Operation_c op = Operation_c.getOneO_TFROnR115(mdlClass);
		return op;
	}
	private ModelClass_c createModelClass(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Classes", "Class");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		ModelClass_c iroot = ModelClass_c
				.getOneO_OBJOnR8001(PackageableElement_c
						.getOnePE_PEOnR8000(pkg));
		return iroot;
	}
	private ExternalEntity_c createExternalEntity(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("External",
				"External Entity");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		ExternalEntity_c iroot = ExternalEntity_c
				.getOneS_EEOnR8001(PackageableElement_c.getOnePE_PEOnR8000(pkg));
		return iroot;
	}
	private StateMachine_c createStateMachine(ModelClass_c mdlClass, Class Type) {

		StructuredSelection sel = new StructuredSelection(mdlClass);
		Selection.getInstance().setSelection(sel, true);
		StateMachine_c sm = null;
		if (Type == InstanceStateMachine_c.class) {
			NewInstanceStateMachineOnO_OBJAction act = new NewInstanceStateMachineOnO_OBJAction();
			Action a = new Action() {
			};
			act.run(a);
			sm = StateMachine_c.getOneSM_SMOnR517((InstanceStateMachine_c
					.getOneSM_ISMOnR518(mdlClass)));
		} else if (Type == ClassStateMachine_c.class) {
			NewClassStateMachineOnO_OBJAction act = new NewClassStateMachineOnO_OBJAction();
			Action a = new Action() {
			};
			act.run(a);
		}

		sm = StateMachine_c.getOneSM_SMOnR517((ClassStateMachine_c
				.getOneSM_ASMOnR519(mdlClass)));
		return sm;

	}
	private StateMachineEvent_c createSMEvent(StateMachine_c sm) {
		sm.Newevent();
		StateMachineEvent_c evt = StateMachineEvent_c.getOneSM_EVTOnR502(sm);
		return evt;
	}
	StructuredDataType_c createStructuredDataType(Package_c pkg) {
		pkg.Newstructureddatatype();
		StructuredDataType_c sdt = StructuredDataType_c
				.getOneS_SDTOnR17(DataType_c
						.getOneS_DTOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000(pkg)));
		return sdt;
	}
	EnumerationDataType_c createEnumDataType(Package_c pkg) {
		pkg.Newenumeration();
		EnumerationDataType_c edt = EnumerationDataType_c
				.getOneS_EDTOnR17(DataType_c
						.getOneS_DTOnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000(pkg)));
		return edt;
	}
	ConstantSpecification_c createConstDataType(Package_c pkg) {
		pkg.Newconstantspecification();
		ConstantSpecification_c cdt = ConstantSpecification_c
				.getOneCNST_CSPOnR8001(PackageableElement_c
						.getManyPE_PEsOnR8000(pkg));
		return cdt;
	}
	private Component_c createRootComponent(Package_c pkg) {
		if (pkg == null) {
			pkg = createRootPackge();
		}
		StructuredSelection sel = new StructuredSelection(pkg);
		Selection.getInstance().setSelection(sel, true);
		ComponentsComponentOnEP_PKGAction act = new ComponentsComponentOnEP_PKGAction();
		Action a = new Action() {
		};
		act.run(a);
		Component_c root = Component_c.getOneC_COnR8001(PackageableElement_c
				.getOnePE_PEOnR8000(pkg));
		root.setName("Root");
		return root;

	}
	private Interface_c createInterface(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Components", "Interface");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		Interface_c iroot = Interface_c.getOneC_IOnR8001(PackageableElement_c
				.getOnePE_PEOnR8000(pkg));
		return iroot;
	}
	private Bridge_c createBridgeOperation(ExternalEntity_c ee) {
		ee.Newbridgeoperation();
		Bridge_c bridge = Bridge_c.getOneS_BRGOnR19(ee);
		return bridge;
	}
	private ClassInstanceParticipant_c createClassInstanceParticipant(
			Package_c pkg) {
		pkg.Newclassinstance();
		ClassInstanceParticipant_c classInstanceParticipant = ClassInstanceParticipant_c
				.getOneSQ_CIPOnR930(InteractionParticipant_c
						.getOneSQ_POnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000(pkg)));
		return classInstanceParticipant;
	}

	private ClassParticipant_c createClassParticipant(Package_c pkg) {
		pkg.Newclassparticipant();
		ClassParticipant_c classParticipant = ClassParticipant_c
				.getOneSQ_CPOnR930(InteractionParticipant_c
						.getOneSQ_POnR8001(PackageableElement_c
								.getManyPE_PEsOnR8000(pkg)));
		return classParticipant;
	}
	InterfaceOperation_c creaInterfaceOperation(Interface_c iface) {
		iface.Newexecutableproperty(false);
		InterfaceOperation_c op = InterfaceOperation_c
				.getOneC_IOOnR4004(ExecutableProperty_c
						.getManyC_EPsOnR4003(iface));
		return op;

	}
	InterfaceSignal_c creInterfaceSignal(Interface_c iface) {
		iface.Newexecutableproperty(true);
		InterfaceSignal_c signal = InterfaceSignal_c
				.getOneC_ASOnR4004(ExecutableProperty_c
						.getManyC_EPsOnR4003(iface));
		return signal;
	}
	private SynchronousMessage_c createSyncMessage(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Interaction",
				"Synchronous Message");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		org.eclipse.swt.graphics.Point destinationPoint = new org.eclipse.swt.graphics.Point(
				700, 500);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
			destinationPoint = CanvasUtilities.convertToMouseCoor(
					creationPoint, model);

		}
		CanvasUtilities.doMouseMove(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseMove(destinationPoint.x, destinationPoint.y);
		CanvasUtilities.doMouseRelease(destinationPoint.x, destinationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		SynchronousMessage_c msg = SynchronousMessage_c
				.getOneMSG_SMOnR1018(Message_c
						.getOneMSG_MOnR8001(PackageableElement_c
								.getOnePE_PEOnR8000(pkg)));
		return msg;
	}
	private AsynchronousMessage_c createASyncMessage(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Interaction",
				"Asynchronous Message");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		org.eclipse.swt.graphics.Point destinationPoint = new org.eclipse.swt.graphics.Point(
				700, 500);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
			destinationPoint = CanvasUtilities.convertToMouseCoor(
					creationPoint, model);

		}
		CanvasUtilities.doMouseMove(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseMove(destinationPoint.x, destinationPoint.y);
		CanvasUtilities.doMouseRelease(destinationPoint.x, destinationPoint.y);

		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		AsynchronousMessage_c msg = AsynchronousMessage_c
				.getOneMSG_AMOnR1018(Message_c
						.getOneMSG_MOnR8001(PackageableElement_c
								.getOnePE_PEOnR8000(pkg)));
		return msg;
	}
	private ReturnMessage_c createReturnMessage(Package_c pkg) {
		CanvasTestUtils.openCanvasEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Interaction",
				"Return Message");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		org.eclipse.swt.graphics.Point destinationPoint = new org.eclipse.swt.graphics.Point(
				700, 500);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
			destinationPoint = CanvasUtilities.convertToMouseCoor(
					creationPoint, model);

		}
		CanvasUtilities.doMouseMove(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseMove(destinationPoint.x, destinationPoint.y);
		CanvasUtilities.doMouseRelease(destinationPoint.x, destinationPoint.y);

		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		ReturnMessage_c msg = ReturnMessage_c.getOneMSG_ROnR1018(Message_c
				.getOneMSG_MOnR8001(PackageableElement_c
						.getOnePE_PEOnR8000(pkg)));
		return msg;
	}
	private Function_c createFunction(Package_c pkg) {
		if (pkg == null) {
			pkg = createRootPackge();
		}
		StructuredSelection sel = new StructuredSelection(pkg);
		Selection.getInstance().setSelection(sel, true);
		NewFunctionOnEP_PKGAction act = new NewFunctionOnEP_PKGAction();
		Action a = new Action() {
		};
		act.run(a);
		Function_c root = Function_c.getOneS_SYNCOnR8001(PackageableElement_c
				.getOnePE_PEOnR8000(pkg));
		root.setName("Root");
		return root;

	}
	private static void setNameUsingRenameDialog(final long inHowManyMillis, 
	            final boolean shouldDismiss, final String button, final String elementName)
 {
		// run this on a separate thread, so that the dialog invocation to be
		// performed
		// by the caller may occur
		Thread dismissThread = new Thread(new Runnable() {
			@Override
			public void run() {
				// wait to give the expected modal dialog time to get displayed
				// if the currently active shell is a dialog
				PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {

					@Override
					public void run() {
						Shell shell = PlatformUI.getWorkbench().getDisplay().getActiveShell();
						if (shell != null && shell.getData() instanceof Dialog) {
							// close the dialog
							if (!(shell.getData() instanceof ProgressMonitorDialog)
									&& !(shell.getData() instanceof BlockedJobsDialog)) {
								Control[] controlsFirstLevel = ((Dialog) shell.getData()).getShell().getChildren();
								Control[] controlsSecondLevel = ((Composite) controlsFirstLevel[0]).getChildren();
								Control[] controlsThirdLevel = ((Composite) controlsSecondLevel[0]).getChildren();
								Text elementNameText = ((Text) controlsThirdLevel[1]);
								elementNameText.setText(elementName);

								if (shouldDismiss) {
									((Dialog) shell.getData()).close();
								} else if (button != null) {
									Button foundButton = TestUtil.findButton(
											shell, button);
									foundButton.notifyListeners(SWT.Selection,
											null);
								} else {

									Control bb = ((Dialog) shell.getData()).buttonBar;
									Button cb = TestUtil.findButton(bb.getParent(), "Cancel");
									cb.notifyListeners(SWT.Selection, null);

								}
							}
						}

						else {
							Throwable t = new Throwable();
							t.setStackTrace(Thread.currentThread().getStackTrace());
							CorePlugin.logError("Failed to dismiss dialog", t);
						}
					}
				});
			}
		});
		dismissThread.start();
	}
	private NonRootModelElement getTheMostRecentElement(Class type) {
		List childrenList = new ArrayList();
		Ooaofooa[] modelroots = Ooaofooa.getInstances();
		for (int i = 0; i < modelroots.length; i++) {

			if ((modelroots[i].getInstanceList(type).size() != 0)
					&& (modelroots[i] != Ooaofooa.getDefaultInstance())) {
				childrenList.addAll(modelroots[i].getInstanceList(type));
			}
		}
		Object[] children = childrenList.toArray();
		NonRootModelElement newElement = (NonRootModelElement) children[children.length - 1];
		return newElement;
	}
	private MenuItem getMenuItem(String parent, String child) {
		editor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Menu menu = null;
		if (child.equals("Parameter") || child.equals("Argument")
				|| child.equals("Attribute") || child.equals("Member")
				|| child.equals("Enumerator") || child.equals("Constant")) {
			menu = getExplorerView().getTreeViewer().getControl().getMenu();
		} else {

			menu = editor.getCanvas().getMenu();
		}
		MenuItem[] items = UITestingUtilities.getMenuItems(menu, "New");
		MenuItem item = null;
		for (int i = 0; items != null && i < items.length; i++) {
			if (items[i].getText().equals(parent)
					|| items[i].getText().equals(child)) {
				item = items[i];
				break;
			}
		}
		MenuItem menuItem = null;
		if ((item != null) && (item.getMenu() != null)) {
			menuItem = UITestingUtilities.getMenuItem(item.getMenu(), child);
		} else if (item != null) {
			menuItem = item;
		}
		return menuItem;
	}

	public void testNewS_SYSPackage() throws Exception {
		Package_c root = createRootPackge();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Package_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Package_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_CPackage() throws Exception {
		Package_c root = createRootPackge();
		Component_c comp = createRootComponent(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(comp));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(comp);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Package_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Package_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_CComponent() throws Exception {
		Package_c root = createRootPackge();
		Component_c comp = createRootComponent(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(comp));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(comp);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Component");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Component_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Component");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Component_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_ISignal() throws Exception {
		Package_c root = createRootPackge();
		Interface_c iface = createInterface(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(iface));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(iface);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Signal");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(InterfaceSignal_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Signal");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(InterfaceSignal_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_IOperation() throws Exception {
		Package_c root = createRootPackge();
		Interface_c iface = createInterface(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(iface));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(iface);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Operation");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(InterfaceOperation_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Operation");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(InterfaceOperation_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_IOParameter() throws Exception {
		Package_c root = createRootPackge();
		Interface_c iface = createInterface(root);
		InterfaceOperation_c op = creaInterfaceOperation(iface);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(op));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(PropertyParameter_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(PropertyParameter_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewC_ASParameter() throws Exception {
		Package_c root = createRootPackge();
		Interface_c iface = createInterface(root);
		InterfaceSignal_c signal = creInterfaceSignal(iface);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(signal));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(PropertyParameter_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(PropertyParameter_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewS_EDTEnumerator() throws Exception {
		Package_c root = createRootPackge();
		EnumerationDataType_c edt = createEnumDataType(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(edt));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Enumerator");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Enumerator_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Enumerator");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Enumerator_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewCNST_CSPConstant() throws Exception {
		Package_c root = createRootPackge();
		ConstantSpecification_c cdt = createConstDataType(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(cdt));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Constant");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(LiteralSymbolicConstant_c.class);

		assertTrue(SymbolicConstant_c
				.getOneCNST_SYCOnR1502(
						LeafSymbolicConstant_c
								.getOneCNST_LFSCOnR1503((LiteralSymbolicConstant_c) recentElement))
				.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Constant");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(LiteralSymbolicConstant_c.class);
		assertTrue(SymbolicConstant_c
				.getOneCNST_SYCOnR1502(
						LeafSymbolicConstant_c
								.getOneCNST_LFSCOnR1503((LiteralSymbolicConstant_c) recentElement))
				.getName().contains("Unnamed"));

		// TestingUtilities.allowJobCompletion();
	}

	public void testNewS_SYNCParameter() throws Exception {
		Package_c root = createRootPackge();
		Function_c function = createFunction(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(function));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(FunctionParameter_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(FunctionParameter_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewS_EEBridgeOperation() throws Exception {
		Package_c root = createRootPackge();
		ExternalEntity_c ee = createExternalEntity(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(ee));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(ee);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Bridge Operation");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Bridge_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Bridge Operation");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Bridge_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewS_BRGParameter() throws Exception {
		Package_c root = createRootPackge();
		ExternalEntity_c ee = createExternalEntity(root);
		Bridge_c bridgeOp = createBridgeOperation(ee);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(bridgeOp));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(BridgeParameter_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(BridgeParameter_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewO_OBJAttribute() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(mdlClass));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(mdlClass);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Attribute_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Attribute_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewO_OBJOperation() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(mdlClass));
		UITestingUtilities.clearGraphicalSelection();
		UITestingUtilities.addElementToGraphicalSelection(mdlClass);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Operation");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Operation_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Operation");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Operation_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewO_TFRParameter() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		Operation_c op = createClassOperation(mdlClass);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(op));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(OperationParameter_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(OperationParameter_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSM_ISMEvent() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		StateMachine_c sm = createStateMachine(mdlClass,
				InstanceStateMachine_c.class);
		CanvasTestUtils.openInstanceStateDiagram(
				(Ooaofooa) mdlClass.getModelRoot(), mdlClass.getName());

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Event");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StateMachineEvent_c.class);

		assertTrue(((StateMachineEvent_c) recentElement).getMning()
				.equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Event");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StateMachineEvent_c.class);
		assertTrue(((StateMachineEvent_c) recentElement).getMning().contains(
				"Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSM_ISMState() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		StateMachine_c sm = createStateMachine(mdlClass,
				InstanceStateMachine_c.class);
		CanvasTestUtils.openInstanceStateDiagram(
				(Ooaofooa) mdlClass.getModelRoot(), mdlClass.getName());

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "State");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StateMachineState_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "State");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StateMachineState_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSM_ASMEvent() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		StateMachine_c sm = createStateMachine(mdlClass,
				ClassStateMachine_c.class);
		CanvasTestUtils.openDiagramEditor(ClassStateMachine_c
				.getOneSM_ASMOnR517(sm));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Event");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StateMachineEvent_c.class);

		assertTrue(((StateMachineEvent_c) recentElement).getMning()
				.equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Event");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StateMachineEvent_c.class);
		assertTrue(((StateMachineEvent_c) recentElement).getMning().contains(
				"Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSM_ASMState() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		StateMachine_c sm = createStateMachine(mdlClass,
				ClassStateMachine_c.class);
		CanvasTestUtils.openDiagramEditor(ClassStateMachine_c
				.getOneSM_ASMOnR517(sm));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "State");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StateMachineState_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "State");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StateMachineState_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSM_EVTParameter() throws Exception {
		Package_c root = createRootPackge();
		ModelClass_c mdlClass = createModelClass(root);
		StateMachine_c sm = createStateMachine(mdlClass,
				ClassStateMachine_c.class);
		StateMachineEvent_c evt = createSMEvent(sm);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(evt));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StateMachineEventDataItem_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Parameter");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StateMachineEventDataItem_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewS_SDTMember() throws Exception {
		Package_c root = createRootPackge();
		StructuredDataType_c sdt = createStructuredDataType(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(sdt));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Member");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StructureMember_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Member");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StructureMember_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testClassesEP_PKGClass() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Classes", "Class");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ModelClass_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Classes", "Class");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ModelClass_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testComponentsEP_PKGInterface() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Components", "Interface");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Interface_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Components", "Interface");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Interface_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testComponentsEP_PKGComponent() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Components", "Component");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Component_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Components", "Component");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Component_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testExternalEP_PKGExternalEntity() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("External", "External Entity");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ExternalEntity_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("External", "External Entity");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ExternalEntity_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGClass() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "Class");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ClassParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "Class");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ClassParticipant_c.class);
		assertTrue(recentElement.getName().contains("Informal Class"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGPackageParticipant() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "Package Participant");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(PackageParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "Package Participant");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(PackageParticipant_c.class);
		assertTrue(recentElement.getName().contains("Informal Package"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGExternalEntity() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "External Entity");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ExternalEntityParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "External Entity");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ExternalEntityParticipant_c.class);
		assertTrue(recentElement.getName().contains("Informal External Entity"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGInstance() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "Instance");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ClassInstanceParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "Instance");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ClassInstanceParticipant_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGComponent() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "Component");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ComponentParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "Component");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ComponentParticipant_c.class);
		assertTrue(recentElement.getName().contains("Informal Component"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testInteractionEP_PKGActor() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Interaction", "Actor");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ActorParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Interaction", "Actor");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ActorParticipant_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testActivityEP_PKGObjectNode() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Activity", "Object Node");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ObjectNode_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Activity", "Object Node");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ObjectNode_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testActivityEP_PKGSendSignalAction() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Activity", "Send Signal Action");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(SendSignal_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Activity", "Send Signal Action");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(SendSignal_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testActivityEP_PKGAction() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Activity", "Action");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ActivityDiagramAction_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Activity", "Action");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ActivityDiagramAction_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testActivityEP_PKGAcceptTimeEventAction() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Activity", "Accept Time Event Action");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(AcceptTimeEventAction_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Activity", "Accept Time Event Action");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(AcceptTimeEventAction_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testActivityEP_PKGAcceptEventAction() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Activity", "Accept Event Action");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(AcceptEventAction_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Activity", "Accept Event Action");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(AcceptEventAction_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testTypesEP_PKGEnumerationDataType() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Types", "Enumeration DataType");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(EnumerationDataType_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Types", "Enumeration DataType");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(EnumerationDataType_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testTypesEP_PKGStructuredDataType() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Types", "Structured DataType");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(StructuredDataType_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Types", "Structured DataType");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(StructuredDataType_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testTypesEP_PKGConstantSpecification() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Types", "Constant Specification");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ConstantSpecification_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Types", "Constant Specification");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ConstantSpecification_c.class);
		assertTrue(recentElement.getName().contains(""));
		// TestingUtilities.allowJobCompletion();
	}

	public void testTypesEP_PKGUserDataType() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Types", "User DataType");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(UserDataType_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Types", "User DataType");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(UserDataType_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testUsecaseEP_PKGUsecase() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("Usecase", "Usecase");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(UseCaseParticipant_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("Usecase", "Usecase");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(UseCaseParticipant_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewEP_PKGFunction() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Function");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Function_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Function");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Function_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewEP_PKGPackage() throws Exception {
		Package_c root = createRootPackge();
		UITestingUtilities.clearGraphicalSelection();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(Package_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Package");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(Package_c.class);
		assertTrue(recentElement.getName().contains("Unnamed"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewMSG_SMArgument() throws Exception {
		Package_c root = createRootPackge();
		SynchronousMessage_c msg = createSyncMessage(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(msg));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(MessageArgument_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(MessageArgument_c.class);
		assertTrue(recentElement.getName().contains("Informal Argument"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewMSG_AMArgument() throws Exception {
		Package_c root = createRootPackge();
		AsynchronousMessage_c msg = createASyncMessage(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(msg));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(MessageArgument_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(MessageArgument_c.class);
		assertTrue(recentElement.getName().contains("Informal Argument"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewMSG_RArgument() throws Exception {
		Package_c root = createRootPackge();
		ReturnMessage_c msg = createReturnMessage(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(msg));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(MessageArgument_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Argument");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(MessageArgument_c.class);
		assertTrue(recentElement.getName().contains("Informal Argument"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSQ_CIPAttribute() throws Exception {
		Package_c root = createRootPackge();
		ClassInstanceParticipant_c instPart = createClassInstanceParticipant(root);
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(instPart));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(InstanceAttributeValue_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(InstanceAttributeValue_c.class);
		assertTrue(recentElement.getName().contains("Informal Attribute"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNewSQ_CPAttribute() throws Exception {
		Package_c root = createRootPackge();
		ClassParticipant_c classPart = createClassParticipant(root);
		Selection.getInstance().clear();
		Selection.getInstance()
				.setSelection(new StructuredSelection(classPart));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		setNameUsingRenameDialog(200, false, "OK", "newElement");
		MenuItem item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
		NonRootModelElement recentElement = getTheMostRecentElement(ClassParticipantAttribute_c.class);

		assertTrue(recentElement.getName().equalsIgnoreCase("newElement"));

		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		item = getMenuItem("New", "Attribute");
		UITestingUtilities.activateMenuItem(item);
		recentElement = getTheMostRecentElement(ClassParticipantAttribute_c.class);
		assertTrue(recentElement.getName().contains("Informal Attribute"));
		// TestingUtilities.allowJobCompletion();
	}

	public void testNoDialogForImportedClassFromPalette() {
		Package_c root = createRootPackge();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);
		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities
				.getTool("Classes", "Imported Class");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		ImportedClass_c iclass = ImportedClass_c
				.getOneO_IOBJOnR8001(PackageableElement_c
						.getOnePE_PEOnR8000(root));
		assertNotNull(iclass);

	}

	public void testNoDialogForComponentReferenceFromPalette() {
		Package_c root = createRootPackge();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);
		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						false);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Components",
				"Component Reference");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		ComponentReference_c compref = ComponentReference_c
				.getOneCL_ICOnR8001(PackageableElement_c
						.getOnePE_PEOnR8000(root));
		assertNotNull(compref);

	}
	public void testRenameDialogShowsWhenTheDefaultNameOptionIsSet() {
		Package_c root = createRootPackge();
		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(root));
		CanvasTestUtils.openDiagramEditor(root);
		CorePlugin
				.getDefault()
				.getPreferenceStore()
				.setValue(
						BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
						true);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		AbstractTool tool = CanvasUtilities.getTool("Default Toolset",
				"Package");
		CanvasUtilities.activateTool(tool);
		boolean convertMouseCoor = true;
		Model_c model = activeEditor.getModel();

		org.eclipse.swt.graphics.Point creationPoint = new org.eclipse.swt.graphics.Point(
				500, 300);
		if (convertMouseCoor) {
			creationPoint = CanvasUtilities.convertToMouseCoor(creationPoint,
					model);
		}
		CanvasUtilities.doMousePress(creationPoint.x, creationPoint.y);
		CanvasUtilities.doMouseRelease(creationPoint.x, creationPoint.y);
		CanvasUtilities.deactivateTool(tool);
		activeEditor.zoomAll();
		Package_c pkg = Package_c.getOneEP_PKGOnR8001(PackageableElement_c
				.getOnePE_PEOnR8000(root));
		assertNotNull(pkg);
		assertEquals("Unnamed Package", pkg.getName());

		Selection.getInstance().clear();
		Selection.getInstance().setSelection(new StructuredSelection(pkg));

		setNameUsingRenameDialog(200, false, "OK", "Package One");
		editor = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();

		MenuItem item = UITestingUtilities.getMenuItem(editor.getCanvas()
				.getMenu(), "Rename");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();

		assertEquals("Package One", pkg.getName());

	}
	public void testCreatingComponentWithInvalidNameNotAffectFileSystem() throws IOException, InterruptedException, CoreException
	
	{  
	  
        // Turn off autobuild to stop MC-3020 builders from running
		WorkspaceUtil.setAutobuilding(false);
		CorePlugin.getDefault().getPreferenceStore().setValue(
				BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
				false);
        String projectName = "VerifierFragmentExecutionTest";
        // Create the project contents
		IProject testProject = TestingUtilities.createProject(projectName);
		File sourceProject = new File(m_workspace_path + "../" + projectName);
		TestingUtilities.copyProjectContents(sourceProject, testProject);
		TestingUtilities.allowJobCompletion();
	 
		
	    SystemModel_c sys =	  getSystemModel(projectName); 
	    Package_c pkg =  Package_c.getOneEP_PKGOnR1401(sys,new ClassQueryInterface_c() {
			
			@Override
			public boolean evaluate(Object candidate) {
				Package_c selected =  (Package_c) candidate;
				return (selected.getName().equals("P1"));
			}
		});
	    
	    CanvasTestUtils.openDiagramEditor(pkg);
		GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getGraphicalEditor();
		
		String[] files = pkg.getFile().getRawLocation().removeLastSegments(1).toFile().list();
        int numberOfFilesBeforeNewElement =files.length;
		
		setNameUsingRenameDialog(200, false, "OK", "CP1");
		TestUtil.okToDialog(400);
        MenuItem item = getMenuItem("Components", "Component");
		UITestingUtilities.activateMenuItem(item);
		TestUtil.sleepWithDispatchOfEvents(300);
		TestingUtilities.allowJobCompletion();
 		
		
		files = pkg.getFile().getRawLocation().removeLastSegments(1).toFile().list();
		int numberOfFilesAfterNewElement = files.length;
		assertEquals(numberOfFilesBeforeNewElement, numberOfFilesAfterNewElement);
        testProject.delete(true, null);
	}
	//dts0100911019.int 8.2
	public void testCreatingComponentWithValidName() throws IOException, InterruptedException, CoreException
{  
    
    // Turn off autobuild to stop MC-3020 builders from running
	WorkspaceUtil.setAutobuilding(false);
	CorePlugin.getDefault().getPreferenceStore().setValue(
			BridgePointPreferencesStore.USE_DEFAULT_NAME_FOR_CREATION,
			false);
    String projectName = "VerifierFragmentExecutionTest";
    // Create the project contents
	IProject testProject = TestingUtilities.createProject(projectName);
	File sourceProject = new File(m_workspace_path + "../" + projectName);
	TestingUtilities.copyProjectContents(sourceProject, testProject);
	TestingUtilities.allowJobCompletion();
 
	
    SystemModel_c sys =	  getSystemModel(projectName); 
	    Package_c pkg =  Package_c.getOneEP_PKGOnR1401(sys,new ClassQueryInterface_c() {
			
			@Override
			public boolean evaluate(Object candidate) {
				Package_c selected =  (Package_c) candidate;
				return (selected.getName().equals("P1"));
			}
		});
		
    CanvasTestUtils.openDiagramEditor(pkg);
	GraphicalEditor activeEditor = ((ModelEditor) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor()).getGraphicalEditor();
	
	String[] files = pkg.getFile().getRawLocation().removeLastSegments(1).toFile().list();
    int numberOfFilesBeforeNewElement =files.length;
	
	setNameUsingRenameDialog(200, false, "OK", "Cmp");
    MenuItem item = getMenuItem("Components", "Component");
	UITestingUtilities.activateMenuItem(item);
	TestUtil.sleepWithDispatchOfEvents(300);
	TestingUtilities.allowJobCompletion();
		
	
	files = pkg.getFile().getRawLocation().removeLastSegments(1).toFile().list();
	int numberOfFilesAfterNewElement = files.length;
	assertEquals(numberOfFilesBeforeNewElement+1, numberOfFilesAfterNewElement);
 

	File cmpFolder = pkg.getFile().getRawLocation().removeLastSegments(1).append("/Cmp").toFile();
	if(cmpFolder.exists())
	{
		files = cmpFolder.list();
		assertTrue(files[0].endsWith("Cmp.xtuml"));
	}
	else
	{
	  	assertTrue("Component with valid name was not created successfully",false);
	}
	testProject.delete(true, null);
}
}
