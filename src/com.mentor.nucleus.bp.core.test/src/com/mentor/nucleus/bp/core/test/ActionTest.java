package com.mentor.nucleus.bp.core.test;
//======================================================================
//
// File: com/mentor/nucleus/bp/core/test/ActionTest.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/create_action_test.arc
// Version:      $Revision: 1.73 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//

import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.PlatformUI;

import com.mentor.nucleus.bp.core.test.CoreTest;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.test.TestUtil;
import com.mentor.nucleus.bp.test.common.BaseTest;
import com.mentor.nucleus.bp.test.common.TestingUtilities;
import com.mentor.nucleus.bp.test.common.UITestingUtilities;
import com.mentor.nucleus.bp.core.util.OoaofgraphicsUtil;

public class ActionTest extends CoreTest {
	private static boolean initialized = false;
	private Ooaofooa modelRoot = BaseTest.getDefaultTestInstance();
	protected void setUp() throws Exception {
		super.setUp();
		Ooaofooa.setPersistEnabled(false);
		Ooaofooa.setConsistencyEnabled(false);
		if (!initialized) {
			modelRoot.clearDatabase(new NullProgressMonitor());
			Domain_c d2 = new Domain_c(modelRoot);
			DataType_c dt1 = new DataType_c(modelRoot);
			dt1.setName("void");
			dt1.relateAcrossR14To(d2);
			CoreDataType_c cdt1 = new CoreDataType_c(modelRoot);
			dt1.relateAcrossR17To(cdt1);

			DataType_c dt2 = new DataType_c(modelRoot);
			dt2.setName("integer");
			dt2.relateAcrossR14To(d2);
			CoreDataType_c cdt2 = new CoreDataType_c(modelRoot);
			dt2.relateAcrossR17To(cdt2);

			DataTypePackage_c dpk = new DataTypePackage_c(modelRoot);
			dpk.relateAcrossR40To(d2);
			dpk.setName(Ooaofooa.Getcoredatatypespackagename(modelRoot));
			DataTypeInPackage_c dip1 = new DataTypeInPackage_c(modelRoot);
			dpk.relateAcrossR39To(dip1);
			dip1.relateAcrossR39To(dt1);
			DataTypeInPackage_c dip2 = new DataTypeInPackage_c(modelRoot);
			dpk.relateAcrossR39To(dip2);
			dip2.relateAcrossR39To(dt2);

			ExternalEntityPackage_c epk = new ExternalEntityPackage_c(modelRoot);
			epk.relateAcrossR36To(d2);
			epk.setName("External Entities");

			FunctionPackage_c fpk = new FunctionPackage_c(modelRoot);
			fpk.relateAcrossR29To(d2);
			fpk.setName("Functions");
			initialized = true;
		}
		UITestingUtilities.hidePropertyView();
	}

	public void testNewS_SYSPackage() throws Exception {
		SystemModel_c t1 = new SystemModel_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewPackageOnS_SYSAction t2 = new NewPackageOnS_SYSAction();
		Action a = new Action() {
		};
		t2.run(a);

		Package_c t3 = Package_c.PackageInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewIP_IPInterface() throws Exception {
		InterfacePackage_c t1 = new InterfacePackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewInterfaceOnIP_IPAction t2 = new NewInterfaceOnIP_IPAction();
		Action a = new Action() {
		};
		t2.run(a);

		Interface_c t3 = Interface_c.InterfaceInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewC_ISignal() throws Exception {
		Interface_c t1 = new Interface_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewSignalOnC_IAction t2 = new NewSignalOnC_IAction();
		Action a = new Action() {
		};
		t2.run(a);

		InterfaceSignal_c t3 = InterfaceSignal_c
				.InterfaceSignalInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewC_IOperation() throws Exception {
		Interface_c t1 = new Interface_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewOperationOnC_IAction t2 = new NewOperationOnC_IAction();
		Action a = new Action() {
		};
		t2.run(a);

		InterfaceOperation_c t3 = InterfaceOperation_c
				.InterfaceOperationInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewC_IOParameter() throws Exception {
		InterfaceOperation_c t1 = new InterfaceOperation_c(modelRoot);
		SystemModel_c systemModel = new SystemModel_c(modelRoot);
		Interface_c iface = new Interface_c(modelRoot);
		iface.Newexecutableproperty(false);
		t1.relateAcrossR4008To(DataType_c.DataTypeInstances(modelRoot)[0]);
		t1.relateAcrossR4004To(ExecutableProperty_c.getOneC_EPOnR4003(iface));
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnC_IOAction t2 = new NewParameterOnC_IOAction();
		Action a = new Action() {
		};
		t2.run(a);

		PropertyParameter_c t3 = PropertyParameter_c
				.PropertyParameterInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewC_ASParameter() throws Exception {
		InterfaceSignal_c t1 = new InterfaceSignal_c(modelRoot);
		SystemModel_c systemModel = new SystemModel_c(modelRoot);
		Interface_c iface = new Interface_c(modelRoot);
		iface.Newexecutableproperty(false);
		t1.relateAcrossR4004To(ExecutableProperty_c.getOneC_EPOnR4003(iface));
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnC_ASAction t2 = new NewParameterOnC_ASAction();
		Action a = new Action() {
		};
		t2.run(a);

		PropertyParameter_c t3 = PropertyParameter_c
				.PropertyParameterInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_SComponentParticipant() throws Exception {
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewComponentParticipantOnSQ_SAction t2 = new NewComponentParticipantOnSQ_SAction();
		Action a = new Action() {
		};
		t2.run(a);

		ComponentParticipant_c t3 = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_SInstance() throws Exception {
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewInstanceOnSQ_SAction t2 = new NewInstanceOnSQ_SAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassInstanceParticipant_c t3 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_SActorParticipant() throws Exception {
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewActorParticipantOnSQ_SAction t2 = new NewActorParticipantOnSQ_SAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActorParticipant_c t3 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_SExternalEntity() throws Exception {
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewExternalEntityOnSQ_SAction t2 = new NewExternalEntityOnSQ_SAction();
		Action a = new Action() {
		};
		t2.run(a);

		ExternalEntityParticipant_c t3 = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_SClassParticipant() throws Exception {
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewClassParticipantOnSQ_SAction t2 = new NewClassParticipantOnSQ_SAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassParticipant_c t3 = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_DPKUserDataType() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewUserDatatypeOnS_DPKAction t2 = new NewUserDatatypeOnS_DPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		UserDataType_c t3 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_DPKStructuredDataType() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewStructuredDatatypeOnS_DPKAction t2 = new NewStructuredDatatypeOnS_DPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		StructuredDataType_c t3 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_DPKEnumerationDataType() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewEnumerationDatatypeOnS_DPKAction t2 = new NewEnumerationDatatypeOnS_DPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		EnumerationDataType_c t3 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_DPKConstantSpecification() throws Exception {
		DataTypePackage_c t1 = DataTypePackage_c
				.DataTypePackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewConstantSpecificationOnS_DPKAction t2 = new NewConstantSpecificationOnS_DPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		ConstantSpecification_c t3 = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_EDTEnumerator() throws Exception {
		EnumerationDataType_c t1 = new EnumerationDataType_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewEnumeratorOnS_EDTAction t2 = new NewEnumeratorOnS_EDTAction();
		Action a = new Action() {
		};
		t2.run(a);

		Enumerator_c t3 = Enumerator_c.EnumeratorInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCNST_CSPConstant() throws Exception {
		ConstantSpecification_c t1 = new ConstantSpecification_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewConstantOnCNST_CSPAction t2 = new NewConstantOnCNST_CSPAction();
		Action a = new Action() {
		};
		t2.run(a);

		LiteralSymbolicConstant_c t3 = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_FPKFunction() throws Exception {
		FunctionPackage_c t1 = FunctionPackage_c
				.FunctionPackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewFunctionOnS_FPKAction t2 = new NewFunctionOnS_FPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		Function_c t3 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_SYNCParameter() throws Exception {
		Function_c t1 = new Function_c(modelRoot);
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnS_SYNCAction t2 = new NewParameterOnS_SYNCAction();
		Action a = new Action() {
		};
		t2.run(a);

		FunctionParameter_c t3 = FunctionParameter_c
				.FunctionParameterInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_EEPKExternalEntity() throws Exception {
		ExternalEntityPackage_c t1 = ExternalEntityPackage_c
				.ExternalEntityPackageInstance(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewExternalEntityOnS_EEPKAction t2 = new NewExternalEntityOnS_EEPKAction();
		Action a = new Action() {
		};
		t2.run(a);

		ExternalEntity_c t3 = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
	}
	public void testNewS_EEBridgeOperation() throws Exception {
		ExternalEntity_c t1 = new ExternalEntity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewBridgeOperationOnS_EEAction t2 = new NewBridgeOperationOnS_EEAction();
		Action a = new Action() {
		};
		t2.run(a);

		Bridge_c t3 = Bridge_c.BridgeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_BRGParameter() throws Exception {
		Bridge_c t1 = new Bridge_c(modelRoot);
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnS_BRGAction t2 = new NewParameterOnS_BRGAction();
		Action a = new Action() {
		};
		t2.run(a);

		BridgeParameter_c t3 = BridgeParameter_c
				.BridgeParameterInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_SSClass() throws Exception {
		Subsystem_c t1 = new Subsystem_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewClassOnS_SSAction t2 = new NewClassOnS_SSAction();
		Action a = new Action() {
		};
		t2.run(a);

		ModelClass_c t3 = ModelClass_c.ModelClassInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_SSImportedClass() throws Exception {
		Subsystem_c t1 = new Subsystem_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewImportedClassOnS_SSAction t2 = new NewImportedClassOnS_SSAction();
		Action a = new Action() {
		};
		t2.run(a);

		ImportedClass_c t3 = ImportedClass_c.ImportedClassInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewO_OBJAttribute() throws Exception {
		ModelClass_c t1 = new ModelClass_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewAttributeOnO_OBJAction t2 = new NewAttributeOnO_OBJAction();
		Action a = new Action() {
		};
		t2.run(a);

		Attribute_c t3 = Attribute_c.AttributeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewO_OBJOperation() throws Exception {
		ModelClass_c t1 = new ModelClass_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewOperationOnO_OBJAction t2 = new NewOperationOnO_OBJAction();
		Action a = new Action() {
		};
		t2.run(a);

		Operation_c t3 = Operation_c.OperationInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewO_TFRParameter() throws Exception {
		Operation_c t1 = new Operation_c(modelRoot);
		ModelClass_c clazz = new ModelClass_c(modelRoot);
		t1.relateAcrossR115To(clazz);
		DataType_c type = new DataType_c(modelRoot);
		t1.relateAcrossR116To(type);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnO_TFRAction t2 = new NewParameterOnO_TFRAction();
		Action a = new Action() {
		};
		t2.run(a);

		OperationParameter_c t3 = OperationParameter_c
				.OperationParameterInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewO_OBJInstanceStateMachine() throws Exception {
		ModelClass_c t1 = new ModelClass_c(modelRoot);
		//Checking for filter actions
		assertTrue(t1.Actionfilter("can", "instanceStateChart"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewInstanceStateMachineOnO_OBJAction t2 = new NewInstanceStateMachineOnO_OBJAction();
		Action a = new Action() {
		};
		t2.run(a);

		InstanceStateMachine_c t3 = InstanceStateMachine_c
				.InstanceStateMachineInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		//Checking for filter actions
		assertFalse(t1.Actionfilter("can", "instanceStateChart"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSM_ISMEvent() throws Exception {
		InstanceStateMachine_c t1 = new InstanceStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		t1.relateAcrossR517To(sm);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewEventOnSM_ISMAction t2 = new NewEventOnSM_ISMAction();
		Action a = new Action() {
		};
		t2.run(a);

		StateMachineEvent_c t3 = StateMachineEvent_c
				.StateMachineEventInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSM_ISMState() throws Exception {
		InstanceStateMachine_c t1 = new InstanceStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		t1.relateAcrossR517To(sm);
		MooreStateMachine_c msm = new MooreStateMachine_c(modelRoot);
		sm.relateAcrossR510To(msm);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewStateOnSM_ISMAction t2 = new NewStateOnSM_ISMAction();
		Action a = new Action() {
		};
		t2.run(a);

		StateMachineState_c t3 = StateMachineState_c
				.StateMachineStateInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewO_OBJClassStateMachine() throws Exception {
		ModelClass_c t1 = new ModelClass_c(modelRoot);
		//Checking for filter actions
		assertTrue(t1.Actionfilter("can", "classStateChart"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewClassStateMachineOnO_OBJAction t2 = new NewClassStateMachineOnO_OBJAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassStateMachine_c t3 = ClassStateMachine_c
				.ClassStateMachineInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		//Checking for filter actions
		assertFalse(t1.Actionfilter("can", "classStateChart"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSM_ASMEvent() throws Exception {
		ClassStateMachine_c t1 = new ClassStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		t1.relateAcrossR517To(sm);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewEventOnSM_ASMAction t2 = new NewEventOnSM_ASMAction();
		Action a = new Action() {
		};
		t2.run(a);

		StateMachineEvent_c t3 = StateMachineEvent_c
				.StateMachineEventInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSM_ASMState() throws Exception {
		ClassStateMachine_c t1 = new ClassStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		t1.relateAcrossR517To(sm);
		MooreStateMachine_c msm = new MooreStateMachine_c(modelRoot);
		sm.relateAcrossR510To(msm);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewStateOnSM_ASMAction t2 = new NewStateOnSM_ASMAction();
		Action a = new Action() {
		};
		t2.run(a);

		StateMachineState_c t3 = StateMachineState_c
				.StateMachineStateInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSM_EVTParameter() throws Exception {
		StateMachineEvent_c t1 = new StateMachineEvent_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewParameterOnSM_EVTAction t2 = new NewParameterOnSM_EVTAction();
		Action a = new Action() {
		};
		t2.run(a);

		StateMachineEventDataItem_c t3 = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCOMM_COMMComponentParticipant() throws Exception {
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewComponentParticipantOnCOMM_COMMAction t2 = new NewComponentParticipantOnCOMM_COMMAction();
		Action a = new Action() {
		};
		t2.run(a);

		ComponentParticipant_c t3 = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCOMM_COMMInstance() throws Exception {
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewInstanceOnCOMM_COMMAction t2 = new NewInstanceOnCOMM_COMMAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassInstanceParticipant_c t3 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCOMM_COMMActorParticipant() throws Exception {
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewActorParticipantOnCOMM_COMMAction t2 = new NewActorParticipantOnCOMM_COMMAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActorParticipant_c t3 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCOMM_COMMExternalEntity() throws Exception {
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewExternalEntityOnCOMM_COMMAction t2 = new NewExternalEntityOnCOMM_COMMAction();
		Action a = new Action() {
		};
		t2.run(a);

		ExternalEntityParticipant_c t3 = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewCOMM_COMMClassParticipant() throws Exception {
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewClassParticipantOnCOMM_COMMAction t2 = new NewClassParticipantOnCOMM_COMMAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassParticipant_c t3 = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewUC_UCCUseCasediagram() throws Exception {
		UseCaseDiagram_c t1 = new UseCaseDiagram_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewUseCaseDiagramOnUC_UCCAction t2 = new NewUseCaseDiagramOnUC_UCCAction();
		Action a = new Action() {
		};
		t2.run(a);

		UseCaseDiagram_c t3 = UseCaseDiagram_c
				.UseCaseDiagramInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewUC_UCCUsecase() throws Exception {
		UseCaseDiagram_c t1 = new UseCaseDiagram_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewUsecaseOnUC_UCCAction t2 = new NewUsecaseOnUC_UCCAction();
		Action a = new Action() {
		};
		t2.run(a);

		UseCaseParticipant_c t3 = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewUC_UCCActor() throws Exception {
		UseCaseDiagram_c t1 = new UseCaseDiagram_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewActorOnUC_UCCAction t2 = new NewActorOnUC_UCCAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActorParticipant_c t3 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewA_AAction() throws Exception {
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewActionOnA_AAction t2 = new NewActionOnA_AAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActionNode_c t3 = ActionNode_c.ActionNodeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewA_AObjectNode() throws Exception {
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewObjectNodeOnA_AAction t2 = new NewObjectNodeOnA_AAction();
		Action a = new Action() {
		};
		t2.run(a);

		ObjectNode_c t3 = ObjectNode_c.ObjectNodeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewA_AAcceptEventAction() throws Exception {
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewAcceptEventActionOnA_AAction t2 = new NewAcceptEventActionOnA_AAction();
		Action a = new Action() {
		};
		t2.run(a);

		AcceptEventAction_c t3 = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewA_ASendSignalAction() throws Exception {
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewSendSignalActionOnA_AAction t2 = new NewSendSignalActionOnA_AAction();
		Action a = new Action() {
		};
		t2.run(a);

		SendSignal_c t3 = SendSignal_c.SendSignalInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewA_AAcceptTimeEventAction() throws Exception {
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewAcceptTimeEventActionOnA_AAction t2 = new NewAcceptTimeEventActionOnA_AAction();
		Action a = new Action() {
		};
		t2.run(a);

		AcceptTimeEventAction_c t3 = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewS_SDTMember() throws Exception {
		StructuredDataType_c t1 = new StructuredDataType_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewMemberOnS_SDTAction t2 = new NewMemberOnS_SDTAction();
		Action a = new Action() {
		};
		t2.run(a);

		StructureMember_c t3 = StructureMember_c
				.StructureMemberInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewEP_PKGFunction() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewFunctionOnEP_PKGAction t2 = new NewFunctionOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		Function_c t3 = Function_c.FunctionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewEP_PKGPackage() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewPackageOnEP_PKGAction t2 = new NewPackageOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		Package_c t3 = Package_c.PackageInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewMSG_SMArgument() throws Exception {
		SynchronousMessage_c t1 = new SynchronousMessage_c(modelRoot);
		Message_c message = new Message_c(modelRoot);
		t1.relateAcrossR1018To(message);
		InformalSynchronousMessage_c im = new InformalSynchronousMessage_c(
				modelRoot);
		t1.relateAcrossR1020To(im);
		assertTrue(t1.Actionfilter("can", "addArg"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewArgumentOnMSG_SMAction t2 = new NewArgumentOnMSG_SMAction();
		Action a = new Action() {
		};
		t2.run(a);

		MessageArgument_c t3 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		Operation_c operation = new Operation_c(modelRoot);
		OperationMessage_c om = new OperationMessage_c(modelRoot);
		operation.relateAcrossR1011To(om);
		t1.relateAcrossR1020To(om);
		t1.unrelateAcrossR1020From(im);
		assertFalse(t1.Actionfilter("can", "addArg"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewMSG_AMArgument() throws Exception {
		AsynchronousMessage_c t1 = new AsynchronousMessage_c(modelRoot);
		Message_c message = new Message_c(modelRoot);
		t1.relateAcrossR1018To(message);
		InformalAsynchronousMessage_c im = new InformalAsynchronousMessage_c(
				modelRoot);
		t1.relateAcrossR1019To(im);
		assertTrue(t1.Actionfilter("can", "addArg"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewArgumentOnMSG_AMAction t2 = new NewArgumentOnMSG_AMAction();
		Action a = new Action() {
		};
		t2.run(a);

		MessageArgument_c t3 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		StateMachineEvent_c event = new StateMachineEvent_c(modelRoot);
		EventMessage_c em = new EventMessage_c(modelRoot);
		event.relateAcrossR1009To(em);
		t1.relateAcrossR1019To(em);
		t1.unrelateAcrossR1019From(im);
		assertFalse(t1.Actionfilter("can", "addArg"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewMSG_RArgument() throws Exception {
		ReturnMessage_c t1 = new ReturnMessage_c(modelRoot);
		Message_c message = new Message_c(modelRoot);
		t1.relateAcrossR1018To(message);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewArgumentOnMSG_RAction t2 = new NewArgumentOnMSG_RAction();
		Action a = new Action() {
		};
		t2.run(a);

		MessageArgument_c t3 = MessageArgument_c
				.MessageArgumentInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_CIPAttribute() throws Exception {
		ClassInstanceParticipant_c t1 = new ClassInstanceParticipant_c(
				modelRoot);
		assertTrue(t1.Actionfilter("can", "addAttr"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewAttributeOnSQ_CIPAction t2 = new NewAttributeOnSQ_CIPAction();
		Action a = new Action() {
		};
		t2.run(a);

		InstanceAttributeValue_c t3 = InstanceAttributeValue_c
				.InstanceAttributeValueInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		ModelClass_c mclass = new ModelClass_c(modelRoot);
		t1.relateAcrossR934To(mclass);
		assertFalse(t1.Actionfilter("can", "addAttr"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testNewSQ_CPAttribute() throws Exception {
		ClassParticipant_c t1 = new ClassParticipant_c(modelRoot);
		assertTrue(t1.Actionfilter("can", "addAttr"));

		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		NewAttributeOnSQ_CPAction t2 = new NewAttributeOnSQ_CPAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassParticipantAttribute_c t3 = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		ModelClass_c mclass = new ModelClass_c(modelRoot);
		t1.relateAcrossR939To(mclass);
		assertFalse(t1.Actionfilter("can", "addAttr"));

		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testClassesEP_PKGImportedClass() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ClassesImportedClassOnEP_PKGAction t2 = new ClassesImportedClassOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ImportedClass_c t3 = ImportedClass_c.ImportedClassInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testClassesEP_PKGClass() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ClassesClassOnEP_PKGAction t2 = new ClassesClassOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ModelClass_c t3 = ModelClass_c.ModelClassInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testComponentsEP_PKGInterface() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ComponentsInterfaceOnEP_PKGAction t2 = new ComponentsInterfaceOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		Interface_c t3 = Interface_c.InterfaceInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testComponentsEP_PKGComponentReference() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ComponentsComponentReferenceOnEP_PKGAction t2 = new ComponentsComponentReferenceOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ComponentReference_c t3 = ComponentReference_c
				.ComponentReferenceInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testComponentsEP_PKGComponent() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ComponentsComponentOnEP_PKGAction t2 = new ComponentsComponentOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		Component_c t3 = Component_c.ComponentInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testExternalEP_PKGExternalEntity() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ExternalExternalEntityOnEP_PKGAction t2 = new ExternalExternalEntityOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ExternalEntity_c t3 = ExternalEntity_c
				.ExternalEntityInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testInteractionEP_PKGClass() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionClassOnEP_PKGAction t2 = new InteractionClassOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassParticipant_c t3 = ClassParticipant_c
				.ClassParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testInteractionEP_PKGPackageParticipant() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionPackageParticipantOnEP_PKGAction t2 = new InteractionPackageParticipantOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		PackageParticipant_c t3 = PackageParticipant_c
				.PackageParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testInteractionEP_PKGExternalEntity() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionExternalEntityOnEP_PKGAction t2 = new InteractionExternalEntityOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ExternalEntityParticipant_c t3 = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testInteractionEP_PKGInstance() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionInstanceOnEP_PKGAction t2 = new InteractionInstanceOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ClassInstanceParticipant_c t3 = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testInteractionEP_PKGComponent() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionComponentOnEP_PKGAction t2 = new InteractionComponentOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ComponentParticipant_c t3 = ComponentParticipant_c
				.ComponentParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testInteractionEP_PKGActor() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		InteractionActorOnEP_PKGAction t2 = new InteractionActorOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActorParticipant_c t3 = ActorParticipant_c
				.ActorParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testActivityEP_PKGObjectNode() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ActivityObjectNodeOnEP_PKGAction t2 = new ActivityObjectNodeOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ObjectNode_c t3 = ObjectNode_c.ObjectNodeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testActivityEP_PKGSendSignalAction() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ActivitySendSignalActionOnEP_PKGAction t2 = new ActivitySendSignalActionOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		SendSignal_c t3 = SendSignal_c.SendSignalInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testActivityEP_PKGAction() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ActivityActionOnEP_PKGAction t2 = new ActivityActionOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ActivityDiagramAction_c t3 = ActivityDiagramAction_c
				.ActivityDiagramActionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testActivityEP_PKGAcceptTimeEventAction() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ActivityAcceptTimeEventActionOnEP_PKGAction t2 = new ActivityAcceptTimeEventActionOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		AcceptTimeEventAction_c t3 = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testActivityEP_PKGAcceptEventAction() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		ActivityAcceptEventActionOnEP_PKGAction t2 = new ActivityAcceptEventActionOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		AcceptEventAction_c t3 = AcceptEventAction_c
				.AcceptEventActionInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testTypesEP_PKGEnumerationDataType() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		TypesEnumerationDatatypeOnEP_PKGAction t2 = new TypesEnumerationDatatypeOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		EnumerationDataType_c t3 = EnumerationDataType_c
				.EnumerationDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testTypesEP_PKGStructuredDataType() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		TypesStructuredDatatypeOnEP_PKGAction t2 = new TypesStructuredDatatypeOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		StructuredDataType_c t3 = StructuredDataType_c
				.StructuredDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testTypesEP_PKGConstantSpecification() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		TypesConstantSpecificationOnEP_PKGAction t2 = new TypesConstantSpecificationOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		ConstantSpecification_c t3 = ConstantSpecification_c
				.ConstantSpecificationInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}
	public void testTypesEP_PKGUserDataType() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		TypesUserDatatypeOnEP_PKGAction t2 = new TypesUserDatatypeOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		UserDataType_c t3 = UserDataType_c.UserDataTypeInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	public void testUsecaseEP_PKGUsecase() throws Exception {
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		UsecaseUsecaseOnEP_PKGAction t2 = new UsecaseUsecaseOnEP_PKGAction();
		Action a = new Action() {
		};
		t2.run(a);

		UseCaseParticipant_c t3 = UseCaseParticipant_c
				.UseCaseParticipantInstance(modelRoot);
		assertNotNull(t3);
		t3.checkConsistency();
		t3.delete_unchecked();
		t1.delete_unchecked();
	}

	// testDeleteS_SYS was removed, as it was redundant;
	// the functionality tested by it is also tested
	// as part of bp.ui.explorer.test.ExplorerTest.
	// testProjectDeleteFromModelExplorer();

	// testDeleteS_DOM was removed, as it was redundant;
	// the functionality tested by it is also tested
	// as part of bp.ui.explorer.test.ExplorerTest.
	// testDomainDeleteFromModelExplorer();
	public void testDeleteCL_IC() throws Exception {
		ComponentReference_c[] before = ComponentReference_c
				.ComponentReferenceInstances(modelRoot);
		ComponentReference_c t1 = new ComponentReference_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ComponentReference_c[] after = ComponentReference_c
				.ComponentReferenceInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteCP_CP() throws Exception {
		ComponentPackage_c[] before = ComponentPackage_c
				.ComponentPackageInstances(modelRoot);
		ComponentPackage_c t1 = new ComponentPackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ComponentPackage_c[] after = ComponentPackage_c
				.ComponentPackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteIP_IP() throws Exception {
		InterfacePackage_c[] before = InterfacePackage_c
				.InterfacePackageInstances(modelRoot);
		InterfacePackage_c t1 = new InterfacePackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InterfacePackage_c[] after = InterfacePackage_c
				.InterfacePackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_C() throws Exception {
		Component_c[] before = Component_c.ComponentInstances(modelRoot);
		Component_c t1 = new Component_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Component_c[] after = Component_c.ComponentInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_I() throws Exception {
		Interface_c[] before = Interface_c.InterfaceInstances(modelRoot);
		Interface_c t1 = new Interface_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Interface_c[] after = Interface_c.InterfaceInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_P() throws Exception {
		Provision_c[] before = Provision_c.ProvisionInstances(modelRoot);
		Provision_c t1 = new Provision_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Provision_c[] after = Provision_c.ProvisionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_R() throws Exception {
		Requirement_c[] before = Requirement_c.RequirementInstances(modelRoot);
		Requirement_c t1 = new Requirement_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Requirement_c[] after = Requirement_c.RequirementInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_PO() throws Exception {
		Port_c[] before = Port_c.PortInstances(modelRoot);
		Port_c t1 = new Port_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Port_c[] after = Port_c.PortInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_AS() throws Exception {
		InterfaceSignal_c[] before = InterfaceSignal_c
				.InterfaceSignalInstances(modelRoot);
		InterfaceSignal_c t1 = new InterfaceSignal_c(modelRoot);
		Interface_c iface = new Interface_c(modelRoot);
		iface.Newexecutableproperty(false);
		t1.relateAcrossR4004To(ExecutableProperty_c.getOneC_EPOnR4003(iface));
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InterfaceSignal_c[] after = InterfaceSignal_c
				.InterfaceSignalInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_IO() throws Exception {
		InterfaceOperation_c[] before = InterfaceOperation_c
				.InterfaceOperationInstances(modelRoot);
		InterfaceOperation_c t1 = new InterfaceOperation_c(modelRoot);
		SystemModel_c systemModel = new SystemModel_c(modelRoot);
		Interface_c iface = new Interface_c(modelRoot);
		iface.Newexecutableproperty(true);
		t1.relateAcrossR4008To(DataType_c.DataTypeInstances(modelRoot)[0]);
		t1.relateAcrossR4004To(ExecutableProperty_c.getOneC_EPOnR4003(iface));
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InterfaceOperation_c[] after = InterfaceOperation_c
				.InterfaceOperationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_PP() throws Exception {
		PropertyParameter_c[] before = PropertyParameter_c
				.PropertyParameterInstances(modelRoot);
		PropertyParameter_c t1 = new PropertyParameter_c(modelRoot);
		SystemModel_c systemModel = new SystemModel_c(modelRoot);
		Interface_c iface = new Interface_c(modelRoot);
		iface.Newexecutableproperty(true);
		t1.relateAcrossR4006To(ExecutableProperty_c.getOneC_EPOnR4003(iface));
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		PropertyParameter_c[] after = PropertyParameter_c
				.PropertyParameterInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteC_DG() throws Exception {
		Delegation_c[] before = Delegation_c.DelegationInstances(modelRoot);
		Delegation_c t1 = new Delegation_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Delegation_c[] after = Delegation_c.DelegationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_S() throws Exception {
		Sequence_c[] before = Sequence_c.SequenceInstances(modelRoot);
		Sequence_c t1 = new Sequence_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Sequence_c[] after = Sequence_c.SequenceInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_CP() throws Exception {
		ClassParticipant_c[] before = ClassParticipant_c
				.ClassParticipantInstances(modelRoot);
		ClassParticipant_c t1 = new ClassParticipant_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassParticipant_c[] after = ClassParticipant_c
				.ClassParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteMSG_A() throws Exception {
		MessageArgument_c[] before = MessageArgument_c
				.MessageArgumentInstances(modelRoot);
		MessageArgument_c t1 = new MessageArgument_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		MessageArgument_c[] after = MessageArgument_c
				.MessageArgumentInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_COP() throws Exception {
		ComponentParticipant_c[] before = ComponentParticipant_c
				.ComponentParticipantInstances(modelRoot);
		ComponentParticipant_c t1 = new ComponentParticipant_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ComponentParticipant_c[] after = ComponentParticipant_c
				.ComponentParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_AV() throws Exception {
		InstanceAttributeValue_c[] before = InstanceAttributeValue_c
				.InstanceAttributeValueInstances(modelRoot);
		InstanceAttributeValue_c t1 = new InstanceAttributeValue_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InstanceAttributeValue_c[] after = InstanceAttributeValue_c
				.InstanceAttributeValueInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_CPA() throws Exception {
		ClassParticipantAttribute_c[] before = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstances(modelRoot);
		ClassParticipantAttribute_c t1 = new ClassParticipantAttribute_c(
				modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassParticipantAttribute_c[] after = ClassParticipantAttribute_c
				.ClassParticipantAttributeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_EEP() throws Exception {
		ExternalEntityParticipant_c[] before = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstances(modelRoot);
		ExternalEntityParticipant_c t1 = new ExternalEntityParticipant_c(
				modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ExternalEntityParticipant_c[] after = ExternalEntityParticipant_c
				.ExternalEntityParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_FPP() throws Exception {
		FunctionPackageParticipant_c[] before = FunctionPackageParticipant_c
				.FunctionPackageParticipantInstances(modelRoot);
		FunctionPackageParticipant_c t1 = new FunctionPackageParticipant_c(
				modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		FunctionPackageParticipant_c[] after = FunctionPackageParticipant_c
				.FunctionPackageParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_CIP() throws Exception {
		ClassInstanceParticipant_c[] before = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstances(modelRoot);
		ClassInstanceParticipant_c t1 = new ClassInstanceParticipant_c(
				modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassInstanceParticipant_c[] after = ClassInstanceParticipant_c
				.ClassInstanceParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_LS() throws Exception {
		Lifespan_c[] before = Lifespan_c.LifespanInstances(modelRoot);
		Lifespan_c t1 = new Lifespan_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Lifespan_c[] after = Lifespan_c.LifespanInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteMSG_R() throws Exception {
		ReturnMessage_c[] before = ReturnMessage_c
				.ReturnMessageInstances(modelRoot);
		ReturnMessage_c t1 = new ReturnMessage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ReturnMessage_c[] after = ReturnMessage_c
				.ReturnMessageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteMSG_SM() throws Exception {
		SynchronousMessage_c[] before = SynchronousMessage_c
				.SynchronousMessageInstances(modelRoot);
		SynchronousMessage_c t1 = new SynchronousMessage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		SynchronousMessage_c[] after = SynchronousMessage_c
				.SynchronousMessageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteMSG_AM() throws Exception {
		AsynchronousMessage_c[] before = AsynchronousMessage_c
				.AsynchronousMessageInstances(modelRoot);
		AsynchronousMessage_c t1 = new AsynchronousMessage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		AsynchronousMessage_c[] after = AsynchronousMessage_c
				.AsynchronousMessageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_TM() throws Exception {
		TimingMark_c[] before = TimingMark_c.TimingMarkInstances(modelRoot);
		TimingMark_c t1 = new TimingMark_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		TimingMark_c[] after = TimingMark_c.TimingMarkInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_TS() throws Exception {
		TimeSpan_c[] before = TimeSpan_c.TimeSpanInstances(modelRoot);
		TimeSpan_c t1 = new TimeSpan_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		TimeSpan_c[] after = TimeSpan_c.TimeSpanInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_AP() throws Exception {
		ActorParticipant_c[] before = ActorParticipant_c
				.ActorParticipantInstances(modelRoot);
		ActorParticipant_c t1 = new ActorParticipant_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ActorParticipant_c[] after = ActorParticipant_c
				.ActorParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSQ_PP() throws Exception {
		PackageParticipant_c[] before = PackageParticipant_c
				.PackageParticipantInstances(modelRoot);
		PackageParticipant_c t1 = new PackageParticipant_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		PackageParticipant_c[] after = PackageParticipant_c
				.PackageParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_DPK() throws Exception {
		DataTypePackage_c[] before = DataTypePackage_c
				.DataTypePackageInstances(modelRoot);
		DataTypePackage_c t1 = new DataTypePackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		DataTypePackage_c[] after = DataTypePackage_c
				.DataTypePackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_UDT() throws Exception {
		UserDataType_c[] before = UserDataType_c
				.UserDataTypeInstances(modelRoot);
		UserDataType_c t1 = new UserDataType_c(modelRoot);
		DataType_c[] before_dt = DataType_c.DataTypeInstances(modelRoot);
		DataType_c dt = new DataType_c(modelRoot);
		dt.relateAcrossR17To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		UserDataType_c[] after = UserDataType_c
				.UserDataTypeInstances(modelRoot);
		assertEquals(before.length, after.length);
		DataType_c[] after_dt = DataType_c.DataTypeInstances(modelRoot);
		assertEquals(before_dt.length, after_dt.length);
	}
	public void testDeleteS_EDT() throws Exception {
		EnumerationDataType_c[] before = EnumerationDataType_c
				.EnumerationDataTypeInstances(modelRoot);
		EnumerationDataType_c t1 = new EnumerationDataType_c(modelRoot);
		DataType_c[] before_dt = DataType_c.DataTypeInstances(modelRoot);
		DataType_c dt = new DataType_c(modelRoot);
		dt.relateAcrossR17To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		EnumerationDataType_c[] after = EnumerationDataType_c
				.EnumerationDataTypeInstances(modelRoot);
		assertEquals(before.length, after.length);
		DataType_c[] after_dt = DataType_c.DataTypeInstances(modelRoot);
		assertEquals(before_dt.length, after_dt.length);
	}
	public void testDeleteS_ENUM() throws Exception {
		Enumerator_c[] before = Enumerator_c.EnumeratorInstances(modelRoot);
		Enumerator_c t1 = new Enumerator_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Enumerator_c[] after = Enumerator_c.EnumeratorInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteCNST_CSP() throws Exception {
		ConstantSpecification_c[] before = ConstantSpecification_c
				.ConstantSpecificationInstances(modelRoot);
		ConstantSpecification_c t1 = new ConstantSpecification_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ConstantSpecification_c[] after = ConstantSpecification_c
				.ConstantSpecificationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteCNST_LSC() throws Exception {
		LiteralSymbolicConstant_c[] before = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstances(modelRoot);
		LiteralSymbolicConstant_c t1 = new LiteralSymbolicConstant_c(modelRoot);
		SymbolicConstant_c syc = new SymbolicConstant_c(modelRoot);
		LeafSymbolicConstant_c lfsc = new LeafSymbolicConstant_c(modelRoot);
		syc.relateAcrossR1502To(lfsc);
		lfsc.relateAcrossR1503To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		LiteralSymbolicConstant_c[] after = LiteralSymbolicConstant_c
				.LiteralSymbolicConstantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_FPK() throws Exception {
		FunctionPackage_c[] before = FunctionPackage_c
				.FunctionPackageInstances(modelRoot);
		FunctionPackage_c t1 = new FunctionPackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		FunctionPackage_c[] after = FunctionPackage_c
				.FunctionPackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_SYNC() throws Exception {
		Function_c[] before = Function_c.FunctionInstances(modelRoot);
		Function_c t1 = new Function_c(modelRoot);
		t1.Initialize();
		FunctionPackage_c fp = new FunctionPackage_c(modelRoot);
		FunctionInPackage_c fip = new FunctionInPackage_c(modelRoot);
		fip.relateAcrossR31To(t1);
		fip.relateAcrossR31To(fp);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Function_c[] after = Function_c.FunctionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_SPARM() throws Exception {
		FunctionParameter_c[] before = FunctionParameter_c
				.FunctionParameterInstances(modelRoot);
		FunctionParameter_c t1 = new FunctionParameter_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		FunctionParameter_c[] after = FunctionParameter_c
				.FunctionParameterInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_EEPK() throws Exception {
		ExternalEntityPackage_c[] before = ExternalEntityPackage_c
				.ExternalEntityPackageInstances(modelRoot);
		ExternalEntityPackage_c t1 = new ExternalEntityPackage_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ExternalEntityPackage_c[] after = ExternalEntityPackage_c
				.ExternalEntityPackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_EE() throws Exception {
		ExternalEntity_c[] before = ExternalEntity_c
				.ExternalEntityInstances(modelRoot);
		ExternalEntity_c t1 = new ExternalEntity_c(modelRoot);
		ExternalEntityPackage_c eep = new ExternalEntityPackage_c(modelRoot);
		ExternalEntityInPackage_c eeip = new ExternalEntityInPackage_c(
				modelRoot);
		eeip.relateAcrossR33To(t1);
		eeip.relateAcrossR33To(eep);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ExternalEntity_c[] after = ExternalEntity_c
				.ExternalEntityInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_BRG() throws Exception {
		Bridge_c[] before = Bridge_c.BridgeInstances(modelRoot);
		Bridge_c t1 = new Bridge_c(modelRoot);
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Bridge_c[] after = Bridge_c.BridgeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_BPARM() throws Exception {
		BridgeParameter_c[] before = BridgeParameter_c
				.BridgeParameterInstances(modelRoot);
		BridgeParameter_c t1 = new BridgeParameter_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		BridgeParameter_c[] after = BridgeParameter_c
				.BridgeParameterInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_SS() throws Exception {
		Subsystem_c[] before = Subsystem_c.SubsystemInstances(modelRoot);
		Subsystem_c t1 = new Subsystem_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Subsystem_c[] after = Subsystem_c.SubsystemInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteO_OBJ() throws Exception {
		ModelClass_c[] before = ModelClass_c.ModelClassInstances(modelRoot);
		ModelClass_c t1 = new ModelClass_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ModelClass_c[] after = ModelClass_c.ModelClassInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteO_ATTR() throws Exception {
		Attribute_c[] before = Attribute_c.AttributeInstances(modelRoot);
		Attribute_c t1 = new Attribute_c(modelRoot);
		t1.Initialize();
		BaseAttribute_c battr = new BaseAttribute_c(modelRoot);
		t1.relateAcrossR106To(battr);
		NewBaseAttribute_c nbattr = new NewBaseAttribute_c(modelRoot);
		battr.relateAcrossR107To(nbattr);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Attribute_c[] after = Attribute_c.AttributeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteO_TFR() throws Exception {
		Operation_c[] before = Operation_c.OperationInstances(modelRoot);
		Operation_c t1 = new Operation_c(modelRoot);
		ModelClass_c clazz = new ModelClass_c(modelRoot);
		clazz.relateAcrossR115To(t1);
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Operation_c[] after = Operation_c.OperationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteO_TPARM() throws Exception {
		OperationParameter_c[] before = OperationParameter_c
				.OperationParameterInstances(modelRoot);
		OperationParameter_c t1 = new OperationParameter_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		OperationParameter_c[] after = OperationParameter_c
				.OperationParameterInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_ISM() throws Exception {
		InstanceStateMachine_c[] before = InstanceStateMachine_c
				.InstanceStateMachineInstances(modelRoot);
		InstanceStateMachine_c t1 = new InstanceStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		sm.relateAcrossR517To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InstanceStateMachine_c[] after = InstanceStateMachine_c
				.InstanceStateMachineInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_NLEVT() throws Exception {
		NonLocalEvent_c[] before = NonLocalEvent_c
				.NonLocalEventInstances(modelRoot);
		NonLocalEvent_c t1 = new NonLocalEvent_c(modelRoot);
		StateMachineEvent_c evt = new StateMachineEvent_c(modelRoot);
		SemEvent_c sevt = new SemEvent_c(modelRoot);
		evt.relateAcrossR525To(sevt);
		sevt.relateAcrossR526To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		NonLocalEvent_c[] after = NonLocalEvent_c
				.NonLocalEventInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_EVT() throws Exception {
		StateMachineEvent_c[] before = StateMachineEvent_c
				.StateMachineEventInstances(modelRoot);
		StateMachineEvent_c t1 = new StateMachineEvent_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		StateMachineEvent_c[] after = StateMachineEvent_c
				.StateMachineEventInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_EVTDI() throws Exception {
		StateMachineEventDataItem_c[] before = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstances(modelRoot);
		StateMachineEventDataItem_c t1 = new StateMachineEventDataItem_c(
				modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		StateMachineEventDataItem_c[] after = StateMachineEventDataItem_c
				.StateMachineEventDataItemInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_ASM() throws Exception {
		ClassStateMachine_c[] before = ClassStateMachine_c
				.ClassStateMachineInstances(modelRoot);
		ClassStateMachine_c t1 = new ClassStateMachine_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		sm.relateAcrossR517To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassStateMachine_c[] after = ClassStateMachine_c
				.ClassStateMachineInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_STATE() throws Exception {
		StateMachineState_c[] before = StateMachineState_c
				.StateMachineStateInstances(modelRoot);
		StateMachineState_c t1 = new StateMachineState_c(modelRoot);
		StateMachine_c sm = new StateMachine_c(modelRoot);
		t1.relateAcrossR501To(sm);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		StateMachineState_c[] after = StateMachineState_c
				.StateMachineStateInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteO_IOBJ() throws Exception {
		ImportedClass_c[] before = ImportedClass_c
				.ImportedClassInstances(modelRoot);
		ImportedClass_c t1 = new ImportedClass_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ImportedClass_c[] after = ImportedClass_c
				.ImportedClassInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteR_REL() throws Exception {
		Association_c[] before = Association_c.AssociationInstances(modelRoot);
		Association_c t1 = new Association_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Association_c[] after = Association_c.AssociationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_TXN() throws Exception {
		Transition_c[] before = Transition_c.TransitionInstances(modelRoot);
		Transition_c t1 = new Transition_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Transition_c[] after = Transition_c.TransitionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteSM_CRTXN() throws Exception {
		CreationTransition_c[] before = CreationTransition_c
				.CreationTransitionInstances(modelRoot);
		CreationTransition_c t1 = new CreationTransition_c(modelRoot);
		Transition_c transition = new Transition_c(modelRoot);
		transition.relateAcrossR507To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		CreationTransition_c[] after = CreationTransition_c
				.CreationTransitionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteR_ASSR() throws Exception {
		ClassAsLink_c[] before = ClassAsLink_c.ClassAsLinkInstances(modelRoot);
		ClassAsLink_c t1 = new ClassAsLink_c(modelRoot);
		ReferringClassInAssoc_c rgo = new ReferringClassInAssoc_c(modelRoot);
		t1.relateAcrossR205To(rgo);
		ClassInAssociation_c oir = new ClassInAssociation_c(modelRoot);
		rgo.relateAcrossR203To(oir);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassAsLink_c[] after = ClassAsLink_c.ClassAsLinkInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteR_SUB() throws Exception {
		ClassAsSubtype_c[] before = ClassAsSubtype_c
				.ClassAsSubtypeInstances(modelRoot);
		DisposeTestGenerics dt = new DisposeTestGenerics();
		ClassAsSubtype_c t1 = dt.createClassAsSubtype_c(null);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ClassAsSubtype_c[] after = ClassAsSubtype_c
				.ClassAsSubtypeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteCOMM_COMM() throws Exception {
		Communication_c[] before = Communication_c
				.CommunicationInstances(modelRoot);
		Communication_c t1 = new Communication_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Communication_c[] after = Communication_c
				.CommunicationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteCOMM_LNK() throws Exception {
		CommunicationLink_c[] before = CommunicationLink_c
				.CommunicationLinkInstances(modelRoot);
		CommunicationLink_c t1 = new CommunicationLink_c(modelRoot);
		t1.Initialize();
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		CommunicationLink_c[] after = CommunicationLink_c
				.CommunicationLinkInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteUC_UCC() throws Exception {
		UseCaseDiagram_c[] before = UseCaseDiagram_c
				.UseCaseDiagramInstances(modelRoot);
		UseCaseDiagram_c t1 = new UseCaseDiagram_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		UseCaseDiagram_c[] after = UseCaseDiagram_c
				.UseCaseDiagramInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteIA_UCP() throws Exception {
		UseCaseParticipant_c[] before = UseCaseParticipant_c
				.UseCaseParticipantInstances(modelRoot);
		UseCaseParticipant_c t1 = new UseCaseParticipant_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		UseCaseParticipant_c[] after = UseCaseParticipant_c
				.UseCaseParticipantInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteUC_BA() throws Exception {
		BinaryAssociation_c[] before = BinaryAssociation_c
				.BinaryAssociationInstances(modelRoot);
		BinaryAssociation_c t1 = new BinaryAssociation_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		BinaryAssociation_c[] after = BinaryAssociation_c
				.BinaryAssociationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteUC_G() throws Exception {
		Generalization_c[] before = Generalization_c
				.GeneralizationInstances(modelRoot);
		Generalization_c t1 = new Generalization_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Generalization_c[] after = Generalization_c
				.GeneralizationInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteUC_I() throws Exception {
		Include_c[] before = Include_c.IncludeInstances(modelRoot);
		Include_c t1 = new Include_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Include_c[] after = Include_c.IncludeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteUC_E() throws Exception {
		Extend_c[] before = Extend_c.ExtendInstances(modelRoot);
		Extend_c t1 = new Extend_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Extend_c[] after = Extend_c.ExtendInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_A() throws Exception {
		Activity_c[] before = Activity_c.ActivityInstances(modelRoot);
		Activity_c t1 = new Activity_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Activity_c[] after = Activity_c.ActivityInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_FJ() throws Exception {
		ForkJoinNode_c[] before = ForkJoinNode_c
				.ForkJoinNodeInstances(modelRoot);
		ForkJoinNode_c t1 = new ForkJoinNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ForkJoinNode_c[] after = ForkJoinNode_c
				.ForkJoinNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_INI() throws Exception {
		InitialNode_c[] before = InitialNode_c.InitialNodeInstances(modelRoot);
		InitialNode_c t1 = new InitialNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		InitialNode_c[] after = InitialNode_c.InitialNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_E() throws Exception {
		ActivityEdge_c[] before = ActivityEdge_c
				.ActivityEdgeInstances(modelRoot);
		ActivityEdge_c t1 = new ActivityEdge_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ActivityEdge_c[] after = ActivityEdge_c
				.ActivityEdgeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_AF() throws Exception {
		ActivityFinalNode_c[] before = ActivityFinalNode_c
				.ActivityFinalNodeInstances(modelRoot);
		ActivityFinalNode_c t1 = new ActivityFinalNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ActivityFinalNode_c[] after = ActivityFinalNode_c
				.ActivityFinalNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_FF() throws Exception {
		FlowFinalNode_c[] before = FlowFinalNode_c
				.FlowFinalNodeInstances(modelRoot);
		FlowFinalNode_c t1 = new FlowFinalNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		FlowFinalNode_c[] after = FlowFinalNode_c
				.FlowFinalNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_GA() throws Exception {
		ActivityDiagramAction_c[] before = ActivityDiagramAction_c
				.ActivityDiagramActionInstances(modelRoot);
		ActivityDiagramAction_c t1 = new ActivityDiagramAction_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ActivityDiagramAction_c[] after = ActivityDiagramAction_c
				.ActivityDiagramActionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_DM() throws Exception {
		DecisionMergeNode_c[] before = DecisionMergeNode_c
				.DecisionMergeNodeInstances(modelRoot);
		DecisionMergeNode_c t1 = new DecisionMergeNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		DecisionMergeNode_c[] after = DecisionMergeNode_c
				.DecisionMergeNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_OBJ() throws Exception {
		ObjectNode_c[] before = ObjectNode_c.ObjectNodeInstances(modelRoot);
		ObjectNode_c t1 = new ObjectNode_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ObjectNode_c[] after = ObjectNode_c.ObjectNodeInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_AEA() throws Exception {
		AcceptEventAction_c[] before = AcceptEventAction_c
				.AcceptEventActionInstances(modelRoot);
		AcceptEventAction_c t1 = new AcceptEventAction_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		AcceptEventAction_c[] after = AcceptEventAction_c
				.AcceptEventActionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_ATE() throws Exception {
		AcceptTimeEventAction_c[] before = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstances(modelRoot);
		AcceptTimeEventAction_c t1 = new AcceptTimeEventAction_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		AcceptTimeEventAction_c[] after = AcceptTimeEventAction_c
				.AcceptTimeEventActionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_SS() throws Exception {
		SendSignal_c[] before = SendSignal_c.SendSignalInstances(modelRoot);
		SendSignal_c t1 = new SendSignal_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		SendSignal_c[] after = SendSignal_c.SendSignalInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteA_AP() throws Exception {
		ActivityPartition_c[] before = ActivityPartition_c
				.ActivityPartitionInstances(modelRoot);
		ActivityPartition_c t1 = new ActivityPartition_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		ActivityPartition_c[] after = ActivityPartition_c
				.ActivityPartitionInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteS_SDT() throws Exception {
		StructuredDataType_c[] before = StructuredDataType_c
				.StructuredDataTypeInstances(modelRoot);
		StructuredDataType_c t1 = new StructuredDataType_c(modelRoot);
		DataType_c[] before_dt = DataType_c.DataTypeInstances(modelRoot);
		DataType_c dt = new DataType_c(modelRoot);
		dt.relateAcrossR17To(t1);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		StructuredDataType_c[] after = StructuredDataType_c
				.StructuredDataTypeInstances(modelRoot);
		assertEquals(before.length, after.length);
		DataType_c[] after_dt = DataType_c.DataTypeInstances(modelRoot);
		assertEquals(before_dt.length, after_dt.length);
	}
	public void testDeleteS_MBR() throws Exception {
		StructureMember_c[] before = StructureMember_c
				.StructureMemberInstances(modelRoot);
		StructureMember_c t1 = new StructureMember_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		StructureMember_c[] after = StructureMember_c
				.StructureMemberInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	public void testDeleteEP_PKG() throws Exception {
		Package_c[] before = Package_c.PackageInstances(modelRoot);
		Package_c t1 = new Package_c(modelRoot);
		StructuredSelection sel = new StructuredSelection(t1);
		Selection.getInstance().setSelection(sel, true);
		DeleteAction t2 = new DeleteAction(null);
		t2.run();

		Package_c[] after = Package_c.PackageInstances(modelRoot);
		assertEquals(before.length, after.length);
	}
	// handle in /com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/DeleteProvidedAndRequiredSignalsAndOperations.java
	// handle in /com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/DeleteProvidedAndRequiredSignalsAndOperations.java
	// handle in /com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/DeleteProvidedAndRequiredSignalsAndOperations.java
	// handle in /com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/DeleteProvidedAndRequiredSignalsAndOperations.java
}
