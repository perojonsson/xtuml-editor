//========================================================================
//
// File: FormalizeUnformalizeTest.java
//
// WARNING:      Do not edit this generated file
// Generated by: arc/gen_Formalize_tests.arc
// Version:      $Revision: 1.27 $
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
package com.mentor.nucleus.bp.core.test;

import java.util.UUID;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.ClassQueryInterface_c;
import com.mentor.nucleus.bp.test.common.CanvasTestUtils;
import com.mentor.nucleus.bp.core.ui.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.CanvasTest;

public class FormalizeUnformalizeTest extends CanvasTest {

	String test_id = null;
	private static boolean generateResults = false;
	private boolean reloadModel = false;

	private static boolean firstTime = true;

	private static Selection selection = Selection.getInstance();

	public FormalizeUnformalizeTest(String name) {
		super("FormalizeUnformalizeTest", name);
	}

	protected String getResultName() {
		return "FormalizeUnformalize" + "_" + test_id;
	}

	public void setReloadModel(boolean val) {
		reloadModel = val;
	}

	protected void setUp() throws Exception {
		super.setUp();
		Display d = Display.getCurrent();
		while (d.readAndDispatch());
		ensureAvailableAndLoaded("FormalizeUnformalizeTests", false,
				reloadModel);
		if (firstTime) {
			m_bp_tree.expandAll();
			firstTime = false;
		}
		while (d.readAndDispatch());
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	public class Subsystem_by_name_c implements ClassQueryInterface_c {
		public boolean evaluate(Object candidate) {
			Subsystem_c selected = (Subsystem_c) candidate;
			return (selected.getName().equals(m_name));
		}
		public Subsystem_by_name_c(String name) {
			m_name = name;
		}
		private String m_name;
	}
	public class getAssocByDescrip implements ClassQueryInterface_c {
		public boolean evaluate(Object candidate) {
			Association_c selected = (Association_c) candidate;
			return (selected.getDescrip().equals(m_name));
		}
		public getAssocByDescrip(String name) {
			m_name = name;
		}
		private String m_name;
	}
	public class ImportedClass_by_name_c implements ClassQueryInterface_c {
		public boolean evaluate(Object candidate) {
			ImportedClass_c selected = (ImportedClass_c) candidate;
			return (selected.Get_name().equals(m_name));
		}
		public ImportedClass_by_name_c(String name) {
			m_name = name;
		}
		private String m_name;
	}
	public Shape_c getModelIClassShape(String name) {
		CanvasTestUtils ctu = new CanvasTestUtils();
		ImportedClass_c ic = ImportedClass_c.ImportedClassInstance(modelRoot,
				new ImportedClass_by_name_c(name));
		GraphicalElement_c ge = GraphicalElement_c.GraphicalElementInstance(
				graphicsModelRoot,
				ctu.new findGraphicalElementByOOAID(ic.getIobj_id(), 23));
		return Shape_c.getOneGD_SHPOnR2(ge);
	}
	public void openTestSSDiagram(String title) {
		Subsystem_c uut = Subsystem_c.SubsystemInstance(modelRoot,
				new Subsystem_by_name_c(title));
		assertNotNull(uut);
		CanvasTestUtils.openCanvasEditor(uut);
	}
	private void verifyRefAttrDatatype(GraphicalElement_c ge2) {
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			Attribute_c[] attr_set = Attribute_c
					.getManyO_ATTRsOnR106(ReferentialAttribute_c.getManyO_RATTRsOnR108(AttributeReferenceInClass_c
							.getManyO_REFsOnR111(ReferringClassInAssoc_c
									.getManyR_RGOsOnR203(ClassInAssociation_c
											.getManyR_OIRsOnR201(assoc)))));
			UUID expectedId = getSameAsBaseAttributeUUID(assoc.getModelRoot());
			for (int i = 0; i < attr_set.length; ++i) {
				// 524296 is the old id for same_as<Base_Attribute>
				assertEquals(expectedId, attr_set[i].getDt_id());
			}
		} else if (ge2.getRepresents() instanceof ClassAsLink_c) {
			ClassAsLink_c cal = (ClassAsLink_c) ge2.getRepresents();
			Attribute_c[] attr_set = Attribute_c
					.getManyO_ATTRsOnR106(ReferentialAttribute_c.getManyO_RATTRsOnR108(AttributeReferenceInClass_c
							.getManyO_REFsOnR111(ReferringClassInAssoc_c
									.getOneR_RGOOnR205(cal))));
			UUID expectedId = getSameAsBaseAttributeUUID(cal.getModelRoot());
			for (int i = 0; i < attr_set.length; ++i) {
				// 524296 is the old id for same_as<Base_Attribute>
				assertEquals(expectedId, attr_set[i].getDt_id());
			}
		}
	}
	public void setGenerateResults() {
		try {
			generateResults = true;
			this.setUp();
			this.testFormalizeSUBSUPOBJ_OBJOBJ();
			this.testFormalizeSUBSUPOBJ_IOBJ_IOBJ();
			this.testFormalizeSUBSUPOBJ_IOBJOBJ();
			this.testFormalizeSUBSUPIOBJ_OBJOBJ();
			this.testFormalizeSUBSUPIOBJ_OBJIOBJ();
			this.testFormalizeSUBSUPIOBJ_IOBJIOBJ();
			this.testFormalizeSimpleAssocReflexiveOBJ();
			this.testFormalizeSimpleAssocOBJ_OBJ();
			this.testFormalizeSimpleAssocOBJ_IOBJ();
			this.testFormalizeSimpleAssocReflexiveIOBJ();
			this.testFormalizeSimpleAssocIOBJ_OBJ();
			this.testFormalizeSimpleAssocIOBJ_IOBJ();
			this.testFormalizeASSRReflexiveOBJ_OBJ();
			this.testFormalizeASSRReflexiveOBJ_IOBJ();
			this.testFormalizeASSROBJ_OBJOBJ();
			this.testFormalizeASSROBJ_IOBJOBJ();
			this.testFormalizeASSROBJ_IOBJIOBJ();
			this.testFormalizeASSRReflexiveIOBJ_OBJ();
			this.testFormalizeASSRReflexiveIOBJ_IOBJ();
			this.testFormalizeASSRIOBJ_OBJOBJ();
			this.testFormalizeASSRIOBJ_OBJIOBJ();
			this.testFormalizeASSRIOBJ_IOBJIOBJ();
			this.testUnFormalizeSUBSUPOBJ_OBJOBJ();
			this.testUnFormalizeSUBSUPOBJ_IOBJ_IOBJ();
			this.testUnFormalizeSUBSUPOBJ_IOBJOBJ();
			this.testUnFormalizeSUBSUPIOBJ_OBJOBJ();
			this.testUnFormalizeSUBSUPIOBJ_OBJIOBJ();
			this.testUnFormalizeSUBSUPIOBJ_IOBJIOBJ();
			this.testUnFormalizeSimpleAssocReflexiveOBJ();
			this.testUnFormalizeSimpleAssocOBJ_OBJ();
			this.testUnFormalizeSimpleAssocOBJ_IOBJ();
			this.testUnFormalizeSimpleAssocReflexiveIOBJ();
			this.testUnFormalizeSimpleAssocIOBJ_OBJ();
			this.testUnFormalizeSimpleAssocIOBJ_IOBJ();
			this.testUnFormalizeASSRReflexiveOBJ_OBJ();
			this.testUnFormalizeASSRReflexiveOBJ_IOBJ();
			this.testUnFormalizeASSROBJ_OBJOBJ();
			this.testUnFormalizeASSROBJ_IOBJOBJ();
			this.testUnFormalizeASSROBJ_IOBJIOBJ();
			this.testUnFormalizeASSRReflexiveIOBJ_OBJ();
			this.testUnFormalizeASSRReflexiveIOBJ_IOBJ();
			this.testUnFormalizeASSRIOBJ_OBJOBJ();
			this.testUnFormalizeASSRIOBJ_OBJIOBJ();
			this.testUnFormalizeASSRIOBJ_IOBJIOBJ();
			this.testFormalizeSUBSUPOBJ_OBJOBJSpecial();
			this.testFormalizeSUBSUPOBJ_IOBJ_IOBJSpecial();
			this.testFormalizeSUBSUPOBJ_IOBJOBJSpecial();
			this.testFormalizeSUBSUPIOBJ_OBJOBJSpecial();
			this.testFormalizeSUBSUPIOBJ_OBJIOBJSpecial();
			this.testFormalizeSUBSUPIOBJ_IOBJIOBJSpecial();
			this.testFormalizeASSRReflexiveOBJ_OBJSpecial();
			this.testFormalizeASSRReflexiveOBJ_IOBJSpecial();
			this.testFormalizeASSROBJ_OBJOBJSpecial();
			this.testFormalizeASSROBJ_IOBJOBJSpecial();
			this.testFormalizeASSROBJ_IOBJIOBJSpecial();
			this.testFormalizeASSRReflexiveIOBJ_OBJSpecial();
			this.testFormalizeASSRReflexiveIOBJ_IOBJSpecial();
			this.testFormalizeASSRIOBJ_OBJOBJSpecial();
			this.testFormalizeASSRIOBJ_OBJIOBJSpecial();
			this.testFormalizeASSRIOBJ_IOBJIOBJSpecial();
			this.testUnFormalizeSUBSUPOBJ_OBJOBJSpecial();
			this.testUnFormalizeSUBSUPOBJ_IOBJ_IOBJSpecial();
			this.testUnFormalizeSUBSUPOBJ_IOBJOBJSpecial();
			this.testUnFormalizeSUBSUPIOBJ_OBJOBJSpecial();
			this.testUnFormalizeSUBSUPIOBJ_OBJIOBJSpecial();
			this.testUnFormalizeSUBSUPIOBJ_IOBJIOBJSpecial();
			this.testUnFormalizeASSRReflexiveOBJ_OBJSpecial();
			this.testUnFormalizeASSRReflexiveOBJ_IOBJSpecial();
			this.testUnFormalizeASSROBJ_OBJOBJSpecial();
			this.testUnFormalizeASSROBJ_IOBJOBJSpecial();
			this.testUnFormalizeASSROBJ_IOBJIOBJSpecial();
			this.testUnFormalizeASSRReflexiveIOBJ_OBJSpecial();
			this.testUnFormalizeASSRReflexiveIOBJ_IOBJSpecial();
			this.testUnFormalizeASSRIOBJ_OBJOBJSpecial();
			this.testUnFormalizeASSRIOBJ_OBJIOBJSpecial();
			this.testUnFormalizeASSRIOBJ_IOBJIOBJSpecial();
			this.testUnformalizeSUBSUPUsedRefOBJ_OBJOBJ();
			this.testUnformalizeSUBSUPUsedRefOBJ_IOBJOBJ();
			this.testUnformalizeSUBSUPUsedRefOBJ_IOBJIOBJ();
			this.testUnformalizeSUBSUPUsedRefIOBJ_OBJOBJ();
			this.testUnformalizeSUBSUPUsedRefIOBJ_OBJIOBJ();
			this.testUnformalizeSUBSUPUsedRefIOBJ_IOBJIOBJ();
			this.testUnformalizeSimpleAssocUsedRefOBJ_OBJ();
			this.testUnformalizeSimpleAssocUsedRefOBJ_IOBJ();
			this.testUnformalizeSimpleAssocReflexiveUsedRefOBJ_OBJ();
			this.testUnformalizeSimpleAssocUsedRefIOBJ_OBJ();
			this.testUnformalizeSimpleAssocUsedRefIOBJ_IOBJ();
			this.testUnformalizeSimpleAssocReflexiveUsedRefIOBJ();
			this.testUnformalizeASSRReflexiveOBJ_OBJUsedRef();
			this.testUnformalizeASSRReflexiveOBJ_IOBJUsedRef();
			this.testUnformalizeASSROBJ_OBJOBJUsedRef();
			this.testUnformalizeASSROBJ_OBJIOBJUsedRef();
			this.testUnformalizeASSROBJ_IOBJIOBJUsedRef();
			this.testUnformalizeASSRReflexiveIOBJ_OBJUsedRef();
			this.testUnformalizeASSRReflexiveIOBJ_IOBJUsedRef();
			this.testUnformalizeASSRIOBJ_OBJOBJUsedRef();
			this.testUnformalizeASSRIOBJ_IOBJOBJUsedRef();
			this.testUnformalizeASSRIOBJ_IOBJIOBJUsedRef();
		} catch (Exception e) {
			System.out.println("Exception encountered by test result creator: "
					+ e);
		}

	}
	public void testFormalizeSUBSUPOBJ_OBJOBJ() {
		test_id = "test_1";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(2, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPOBJ_IOBJ_IOBJ() {
		test_id = "test_2";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_IOBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPOBJ_IOBJOBJ() {
		test_id = "test_3";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_IOBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_OBJOBJ() {
		test_id = "test_4";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_OBJIOBJ() {
		test_id = "test_5";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_OBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_IOBJIOBJ() {
		test_id = "test_6";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		InheritanceFormalizeOnR_RELAction fa = (InheritanceFormalizeOnR_RELAction) new InheritanceFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_RELWizardPage1 page1 = (InheritanceFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocReflexiveOBJ() {
		test_id = "test_7";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSimpleAssocReflexive OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssocReflexive OBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocOBJ_OBJ() {
		test_id = "test_8";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSimpleAssoc OBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssoc OBJ_OBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocOBJ_IOBJ() {
		test_id = "test_9";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSimpleAssoc OBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssoc OBJ_IOBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocReflexiveIOBJ() {
		test_id = "test_10";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = getModelIClassShape("FormalizeSimpleAssocReflexive IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssocReflexive IOBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocIOBJ_OBJ() {
		test_id = "test_11";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = getModelIClassShape("FormalizeSimpleAssoc IOBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssoc IOBJ_OBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSimpleAssocIOBJ_IOBJ() {
		test_id = "test_12";
		openTestSSDiagram("FSA Tests");
		Shape_c shp = getModelIClassShape("FormalizeSimpleAssoc IOBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		BinaryFormalizeOnR_RELAction fa = (BinaryFormalizeOnR_RELAction) new BinaryFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_BinaryFormalize(structuredSelection);
		BinaryFormalizeOnR_RELWizardPage1 page1 = (BinaryFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("Class", page1.Non_formalizerLabel.getText());
		BinaryFormalizeOnR_RELWizardPage2 page2 = (BinaryFormalizeOnR_RELWizardPage2) page1
				.getNextPage();
		String strings[] = page1.Non_formalizerCombo.getItems();
		for (int i = 0; i < strings.length; ++i) {
			if (strings[i].equals("FormalizeSimpleAssoc IOBJ_IOBJ")) {
				page1.Non_formalizerCombo.select(i);
			}
		}
		page1.updateSelectedNon_formalizer();
		page2.onPageEntry();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveOBJ_OBJ() {
		test_id = "test_13";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSRReflexive OBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive OBJ_OBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive OBJ_OBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveOBJ_IOBJ() {
		test_id = "test_14";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSRReflexive OBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive OBJ_IOBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive OBJ_IOBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_OBJOBJ() {
		test_id = "test_15";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 1", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 2", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_IOBJOBJ() {
		test_id = "test_16";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_IOBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 5", page1.One_idLabel.getText());
		assertEquals("TestClassImp 1", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_IOBJIOBJ() {
		test_id = "test_17";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 2", page1.One_idLabel.getText());
		assertEquals("TestClassImp 3", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveIOBJ_OBJ() {
		test_id = "test_18";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSRReflexive IOBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive IOBJ_OBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive IOBJ_OBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveIOBJ_IOBJ() {
		test_id = "test_19";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSRReflexive IOBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive IOBJ_IOBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive IOBJ_IOBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_OBJOBJ() {
		test_id = "test_20";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 3", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 4", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_OBJIOBJ() {
		test_id = "test_21";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_OBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 4", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 8", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_IOBJIOBJ() {
		test_id = "test_22";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof ClassAsLink_c) {
			Cl_c.Clearselection();
			GraphicalElement_c elem = GraphicalElement_c
					.getOneGD_GEOnR23(Graphelement_c
							.getOneDIM_GEOnR311(Graphconnector_c
									.getOneDIM_CONOnR321(Graphedge_c
											.getOneDIM_EDOnR20(con))));
			selection.addToSelection(elem.getRepresents());
		}
		LinkedFormalizeOnR_RELAction fa = (LinkedFormalizeOnR_RELAction) new LinkedFormalizeOnR_RELAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_REL_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_RELWizardPage1 page1 = (LinkedFormalizeOnR_RELWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 5", page1.One_idLabel.getText());
		assertEquals("TestClassImp 6", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_OBJOBJ() {
		test_id = "test_23";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_IOBJ_IOBJ() {
		test_id = "test_24";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_IOBJOBJ() {
		test_id = "test_25";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_IOBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_OBJOBJ() {
		test_id = "test_26";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_OBJIOBJ() {
		test_id = "test_27";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_OBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_IOBJIOBJ() {
		test_id = "test_28";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocReflexiveOBJ() {
		test_id = "test_29";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssocReflexive OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocOBJ_OBJ() {
		test_id = "test_30";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssoc OBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocOBJ_IOBJ() {
		test_id = "test_31";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssoc OBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocReflexiveIOBJ() {
		test_id = "test_32";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssocReflexive IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocIOBJ_OBJ() {
		test_id = "test_33";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssoc IOBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSimpleAssocIOBJ_IOBJ() {
		test_id = "test_34";
		openTestSSDiagram("FSA Tests");
		ModelClass_c mc = getModelClass("FormalizeSimpleAssoc IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveOBJ_OBJ() {
		test_id = "test_35";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive OBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveOBJ_IOBJ() {
		test_id = "test_36";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive OBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_OBJOBJ() {
		test_id = "test_37";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_IOBJOBJ() {
		test_id = "test_38";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_IOBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_IOBJIOBJ() {
		test_id = "test_39";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveIOBJ_OBJ() {
		test_id = "test_40";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive IOBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveIOBJ_IOBJ() {
		test_id = "test_41";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_OBJOBJ() {
		test_id = "test_42";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_OBJIOBJ() {
		test_id = "test_43";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_OBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_IOBJIOBJ() {
		test_id = "test_44";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPOBJ_OBJOBJSpecial() {
		test_id = "test_Special_1";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(2, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPOBJ_IOBJ_IOBJSpecial() {
		test_id = "test_Special_2";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_IOBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPOBJ_IOBJOBJSpecial() {
		test_id = "test_Special_3";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeSUBSUP OBJ_IOBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_OBJOBJSpecial() {
		test_id = "test_Special_4";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_OBJIOBJSpecial() {
		test_id = "test_Special_5";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_OBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeSUBSUPIOBJ_IOBJIOBJSpecial() {
		test_id = "test_Special_6";
		openTestSSDiagram("FSS Tests");
		Shape_c shp = getModelIClassShape("FormalizeSUBSUP IOBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSubtype_c sub = ClassAsSubtype_c
					.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(sub);
		}
		InheritanceFormalizeOnR_SUBAction fa = (InheritanceFormalizeOnR_SUBAction) new InheritanceFormalizeOnR_SUBAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_SUB_InheritanceFormalize(structuredSelection);
		InheritanceFormalizeOnR_SUBWizardPage1 page1 = (InheritanceFormalizeOnR_SUBWizardPage1) wd
				.getCurrentPage();
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsSupertype_c sup = ClassAsSupertype_c
					.getOneR_SUPEROnR212(SubtypeSupertypeAssociation_c
							.getOneR_SUBSUPOnR206(assoc));
			ModelClass_c mc = ModelClass_c
					.getOneO_OBJOnR201(ClassInAssociation_c
							.getOneR_OIROnR203(ReferredToClassInAssoc_c
									.getOneR_RTOOnR204(sup)));
			ReferredToIdentifierAttribute_c[] rtida_set = ReferredToIdentifierAttribute_c
					.getManyO_RTIDAsOnR110(ClassIdentifierAttribute_c
							.getManyO_OIDAsOnR105(Attribute_c
									.getManyO_ATTRsOnR102(mc)));
			assertEquals(1, rtida_set.length);
		}
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveOBJ_OBJSpecial() {
		test_id = "test_Special_13";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSRReflexive OBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive OBJ_OBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive OBJ_OBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveOBJ_IOBJSpecial() {
		test_id = "test_Special_14";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSRReflexive OBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive OBJ_IOBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive OBJ_IOBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_OBJOBJSpecial() {
		test_id = "test_Special_15";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 1", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 2", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_IOBJOBJSpecial() {
		test_id = "test_Special_16";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_IOBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 5", page1.One_idLabel.getText());
		assertEquals("TestClassImp 1", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSROBJ_IOBJIOBJSpecial() {
		test_id = "test_Special_17";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = CanvasTestUtils.getModelClassShape(modelRoot,
				"FormalizeASSR OBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 2", page1.One_idLabel.getText());
		assertEquals("TestClassImp 3", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveIOBJ_OBJSpecial() {
		test_id = "test_Special_18";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSRReflexive IOBJ_OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive IOBJ_OBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive IOBJ_OBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRReflexiveIOBJ_IOBJSpecial() {
		test_id = "test_Special_19";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSRReflexive IOBJ_IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("FormalizeASSRReflexive IOBJ_IOBJ",
				page1.One_idLabel.getText());
		assertEquals("FormalizeASSRReflexive IOBJ_IOBJ",
				page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_OBJOBJSpecial() {
		test_id = "test_Special_20";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_OBJ OBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassOtherSide 3", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 4", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_OBJIOBJSpecial() {
		test_id = "test_Special_21";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_OBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 4", page1.One_idLabel.getText());
		assertEquals("TestClassOtherSide 8", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testFormalizeASSRIOBJ_IOBJIOBJSpecial() {
		test_id = "test_Special_22";
		openTestSSDiagram("FAL Tests");
		Shape_c shp = getModelIClassShape("FormalizeASSR IOBJ_IOBJ IOBJ");
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		GraphicalElement_c ge = GraphicalElement_c.getOneGD_GEOnR2(shp);
		Connector_c con = Connector_c.getOneGD_CONOnR20(Graphedge_c
				.getOneDIM_EDOnR320(Graphconnector_c
						.getManyDIM_CONsOnR311(Graphelement_c
								.getOneDIM_GEOnR23(ge))));
		GraphicalElement_c ge2 = GraphicalElement_c.getOneGD_GEOnR2(con);
		Cl_c.Clearselection();
		selection.addToSelection(ge2.getRepresents());
		if (ge2.getRepresents() instanceof Association_c) {
			Association_c assoc = (Association_c) ge2.getRepresents();
			ClassAsLink_c link = ClassAsLink_c
					.getOneR_ASSROnR211(LinkedAssociation_c
							.getOneR_ASSOCOnR206(assoc));
			Cl_c.Clearselection();
			selection.addToSelection(link);
		}
		LinkedFormalizeOnR_ASSRAction fa = (LinkedFormalizeOnR_ASSRAction) new LinkedFormalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		fa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		IStructuredSelection structuredSelection = Selection.getInstance()
				.getStructuredSelection();
		WizardDialog wd = fa.R_ASSR_LinkedFormalize(structuredSelection);
		LinkedFormalizeOnR_ASSRWizardPage1 page1 = (LinkedFormalizeOnR_ASSRWizardPage1) wd
				.getCurrentPage();
		assertEquals("TestClassImp 5", page1.One_idLabel.getText());
		assertEquals("TestClassImp 6", page1.Oth_idLabel.getText());
		page1.onPageEntry();
		IWizard w = page1.getWizard();
		w.performFinish();
		wd.close();
		verifyRefAttrDatatype(ge2);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_OBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_23";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_IOBJ_IOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_24";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPOBJ_IOBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_25";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP OBJ_IOBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_OBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_26";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_OBJIOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_27";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_OBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeSUBSUPIOBJ_IOBJIOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_28";
		openTestSSDiagram("FSS Tests");
		ModelClass_c mc = getModelClass("FormalizeSUBSUP IOBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsSubtype_c sub = ClassAsSubtype_c
				.getOneR_SUBOnR213(SubtypeSupertypeAssociation_c
						.getOneR_SUBSUPOnR206(assoc));
		selection.addToSelection(sub);
		UnformalizeOnR_SUBAction ufa = new UnformalizeOnR_SUBAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveOBJ_OBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_35";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive OBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveOBJ_IOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_36";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive OBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_OBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_37";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_IOBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_38";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_IOBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSROBJ_IOBJIOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_39";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR OBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveIOBJ_OBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_40";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive IOBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRReflexiveIOBJ_IOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_41";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSRReflexive IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_OBJOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_42";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_OBJIOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_43";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_OBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnFormalizeASSRIOBJ_IOBJIOBJSpecial() {
		// for special tests do not reuse the
		// existing result
		test_id = "test_Special_44";
		openTestSSDiagram("FAL Tests");
		ModelClass_c mc = getModelClass("FormalizeASSR IOBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		ClassAsLink_c link = ClassAsLink_c
				.getOneR_ASSROnR211(LinkedAssociation_c
						.getOneR_ASSOCOnR206(assoc));
		selection.addToSelection(link);
		UnformalizeOnR_ASSRAction ufa = new UnformalizeOnR_ASSRAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefOBJ_OBJOBJ() {
		test_id = "test_45";
		openTestSSDiagram("USS Tests");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef OBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefOBJ_IOBJOBJ() {
		test_id = "test_46";
		openTestSSDiagram("USS Tests");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef OBJ_IOBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefOBJ_IOBJIOBJ() {
		test_id = "test_47";
		openTestSSDiagram("USS Tests");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef OBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefIOBJ_OBJOBJ() {
		test_id = "test_48";
		openTestSSDiagram("USS Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSUBSUPUsedRef IOBJ_OBJ OBJ");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef IOBJ_OBJ OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefIOBJ_OBJIOBJ() {
		test_id = "test_49";
		openTestSSDiagram("USS Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSUBSUPUsedRef IOBJ_OBJ IOBJ");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef IOBJ_OBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSUBSUPUsedRefIOBJ_IOBJIOBJ() {
		test_id = "test_50";
		openTestSSDiagram("USS Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSUBSUPUsedRef IOBJ_IOBJ IOBJ");
		ModelClass_c mc = getModelClass("UnformalizeSUBSUPUsedRef IOBJ_IOBJ IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocUsedRefOBJ_OBJ() {
		test_id = "test_51";
		openTestSSDiagram("USA Tests");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocUsedRef OBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocUsedRefOBJ_IOBJ() {
		test_id = "test_52";
		openTestSSDiagram("USA Tests");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocUsedRef OBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocReflexiveUsedRefOBJ_OBJ() {
		test_id = "test_53";
		openTestSSDiagram("USA Tests");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocReflexiveUsedRef OBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocUsedRefIOBJ_OBJ() {
		test_id = "test_54";
		openTestSSDiagram("USA Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSimpleAssocUsedRef IOBJ_OBJ");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocUsedRef IOBJ_OBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocUsedRefIOBJ_IOBJ() {
		test_id = "test_55";
		openTestSSDiagram("USA Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSimpleAssocUsedRef IOBJ_IOBJ");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocUsedRef IOBJ_IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeSimpleAssocReflexiveUsedRefIOBJ() {
		test_id = "test_56";
		openTestSSDiagram("USA Tests");
		Shape_c shp = getModelIClassShape("UnformalizeSimpleAssocReflexiveUsedRef IOBJ");
		ModelClass_c mc = getModelClass("UnformalizeSimpleAssocReflexiveUsedRef IOBJ");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRReflexiveOBJ_OBJUsedRef() {
		test_id = "test_57";
		openTestSSDiagram("UAL Tests");
		ModelClass_c mc = getModelClass("UnformalizeASSRReflexive OBJ_OBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRReflexiveOBJ_IOBJUsedRef() {
		test_id = "test_58";
		openTestSSDiagram("UAL Tests");
		ModelClass_c mc = getModelClass("UnformalizeASSRReflexive OBJ_IOBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSROBJ_OBJOBJUsedRef() {
		test_id = "test_59";
		openTestSSDiagram("UAL Tests");
		ModelClass_c mc = getModelClass("UnformalizeASSR OBJ_OBJ OBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSROBJ_OBJIOBJUsedRef() {
		test_id = "test_60";
		openTestSSDiagram("UAL Tests");
		ModelClass_c mc = getModelClass("UnformalizeASSR OBJ_OBJ IOBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSROBJ_IOBJIOBJUsedRef() {
		test_id = "test_61";
		openTestSSDiagram("UAL Tests");
		ModelClass_c mc = getModelClass("UnformalizeASSR OBJ_IOBJ IOBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRReflexiveIOBJ_OBJUsedRef() {
		test_id = "test_62";
		openTestSSDiagram("UAL Tests");
		Shape_c shp = getModelIClassShape("UnformalizeASSRReflexive IOBJ_OBJ UsedRef");
		ModelClass_c mc = getModelClass("UnformalizeASSRReflexive IOBJ_OBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRReflexiveIOBJ_IOBJUsedRef() {
		test_id = "test_63";
		openTestSSDiagram("UAL Tests");
		Shape_c shp = getModelIClassShape("UnformalizeASSRReflexive IOBJ_IOBJ UsedRef");
		ModelClass_c mc = getModelClass("UnformalizeASSRReflexive IOBJ_IOBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRIOBJ_OBJOBJUsedRef() {
		test_id = "test_64";
		openTestSSDiagram("UAL Tests");
		Shape_c shp = getModelIClassShape("UnformalizeASSR IOBJ_OBJ OBJ UsedRef");
		ModelClass_c mc = getModelClass("UnformalizeASSR IOBJ_OBJ OBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRIOBJ_IOBJOBJUsedRef() {
		test_id = "test_65";
		openTestSSDiagram("UAL Tests");
		Shape_c shp = getModelIClassShape("UnformalizeASSR IOBJ_IOBJ OBJ UsedRef");
		ModelClass_c mc = getModelClass("UnformalizeASSR IOBJ_IOBJ OBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}
	public void testUnformalizeASSRIOBJ_IOBJIOBJUsedRef() {
		test_id = "test_66";
		openTestSSDiagram("UAL Tests");
		Shape_c shp = getModelIClassShape("UnformalizeASSR IOBJ_IOBJ IOBJ UsedRef");
		ModelClass_c mc = getModelClass("UnformalizeASSR IOBJ_IOBJ IOBJ UsedRef");
		Association_c assoc = Association_c.getOneR_RELOnR201(mc,
				new getAssocByDescrip(""));
		GraphicalEditor ce = ((ModelEditor) PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActiveEditor())
				.getGraphicalEditor();
		Cl_c.Clearselection();
		selection.addToSelection(assoc);
		UnformalizeOnR_RELAction ufa = new UnformalizeOnR_RELAction();
		Action a = new Action() {
		};
		ufa.setActivePart(a, PlatformUI.getWorkbench()
				.getActiveWorkbenchWindow().getActivePage().getActivePart());
		ufa.run(a);
		validateOrGenerateResults(ce, generateResults);
	}

	boolean simp_results[] = {false, false, false, true, false, true, false,
			true, true, false, false, false, false, false, false};

	boolean assoc_results[] = {false, false, false, false, false, false, false,
			false, false, false, false, false, true, false, false};

	boolean subsup_results[] = {false, false, false, false, false, false,
			false, false, false, false, false, false, false, false, true};

	public void testFormalizeActionFilter() {
		Subsystem_c uut = Subsystem_c.SubsystemInstance(modelRoot,
				new Subsystem_by_name_c("actionFilter Tests"));
		Association_c[] assoc_set = Association_c.getManyR_RELsOnR4(uut);
		for (int i = 0; i < assoc_set.length; ++i) {
			String status = "Association R" + assoc_set[i].getNumb();
			assertEquals(status, simp_results[i],
					assoc_set[i].Actionfilter("type", "unform simp"));
			assertEquals(status, assoc_results[i],
					assoc_set[i].Actionfilter("type", "unform assoc"));
			assertEquals(status, subsup_results[i],
					assoc_set[i].Actionfilter("type", "unform subsup"));
		}
	}

}
