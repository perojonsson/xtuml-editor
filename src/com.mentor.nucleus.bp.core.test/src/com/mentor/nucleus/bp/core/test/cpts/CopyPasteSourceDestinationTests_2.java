//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrix.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_2 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_2(String arg0) {
        super("CopyPasteSourceDestinationTests_2", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B18).
     * 
     */
    public void testA103_B18() {
        test_id = getTestId("A103", "B18", "1");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B29).
     * 
     */
    public void testA103_B29() {
        test_id = getTestId("A103", "B29", "2");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B38).
     * 
     */
    public void testA103_B38() {
        test_id = getTestId("A103", "B38", "3");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B39).
     * 
     */
    public void testA103_B39() {
        test_id = getTestId("A103", "B39", "4");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B40).
     * 
     */
    public void testA103_B40() {
        test_id = getTestId("A103", "B40", "5");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A103) and row (B41).
     * 
     */
    public void testA103_B41() {
        test_id = getTestId("A103", "B41", "6");

        NonRootModelElement src = selectA("A103");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B15).
     * 
     */
    public void testA104_B15() {
        test_id = getTestId("A104", "B15", "7");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B16).
     * 
     */
    public void testA104_B16() {
        test_id = getTestId("A104", "B16", "8");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B17).
     * 
     */
    public void testA104_B17() {
        test_id = getTestId("A104", "B17", "9");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B18).
     * 
     */
    public void testA104_B18() {
        test_id = getTestId("A104", "B18", "10");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B29).
     * 
     */
    public void testA104_B29() {
        test_id = getTestId("A104", "B29", "11");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B38).
     * 
     */
    public void testA104_B38() {
        test_id = getTestId("A104", "B38", "12");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B39).
     * 
     */
    public void testA104_B39() {
        test_id = getTestId("A104", "B39", "13");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B40).
     * 
     */
    public void testA104_B40() {
        test_id = getTestId("A104", "B40", "14");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A104) and row (B41).
     * 
     */
    public void testA104_B41() {
        test_id = getTestId("A104", "B41", "15");

        NonRootModelElement src = selectA("A104");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B15).
     * 
     */
    public void testA105_B15() {
        test_id = getTestId("A105", "B15", "16");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B16).
     * 
     */
    public void testA105_B16() {
        test_id = getTestId("A105", "B16", "17");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B17).
     * 
     */
    public void testA105_B17() {
        test_id = getTestId("A105", "B17", "18");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B18).
     * 
     */
    public void testA105_B18() {
        test_id = getTestId("A105", "B18", "19");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B29).
     * 
     */
    public void testA105_B29() {
        test_id = getTestId("A105", "B29", "20");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B38).
     * 
     */
    public void testA105_B38() {
        test_id = getTestId("A105", "B38", "21");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B39).
     * 
     */
    public void testA105_B39() {
        test_id = getTestId("A105", "B39", "22");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B40).
     * 
     */
    public void testA105_B40() {
        test_id = getTestId("A105", "B40", "23");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A105) and row (B41).
     * 
     */
    public void testA105_B41() {
        test_id = getTestId("A105", "B41", "24");

        NonRootModelElement src = selectA("A105");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A106) and row (B15).
     * 
     */
    public void testA106_B15() {
        test_id = getTestId("A106", "B15", "25");

        NonRootModelElement src = selectA("A106");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A106) and row (B16).
     * 
     */
    public void testA106_B16() {
        test_id = getTestId("A106", "B16", "26");

        NonRootModelElement src = selectA("A106");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A106) and row (B42).
     * 
     */
    public void testA106_B42() {
        test_id = getTestId("A106", "B42", "27");

        NonRootModelElement src = selectA("A106");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A107) and row (B15).
     * 
     */
    public void testA107_B15() {
        test_id = getTestId("A107", "B15", "28");

        NonRootModelElement src = selectA("A107");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A107) and row (B16).
     * 
     */
    public void testA107_B16() {
        test_id = getTestId("A107", "B16", "29");

        NonRootModelElement src = selectA("A107");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A107) and row (B42).
     * 
     */
    public void testA107_B42() {
        test_id = getTestId("A107", "B42", "30");

        NonRootModelElement src = selectA("A107");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A108) and row (B15).
     * 
     */
    public void testA108_B15() {
        test_id = getTestId("A108", "B15", "31");

        NonRootModelElement src = selectA("A108");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A108) and row (B16).
     * 
     */
    public void testA108_B16() {
        test_id = getTestId("A108", "B16", "32");

        NonRootModelElement src = selectA("A108");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A108) and row (B42).
     * 
     */
    public void testA108_B42() {
        test_id = getTestId("A108", "B42", "33");

        NonRootModelElement src = selectA("A108");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A109) and row (B15).
     * 
     */
    public void testA109_B15() {
        test_id = getTestId("A109", "B15", "34");

        NonRootModelElement src = selectA("A109");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A109) and row (B16).
     * 
     */
    public void testA109_B16() {
        test_id = getTestId("A109", "B16", "35");

        NonRootModelElement src = selectA("A109");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A109) and row (B42).
     * 
     */
    public void testA109_B42() {
        test_id = getTestId("A109", "B42", "36");

        NonRootModelElement src = selectA("A109");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A110) and row (B15).
     * 
     */
    public void testA110_B15() {
        test_id = getTestId("A110", "B15", "37");

        NonRootModelElement src = selectA("A110");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A110) and row (B16).
     * 
     */
    public void testA110_B16() {
        test_id = getTestId("A110", "B16", "38");

        NonRootModelElement src = selectA("A110");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A110) and row (B42).
     * 
     */
    public void testA110_B42() {
        test_id = getTestId("A110", "B42", "39");

        NonRootModelElement src = selectA("A110");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A111) and row (B15).
     * 
     */
    public void testA111_B15() {
        test_id = getTestId("A111", "B15", "40");

        NonRootModelElement src = selectA("A111");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A111) and row (B16).
     * 
     */
    public void testA111_B16() {
        test_id = getTestId("A111", "B16", "41");

        NonRootModelElement src = selectA("A111");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A111) and row (B42).
     * 
     */
    public void testA111_B42() {
        test_id = getTestId("A111", "B42", "42");

        NonRootModelElement src = selectA("A111");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B15).
     * 
     */
    public void testA112_B15() {
        test_id = getTestId("A112", "B15", "43");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B16).
     * 
     */
    public void testA112_B16() {
        test_id = getTestId("A112", "B16", "44");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B17).
     * 
     */
    public void testA112_B17() {
        test_id = getTestId("A112", "B17", "45");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B18).
     * 
     */
    public void testA112_B18() {
        test_id = getTestId("A112", "B18", "46");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B29).
     * 
     */
    public void testA112_B29() {
        test_id = getTestId("A112", "B29", "47");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B38).
     * 
     */
    public void testA112_B38() {
        test_id = getTestId("A112", "B38", "48");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B39).
     * 
     */
    public void testA112_B39() {
        test_id = getTestId("A112", "B39", "49");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B40).
     * 
     */
    public void testA112_B40() {
        test_id = getTestId("A112", "B40", "50");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A112) and row (B42).
     * 
     */
    public void testA112_B42() {
        test_id = getTestId("A112", "B42", "51");

        NonRootModelElement src = selectA("A112");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B15).
     * 
     */
    public void testA113_B15() {
        test_id = getTestId("A113", "B15", "52");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B16).
     * 
     */
    public void testA113_B16() {
        test_id = getTestId("A113", "B16", "53");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B17).
     * 
     */
    public void testA113_B17() {
        test_id = getTestId("A113", "B17", "54");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B18).
     * 
     */
    public void testA113_B18() {
        test_id = getTestId("A113", "B18", "55");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B29).
     * 
     */
    public void testA113_B29() {
        test_id = getTestId("A113", "B29", "56");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B38).
     * 
     */
    public void testA113_B38() {
        test_id = getTestId("A113", "B38", "57");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B39).
     * 
     */
    public void testA113_B39() {
        test_id = getTestId("A113", "B39", "58");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B40).
     * 
     */
    public void testA113_B40() {
        test_id = getTestId("A113", "B40", "59");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A113) and row (B42).
     * 
     */
    public void testA113_B42() {
        test_id = getTestId("A113", "B42", "60");

        NonRootModelElement src = selectA("A113");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B15).
     * 
     */
    public void testA114_B15() {
        test_id = getTestId("A114", "B15", "61");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B16).
     * 
     */
    public void testA114_B16() {
        test_id = getTestId("A114", "B16", "62");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B17).
     * 
     */
    public void testA114_B17() {
        test_id = getTestId("A114", "B17", "63");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B18).
     * 
     */
    public void testA114_B18() {
        test_id = getTestId("A114", "B18", "64");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B29).
     * 
     */
    public void testA114_B29() {
        test_id = getTestId("A114", "B29", "65");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B38).
     * 
     */
    public void testA114_B38() {
        test_id = getTestId("A114", "B38", "66");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B39).
     * 
     */
    public void testA114_B39() {
        test_id = getTestId("A114", "B39", "67");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B40).
     * 
     */
    public void testA114_B40() {
        test_id = getTestId("A114", "B40", "68");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A114) and row (B42).
     * 
     */
    public void testA114_B42() {
        test_id = getTestId("A114", "B42", "69");

        NonRootModelElement src = selectA("A114");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B15).
     * 
     */
    public void testA115_B15() {
        test_id = getTestId("A115", "B15", "70");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B16).
     * 
     */
    public void testA115_B16() {
        test_id = getTestId("A115", "B16", "71");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B17).
     * 
     */
    public void testA115_B17() {
        test_id = getTestId("A115", "B17", "72");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B18).
     * 
     */
    public void testA115_B18() {
        test_id = getTestId("A115", "B18", "73");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B29).
     * 
     */
    public void testA115_B29() {
        test_id = getTestId("A115", "B29", "74");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B38).
     * 
     */
    public void testA115_B38() {
        test_id = getTestId("A115", "B38", "75");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B39).
     * 
     */
    public void testA115_B39() {
        test_id = getTestId("A115", "B39", "76");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B40).
     * 
     */
    public void testA115_B40() {
        test_id = getTestId("A115", "B40", "77");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A115) and row (B42).
     * 
     */
    public void testA115_B42() {
        test_id = getTestId("A115", "B42", "78");

        NonRootModelElement src = selectA("A115");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B15).
     * 
     */
    public void testA116_B15() {
        test_id = getTestId("A116", "B15", "79");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B16).
     * 
     */
    public void testA116_B16() {
        test_id = getTestId("A116", "B16", "80");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B17).
     * 
     */
    public void testA116_B17() {
        test_id = getTestId("A116", "B17", "81");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B18).
     * 
     */
    public void testA116_B18() {
        test_id = getTestId("A116", "B18", "82");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B29).
     * 
     */
    public void testA116_B29() {
        test_id = getTestId("A116", "B29", "83");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B38).
     * 
     */
    public void testA116_B38() {
        test_id = getTestId("A116", "B38", "84");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B39).
     * 
     */
    public void testA116_B39() {
        test_id = getTestId("A116", "B39", "85");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B40).
     * 
     */
    public void testA116_B40() {
        test_id = getTestId("A116", "B40", "86");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A116) and row (B42).
     * 
     */
    public void testA116_B42() {
        test_id = getTestId("A116", "B42", "87");

        NonRootModelElement src = selectA("A116");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B15).
     * 
     */
    public void testA117_B15() {
        test_id = getTestId("A117", "B15", "88");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B16).
     * 
     */
    public void testA117_B16() {
        test_id = getTestId("A117", "B16", "89");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B17).
     * 
     */
    public void testA117_B17() {
        test_id = getTestId("A117", "B17", "90");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B18).
     * 
     */
    public void testA117_B18() {
        test_id = getTestId("A117", "B18", "91");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B29).
     * 
     */
    public void testA117_B29() {
        test_id = getTestId("A117", "B29", "92");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B38).
     * 
     */
    public void testA117_B38() {
        test_id = getTestId("A117", "B38", "93");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B39).
     * 
     */
    public void testA117_B39() {
        test_id = getTestId("A117", "B39", "94");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B40).
     * 
     */
    public void testA117_B40() {
        test_id = getTestId("A117", "B40", "95");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A117) and row (B42).
     * 
     */
    public void testA117_B42() {
        test_id = getTestId("A117", "B42", "96");

        NonRootModelElement src = selectA("A117");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A118) and row (B15).
     * 
     */
    public void testA118_B15() {
        test_id = getTestId("A118", "B15", "97");

        NonRootModelElement src = selectA("A118");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A118) and row (B16).
     * 
     */
    public void testA118_B16() {
        test_id = getTestId("A118", "B16", "98");

        NonRootModelElement src = selectA("A118");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A118) and row (B42).
     * 
     */
    public void testA118_B42() {
        test_id = getTestId("A118", "B42", "99");

        NonRootModelElement src = selectA("A118");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A119) and row (B15).
     * 
     */
    public void testA119_B15() {
        test_id = getTestId("A119", "B15", "100");

        NonRootModelElement src = selectA("A119");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A119) and row (B16).
     * 
     */
    public void testA119_B16() {
        test_id = getTestId("A119", "B16", "101");

        NonRootModelElement src = selectA("A119");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A119) and row (B42).
     * 
     */
    public void testA119_B42() {
        test_id = getTestId("A119", "B42", "102");

        NonRootModelElement src = selectA("A119");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A120) and row (B15).
     * 
     */
    public void testA120_B15() {
        test_id = getTestId("A120", "B15", "103");

        NonRootModelElement src = selectA("A120");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A120) and row (B16).
     * 
     */
    public void testA120_B16() {
        test_id = getTestId("A120", "B16", "104");

        NonRootModelElement src = selectA("A120");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A120) and row (B42).
     * 
     */
    public void testA120_B42() {
        test_id = getTestId("A120", "B42", "105");

        NonRootModelElement src = selectA("A120");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A121) and row (B15).
     * 
     */
    public void testA121_B15() {
        test_id = getTestId("A121", "B15", "106");

        NonRootModelElement src = selectA("A121");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A121) and row (B16).
     * 
     */
    public void testA121_B16() {
        test_id = getTestId("A121", "B16", "107");

        NonRootModelElement src = selectA("A121");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A121) and row (B42).
     * 
     */
    public void testA121_B42() {
        test_id = getTestId("A121", "B42", "108");

        NonRootModelElement src = selectA("A121");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
