//=====================================================================
//
//File:      $RCSfile: UnitTestGenerator.pl,v $
//Version:   $Revision: 1.14 $
//Modified:  $Date: 2013/01/10 23:21:36 $
//
// WARNING:      Do not edit this generated file
// Generated by: UnitTestGenerator.pl
// Version:      1.14
// Matrix:       CopyPasteSourceDestinationTestMatrixFull.txt
//
//(c) Copyright 2007-2014 by Mentor Graphics Corp. All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================

package com.mentor.nucleus.bp.core.test.cpts_full;

import org.eclipse.ui.IEditorPart;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.NonRootModelElement;
import com.mentor.nucleus.bp.test.common.*;
import com.mentor.nucleus.bp.ui.canvas.*;
import com.mentor.nucleus.bp.ui.graphics.editor.*;
import com.mentor.nucleus.bp.ui.canvas.test.*;

public class CopyPasteSourceDestinationTests_2 extends CopyPasteSourceDestinationTests {

    protected String getResultName() {
        return super.getResultName();
    }

    public CopyPasteSourceDestinationTests_2(String arg0) {
        super("CopyPasteSourceDestinationTests_2", arg0);
    }

    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B36).
     * 
     */
    public void testA6_B36() {
        test_id = getTestId("A6", "B36", "1");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B37).
     * 
     */
    public void testA6_B37() {
        test_id = getTestId("A6", "B37", "2");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B38).
     * 
     */
    public void testA6_B38() {
        test_id = getTestId("A6", "B38", "3");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B39).
     * 
     */
    public void testA6_B39() {
        test_id = getTestId("A6", "B39", "4");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B40).
     * 
     */
    public void testA6_B40() {
        test_id = getTestId("A6", "B40", "5");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B41).
     * 
     */
    public void testA6_B41() {
        test_id = getTestId("A6", "B41", "6");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B42).
     * 
     */
    public void testA6_B42() {
        test_id = getTestId("A6", "B42", "7");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B43).
     * 
     */
    public void testA6_B43() {
        test_id = getTestId("A6", "B43", "8");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B44).
     * 
     */
    public void testA6_B44() {
        test_id = getTestId("A6", "B44", "9");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B45).
     * 
     */
    public void testA6_B45() {
        test_id = getTestId("A6", "B45", "10");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B46).
     * 
     */
    public void testA6_B46() {
        test_id = getTestId("A6", "B46", "11");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B47).
     * 
     */
    public void testA6_B47() {
        test_id = getTestId("A6", "B47", "12");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B48).
     * 
     */
    public void testA6_B48() {
        test_id = getTestId("A6", "B48", "13");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B49).
     * 
     */
    public void testA6_B49() {
        test_id = getTestId("A6", "B49", "14");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B50).
     * 
     */
    public void testA6_B50() {
        test_id = getTestId("A6", "B50", "15");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B51).
     * 
     */
    public void testA6_B51() {
        test_id = getTestId("A6", "B51", "16");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B52).
     * 
     */
    public void testA6_B52() {
        test_id = getTestId("A6", "B52", "17");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B53).
     * 
     */
    public void testA6_B53() {
        test_id = getTestId("A6", "B53", "18");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B54).
     * 
     */
    public void testA6_B54() {
        test_id = getTestId("A6", "B54", "19");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B55).
     * 
     */
    public void testA6_B55() {
        test_id = getTestId("A6", "B55", "20");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B56).
     * 
     */
    public void testA6_B56() {
        test_id = getTestId("A6", "B56", "21");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B57).
     * 
     */
    public void testA6_B57() {
        test_id = getTestId("A6", "B57", "22");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B58).
     * 
     */
    public void testA6_B58() {
        test_id = getTestId("A6", "B58", "23");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B59).
     * 
     */
    public void testA6_B59() {
        test_id = getTestId("A6", "B59", "24");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B60).
     * 
     */
    public void testA6_B60() {
        test_id = getTestId("A6", "B60", "25");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B61).
     * 
     */
    public void testA6_B61() {
        test_id = getTestId("A6", "B61", "26");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B62).
     * 
     */
    public void testA6_B62() {
        test_id = getTestId("A6", "B62", "27");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B63).
     * 
     */
    public void testA6_B63() {
        test_id = getTestId("A6", "B63", "28");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B64).
     * 
     */
    public void testA6_B64() {
        test_id = getTestId("A6", "B64", "29");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B65).
     * 
     */
    public void testA6_B65() {
        test_id = getTestId("A6", "B65", "30");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B66).
     * 
     */
    public void testA6_B66() {
        test_id = getTestId("A6", "B66", "31");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B67).
     * 
     */
    public void testA6_B67() {
        test_id = getTestId("A6", "B67", "32");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B68).
     * 
     */
    public void testA6_B68() {
        test_id = getTestId("A6", "B68", "33");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B69).
     * 
     */
    public void testA6_B69() {
        test_id = getTestId("A6", "B69", "34");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B70).
     * 
     */
    public void testA6_B70() {
        test_id = getTestId("A6", "B70", "35");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B71).
     * 
     */
    public void testA6_B71() {
        test_id = getTestId("A6", "B71", "36");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B72).
     * 
     */
    public void testA6_B72() {
        test_id = getTestId("A6", "B72", "37");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B73).
     * 
     */
    public void testA6_B73() {
        test_id = getTestId("A6", "B73", "38");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B74).
     * 
     */
    public void testA6_B74() {
        test_id = getTestId("A6", "B74", "39");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B75).
     * 
     */
    public void testA6_B75() {
        test_id = getTestId("A6", "B75", "40");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B76).
     * 
     */
    public void testA6_B76() {
        test_id = getTestId("A6", "B76", "41");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B77).
     * 
     */
    public void testA6_B77() {
        test_id = getTestId("A6", "B77", "42");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B78).
     * 
     */
    public void testA6_B78() {
        test_id = getTestId("A6", "B78", "43");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B79).
     * 
     */
    public void testA6_B79() {
        test_id = getTestId("A6", "B79", "44");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B80).
     * 
     */
    public void testA6_B80() {
        test_id = getTestId("A6", "B80", "45");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B81).
     * 
     */
    public void testA6_B81() {
        test_id = getTestId("A6", "B81", "46");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B82).
     * 
     */
    public void testA6_B82() {
        test_id = getTestId("A6", "B82", "47");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B83).
     * 
     */
    public void testA6_B83() {
        test_id = getTestId("A6", "B83", "48");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B84).
     * 
     */
    public void testA6_B84() {
        test_id = getTestId("A6", "B84", "49");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B85).
     * 
     */
    public void testA6_B85() {
        test_id = getTestId("A6", "B85", "50");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B86).
     * 
     */
    public void testA6_B86() {
        test_id = getTestId("A6", "B86", "51");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B87).
     * 
     */
    public void testA6_B87() {
        test_id = getTestId("A6", "B87", "52");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B88).
     * 
     */
    public void testA6_B88() {
        test_id = getTestId("A6", "B88", "53");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B89).
     * 
     */
    public void testA6_B89() {
        test_id = getTestId("A6", "B89", "54");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B90).
     * 
     */
    public void testA6_B90() {
        test_id = getTestId("A6", "B90", "55");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B91).
     * 
     */
    public void testA6_B91() {
        test_id = getTestId("A6", "B91", "56");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B92).
     * 
     */
    public void testA6_B92() {
        test_id = getTestId("A6", "B92", "57");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A6) and row (B93).
     * 
     */
    public void testA6_B93() {
        test_id = getTestId("A6", "B93", "58");

        NonRootModelElement src = selectA("A6");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B1).
     * 
     */
    public void testA7_B1() {
        test_id = getTestId("A7", "B1", "59");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B2).
     * 
     */
    public void testA7_B2() {
        test_id = getTestId("A7", "B2", "60");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B3).
     * 
     */
    public void testA7_B3() {
        test_id = getTestId("A7", "B3", "61");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B4).
     * 
     */
    public void testA7_B4() {
        test_id = getTestId("A7", "B4", "62");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B5).
     * 
     */
    public void testA7_B5() {
        test_id = getTestId("A7", "B5", "63");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B6).
     * 
     */
    public void testA7_B6() {
        test_id = getTestId("A7", "B6", "64");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B7).
     * 
     */
    public void testA7_B7() {
        test_id = getTestId("A7", "B7", "65");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B8).
     * 
     */
    public void testA7_B8() {
        test_id = getTestId("A7", "B8", "66");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B9).
     * 
     */
    public void testA7_B9() {
        test_id = getTestId("A7", "B9", "67");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B10).
     * 
     */
    public void testA7_B10() {
        test_id = getTestId("A7", "B10", "68");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B11).
     * 
     */
    public void testA7_B11() {
        test_id = getTestId("A7", "B11", "69");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B12).
     * 
     */
    public void testA7_B12() {
        test_id = getTestId("A7", "B12", "70");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B13).
     * 
     */
    public void testA7_B13() {
        test_id = getTestId("A7", "B13", "71");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B14).
     * 
     */
    public void testA7_B14() {
        test_id = getTestId("A7", "B14", "72");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B15).
     * 
     */
    public void testA7_B15() {
        test_id = getTestId("A7", "B15", "73");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B16).
     * 
     */
    public void testA7_B16() {
        test_id = getTestId("A7", "B16", "74");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B17).
     * 
     */
    public void testA7_B17() {
        test_id = getTestId("A7", "B17", "75");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B18).
     * 
     */
    public void testA7_B18() {
        test_id = getTestId("A7", "B18", "76");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B19).
     * 
     */
    public void testA7_B19() {
        test_id = getTestId("A7", "B19", "77");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B20).
     * 
     */
    public void testA7_B20() {
        test_id = getTestId("A7", "B20", "78");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B21).
     * 
     */
    public void testA7_B21() {
        test_id = getTestId("A7", "B21", "79");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B22).
     * 
     */
    public void testA7_B22() {
        test_id = getTestId("A7", "B22", "80");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B23).
     * 
     */
    public void testA7_B23() {
        test_id = getTestId("A7", "B23", "81");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B24).
     * 
     */
    public void testA7_B24() {
        test_id = getTestId("A7", "B24", "82");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B25).
     * 
     */
    public void testA7_B25() {
        test_id = getTestId("A7", "B25", "83");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B26).
     * 
     */
    public void testA7_B26() {
        test_id = getTestId("A7", "B26", "84");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B27).
     * 
     */
    public void testA7_B27() {
        test_id = getTestId("A7", "B27", "85");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B28).
     * 
     */
    public void testA7_B28() {
        test_id = getTestId("A7", "B28", "86");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B29).
     * 
     */
    public void testA7_B29() {
        test_id = getTestId("A7", "B29", "87");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B30).
     * 
     */
    public void testA7_B30() {
        test_id = getTestId("A7", "B30", "88");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B31).
     * 
     */
    public void testA7_B31() {
        test_id = getTestId("A7", "B31", "89");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B32).
     * 
     */
    public void testA7_B32() {
        test_id = getTestId("A7", "B32", "90");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B33).
     * 
     */
    public void testA7_B33() {
        test_id = getTestId("A7", "B33", "91");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B34).
     * 
     */
    public void testA7_B34() {
        test_id = getTestId("A7", "B34", "92");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B35).
     * 
     */
    public void testA7_B35() {
        test_id = getTestId("A7", "B35", "93");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B36).
     * 
     */
    public void testA7_B36() {
        test_id = getTestId("A7", "B36", "94");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B37).
     * 
     */
    public void testA7_B37() {
        test_id = getTestId("A7", "B37", "95");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B38).
     * 
     */
    public void testA7_B38() {
        test_id = getTestId("A7", "B38", "96");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B39).
     * 
     */
    public void testA7_B39() {
        test_id = getTestId("A7", "B39", "97");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B40).
     * 
     */
    public void testA7_B40() {
        test_id = getTestId("A7", "B40", "98");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B41).
     * 
     */
    public void testA7_B41() {
        test_id = getTestId("A7", "B41", "99");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B42).
     * 
     */
    public void testA7_B42() {
        test_id = getTestId("A7", "B42", "100");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B43).
     * 
     */
    public void testA7_B43() {
        test_id = getTestId("A7", "B43", "101");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B44).
     * 
     */
    public void testA7_B44() {
        test_id = getTestId("A7", "B44", "102");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B45).
     * 
     */
    public void testA7_B45() {
        test_id = getTestId("A7", "B45", "103");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B46).
     * 
     */
    public void testA7_B46() {
        test_id = getTestId("A7", "B46", "104");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B47).
     * 
     */
    public void testA7_B47() {
        test_id = getTestId("A7", "B47", "105");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B48).
     * 
     */
    public void testA7_B48() {
        test_id = getTestId("A7", "B48", "106");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B49).
     * 
     */
    public void testA7_B49() {
        test_id = getTestId("A7", "B49", "107");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B50).
     * 
     */
    public void testA7_B50() {
        test_id = getTestId("A7", "B50", "108");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B51).
     * 
     */
    public void testA7_B51() {
        test_id = getTestId("A7", "B51", "109");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B52).
     * 
     */
    public void testA7_B52() {
        test_id = getTestId("A7", "B52", "110");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B53).
     * 
     */
    public void testA7_B53() {
        test_id = getTestId("A7", "B53", "111");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B54).
     * 
     */
    public void testA7_B54() {
        test_id = getTestId("A7", "B54", "112");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B55).
     * 
     */
    public void testA7_B55() {
        test_id = getTestId("A7", "B55", "113");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B56).
     * 
     */
    public void testA7_B56() {
        test_id = getTestId("A7", "B56", "114");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B57).
     * 
     */
    public void testA7_B57() {
        test_id = getTestId("A7", "B57", "115");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B58).
     * 
     */
    public void testA7_B58() {
        test_id = getTestId("A7", "B58", "116");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B59).
     * 
     */
    public void testA7_B59() {
        test_id = getTestId("A7", "B59", "117");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B60).
     * 
     */
    public void testA7_B60() {
        test_id = getTestId("A7", "B60", "118");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B61).
     * 
     */
    public void testA7_B61() {
        test_id = getTestId("A7", "B61", "119");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B62).
     * 
     */
    public void testA7_B62() {
        test_id = getTestId("A7", "B62", "120");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B63).
     * 
     */
    public void testA7_B63() {
        test_id = getTestId("A7", "B63", "121");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B64).
     * 
     */
    public void testA7_B64() {
        test_id = getTestId("A7", "B64", "122");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B65).
     * 
     */
    public void testA7_B65() {
        test_id = getTestId("A7", "B65", "123");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B66).
     * 
     */
    public void testA7_B66() {
        test_id = getTestId("A7", "B66", "124");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B67).
     * 
     */
    public void testA7_B67() {
        test_id = getTestId("A7", "B67", "125");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B68).
     * 
     */
    public void testA7_B68() {
        test_id = getTestId("A7", "B68", "126");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B69).
     * 
     */
    public void testA7_B69() {
        test_id = getTestId("A7", "B69", "127");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B70).
     * 
     */
    public void testA7_B70() {
        test_id = getTestId("A7", "B70", "128");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B71).
     * 
     */
    public void testA7_B71() {
        test_id = getTestId("A7", "B71", "129");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B72).
     * 
     */
    public void testA7_B72() {
        test_id = getTestId("A7", "B72", "130");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B73).
     * 
     */
    public void testA7_B73() {
        test_id = getTestId("A7", "B73", "131");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B74).
     * 
     */
    public void testA7_B74() {
        test_id = getTestId("A7", "B74", "132");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B75).
     * 
     */
    public void testA7_B75() {
        test_id = getTestId("A7", "B75", "133");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B76).
     * 
     */
    public void testA7_B76() {
        test_id = getTestId("A7", "B76", "134");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B77).
     * 
     */
    public void testA7_B77() {
        test_id = getTestId("A7", "B77", "135");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B78).
     * 
     */
    public void testA7_B78() {
        test_id = getTestId("A7", "B78", "136");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B79).
     * 
     */
    public void testA7_B79() {
        test_id = getTestId("A7", "B79", "137");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B80).
     * 
     */
    public void testA7_B80() {
        test_id = getTestId("A7", "B80", "138");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B81).
     * 
     */
    public void testA7_B81() {
        test_id = getTestId("A7", "B81", "139");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B82).
     * 
     */
    public void testA7_B82() {
        test_id = getTestId("A7", "B82", "140");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B83).
     * 
     */
    public void testA7_B83() {
        test_id = getTestId("A7", "B83", "141");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B84).
     * 
     */
    public void testA7_B84() {
        test_id = getTestId("A7", "B84", "142");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B85).
     * 
     */
    public void testA7_B85() {
        test_id = getTestId("A7", "B85", "143");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B86).
     * 
     */
    public void testA7_B86() {
        test_id = getTestId("A7", "B86", "144");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B87).
     * 
     */
    public void testA7_B87() {
        test_id = getTestId("A7", "B87", "145");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B88).
     * 
     */
    public void testA7_B88() {
        test_id = getTestId("A7", "B88", "146");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B89).
     * 
     */
    public void testA7_B89() {
        test_id = getTestId("A7", "B89", "147");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B90).
     * 
     */
    public void testA7_B90() {
        test_id = getTestId("A7", "B90", "148");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B91).
     * 
     */
    public void testA7_B91() {
        test_id = getTestId("A7", "B91", "149");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B92).
     * 
     */
    public void testA7_B92() {
        test_id = getTestId("A7", "B92", "150");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A7) and row (B93).
     * 
     */
    public void testA7_B93() {
        test_id = getTestId("A7", "B93", "151");

        NonRootModelElement src = selectA("A7");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B1).
     * 
     */
    public void testA8_B1() {
        test_id = getTestId("A8", "B1", "152");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B2).
     * 
     */
    public void testA8_B2() {
        test_id = getTestId("A8", "B2", "153");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B3).
     * 
     */
    public void testA8_B3() {
        test_id = getTestId("A8", "B3", "154");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B4).
     * 
     */
    public void testA8_B4() {
        test_id = getTestId("A8", "B4", "155");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B5).
     * 
     */
    public void testA8_B5() {
        test_id = getTestId("A8", "B5", "156");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B6).
     * 
     */
    public void testA8_B6() {
        test_id = getTestId("A8", "B6", "157");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B7).
     * 
     */
    public void testA8_B7() {
        test_id = getTestId("A8", "B7", "158");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B7");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B8).
     * 
     */
    public void testA8_B8() {
        test_id = getTestId("A8", "B8", "159");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B8");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B9).
     * 
     */
    public void testA8_B9() {
        test_id = getTestId("A8", "B9", "160");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B9");

        A_B_Action(src, dest);
        assertTrue("Paste was allowed but was not successful", checkResult_pasteSuccessful(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B10).
     * 
     */
    public void testA8_B10() {
        test_id = getTestId("A8", "B10", "161");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B10");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B11).
     * 
     */
    public void testA8_B11() {
        test_id = getTestId("A8", "B11", "162");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B11");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B12).
     * 
     */
    public void testA8_B12() {
        test_id = getTestId("A8", "B12", "163");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B12");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B13).
     * 
     */
    public void testA8_B13() {
        test_id = getTestId("A8", "B13", "164");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B13");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B14).
     * 
     */
    public void testA8_B14() {
        test_id = getTestId("A8", "B14", "165");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B14");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B15).
     * 
     */
    public void testA8_B15() {
        test_id = getTestId("A8", "B15", "166");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B15");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B16).
     * 
     */
    public void testA8_B16() {
        test_id = getTestId("A8", "B16", "167");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B16");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B17).
     * 
     */
    public void testA8_B17() {
        test_id = getTestId("A8", "B17", "168");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B17");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B18).
     * 
     */
    public void testA8_B18() {
        test_id = getTestId("A8", "B18", "169");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B18");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B19).
     * 
     */
    public void testA8_B19() {
        test_id = getTestId("A8", "B19", "170");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B19");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B20).
     * 
     */
    public void testA8_B20() {
        test_id = getTestId("A8", "B20", "171");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B20");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B21).
     * 
     */
    public void testA8_B21() {
        test_id = getTestId("A8", "B21", "172");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B21");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B22).
     * 
     */
    public void testA8_B22() {
        test_id = getTestId("A8", "B22", "173");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B22");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B23).
     * 
     */
    public void testA8_B23() {
        test_id = getTestId("A8", "B23", "174");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B23");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B24).
     * 
     */
    public void testA8_B24() {
        test_id = getTestId("A8", "B24", "175");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B24");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B25).
     * 
     */
    public void testA8_B25() {
        test_id = getTestId("A8", "B25", "176");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B25");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B26).
     * 
     */
    public void testA8_B26() {
        test_id = getTestId("A8", "B26", "177");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B26");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B27).
     * 
     */
    public void testA8_B27() {
        test_id = getTestId("A8", "B27", "178");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B27");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B28).
     * 
     */
    public void testA8_B28() {
        test_id = getTestId("A8", "B28", "179");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B28");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B29).
     * 
     */
    public void testA8_B29() {
        test_id = getTestId("A8", "B29", "180");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B29");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B30).
     * 
     */
    public void testA8_B30() {
        test_id = getTestId("A8", "B30", "181");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B30");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B31).
     * 
     */
    public void testA8_B31() {
        test_id = getTestId("A8", "B31", "182");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B31");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B32).
     * 
     */
    public void testA8_B32() {
        test_id = getTestId("A8", "B32", "183");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B32");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B33).
     * 
     */
    public void testA8_B33() {
        test_id = getTestId("A8", "B33", "184");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B33");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B34).
     * 
     */
    public void testA8_B34() {
        test_id = getTestId("A8", "B34", "185");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B34");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B35).
     * 
     */
    public void testA8_B35() {
        test_id = getTestId("A8", "B35", "186");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B35");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B36).
     * 
     */
    public void testA8_B36() {
        test_id = getTestId("A8", "B36", "187");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B36");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B37).
     * 
     */
    public void testA8_B37() {
        test_id = getTestId("A8", "B37", "188");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B37");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B38).
     * 
     */
    public void testA8_B38() {
        test_id = getTestId("A8", "B38", "189");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B38");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B39).
     * 
     */
    public void testA8_B39() {
        test_id = getTestId("A8", "B39", "190");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B39");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B40).
     * 
     */
    public void testA8_B40() {
        test_id = getTestId("A8", "B40", "191");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B40");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B41).
     * 
     */
    public void testA8_B41() {
        test_id = getTestId("A8", "B41", "192");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B41");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B42).
     * 
     */
    public void testA8_B42() {
        test_id = getTestId("A8", "B42", "193");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B42");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B43).
     * 
     */
    public void testA8_B43() {
        test_id = getTestId("A8", "B43", "194");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B43");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B44).
     * 
     */
    public void testA8_B44() {
        test_id = getTestId("A8", "B44", "195");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B44");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B45).
     * 
     */
    public void testA8_B45() {
        test_id = getTestId("A8", "B45", "196");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B45");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B46).
     * 
     */
    public void testA8_B46() {
        test_id = getTestId("A8", "B46", "197");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B46");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B47).
     * 
     */
    public void testA8_B47() {
        test_id = getTestId("A8", "B47", "198");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B47");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B48).
     * 
     */
    public void testA8_B48() {
        test_id = getTestId("A8", "B48", "199");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B48");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B49).
     * 
     */
    public void testA8_B49() {
        test_id = getTestId("A8", "B49", "200");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B49");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B50).
     * 
     */
    public void testA8_B50() {
        test_id = getTestId("A8", "B50", "201");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B50");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B51).
     * 
     */
    public void testA8_B51() {
        test_id = getTestId("A8", "B51", "202");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B51");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B52).
     * 
     */
    public void testA8_B52() {
        test_id = getTestId("A8", "B52", "203");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B52");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B53).
     * 
     */
    public void testA8_B53() {
        test_id = getTestId("A8", "B53", "204");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B53");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B54).
     * 
     */
    public void testA8_B54() {
        test_id = getTestId("A8", "B54", "205");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B54");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B55).
     * 
     */
    public void testA8_B55() {
        test_id = getTestId("A8", "B55", "206");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B55");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B56).
     * 
     */
    public void testA8_B56() {
        test_id = getTestId("A8", "B56", "207");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B56");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B57).
     * 
     */
    public void testA8_B57() {
        test_id = getTestId("A8", "B57", "208");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B57");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B58).
     * 
     */
    public void testA8_B58() {
        test_id = getTestId("A8", "B58", "209");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B58");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B59).
     * 
     */
    public void testA8_B59() {
        test_id = getTestId("A8", "B59", "210");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B59");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B60).
     * 
     */
    public void testA8_B60() {
        test_id = getTestId("A8", "B60", "211");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B60");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B61).
     * 
     */
    public void testA8_B61() {
        test_id = getTestId("A8", "B61", "212");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B61");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B62).
     * 
     */
    public void testA8_B62() {
        test_id = getTestId("A8", "B62", "213");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B62");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B63).
     * 
     */
    public void testA8_B63() {
        test_id = getTestId("A8", "B63", "214");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B63");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B64).
     * 
     */
    public void testA8_B64() {
        test_id = getTestId("A8", "B64", "215");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B64");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B65).
     * 
     */
    public void testA8_B65() {
        test_id = getTestId("A8", "B65", "216");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B65");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B66).
     * 
     */
    public void testA8_B66() {
        test_id = getTestId("A8", "B66", "217");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B66");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B67).
     * 
     */
    public void testA8_B67() {
        test_id = getTestId("A8", "B67", "218");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B67");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B68).
     * 
     */
    public void testA8_B68() {
        test_id = getTestId("A8", "B68", "219");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B68");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B69).
     * 
     */
    public void testA8_B69() {
        test_id = getTestId("A8", "B69", "220");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B69");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B70).
     * 
     */
    public void testA8_B70() {
        test_id = getTestId("A8", "B70", "221");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B70");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B71).
     * 
     */
    public void testA8_B71() {
        test_id = getTestId("A8", "B71", "222");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B71");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B72).
     * 
     */
    public void testA8_B72() {
        test_id = getTestId("A8", "B72", "223");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B72");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B73).
     * 
     */
    public void testA8_B73() {
        test_id = getTestId("A8", "B73", "224");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B73");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B74).
     * 
     */
    public void testA8_B74() {
        test_id = getTestId("A8", "B74", "225");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B74");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B75).
     * 
     */
    public void testA8_B75() {
        test_id = getTestId("A8", "B75", "226");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B75");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B76).
     * 
     */
    public void testA8_B76() {
        test_id = getTestId("A8", "B76", "227");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B76");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B77).
     * 
     */
    public void testA8_B77() {
        test_id = getTestId("A8", "B77", "228");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B77");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B78).
     * 
     */
    public void testA8_B78() {
        test_id = getTestId("A8", "B78", "229");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B78");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B79).
     * 
     */
    public void testA8_B79() {
        test_id = getTestId("A8", "B79", "230");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B79");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B80).
     * 
     */
    public void testA8_B80() {
        test_id = getTestId("A8", "B80", "231");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B80");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B81).
     * 
     */
    public void testA8_B81() {
        test_id = getTestId("A8", "B81", "232");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B81");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B82).
     * 
     */
    public void testA8_B82() {
        test_id = getTestId("A8", "B82", "233");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B82");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B83).
     * 
     */
    public void testA8_B83() {
        test_id = getTestId("A8", "B83", "234");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B83");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B84).
     * 
     */
    public void testA8_B84() {
        test_id = getTestId("A8", "B84", "235");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B84");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B85).
     * 
     */
    public void testA8_B85() {
        test_id = getTestId("A8", "B85", "236");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B85");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B86).
     * 
     */
    public void testA8_B86() {
        test_id = getTestId("A8", "B86", "237");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B86");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B87).
     * 
     */
    public void testA8_B87() {
        test_id = getTestId("A8", "B87", "238");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B87");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B88).
     * 
     */
    public void testA8_B88() {
        test_id = getTestId("A8", "B88", "239");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B88");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B89).
     * 
     */
    public void testA8_B89() {
        test_id = getTestId("A8", "B89", "240");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B89");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B90).
     * 
     */
    public void testA8_B90() {
        test_id = getTestId("A8", "B90", "241");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B90");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B91).
     * 
     */
    public void testA8_B91() {
        test_id = getTestId("A8", "B91", "242");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B91");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B92).
     * 
     */
    public void testA8_B92() {
        test_id = getTestId("A8", "B92", "243");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B92");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A8) and row (B93).
     * 
     */
    public void testA8_B93() {
        test_id = getTestId("A8", "B93", "244");

        NonRootModelElement src = selectA("A8");

        NonRootModelElement dest = selectB("B93");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B1).
     * 
     */
    public void testA9_B1() {
        test_id = getTestId("A9", "B1", "245");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B1");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B2).
     * 
     */
    public void testA9_B2() {
        test_id = getTestId("A9", "B2", "246");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B2");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B3).
     * 
     */
    public void testA9_B3() {
        test_id = getTestId("A9", "B3", "247");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B3");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B4).
     * 
     */
    public void testA9_B4() {
        test_id = getTestId("A9", "B4", "248");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B4");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B5).
     * 
     */
    public void testA9_B5() {
        test_id = getTestId("A9", "B5", "249");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B5");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

    /**
     * Perform the test for the given matrix column (A9) and row (B6).
     * 
     */
    public void testA9_B6() {
        test_id = getTestId("A9", "B6", "250");

        NonRootModelElement src = selectA("A9");

        NonRootModelElement dest = selectB("B6");

        A_B_Action(src, dest);
        assertTrue("Paste menu item was available even though destination was invalid", checkResult_pasteNotAllowed(src,dest));
        
        GraphicalEditor editor = getActiveEditor();
        if(editor != null && useDrawResults) {
           validateOrGenerateResults(editor, generateResults);
        }
    }

}
